1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:54,000
Test. Hello. Can anyone out there hear us?

21
00:09:54,000 --> 00:10:03,440
Hello? Hello? Hello? Check, check.

22
00:10:03,440 --> 00:10:18,880
So welcome back for day two of TTD for HPC. If we open our notes, which if you've registered

23
00:10:18,880 --> 00:10:25,200
you should have this in your email. It's for people who have registered, so if you

24
00:10:25,200 --> 00:10:29,320
haven't registered yet, please do so.

25
00:10:29,320 --> 00:10:39,560
Yeah, and let's see, so what's the plan for today? We've got, well, today's theme

26
00:10:39,560 --> 00:10:45,520
is interactive work. Or is it called day-to-day working with HPC?

27
00:10:45,520 --> 00:10:57,520
Well, I mean, that's how the days go by when you work with HPC.

28
00:10:57,520 --> 00:10:59,560
We have different names for it.

29
00:10:59,560 --> 00:11:06,400
Anyway, so here you see, I guess this is all the instructors of today.

30
00:11:06,400 --> 00:11:15,600
I'm [name], and with me is [name], [name], and [name].

31
00:11:17,760 --> 00:11:22,240
But we can introduce ourselves a little bit more in the formal introduction time.

32
00:11:22,240 --> 00:11:29,520
But for now, we've got an icebreaker. So if you open the notes, again, this should be in your

33
00:11:30,320 --> 00:11:35,760
email. It's only for registered people. By the way, can anyone hear us?

34
00:11:36,400 --> 00:11:43,400
I haven't seen any verification.

35
00:11:43,400 --> 00:11:46,400
Let's see.

36
00:11:46,400 --> 00:11:49,400
Test.

37
00:11:49,400 --> 00:11:50,400
Okay.

38
00:11:50,400 --> 00:11:51,400
Someone says audio is good.

39
00:11:51,400 --> 00:11:52,400
Okay.

40
00:11:52,400 --> 00:11:53,400
Yeah.

41
00:11:53,400 --> 00:11:57,400
So, what's our ice break and stuff for today?

42
00:11:57,400 --> 00:11:58,400
So...

43
00:11:58,400 --> 00:12:01,400
Well, I mean, there's a fun one.

44
00:12:01,400 --> 00:12:04,400
What's your favorite free time activity?

45
00:12:04,400 --> 00:12:10,320
I should answer it I can answer it live so in case someone doesn't know how to use this

46
00:12:10,320 --> 00:12:18,400
or has never used this type of interface I click on the pencil and then I like swimming

47
00:12:19,120 --> 00:12:24,160
I need to switch to [name]'s screen there we go now you can show

48
00:12:25,520 --> 00:12:32,240
yeah so I clicked on this pencil here at the very top of this notes.coderefinery.org document

49
00:12:32,240 --> 00:12:39,240
And then I edited another swimming.

50
00:12:39,240 --> 00:12:40,240
What's the weather?

51
00:12:40,240 --> 00:12:43,240
Yeah, I mean, this is terrible.

52
00:12:43,240 --> 00:12:48,880
I definitely need to add skiing to the favorite things to do, just because the way it looks

53
00:12:48,880 --> 00:12:52,320
outside right now.

54
00:12:52,320 --> 00:13:00,840
Maybe we should have asked what's the weather and where you are.

55
00:13:00,840 --> 00:13:05,960
Because that's sort of important, we can get a crowdsourced weather forecast.

56
00:13:05,960 --> 00:13:12,400
So who expected to be waking up in this much snow today, wherever you are?

57
00:13:12,400 --> 00:13:21,320
So, I mean, we've had on and off snow here in Helsinki for the last few weeks.

58
00:13:21,320 --> 00:13:23,320
But today is another level.

59
00:13:23,320 --> 00:13:25,320
This is like winter level.

60
00:13:25,320 --> 00:13:31,320
And this was not in the forecast. It was completely unexpected.

61
00:13:31,320 --> 00:13:38,320
Yeah. So it's a good day to be home.

62
00:13:38,320 --> 00:13:53,320
Actually, should we update? Let's see. I want to add another question.

63
00:13:53,320 --> 00:14:00,320
At least northern Sweden is having also snow, so it's not just in Finland.

64
00:14:00,320 --> 00:14:01,320
Okay.

65
00:14:01,320 --> 00:14:05,240
There were some people from Italy registered, so I don't know if they're here.

66
00:14:05,240 --> 00:14:11,680
I doubt that they're having snow there.

67
00:14:11,680 --> 00:14:14,800
Does it ever snow in southern Italy at all?

68
00:14:14,800 --> 00:14:17,560
That's a very good question.

69
00:14:17,560 --> 00:14:20,920
I don't know the statistic, but I would say it's extremely rare.

70
00:14:20,920 --> 00:14:27,920
Of course, there are some mountains that it could have been there, but yeah.

71
00:14:27,920 --> 00:14:28,920
Okay.

72
00:14:28,920 --> 00:14:29,920
Let's see.

73
00:14:29,920 --> 00:14:32,320
20 centimeters in Krukonummi.

74
00:14:32,320 --> 00:14:35,040
That's more than here.

75
00:14:35,040 --> 00:14:41,880
Netherlands is sunny, good.

76
00:14:41,880 --> 00:14:45,120
It's getting close to 20 centimeters.

77
00:14:45,120 --> 00:14:53,920
It could really well be 20 centimeters now in Espoo.

78
00:14:53,920 --> 00:14:55,440
Let me look out the window again.

79
00:14:55,440 --> 00:14:58,360
I mean Espoo is really big.

80
00:14:58,360 --> 00:15:05,840
It's probably going to be the same everywhere.

81
00:15:05,840 --> 00:15:13,440
It might be 10 centimeters here.

82
00:15:13,440 --> 00:15:21,940
So if today is about day-to-day work on an HPC cluster, for people here, what's your

83
00:15:21,940 --> 00:15:24,200
practices and so on?

84
00:15:24,200 --> 00:15:27,760
What's your general spirit of things?

85
00:15:27,760 --> 00:15:35,880
So for me, it's SSH to the cluster, and I tend to use a terminal editor on the cluster

86
00:15:35,880 --> 00:15:42,680
itself to do most of my testing and development by SSH.

87
00:15:45,000 --> 00:15:52,920
Yeah, same here. Opening some DMACS or screen so that I know that I can resume it later.

88
00:15:54,200 --> 00:15:59,720
But yeah, terminal and cluster is... I don't know if it's the most favorite interface for

89
00:15:59,720 --> 00:16:03,960
those who started later because for me terminal and cluster was something that was the only option.

90
00:16:03,960 --> 00:16:15,040
I guess if you learn to code using a terminal editor anyway, if you have that skill already

91
00:16:15,040 --> 00:16:19,880
then why not do the same thing on the cluster.

92
00:16:19,880 --> 00:16:24,120
I'm going to show the workflow that I do but it's not maybe the best one so we're going

93
00:16:24,120 --> 00:16:30,360
to talk about what you could do instead and other options that I don't actually use.

94
00:16:30,360 --> 00:16:32,360
But yeah, my workflow is probably not the best

95
00:16:32,360 --> 00:16:33,940
because I'm used to graphical editors

96
00:16:33,940 --> 00:16:36,320
and I usually don't use them on the cluster.

97
00:16:39,800 --> 00:16:44,000
But yeah, there's also some other really nice modern ways

98
00:16:44,000 --> 00:16:48,360
of managing these things, like working

99
00:16:48,360 --> 00:16:53,440
on the cluster, which you will see here now today.

100
00:16:53,440 --> 00:16:56,480
And maybe we'll hear some ideas from you all.

101
00:17:00,360 --> 00:17:13,440
So, for the Icebreaker, are there really only two working methods on the cluster?

102
00:17:13,440 --> 00:17:17,360
The end-of-the-terminal and cluster in development on laptop, then transferring.

103
00:17:17,360 --> 00:17:22,760
Also, how do you transfer to the cluster?

104
00:17:22,760 --> 00:17:31,880
I was going to expect some notebook or something interactive, or at least I know some people

105
00:17:31,880 --> 00:17:35,640
using those type of workflow, but of course it also depends on the cluster that not all

106
00:17:35,640 --> 00:17:40,600
clusters support maybe notebooks or similar tools.

107
00:17:40,600 --> 00:17:43,720
Right, yeah.

108
00:17:43,720 --> 00:17:55,640
I, a few weeks ago, learned a new trick with Git in order for working on the cluster.

109
00:17:55,640 --> 00:18:00,120
So before, my problem had always been if I'm...

110
00:18:00,120 --> 00:18:03,400
So I was in a place with a really laggy internet connection.

111
00:18:03,400 --> 00:18:08,960
So I just couldn't use the terminal on the cluster.

112
00:18:08,960 --> 00:18:14,160
But I also didn't want to do local work, and then git commit, and then push, and then

113
00:18:14,160 --> 00:18:19,680
more local work, and git commit, and push again, and so on.

114
00:18:19,680 --> 00:18:24,040
And then go to the other side and have to git pull every time.

115
00:18:24,040 --> 00:18:33,920
So I saw that I could configure git on the cluster, work locally, I'd always be doing

116
00:18:33,920 --> 00:18:42,800
work and then commit amending it so that way I'm not making a new commit but updating the past one

117
00:18:42,800 --> 00:18:48,480
and then force pushing and it would automatically check out the latest changes on the cluster

118
00:18:49,280 --> 00:18:53,200
so that I could just run the thing.

119
00:18:57,600 --> 00:19:02,720
Oh there's a good comment about Mosh here. Mosh is pretty neat. It's like

120
00:19:03,920 --> 00:19:14,680
How would you say, it's like a SSH, but it uses UDP and has more local echoing.

121
00:19:14,680 --> 00:19:19,800
So that way it can pretend to reduce the latency quite a bit.

122
00:19:19,800 --> 00:19:27,700
However, since it uses UDP instead of TCP, it doesn't work at ALTO because our firewall

123
00:19:27,700 --> 00:19:32,520
blocks UDP connections.

124
00:19:32,520 --> 00:19:37,680
Which is also a problem for other reasons, but well, what can you do?

125
00:19:37,680 --> 00:19:41,840
Yeah, so I don't have that much to say.

126
00:19:41,840 --> 00:19:50,000
All right, but it's now 1 past 10 in Finland and 1 past 9 in the Central European summertime.

127
00:19:50,000 --> 00:19:52,960
Should we officially start?

128
00:19:52,960 --> 00:19:54,680
Yes.

129
00:19:54,680 --> 00:20:03,560
Alright, so welcome to the second episode of Tuesday's Tools and Techniques for High

130
00:20:03,560 --> 00:20:08,960
Performance Computing. I'm [name], I'm a staff scientist at Aalto University

131
00:20:08,960 --> 00:20:14,600
and here with me today there are other colleagues from Aalto. [name], do you want to mention

132
00:20:14,600 --> 00:20:15,920
something about yourself?

133
00:20:15,920 --> 00:20:24,480
Yeah, so I'm [name]. I've worked in my current team here with [name] for about,

134
00:20:26,080 --> 00:20:35,040
what, seven or eight years now, I guess. And I started off as a, well, HPC

135
00:20:36,240 --> 00:20:40,960
system kind of person. But over time, we've gone more and more towards user support.

136
00:20:40,960 --> 00:20:44,960
And now I'm part of the research software engineer team.

137
00:20:44,960 --> 00:20:53,960
And with us today, there's also [name], who is actually one of the research software engineers.

138
00:20:53,960 --> 00:20:56,960
[name], do you want to mention something about yourself?

139
00:20:56,960 --> 00:21:01,960
Well, I'm one of the research software engineers.

140
00:21:01,960 --> 00:21:05,960
What else is there to say?

141
00:21:05,960 --> 00:21:07,960
That's good.

142
00:21:07,960 --> 00:21:11,360
Good, and [name], do you want to say hi?

143
00:21:11,360 --> 00:21:14,600
Hello everyone, yes, I'm also one of our teams.

144
00:21:14,600 --> 00:21:15,440
Excellent.

145
00:21:16,360 --> 00:21:19,120
So if you watched the previous episode,

146
00:21:19,120 --> 00:21:21,360
the structure of the day is pretty similar.

147
00:21:21,360 --> 00:21:26,360
We have two hours of kind of lecture-based streaming.

148
00:21:26,400 --> 00:21:28,400
And after that in the afternoon,

149
00:21:28,400 --> 00:21:31,640
for those who want to try what is being shown

150
00:21:31,640 --> 00:21:35,160
during the morning, we can actually do it all together

151
00:21:35,160 --> 00:21:37,480
in a Zoom session.

152
00:21:37,480 --> 00:21:42,920
so because of this the morning will be recorded and the afternoon of course will not be recorded

153
00:21:42,920 --> 00:21:50,520
so that people can interact. Other practicalities for the days you have all if you register for this

154
00:21:50,520 --> 00:21:57,880
course you have received this notes share notes document at this notes.coderefinery.org

155
00:21:59,320 --> 00:22:05,800
in practice this is like a google docs you can think it like that where by clicking the pencil

156
00:22:05,800 --> 00:22:11,960
you can edit it and this is a good way to ask for questions and that's going to be us following your

157
00:22:11,960 --> 00:22:19,160
questions or comments and plus other people that are involved with CodeRefinery. What else

158
00:22:19,160 --> 00:22:28,920
other practicalities there's the possibility to get some credits one ECTS and for those who are

159
00:22:28,920 --> 00:22:34,280
planning to get the credit you can join the zoom session in the afternoon where we can discuss more

160
00:22:34,280 --> 00:22:41,280
for the exercises and these other practicalities. Anything else to mention, [name]?

161
00:22:41,280 --> 00:22:46,280
Let's see, so what are the things that can go wrong?

162
00:22:46,280 --> 00:22:55,280
So if the whole stream dies, that means my computer has crashed, which is very rare but possible.

163
00:22:55,280 --> 00:23:00,280
Just hang around and you will return shortly.

164
00:23:01,240 --> 00:23:05,240
Assuming that Helsinki still has internet connectivity.

165
00:23:10,360 --> 00:23:14,600
Did you say how important it is to ask questions?

166
00:23:15,640 --> 00:23:22,840
Yeah, the notes document is very useful. From the last episode last week, it was maybe one of the

167
00:23:22,840 --> 00:23:29,840
the most favorite things in the survey after the episode because you can really ask any

168
00:23:29,840 --> 00:23:35,180
sort of question. The goal of this course is to make it useful for you. We are not able

169
00:23:35,180 --> 00:23:41,280
to cover everything and in two hours it's very difficult to go deep into any specific topic.

170
00:23:41,280 --> 00:23:46,280
So feel free to ask even more advanced questions or even you know beginners questions because

171
00:23:46,280 --> 00:23:53,780
any question is a good question. Yeah. It's good already if you have tested this document

172
00:23:53,780 --> 00:24:00,860
now during this icebreaker, it's good to make sure that you're able to edit and so on. So

173
00:24:00,860 --> 00:24:07,900
feel free to test it and type. And I can already ask for whoever in our team is going to edit

174
00:24:07,900 --> 00:24:13,260
this that we could now start with the first section.

175
00:24:13,260 --> 00:24:20,060
So you have also received the link to the materials and if you didn't receive it, someone

176
00:24:20,060 --> 00:24:24,020
will paste it now to this notes document.

177
00:24:24,020 --> 00:24:31,580
The material has various sections and the goal of today is to kind of focus on the daily

178
00:24:31,580 --> 00:24:33,580
work with the cluster.

179
00:24:33,580 --> 00:24:42,580
So not the kind of theory of slurm jobs or whatever resources, CPUs, GPUs, this is literally

180
00:24:42,580 --> 00:24:48,260
what you do every day with the cluster. So I'm going to start with a quick motivation

181
00:24:49,780 --> 00:24:58,340
that the goal of this this is the kind of lecture lesson that I wish I had 15 years ago when I

182
00:24:58,340 --> 00:25:05,220
started working with this thing because yes I got introduced to SLURM, I learned how to submit jobs,

183
00:25:05,220 --> 00:25:11,620
I learned the kind of peculiarities of the storage systems attached to the cluster but nobody has

184
00:25:11,620 --> 00:25:14,620
has ever told me how to daily, day-to-day work

185
00:25:14,620 --> 00:25:15,460
with the cluster.

186
00:25:15,460 --> 00:25:19,040
Is it better to work on my computer, to work on the remote?

187
00:25:19,040 --> 00:25:23,440
So the whole two hours for this morning are exactly this.

188
00:25:23,440 --> 00:25:25,640
How do you work in the cluster?

189
00:25:25,640 --> 00:25:27,240
Do you work on your machine?

190
00:25:27,240 --> 00:25:29,360
Do you work on the remote machine?

191
00:25:29,360 --> 00:25:32,000
Do you transfer the data from your local

192
00:25:32,000 --> 00:25:33,360
to the remote all the time?

193
00:25:33,360 --> 00:25:35,760
Or do you keep everything in the remote?

194
00:25:35,760 --> 00:25:37,360
There's so many ways, and in a way,

195
00:25:37,360 --> 00:25:41,000
there's not a right or wrong way to do this.

196
00:25:41,000 --> 00:25:44,160
This is also important here because there's many of you,

197
00:25:44,160 --> 00:25:46,280
some of you might be in the early days

198
00:25:46,280 --> 00:25:47,340
of working with cluster,

199
00:25:47,340 --> 00:25:49,200
some of you might have been working with cluster

200
00:25:49,200 --> 00:25:50,440
for 20 years.

201
00:25:50,440 --> 00:25:53,760
It's important that you also share what is good for you

202
00:25:53,760 --> 00:25:55,200
in the notes document,

203
00:25:55,200 --> 00:25:58,960
because we are truly learning from each other.

204
00:25:58,960 --> 00:26:01,560
We don't need to go through the text of this page,

205
00:26:01,560 --> 00:26:03,380
you can read it later if you want,

206
00:26:03,380 --> 00:26:06,840
but I want to spend a couple of minutes on this picture.

207
00:26:06,840 --> 00:26:09,440
So what I think that many users,

208
00:26:09,440 --> 00:26:12,940
What I see also when I'm helping users

209
00:26:12,940 --> 00:26:14,720
that are starting to work with cluster

210
00:26:14,720 --> 00:26:16,520
is the difficulty in understanding

211
00:26:16,520 --> 00:26:20,380
kind of the geography of an HPC cluster.

212
00:26:20,380 --> 00:26:23,180
Meaning literally, where are the physical bits

213
00:26:23,180 --> 00:26:26,320
and why does it work like that?

214
00:26:26,320 --> 00:26:28,580
So in this simple schematic,

215
00:26:29,760 --> 00:26:31,700
we have on the left-hand side,

216
00:26:31,700 --> 00:26:35,460
basically the internet, this bubble, this cloud,

217
00:26:35,460 --> 00:26:38,180
and attached to the internet that might be your laptop

218
00:26:38,180 --> 00:26:44,900
home or your workstation in the office and usually through the internet of your university you might

219
00:26:44,900 --> 00:26:51,780
have some network drive there's multiple of them whatever your university or research institution

220
00:26:52,420 --> 00:27:00,100
uses for storing data on the right hand side there is the cluster of course this is a very simplified

221
00:27:00,100 --> 00:27:06,660
picture of a cluster but usually it works like this that there is a login node so it's like a

222
00:27:06,660 --> 00:27:14,580
server a remote computer where you can enter the cluster and then once you are in the login node

223
00:27:14,580 --> 00:27:21,140
you can basically start working with the cluster you might submit a job so something that is non

224
00:27:21,140 --> 00:27:27,620
interactive like we did on the first episode or you might need to do some debugging on the

225
00:27:27,620 --> 00:27:33,940
actual cluster so you could request an interactive node so that you move from the login node to some

226
00:27:33,940 --> 00:27:40,980
CPU node or maybe GPU node and then what is important to see that this connection between

227
00:27:40,980 --> 00:27:47,540
the nodes and between the login nodes these are very fast very fast connections so that the local

228
00:27:47,540 --> 00:27:53,860
storage attached to the cluster whether it's this scratch storage very large and very fast

229
00:27:53,860 --> 00:27:59,940
or the kind of home folder is very different from what you be what might be the home folder

230
00:27:59,940 --> 00:28:07,380
on your machine or other data storage cloud storage that your university is giving you.

231
00:28:08,580 --> 00:28:15,940
So of course the speed of this type of connectivity within local cluster comes with some compromises

232
00:28:16,820 --> 00:28:23,060
meaning that for example if you would truly need to run some GPU computation that is very fast but

233
00:28:23,060 --> 00:28:27,860
the data is stored in the cloud storage of your university you have a bottleneck you have a data

234
00:28:27,860 --> 00:28:34,340
transfer bottleneck and it's not going to work. On the other end, cluster comes with the so-called

235
00:28:34,340 --> 00:28:40,420
scratch disk, whatever the name might change in different cluster, and usually the scratch disk

236
00:28:40,420 --> 00:28:47,140
is really optimized for fast IO, meaning that you don't have GPUs idling, waiting for data to come,

237
00:28:48,020 --> 00:28:53,140
but you have to pay this kind of speed with the price of the fact that usually, if not always,

238
00:28:53,140 --> 00:28:59,220
scratch is never backed up. So it's fast, it's large, but it's not backed up. And so you understand

239
00:28:59,220 --> 00:29:06,100
with this type of physical limitations and technical limitation, one is to build a workflow

240
00:29:06,100 --> 00:29:12,740
on top of those, so that you can make sure that maybe when something important is done, it's over

241
00:29:12,740 --> 00:29:18,260
and it's in scratch, you need to transfer it back to your university storage or to your laptop.

242
00:29:18,260 --> 00:29:23,260
or maybe working interactively with GPU nodes

243
00:29:23,420 --> 00:29:26,260
might be very expensive in a sense

244
00:29:26,260 --> 00:29:29,260
that your cluster policies might not allow you

245
00:29:29,260 --> 00:29:32,980
to stay idle on a GPU node for many hours.

246
00:29:32,980 --> 00:29:35,740
So then you need to figure out how to work locally

247
00:29:35,740 --> 00:29:38,620
and then deploy on the clusters.

248
00:29:38,620 --> 00:29:41,960
So all this will be covered in the next two hours.

249
00:29:43,580 --> 00:29:47,900
Just a brief mention that as you can understand now,

250
00:29:47,900 --> 00:29:50,580
We are working in a remote system.

251
00:29:50,580 --> 00:29:54,260
So it's important, yes, to understand the geography,

252
00:29:54,260 --> 00:29:56,420
where you are right now with the terminal.

253
00:29:56,420 --> 00:29:57,900
Are you in your local machine?

254
00:29:57,900 --> 00:29:59,220
Are you in the login node?

255
00:29:59,220 --> 00:30:02,220
Are you in a dedicated node?

256
00:30:02,220 --> 00:30:03,860
But what is also important to remember

257
00:30:03,860 --> 00:30:05,580
that these are shared system.

258
00:30:05,580 --> 00:30:08,780
There's other people connected to the same system.

259
00:30:08,780 --> 00:30:12,700
And so it's important to follow the cluster etiquette.

260
00:30:12,700 --> 00:30:15,900
There is no, how can I say, 10 simple rules

261
00:30:15,900 --> 00:30:20,900
on what to do or how to follow the cluster etiquette.

262
00:30:21,060 --> 00:30:24,180
But there's a very nice research software hour episode

263
00:30:24,180 --> 00:30:25,700
on this topic.

264
00:30:25,700 --> 00:30:27,560
So it's an interesting one.

265
00:30:28,460 --> 00:30:32,280
Adapt, of course, with the practices of your cluster.

266
00:30:32,280 --> 00:30:35,100
Maybe if there's one thing of the cluster etiquette

267
00:30:35,100 --> 00:30:36,540
that you must always remember

268
00:30:36,540 --> 00:30:40,860
is to not run computations in the login node.

269
00:30:40,860 --> 00:30:43,700
This will be most likely reminded

270
00:30:43,700 --> 00:30:46,540
and remember for the next of the day.

271
00:30:46,540 --> 00:30:48,140
But this is the most typical mistake

272
00:30:48,140 --> 00:30:50,880
that even most advanced user are doing.

273
00:30:52,740 --> 00:30:55,740
So, well, we can talk about the homework

274
00:30:55,740 --> 00:30:57,660
in the afternoon Zoom.

275
00:30:59,300 --> 00:31:02,740
So now [name], let's of course start

276
00:31:02,740 --> 00:31:05,980
with project arrangement because your local projects

277
00:31:05,980 --> 00:31:08,420
in your laptop might be a bit different

278
00:31:08,420 --> 00:31:11,940
than the project in the share system.

279
00:31:11,940 --> 00:31:16,900
Yeah, I will try to switch to my screen.

280
00:31:16,900 --> 00:31:18,980
Yes, like it worked.

281
00:31:19,860 --> 00:31:23,900
So we will head to project arrangement.

282
00:31:26,660 --> 00:31:28,600
So yeah, I mean, if you asked me,

283
00:31:28,600 --> 00:31:30,340
a lot of the daily work starts

284
00:31:30,340 --> 00:31:33,380
with how you organize your projects.

285
00:31:33,380 --> 00:31:38,380
And there's definitely some good and bad ways of doing this.

286
00:31:38,380 --> 00:31:46,780
this in probably a lot of ways that are good in some cases. And this is something that people

287
00:31:46,780 --> 00:31:53,180
rarely talk about. It's like, okay here's your space, go do things. You can treat it like your

288
00:31:53,180 --> 00:32:00,940
computer which might be organized well or not organized well. But let's start with a story.

289
00:32:00,940 --> 00:32:07,660
So there's a file which I probably have. It's a makefile and I really liked it because I

290
00:32:07,660 --> 00:32:15,180
completely automated one of my first projects I ever did when I started my PhD, and I would

291
00:32:15,180 --> 00:32:20,100
like to find that file again as a demo of Makefiles, but guess what?

292
00:32:20,100 --> 00:32:21,700
I can't find it.

293
00:32:21,700 --> 00:32:28,660
Even though I'm pretty sure it's not deleted, and I'm pretty sure it's backed up somewhere.

294
00:32:28,660 --> 00:32:34,120
But it was in a directory that probably got compressed, and that was probably in another

295
00:32:34,120 --> 00:32:44,740
directory that then also got compressed and is sitting around somewhere.

296
00:32:44,740 --> 00:32:50,820
So this is a good metaphor, I think, for what can happen.

297
00:32:50,820 --> 00:33:01,240
So if you're not careful when enough time passes, then you can lose track of what you've

298
00:33:01,240 --> 00:33:02,240
got.

299
00:33:02,240 --> 00:33:07,240
Even you lose track of things, how will anyone else be able to keep track of things?

300
00:33:07,240 --> 00:33:14,240
Has anyone else here ever lost a file this way?

301
00:33:14,240 --> 00:33:22,240
Like, do any of you have things that are so, well, that you think you have, but you can't find anymore?

302
00:33:22,240 --> 00:33:29,720
I mean, there is a whole structure of backup of old computer that contains backup of the

303
00:33:29,720 --> 00:33:35,920
previous computer, which contains backup of previous computer. And like everything from

304
00:33:35,920 --> 00:33:41,040
high school further should be there somewhere. I have no idea where.

305
00:33:41,040 --> 00:33:49,400
For me, I noticed that sometimes when joining a new project, maybe others might not be familiar

306
00:33:49,400 --> 00:33:53,800
with the fact that Scratch is not backed up and not familiar that we are sharing the same

307
00:33:54,680 --> 00:34:01,080
resources. So I had people deleting my folder because they thought that it was just some

308
00:34:02,280 --> 00:34:08,040
temporary. They're like, oh, I didn't make this, so it must not be needed. And then,

309
00:34:08,040 --> 00:34:11,640
so I guess that's another thing. When you have multiple people there, you have to

310
00:34:11,640 --> 00:34:17,800
have the sharing mechanism and know who's responsible for what. Also, how do you know

311
00:34:17,800 --> 00:34:24,680
if you even can clean something up in the future. Well, that's something we can talk about later.

312
00:34:29,000 --> 00:34:37,240
So here is something we can start with. So in the notes, please go there and write

313
00:34:38,360 --> 00:34:44,760
how your joint projects are organized, if you have any. So while we're talking,

314
00:34:44,760 --> 00:34:48,840
please keep adding these and at the end we'll go through and discuss them.

315
00:34:51,640 --> 00:34:55,560
There's a good question in the note, should we use English-only local language allowed,

316
00:34:56,120 --> 00:35:03,560
only 8.3 format or long file names? Let's get to that at the end, but do keep adding these.

317
00:35:06,200 --> 00:35:14,680
So my first thought for keeping things arranged is divide up your work into what goes together.

318
00:35:14,760 --> 00:35:23,800
So, for example, this is one project of mine, this is another project of mine, and so on.

319
00:35:23,800 --> 00:35:29,460
So one of my original problems was that I put all of my work into one folder, and then

320
00:35:29,460 --> 00:35:34,500
in there I had subfolders for different things I was doing, and probably even subfolders

321
00:35:34,500 --> 00:35:35,640
in there.

322
00:35:35,640 --> 00:35:38,120
So they got recursively compressed.

323
00:35:38,120 --> 00:35:44,420
Like I compressed an inside one, then an outside one, and I lost track.

324
00:35:44,420 --> 00:35:50,520
So what I'd say is try to keep everything at one top level, decide what goes together,

325
00:35:50,520 --> 00:35:52,880
give it a name, and that name is unique.

326
00:35:52,880 --> 00:35:58,960
For example, I would call some of my projects like lgm for lattice glass model.

327
00:35:58,960 --> 00:36:01,160
And then I had directories called lgm.

328
00:36:01,160 --> 00:36:09,580
And wherever I saw that directory name, I knew it was supposed to represent this project.

329
00:36:09,580 --> 00:36:16,680
And then once you have the projects in directories, whatever's in one of the project directories

330
00:36:16,680 --> 00:36:19,200
is always managed the same way.

331
00:36:19,200 --> 00:36:25,100
So for example, you always either use git for it, or you transfer data with rsync or

332
00:36:25,100 --> 00:36:26,440
something like that.

333
00:36:26,440 --> 00:36:29,100
And we'll talk about that next.

334
00:36:29,100 --> 00:36:35,120
And then I'd recommend everything at least have a minimal readme for you that lets you

335
00:36:35,120 --> 00:36:37,120
know what's in there.

336
00:36:37,120 --> 00:36:42,240
to read me is useful to other people, that's even better. But a little note that says this

337
00:36:42,240 --> 00:36:49,800
is what this was and how I was using it. So here's an example that might be from one

338
00:36:49,800 --> 00:36:59,620
of my projects. I have something which I call project A, and then it has a bunch of data.

339
00:36:59,620 --> 00:37:05,160
So the data is too much, I don't want to store it and track it with the main project things.

340
00:37:05,160 --> 00:37:09,740
So I make a different directory called project-a-data.

341
00:37:09,740 --> 00:37:13,140
And then whenever I start writing things, different people will have access to that.

342
00:37:13,140 --> 00:37:17,900
So I make a separate directory again called project-a-paper1.

343
00:37:17,900 --> 00:37:18,900
And so on.

344
00:37:18,900 --> 00:37:23,700
And then these aren't subdirectories of each other, but all at the same level.

345
00:37:23,700 --> 00:37:31,020
So I can easily find them.

346
00:37:31,020 --> 00:37:40,880
When you're sharing these, either everyone has their own local clone with Git, for example,

347
00:37:40,880 --> 00:37:45,080
and that's often used for code or papers or things like that.

348
00:37:45,080 --> 00:37:50,120
Or there's one shared folder that everyone edits, which basically should only be used

349
00:37:50,120 --> 00:38:01,960
for things like data, because people editing the same code is not a good idea.

350
00:38:01,960 --> 00:38:04,440
So how do you organize your top-level projects?

351
00:38:04,440 --> 00:38:11,160
Do you have these deeply recursive structures or do you try to keep it all flat and so on?

352
00:38:11,160 --> 00:38:12,160
Anyone else here?

353
00:38:12,160 --> 00:38:19,520
Well, I mean, that's a very good question, and in the code refinery lesson that is linked

354
00:38:19,520 --> 00:38:27,200
to this material, we try to basically recommend a usual project structure. I think that the

355
00:38:27,200 --> 00:38:32,940
advantage of sharing more or less the same project structure with the subfolders is that

356
00:38:32,940 --> 00:38:38,400
others who might join the project later, they might already be familiar with the folder structure

357
00:38:38,400 --> 00:38:43,240
or the usual scenario that if you win the lottery and move to a desert island, other

358
00:38:43,240 --> 00:38:49,040
people know where to find the different bits. In general, of course, I really like what

359
00:38:49,040 --> 00:38:55,040
you mentioned about having multiple kind of project subfolders because it on one hand

360
00:38:55,040 --> 00:39:01,200
one can think that okay this is extra work but this is truly data management in practice

361
00:39:01,200 --> 00:39:06,620
because you can really have let's say this project a paper one can be you know only couple

362
00:39:06,620 --> 00:39:10,760
of users should have read and access there because those are the authors of the paper

363
00:39:10,760 --> 00:39:16,520
and project a paper two there will be other people so you don't need to truly share everything

364
00:39:16,520 --> 00:39:20,000
with everyone else, which is a bit of an issue

365
00:39:20,000 --> 00:39:21,880
that we have noticed in our cluster

366
00:39:21,880 --> 00:39:25,040
with these gigantic project folders.

367
00:39:25,040 --> 00:39:27,680
But in general, I mean, maybe talking with each other

368
00:39:27,680 --> 00:39:31,960
and agreeing on these policies is the best.

369
00:39:31,960 --> 00:39:34,720
What is your experience, [name]?

370
00:39:34,720 --> 00:39:40,360
Yeah, I mean, it's a good point about the master project

371
00:39:40,360 --> 00:39:42,960
folders.

372
00:39:42,960 --> 00:39:45,160
Actually, it will get, let's go on

373
00:39:45,160 --> 00:39:50,600
maybe we can talk about our own arrangement because there's more of this later on down.

374
00:39:52,600 --> 00:39:56,920
Okay, so directories within projects. So once you've got a project,

375
00:39:56,920 --> 00:40:01,320
then try to keep stuff organized within that. So this is probably pretty obvious.

376
00:40:02,040 --> 00:40:12,680
So for example, within my proj A, I might have the code, some original data, scratch data,

377
00:40:12,680 --> 00:40:24,360
which is not tracked and can be deleted, outputs or documentation, the paper stuff, and so on.

378
00:40:24,920 --> 00:40:30,680
And of course the arrangement above some of these papers and so on were separated out,

379
00:40:30,680 --> 00:40:34,760
but if it is together you'd keep it unique likeness.

380
00:40:37,560 --> 00:40:41,960
This is probably pretty obvious. The last thing you want to do is have to come back in

381
00:40:41,960 --> 00:40:48,200
five years and someone says please can you share your code and then you have to

382
00:40:48,200 --> 00:40:53,800
go looking for code everywhere or you come back in two years like okay we have

383
00:40:53,800 --> 00:40:57,800
to delete the original data because of privacy or something like that and you

384
00:40:57,800 --> 00:41:02,880
can't find where the original data is because it's mixed with all the other

385
00:41:02,880 --> 00:41:13,120
things. So keep it organized at the start. Next is directories for teams. So oftentimes on a

386
00:41:13,120 --> 00:41:19,360
cluster, you'll get allocated one directory for your project, which everyone has to share.

387
00:41:20,240 --> 00:41:26,080
So same for our cluster. If you're in a group, you get a group directory. Like for example,

388
00:41:26,080 --> 00:41:37,280
it might be called networks and for the complex networks group and then um how do you divide this

389
00:41:37,280 --> 00:41:46,320
up so for example here we see scratch project with some big number and i think this is similar

390
00:41:46,320 --> 00:41:55,520
to the naming scheme on CSC clusters for example and maybe others on our cluster it's text names

391
00:41:55,520 --> 00:42:02,880
but that might be unique. So then inside of there, there's often directories for each user.

392
00:42:02,880 --> 00:42:12,960
So for example, user1, user2, user3, and user4. And then inside of the user directories is the

393
00:42:12,960 --> 00:42:20,800
code for different things. Code for project A, code for project B, user2, code for project A.

394
00:42:20,800 --> 00:42:26,480
and then these are tracked and synchronized with git and if you need to

395
00:42:26,480 --> 00:42:29,880
you can go directly looking at other people's code but you don't modify it

396
00:42:29,880 --> 00:42:38,400
you only use version control or something to track but then what about

397
00:42:38,400 --> 00:42:43,880
data sets and so on so then that would be in a different shared folder for

398
00:42:43,880 --> 00:42:49,760
example project a common data which is managed manually or however and then the

399
00:42:49,760 --> 00:42:57,520
code refers to the data in this location by either the full path or saying ../.. for

400
00:42:58,160 --> 00:42:59,360
two parent directories.

401
00:43:04,400 --> 00:43:14,240
Yeah, okay. And I think this is probably what most of us instructors do because we're all from the

402
00:43:14,240 --> 00:43:22,960
same place. Yeah, we still have a couple of minutes, so how about this code arrangement?

403
00:43:25,520 --> 00:43:31,600
Oh, I forgot about this part. So, the installable software packages. So,

404
00:43:33,040 --> 00:43:41,760
wait, what's this going to be? So, if you have code directories like this, it works, and they

405
00:43:41,760 --> 00:43:46,720
can import each other. But once you start getting a bunch of code that's relatively stable and

406
00:43:46,720 --> 00:43:54,080
multiple people use, you can split this off into another separate package separate from your

407
00:43:54,080 --> 00:44:05,360
analysis and so on. And then you would package that as, say, a Python package or C package or

408
00:44:05,360 --> 00:44:12,240
whatever and then that's tracked separately and we have an example of making a python package here

409
00:44:13,280 --> 00:44:17,120
and if you do this you can even install an editable version

410
00:44:17,120 --> 00:44:21,520
which means that whenever you modify it the changes are directly visible

411
00:44:23,360 --> 00:44:30,320
um i have a feeling something's missing here is this basically i don't know if something's missing

412
00:44:30,320 --> 00:44:36,320
but maybe a question that I have that would it be like, let's say that we work in the same

413
00:44:36,320 --> 00:44:42,720
research group and we maybe have agreed on a shared conda environment so that we can all

414
00:44:42,720 --> 00:44:48,320
stick to the same versions at least for a few papers. Would it be the best to have a shared

415
00:44:48,320 --> 00:44:53,120
place where we all store this shared conda environment or maybe even turning this

416
00:44:53,120 --> 00:44:58,480
conda environment into a module if it's possible? What would be your recommendation?

417
00:44:58,480 --> 00:45:05,960
I think shared Conda environments are a really good idea, and could be done.

418
00:45:05,960 --> 00:45:12,440
On the other hand, once I was working on a project, and I had started writing a shared

419
00:45:12,440 --> 00:45:15,040
library for this.

420
00:45:15,040 --> 00:45:20,040
So a library that would read the data and do some basic preprocessing, and then everyone

421
00:45:20,040 --> 00:45:22,440
else would be using this library.

422
00:45:22,440 --> 00:45:28,000
But somehow the arrangement got so that people needed to make some changes to this library

423
00:45:28,000 --> 00:45:38,440
for their own things. So people would go and do the changes themselves to it, and then

424
00:45:38,440 --> 00:45:44,500
it would break things for other people. And I forget, maybe it was in a shared environment

425
00:45:44,500 --> 00:45:51,240
on there. So someone would modify the code, and then suddenly other people's code stopped

426
00:45:51,240 --> 00:45:52,240
working.

427
00:45:52,240 --> 00:45:58,960
So, this is not necessarily a problem with having the shared environment, but versioning

428
00:45:58,960 --> 00:46:05,880
the code better and making sure that backwards compatibility is maintained unless it's decided

429
00:46:05,880 --> 00:46:07,200
to be broken.

430
00:46:07,200 --> 00:46:13,120
But yeah, this is sort of an intrinsic problem when the code is going to be changing, that

431
00:46:13,120 --> 00:46:20,400
you need an environment for everyone's own thing.

432
00:46:20,400 --> 00:46:25,720
So at the end of the day, it's good to talk with your colleagues and agree on whatever

433
00:46:25,720 --> 00:46:27,680
is your preferred policy.

434
00:46:27,680 --> 00:46:30,800
So we are perfect with our timings.

435
00:46:30,800 --> 00:46:39,440
And I think we could basically move to the next section, which is about data systems.

436
00:46:39,440 --> 00:46:42,720
Are there any good questions in the thing?

437
00:46:42,720 --> 00:46:43,720
Yeah.

438
00:46:43,720 --> 00:46:54,280
Some interesting questions on the folder structures and yeah, yeah.

439
00:46:54,280 --> 00:46:56,280
So there's a good comment here.

440
00:46:56,280 --> 00:46:57,280
Maybe the last one.

441
00:46:57,280 --> 00:46:58,280
Yeah.

442
00:46:58,280 --> 00:46:59,720
Do you want to comment exactly on that?

443
00:46:59,720 --> 00:47:00,720
The last one.

444
00:47:00,720 --> 00:47:04,560
Well, I'm commenting on the one about recursive structures.

445
00:47:04,560 --> 00:47:09,200
So yeah, I mean, recursive structure is nice and that's what I originally did.

446
00:47:09,200 --> 00:47:14,720
But at some point, once I got too many projects and the recursive structure got too big,

447
00:47:14,720 --> 00:47:16,680
it became too hard to find things.

448
00:47:16,680 --> 00:47:21,120
So I said flat structure with the main metadata being the name.

449
00:47:21,120 --> 00:47:28,160
So for example, now I know on any computer I can list my git directory.

450
00:47:28,160 --> 00:47:32,200
And then it will have a list of all projects.

451
00:47:32,200 --> 00:47:39,080
Or put it another way, I know on any computer I can list my git directory, or list my research

452
00:47:39,080 --> 00:47:44,920
directory, and that will contain every name that I might possibly need to know.

453
00:47:44,920 --> 00:47:49,000
And stuff won't be hidden too deeply.

454
00:47:49,000 --> 00:47:56,040
So that works for my project directory, or my arrangement, but maybe not others.

455
00:47:56,040 --> 00:47:58,240
Maybe it can be kept clean or recursive.

456
00:47:58,240 --> 00:48:07,000
So yeah, for searching metadata, well,

457
00:48:07,000 --> 00:48:10,440
I try to make sure the name includes everything

458
00:48:10,440 --> 00:48:13,520
that I might want to search for with this kind of naming

459
00:48:13,520 --> 00:48:15,920
scheme that I showed.

460
00:48:15,920 --> 00:48:20,080
And yeah, for the last question, probably the paper directories

461
00:48:20,080 --> 00:48:24,480
wouldn't be on this cluster, but by having it

462
00:48:24,480 --> 00:48:26,160
as the separate thing, then it doesn't

463
00:48:26,160 --> 00:48:36,080
to be there, for example. But yeah, it's more of an example that way. Okay.

464
00:48:38,080 --> 00:48:47,520
Excellent. So now it's exactly 30 past, so we could see what would be the next adventure.

465
00:48:48,160 --> 00:48:51,360
And I think we're going to talk about moving data around.

466
00:48:51,360 --> 00:49:00,560
to Data Sync. Yes, so should I take over the screen share? Yeah, maybe. Let's do. How about

467
00:49:00,560 --> 00:49:05,440
I start the introduction and then we'll give you the screen share. Yeah, so.

468
00:49:08,640 --> 00:49:13,840
So, yeah, Data Sync. So, can someone add this to the notes?

469
00:49:13,840 --> 00:49:26,360
So, we often learn about things like version control for sharing code, which works well

470
00:49:26,360 --> 00:49:31,880
and definitely should be used, but what happens once you get gigabytes of data or more that

471
00:49:31,880 --> 00:49:38,160
needs to be shared around between multiple clusters, or your own computer and the cluster

472
00:49:38,160 --> 00:49:39,400
and so on?

473
00:49:39,400 --> 00:49:41,520
How do you transfer this?

474
00:49:41,520 --> 00:49:50,280
So obviously there's the answer of SSH, SCP, rsync, and so on, but are there any better

475
00:49:50,280 --> 00:49:51,280
ways?

476
00:49:51,280 --> 00:49:56,480
And that's what we're going to talk about now, in addition to the basic ways.

477
00:49:56,480 --> 00:50:02,520
So first off is make a data plan.

478
00:50:02,520 --> 00:50:09,920
So who has ever had a case where you're working on a paper and you email the manuscript to

479
00:50:09,920 --> 00:50:16,080
everyone and then you get all the emails back with all the changes and now suddenly you have

480
00:50:16,880 --> 00:50:24,880
five different copies. Unfortunately yes. Unfortunately yeah. So of course that's why

481
00:50:24,880 --> 00:50:32,720
people these days use things like Overleaf and so on but that's a that's part of the data plan

482
00:50:32,720 --> 00:50:44,720
But for data, you can't do the same thing. So first step, think about what you've got.

483
00:50:44,720 --> 00:50:52,680
And the different common operations you might have are having original data and making a copy

484
00:50:52,680 --> 00:51:02,640
for analysis, archiving data when you're done, moving the data from place to place during

485
00:51:02,640 --> 00:51:08,880
the project and moving the data but it might be modified on both sides.

486
00:51:08,880 --> 00:51:13,800
And when data might be modified on both sides, that's when you start getting really confusing

487
00:51:13,800 --> 00:51:14,800
things happening.

488
00:51:14,800 --> 00:51:20,360
And you have to be really careful.

489
00:51:20,360 --> 00:51:25,500
So let's get started.

490
00:51:25,500 --> 00:51:33,700
So here's an example of a data plan that I might use for a project.

491
00:51:33,700 --> 00:51:37,700
So just to summarize, let's say I'm doing some sort of analysis.

492
00:51:37,700 --> 00:51:43,180
I've collected data from some instrument, like a microscope or something, and the data

493
00:51:43,180 --> 00:51:46,740
is on my computer.

494
00:51:46,740 --> 00:51:54,420
And let's say I need so much computing power that I might be using multiple clusters.

495
00:51:54,420 --> 00:52:02,100
plan is that the original data can get synced to clusters. So that's this input data. And input

496
00:52:02,100 --> 00:52:11,700
data is only modified on my laptop. So anytime in the future, I would only, if I need to change

497
00:52:11,700 --> 00:52:17,220
the data, first I update the laptop, then transfer it out everywhere. So that's one way.

498
00:52:18,500 --> 00:52:22,660
The cluster can do computing. For example, making these computed directories.

499
00:52:22,660 --> 00:52:29,660
And from any cluster, those are only transferred back to my laptop. So there's never a question.

500
00:52:29,660 --> 00:52:35,140
So the cluster always has the latest data. And then, for example, analyzed is always

501
00:52:35,140 --> 00:52:45,500
then regenerated on my laptop, for example. Okay, and that can keep things organized.

502
00:52:45,500 --> 00:52:51,780
So how do we actually transfer? So, [name], are you ready to screen share?

503
00:52:51,780 --> 00:52:53,780
Yes.

504
00:52:53,780 --> 00:52:55,780
Okay.

505
00:52:55,780 --> 00:52:59,780
So, first off is transferring data.

506
00:52:59,780 --> 00:53:05,780
And I'll leave it on my screen until I'm ready for the next part.

507
00:53:05,780 --> 00:53:09,780
So, transferring data is relatively easy.

508
00:53:09,780 --> 00:53:16,780
So you've probably heard of tools like SCP or SFTP, and probably also Rsync.

509
00:53:16,780 --> 00:53:21,580
So all of these use SSH as the transport protocol.

510
00:53:21,580 --> 00:53:26,780
In fact, well, you'll see here in HPC,

511
00:53:26,780 --> 00:53:29,340
almost everything uses SSH.

512
00:53:29,340 --> 00:53:32,620
For that, if you set up an SSH config file,

513
00:53:32,620 --> 00:53:34,580
which we might see later today,

514
00:53:34,580 --> 00:53:35,860
but I won't go through now,

515
00:53:35,860 --> 00:53:38,460
it will make things much easier because you can

516
00:53:38,460 --> 00:53:42,020
define all the options once and just give a name.

517
00:53:42,020 --> 00:53:45,340
If you have data that's very,

518
00:53:45,340 --> 00:53:50,780
very massive like multi terabytes you're transferring around Europe then there's

519
00:53:50,780 --> 00:53:54,620
some other protocols people might use but if you need those you'll just learn

520
00:53:54,620 --> 00:54:01,380
them. And the main thing I've been emphasizing here if you have two copies

521
00:54:01,380 --> 00:54:05,380
of the same data be really careful they don't get out of sync which is why I

522
00:54:05,380 --> 00:54:12,180
emphasize so much, where can data be edited, and so on.

523
00:54:12,180 --> 00:54:17,340
So rsync, [name], what do you like to show?

524
00:54:17,340 --> 00:54:19,140
I will switch to your screen.

525
00:54:19,140 --> 00:54:20,460
Yeah.

526
00:54:20,460 --> 00:54:21,260
OK.

527
00:54:21,260 --> 00:54:24,780
And you can make it a little bit wider now.

528
00:54:24,780 --> 00:54:31,420
Yes, I can preview.

529
00:54:31,420 --> 00:54:34,220
OK.

530
00:54:34,220 --> 00:54:38,060
So before you walk me through the example,

531
00:54:38,060 --> 00:54:39,660
I'll just show you what I have.

532
00:54:39,660 --> 00:54:43,940
Because I have a data folder in one of the example folders.

533
00:54:43,940 --> 00:54:49,060
I guess I should have then followed your example

534
00:54:49,060 --> 00:54:51,940
and created a code folder separately.

535
00:54:51,940 --> 00:54:57,100
But now we have a data folder in here in the web datasets

536
00:54:57,100 --> 00:55:01,300
example that we used last week.

537
00:55:01,300 --> 00:55:08,180
So, the data folder contains six files and we need to get these to the cluster.

538
00:55:08,980 --> 00:55:10,900
Okay, so what should I do?

539
00:55:12,980 --> 00:55:16,260
So, do you have SSH set up to the cluster?

540
00:55:17,220 --> 00:55:17,720
Yes.

541
00:55:18,260 --> 00:55:18,760
Okay.

542
00:55:19,220 --> 00:55:23,380
In fact, I have a tab open where I already have SSH to the cluster,

543
00:55:23,380 --> 00:55:27,940
because that makes it helpful to have echoing the commands down here.

544
00:55:29,860 --> 00:55:30,360
Yes.

545
00:55:31,300 --> 00:55:41,220
Okay so right now we're on your computer. So I guess we start with rsync, the command.

546
00:55:43,300 --> 00:55:49,860
Yeah. And then the syntax is sort of like copy where it's source to destination.

547
00:55:51,060 --> 00:55:53,460
Yeah so I guess we move the entire folder.

548
00:55:56,180 --> 00:55:59,380
Did you say first the destination? First the source.

549
00:55:59,380 --> 00:56:08,100
right so it goes source to destination so data we do 'data/' everything or

550
00:56:08,100 --> 00:56:14,380
that's what I would do yeah we can do recursive if we do 'data/'

551
00:56:14,380 --> 00:56:21,180
everything we need to create the folder first so I would recommend as from what

552
00:56:21,180 --> 00:56:27,860
I generally do I always use the whole directory names and then a slash ('/') on the

553
00:56:27,860 --> 00:56:35,060
end. And then for the destination, also the whole directory name with a slash on the end.

554
00:56:36,260 --> 00:56:44,180
Yeah. So sort of like cp, whenever you copy a file with cp, it might put it inside of the

555
00:56:44,180 --> 00:56:52,180
destination folder, or it might give it that exact file name as the destination. Yeah,

556
00:56:52,180 --> 00:57:01,460
this is something that's always a little bit confusing to me. So yeah, I basically always

557
00:57:01,460 --> 00:57:07,180
try twice. Yeah. Fail on the first time. So my recommendation is always use slashes on

558
00:57:07,180 --> 00:57:17,100
the end and always give the final name you want. So if we do try to not all the F I colon

559
00:57:17,100 --> 00:57:18,100
Scratch.

560
00:57:18,100 --> 00:57:19,100
Scratch.

561
00:57:19,100 --> 00:57:20,100
Work.

562
00:57:20,100 --> 00:57:35,100
Maybe writing this out is not the most interesting thing, but we are already almost there.

563
00:57:35,100 --> 00:57:42,900
Now, this is the same io-example/webdataset.

564
00:57:42,900 --> 00:57:43,900
Okay.

565
00:57:43,900 --> 00:57:49,020
okay but there is no data folder there so we do need either to do it recursively

566
00:57:49,020 --> 00:57:57,380
or so if you give it'll automatically make one name on the end so if over this

567
00:57:57,380 --> 00:58:02,540
should work if web data set exists and you do and you add a data slash on the

568
00:58:02,540 --> 00:58:13,140
end yeah like this yeah so it will make a data directory so it wasn't recursive

569
00:58:13,140 --> 00:58:24,260
So maybe this is a difference between our versions or our normal usage but well I will

570
00:58:24,260 --> 00:58:33,060
make it recursive -r and it's taking some time

571
00:58:33,060 --> 00:58:43,100
here so now it's not I didn't set it to interactive so it's not printing out what it's copying

572
00:58:43,100 --> 00:58:52,100
It does take a moment to copy this data and a big part of this actually is just the latency

573
00:58:52,100 --> 00:58:56,860
of accessing the cluster, getting a connection to the cluster.

574
00:58:56,860 --> 00:59:01,940
You want to control-C and give the -i option.

575
00:59:01,940 --> 00:59:03,700
Let's do that.

576
00:59:03,700 --> 00:59:07,780
We'll see what's going on.

577
00:59:07,780 --> 00:59:15,700
So it already copied the first two files and it's copying the third one.

578
00:59:15,700 --> 00:59:25,100
So one cool thing about rsync is it will resume transfers that have already started.

579
00:59:25,100 --> 00:59:32,100
It will, if you cancel a transfer in the middle, it doesn't lose the partially transferred

580
00:59:32,100 --> 00:59:33,100
file.

581
00:59:33,100 --> 00:59:37,100
It can't preserve timestamps.

582
00:59:37,100 --> 00:59:41,100
Yeah, so all the existing ones

583
00:59:41,100 --> 00:59:45,100
were already there.

584
00:59:45,100 --> 00:59:49,100
So you can preserve timestamps, so that way

585
00:59:49,100 --> 00:59:53,100
it will see, okay, is the timestamp the same? Then it knows it doesn't

586
00:59:53,100 --> 00:59:57,100
need to check it again. It will do checksums on the files.

587
00:59:57,100 --> 01:00:01,100
So basically make sure that everything

588
01:00:01,100 --> 01:00:09,620
is like it will read through the file, compute a checksum of it

589
01:00:09,620 --> 01:00:13,700
to make sure that bit by bit it is exactly identical

590
01:00:13,700 --> 01:00:15,460
on the source and the receiver.

591
01:00:15,460 --> 01:00:18,820
And if you've changed just a small part of a file,

592
01:00:18,820 --> 01:00:22,940
it will only modify those same ones.

593
01:00:22,940 --> 01:00:24,500
Should we demonstrate that?

594
01:00:24,500 --> 01:00:25,820
Or I guess it's hard to do that.

595
01:00:25,820 --> 01:00:27,220
So does it go file by file?

596
01:00:31,100 --> 01:00:35,100
Yes, I think by default it goes file by file.

597
01:00:35,100 --> 01:00:38,380
You can also do partial transfers and then it splits the file up.

598
01:00:41,260 --> 01:00:42,940
What do you mean by partial transfer?

599
01:00:43,820 --> 01:00:49,980
So it will split the file into pieces, transfer those pieces one by one,

600
01:00:49,980 --> 01:00:52,300
and then reconstitute the file on the other end.

601
01:00:52,300 --> 01:00:58,060
So that if for some reason the upload gets cancelled,

602
01:00:58,060 --> 01:01:02,660
it doesn't have to restart from – it doesn't have to do the entire file again.

603
01:01:02,660 --> 01:01:03,660
Yes.

604
01:01:03,660 --> 01:01:04,660
Yes, exactly.

605
01:01:04,660 --> 01:01:05,660
Yeah.

606
01:01:05,660 --> 01:01:12,180
But that's mainly for the first time you transfer or – I mean, if you have reason to expect

607
01:01:12,180 --> 01:01:15,820
that it might get canceled if it's a really big file, then that's useful.

608
01:01:15,820 --> 01:01:16,820
But okay.

609
01:01:16,820 --> 01:01:28,060
Actually, without breaking the archive, the tar archive, you can modify by just adding

610
01:01:28,060 --> 01:01:30,700
stuff to the end.

611
01:01:30,700 --> 01:01:35,580
So I'll do this.

612
01:01:35,580 --> 01:01:40,300
So this will be modifying the last file in the archive, actually, because I don't know

613
01:01:40,300 --> 01:01:44,540
how to write headers for new files, but that's not a problem.

614
01:01:44,540 --> 01:01:45,540
That's fine.

615
01:01:45,540 --> 01:01:56,660
Okay, so let's just do a new file content, and then the same command again.

616
01:01:56,660 --> 01:02:01,660
Yes.

617
01:02:01,660 --> 01:02:02,660
That was really quick.

618
01:02:02,660 --> 01:02:06,140
Even the last file, I think it did actually a partial.

619
01:02:06,140 --> 01:02:09,180
Yeah, it did an update instead of copy.

620
01:02:09,180 --> 01:02:14,860
So it checks, it sees what's there, and would only transfer the new stuff.

621
01:02:14,860 --> 01:02:18,800
So yeah, basically rsync is the thing to use.

622
01:02:18,800 --> 01:02:25,420
It's got options for only transferring files which are newer on the source side than the

623
01:02:25,420 --> 01:02:38,220
receiver side, very powerful include and exclude kind of options, preserving timestamps, archiving

624
01:02:38,220 --> 01:02:40,620
everything, including timestamps, remissions,

625
01:02:40,620 --> 01:02:42,220
that kind of things.

626
01:02:42,220 --> 01:02:44,980
Dry run, so it would print what would happen before you

627
01:02:44,980 --> 01:02:50,220
actually do it, and so on.

628
01:02:50,220 --> 01:02:53,260
Anyway, we can play with that some more later.

629
01:02:53,260 --> 01:02:56,500
Should we go to the two-way syncing?

630
01:02:56,500 --> 01:02:58,900
Yeah, so this was only one way, and that's

631
01:02:58,900 --> 01:03:00,300
the main downside with our sync.

632
01:03:00,300 --> 01:03:01,460
Yeah.

633
01:03:01,460 --> 01:03:02,900
OK.

634
01:03:02,900 --> 01:03:08,180
So if I delete a file or modify a file on the other side,

635
01:03:08,180 --> 01:03:16,420
Yeah, it doesn't get overwritten, I guess, unless there's a change on my laptop.

636
01:03:16,420 --> 01:03:19,620
But yeah, so let's do the two-way example.

637
01:03:19,620 --> 01:03:25,620
So whoever has done two-way syncing of data for clusters and stuff like that?

638
01:03:25,620 --> 01:03:37,700
I mean, I did set it up once on my laptop, on my laptop and cluster, but I think I just

639
01:03:37,700 --> 01:03:41,060
After I changed laptops, I just never did it again.

640
01:03:44,180 --> 01:03:47,940
It was really useful as long as the network connection worked.

641
01:03:49,700 --> 01:03:56,340
Okay, so the thing with syncing data two ways is that you have to remember what's updated.

642
01:03:56,900 --> 01:04:02,260
So imagine you sync things. Do you always take the file that has the newer timestamp?

643
01:04:02,260 --> 01:04:06,500
Well, what if it's been modified on both sides?

644
01:04:06,500 --> 01:04:17,440
Then you would lose the fact that they've both been modified without warning.

645
01:04:17,440 --> 01:04:22,940
So any kind of good enough two-way syncing needs to record the state of what was last

646
01:04:22,940 --> 01:04:23,980
there.

647
01:04:23,980 --> 01:04:28,000
And the program I've used for this before is called Unison.

648
01:04:28,000 --> 01:04:29,940
So there's a different thing called Unison.

649
01:04:29,940 --> 01:04:34,940
So make sure you get the right one.

650
01:04:34,940 --> 01:04:42,820
Actually, yeah, there is a link there.

651
01:04:42,820 --> 01:04:50,220
So I did prepare by installing Unison, but is there, do you want to make some points

652
01:04:50,220 --> 01:04:53,900
about installing it before we continue?

653
01:04:53,900 --> 01:04:59,140
So Unison is something that's not usually installed on clusters.

654
01:04:59,140 --> 01:05:06,740
It is in typical Linux package repositories.

655
01:05:06,740 --> 01:05:11,300
So it used to be Unison needed to have the exact same version on both sides, which was

656
01:05:11,300 --> 01:05:13,180
a bit of a problem.

657
01:05:13,180 --> 01:05:18,660
But since the latest ones, that's not necessary anymore.

658
01:05:18,660 --> 01:05:23,940
But we can look at installation into exercise sessions.

659
01:05:23,940 --> 01:05:25,420
That's not interesting now.

660
01:05:25,420 --> 01:05:26,420
Yeah.

661
01:05:26,420 --> 01:05:27,420
Okay.

662
01:05:27,420 --> 01:05:32,580
The thing that I did notice is that my version at least still requires exactly the same version

663
01:05:32,580 --> 01:05:34,300
on both sides.

664
01:05:34,300 --> 01:05:40,700
So I have set it up correctly, but that happens.

665
01:05:40,700 --> 01:05:43,580
So what options do you use here?

666
01:05:43,580 --> 01:05:48,100
That's a good question.

667
01:05:48,100 --> 01:05:52,380
I could check what I used when I was trying, but I think just the folder names.

668
01:05:52,380 --> 01:05:53,780
Do I need anything else?

669
01:05:53,780 --> 01:06:01,900
So the folder name for the source, and then it needs to be 'ssh://'.

670
01:06:01,900 --> 01:06:02,900
Oh, right.

671
01:06:02,900 --> 01:06:03,900
Ssh.

672
01:06:03,900 --> 01:06:04,900
Ssh.

673
01:06:04,900 --> 01:06:08,300
And then the address, and another '//'.

674
01:06:08,300 --> 01:06:09,300
And now the path.

675
01:06:09,300 --> 01:06:10,300
Yes.

676
01:06:10,300 --> 01:06:11,300
On the other side.

677
01:06:11,300 --> 01:06:12,300
Okay.

678
01:06:12,300 --> 01:06:13,300
Okay.

679
01:06:13,300 --> 01:06:23,260
Does it already exist on the other side?

680
01:06:23,260 --> 01:06:25,740
It seems to have noticed some changes.

681
01:06:25,740 --> 01:06:28,420
So I think it already exists on the other side.

682
01:06:28,420 --> 01:06:32,260
Because isn't it the same place you've just rsynced it?

683
01:06:32,260 --> 01:06:33,180
Yes.

684
01:06:33,180 --> 01:06:34,620
OK.

685
01:06:34,620 --> 01:06:42,580
OK, so on the server side, it is a new directory.

686
01:06:42,580 --> 01:06:46,220
It has been deleted since the last time I used Unison.

687
01:06:46,220 --> 01:06:50,620
OK, but I could give it a completely new directory.

688
01:06:50,620 --> 01:06:55,620
So let's call it data unison, just as a demo.

689
01:06:55,660 --> 01:06:56,500
Yeah.

690
01:06:57,460 --> 01:07:00,340
So now it can start from scratch.

691
01:07:03,100 --> 01:07:03,940
Yes.

692
01:07:03,940 --> 01:07:07,180
Okay, so we get this blurb of text

693
01:07:10,040 --> 01:07:12,780
and I guess it's just warning that it's a,

694
01:07:12,780 --> 01:07:14,860
it's not finding the last date.

695
01:07:14,860 --> 01:07:18,420
So it's a completely new.

696
01:07:18,420 --> 01:07:19,420
Yeah.

697
01:07:19,420 --> 01:07:20,260
Yeah.

698
01:07:20,620 --> 01:07:33,700
Okay, and here, it will prompt for every single directory, the new things, what is new.

699
01:07:33,700 --> 01:07:36,220
And F means follow the recommendation.

700
01:07:36,220 --> 01:07:41,980
So it sees that locally you have something, on the cluster you have nothing.

701
01:07:41,980 --> 01:07:47,460
So if you push F, it will propagate it to the cluster.

702
01:07:47,460 --> 01:07:52,460
and then push y to accept and there it's transferring.

703
01:07:53,860 --> 01:07:55,780
And I guess it will take a while.

704
01:07:55,780 --> 01:07:56,620
Yeah.

705
01:07:56,620 --> 01:07:58,820
So now it's copying all of the files across.

706
01:08:00,140 --> 01:08:00,980
Yes.

707
01:08:00,980 --> 01:08:02,460
It asked only about the folder,

708
01:08:02,460 --> 01:08:04,020
but it's copying all the files.

709
01:08:05,900 --> 01:08:06,740
Yeah.

710
01:08:09,940 --> 01:08:11,300
I mean, yeah, it will take a while.

711
01:08:11,300 --> 01:08:15,100
I guess we don't have to wait for it to finish because...

712
01:08:15,100 --> 01:08:15,940
Okay.

713
01:08:15,940 --> 01:08:18,740
We can move on to the next thing.

714
01:08:18,740 --> 01:08:19,240
Yes.

715
01:08:23,020 --> 01:08:27,780
And this will transfer all five files, I guess.

716
01:08:27,780 --> 01:08:29,900
Yeah, all six of them.

717
01:08:29,900 --> 01:08:31,220
Yeah.

718
01:08:31,220 --> 01:08:33,060
In the exercise session, I guess we

719
01:08:33,060 --> 01:08:41,860
can demonstrate working on how you can modify things.

720
01:08:41,860 --> 01:08:42,380
Oh, OK.

721
01:08:42,380 --> 01:08:44,220
So yeah, if I'm.

722
01:08:44,220 --> 01:08:47,620
Maybe let's wait for it to finish to demonstrate the syncing.

723
01:08:47,620 --> 01:08:48,940
Yeah.

724
01:08:48,940 --> 01:08:53,100
So there's something more to demonstrate with Unix.

725
01:08:53,100 --> 01:08:55,420
And then we can just wait, because it's almost done.

726
01:08:55,420 --> 01:08:57,540
Yeah.

727
01:08:57,540 --> 01:09:00,300
So once it's done, can you delete one file

728
01:09:00,300 --> 01:09:04,500
from the cluster and then modify one file locally?

729
01:09:04,500 --> 01:09:08,620
OK, so in the data folder, we have these files.

730
01:09:08,620 --> 01:09:13,220
I already modified file number 5.

731
01:09:13,220 --> 01:09:17,820
So let's do that.

732
01:09:17,820 --> 01:09:20,540
So I locally modified file number five.

733
01:09:20,540 --> 01:09:24,500
Here I'm on the cluster.

734
01:09:24,500 --> 01:09:26,900
And I have the data unison folder here.

735
01:09:26,900 --> 01:09:28,060
That's the correct one.

736
01:09:28,060 --> 01:09:32,700
So let's delete file number zero.

737
01:09:32,700 --> 01:09:33,500
OK.

738
01:09:33,500 --> 01:09:34,900
OK.

739
01:09:34,900 --> 01:09:36,980
And now I should be able to run it on either side,

740
01:09:36,980 --> 01:09:38,860
I guess, because it's a two-way thing.

741
01:09:38,860 --> 01:09:41,220
But let's do it here.

742
01:09:41,220 --> 01:09:43,060
So now I'm sorry.

743
01:09:43,060 --> 01:09:51,940
on the laptop side here. Now you go back to laptop and it notices it's deleted. Okay, I'll press F

744
01:09:54,980 --> 01:10:04,180
and there's a change. Number five has changed so accept and then Y. Oh, I need to press Y. Okay

745
01:10:04,180 --> 01:10:06,820
Okay, and there it goes.

746
01:10:06,820 --> 01:10:08,780
Yeah, it's all done.

747
01:10:08,780 --> 01:10:11,380
Yeah, so Unison is pretty cool.

748
01:10:12,420 --> 01:10:15,580
But I guess that for the afternoon,

749
01:10:15,580 --> 01:10:16,800
if people wanna try this,

750
01:10:16,800 --> 01:10:19,140
we will be there in the Zoom to help them.

751
01:10:20,020 --> 01:10:23,260
Maybe we still have nine minutes before the break.

752
01:10:23,260 --> 01:10:26,500
I was thinking that it would be nice to continue

753
01:10:26,500 --> 01:10:28,140
and stay on this data section

754
01:10:28,140 --> 01:10:32,980
to at least mention git-annex that is there in the material.

755
01:10:32,980 --> 01:10:35,100
We will not have time to demo it,

756
01:10:35,100 --> 01:10:40,100
but I really like the mounting data from place to place,

757
01:10:40,140 --> 01:10:42,820
which in practice is SSHFS.

758
01:10:42,820 --> 01:10:44,980
So we still have eight minutes.

759
01:10:44,980 --> 01:10:47,740
[name] and [name], would you like to continue

760
01:10:47,740 --> 01:10:49,020
and wrap up this section?

761
01:10:49,020 --> 01:10:49,940
And then later-

762
01:10:49,940 --> 01:10:50,940
Yes. We continue.

763
01:10:50,940 --> 01:10:51,780
Sounds good.

764
01:10:51,780 --> 01:10:55,500
Maybe I'll switch to my screen to talk about git-annex.

765
01:10:55,500 --> 01:10:57,180
Okay.

766
01:10:57,180 --> 01:11:01,180
So git-annex is a tool

767
01:11:02,980 --> 01:11:17,900
So, it uses git, obviously, but it allows you to track large files.

768
01:11:17,900 --> 01:11:25,700
So it doesn't check the large files into git, but only remembers the metadata about things.

769
01:11:25,700 --> 01:11:31,660
And then it allows you to move these files separate from all the git history.

770
01:11:31,660 --> 01:11:40,240
So maybe I won't show the whole demo because it's here, but basically I have this repository

771
01:11:40,240 --> 01:11:43,180
called video processing.

772
01:11:43,180 --> 01:11:50,480
If I went in here and ran git annex list ttt4hpc, it shows all these files.

773
01:11:50,480 --> 01:11:53,780
So notice there's a raw file here.

774
01:11:53,780 --> 01:11:57,940
And so that's a folder name in the video processing.

775
01:11:57,940 --> 01:11:58,940
Correct.

776
01:11:58,940 --> 01:11:59,940
Yes.

777
01:11:59,940 --> 01:12:00,940
Yeah.

778
01:12:00,940 --> 01:12:06,740
And here we see git annex has tracked, these are all the large files, and they are all

779
01:12:06,740 --> 01:12:10,740
on here, which is my desktop.

780
01:12:10,740 --> 01:12:21,260
They're also all on Triton, which is the cluster, and the output files are in Allas, which is

781
01:12:21,260 --> 01:12:27,420
the web, the object storage.

782
01:12:27,420 --> 01:12:32,740
So this allows us to have a git repository with all the videos and people to help with

783
01:12:32,740 --> 01:12:44,620
processing them, but the data itself is stored only on places designed for big data.

784
01:12:44,620 --> 01:12:49,900
There's some advanced stuff you can do here, exercises if you want, but we didn't really

785
01:12:49,900 --> 01:12:55,820
intend to talk about this because it can take its whole other lesson.

786
01:12:55,820 --> 01:12:56,820
Okay.

787
01:12:56,820 --> 01:13:04,900
So I guess the really cool thing here is that you can version control everything like in

788
01:13:04,900 --> 01:13:10,260
Git and use Git commands here, but then just download one file at a time so you don't need

789
01:13:10,260 --> 01:13:12,100
to have all of them.

790
01:13:12,100 --> 01:13:15,420
So it's very easy to get the data file that you need.

791
01:13:15,420 --> 01:13:16,420
Yeah.

792
01:13:16,420 --> 01:13:23,500
And the biggest comparison with Git LFS, Git LFS has one place you can store the files.

793
01:13:23,500 --> 01:13:31,180
So the metaphor I use is Git LFS is made by GitHub, so with Git LFS you can only store

794
01:13:31,180 --> 01:13:38,260
the large files in one place, which is GitHub, while Git Annex is truly distributed.

795
01:13:38,260 --> 01:13:42,220
And it's a lot more complicated, but that's because there's this whole other layer of

796
01:13:42,220 --> 01:13:49,440
understanding where all the big files are, and giving rules for storing some files in

797
01:13:49,440 --> 01:13:58,440
some places but not other places and so on. Which is really appropriate for the big scientific

798
01:13:58,440 --> 01:14:05,360
data concept. But my recommendation is if you want to use this, come talk to someone

799
01:14:05,360 --> 01:14:10,560
that's used it. If you're at Alto, well, that would be me, and we'll help you get set up

800
01:14:10,560 --> 01:14:15,240
because it can be confusing otherwise.

801
01:14:15,240 --> 01:14:16,440
OK, should we go on?

802
01:14:23,360 --> 01:14:26,080
OK, I will scroll on down.

803
01:14:26,080 --> 01:14:29,040
So mounting data from place to place, which is SSHFS.

804
01:14:32,280 --> 01:14:35,640
OK, OK, should I do the demonstration?

805
01:14:35,640 --> 01:14:38,840
Yeah, I'll switch back to [name]'s screen.

806
01:14:38,840 --> 01:14:46,040
Okay, so I'm really essentially staying on the laptop side here. Let's do pwd again.

807
01:14:48,360 --> 01:14:54,520
Maybe I want to mount the entire web dataset folder so that I can access the project.

808
01:14:55,080 --> 01:15:02,600
So can you clear your screen so we can be sure? Yeah. Okay, so I'm currently in my

809
01:15:03,240 --> 01:15:07,080
local copy of the web dataset folder, but I want to navigate out of it.

810
01:15:07,080 --> 01:15:23,640
it and create a new folder. This will be the web dataset folder on the cluster. And it's

811
01:15:23,640 --> 01:15:34,320
obviously empty. So what do I do to get it to actually have the data from the Triton

812
01:15:34,320 --> 01:15:45,680
folder. Should I just go on my side or do you want to? Yeah, so to do the mount the command

813
01:15:45,680 --> 01:15:52,720
on Linux is sshfs. Yeah, okay. And then it's the source and the destination.

814
01:15:53,600 --> 01:15:55,040
Okay, this is the other way around.

815
01:15:55,040 --> 01:16:01,040
compared to the previous two commands.

816
01:16:01,040 --> 01:16:05,040
But it's still the source and destination.

817
01:16:05,040 --> 01:16:09,040
So it's going from...

818
01:16:09,040 --> 01:16:13,040
Oh, right. It is. The source is now on Triton

819
01:16:13,040 --> 01:16:16,040
and the destination is the laptop.

820
01:16:16,040 --> 01:16:19,040
The meaning of source and destination are backwards.

821
01:16:19,040 --> 01:16:21,040
Okay.

822
01:16:21,040 --> 01:16:31,120
Made it clear, so sorry, let me get the path to the folder.

823
01:16:31,120 --> 01:16:32,840
OK.

824
01:16:32,840 --> 01:16:38,920
So it's the cluster name, and then colon path to the folder,

825
01:16:38,920 --> 01:16:42,000
and then the local folder name.

826
01:16:42,000 --> 01:16:43,960
And the local folder now needs to be empty

827
01:16:43,960 --> 01:16:45,400
because it's a mount point.

828
01:16:45,400 --> 01:16:46,760
Yes.

829
01:16:46,760 --> 01:16:47,260
OK.

830
01:16:47,260 --> 01:16:48,120
OK.

831
01:16:48,120 --> 01:16:50,120
So here we go.

832
01:16:50,120 --> 01:16:54,240
And that was fast because no data is being transferred.

833
01:16:54,240 --> 01:16:58,720
It did an SSH connection, but not much more than that.

834
01:16:58,720 --> 01:17:05,960
So now we can list and list the files in the WebData Triton, and it actually contains files.

835
01:17:05,960 --> 01:17:07,420
So that's nice.

836
01:17:07,420 --> 01:17:11,480
So what you're seeing here is actually on the cluster.

837
01:17:11,480 --> 01:17:12,480
Every time you list...

838
01:17:12,480 --> 01:17:16,000
So we have the unison folder here.

839
01:17:16,000 --> 01:17:18,160
So every time you list this directory,

840
01:17:18,160 --> 01:17:20,400
it's actually listing on the cluster

841
01:17:20,400 --> 01:17:23,880
and transferring the results back to you.

842
01:17:23,880 --> 01:17:26,200
Any time you open a file, then it's

843
01:17:26,200 --> 01:17:31,520
also opening on the cluster and transferring it back to you.

844
01:17:31,520 --> 01:17:34,680
Yeah, it is pretty fast.

845
01:17:34,680 --> 01:17:37,400
It really works almost like it's local.

846
01:17:39,960 --> 01:17:42,480
OK, so yeah, this is also nice.

847
01:17:42,480 --> 01:17:44,240
All the data is now in one place,

848
01:17:44,240 --> 01:17:46,840
but I can edit them locally on my laptop.

849
01:17:46,840 --> 01:17:48,480
Yeah.

850
01:17:48,480 --> 01:17:52,400
And this is good when you need to open and quickly browse

851
01:17:52,400 --> 01:17:53,800
small files.

852
01:17:53,800 --> 01:17:56,160
Like say you're opening up images that

853
01:17:56,160 --> 01:17:57,920
plot that you're making.

854
01:17:57,920 --> 01:18:00,440
But it's not good for opening big data

855
01:18:00,440 --> 01:18:03,360
because if you opened a 1 gigabyte file,

856
01:18:03,360 --> 01:18:06,400
it would have to transfer that whole 1 gigabyte file

857
01:18:06,400 --> 01:18:08,560
before it opened on your side.

858
01:18:08,560 --> 01:18:11,440
And that would probably be a little bit slow.

859
01:18:11,440 --> 01:18:14,320
anything bigger, well, it gets even slower.

860
01:18:16,960 --> 01:18:21,760
But I can run any program that I have on my laptop with the data in these files.

861
01:18:25,360 --> 01:18:33,840
And I can unmount it so that I don't, oops, I can unmount it so that I don't break my file system

862
01:18:33,840 --> 01:18:47,120
when if I disconnect from the internet yeah okay okay so um yeah and that's basically

863
01:18:48,480 --> 01:18:57,680
the summary here should we look at any any good questions we've got I'll switch to the notes

864
01:18:57,680 --> 01:19:02,760
Well, there were good questions in the notes document.

865
01:19:02,760 --> 01:19:04,960
Most of them were already answered.

866
01:19:04,960 --> 01:19:10,760
Maybe we could have a break now, 10 minutes, and then eventually consider some of the questions

867
01:19:10,760 --> 01:19:11,760
that we received.

868
01:19:11,760 --> 01:19:12,760
That's good.

869
01:19:12,760 --> 01:19:17,820
So keep on writing questions, exactly.

870
01:19:17,820 --> 01:19:22,720
And we can be back in the stream at 10 past the hour.

871
01:19:22,720 --> 01:19:25,360
Yeah, there's good stuff here.

872
01:19:25,360 --> 01:19:26,360
Okay.

873
01:19:26,360 --> 01:19:27,360
See you later.

874
01:19:27,360 --> 01:19:28,360
Bye team.

875
01:19:28,360 --> 01:19:29,360
Bye.

876
01:19:29,360 --> 01:19:31,360
Bye.

877
01:19:57,360 --> 01:19:59,420
you

878
01:20:27,360 --> 01:20:29,420
you

879
01:20:57,360 --> 01:20:59,420
you

880
01:21:27,360 --> 01:21:29,420
you

881
01:21:57,360 --> 01:21:59,420
you

882
01:22:27,360 --> 01:22:29,420
you

883
01:22:57,360 --> 01:22:59,420
you

884
01:23:27,360 --> 01:23:29,420
you

885
01:23:57,360 --> 01:23:59,420
you

886
01:24:27,360 --> 01:24:29,420
you

887
01:24:57,360 --> 01:24:59,420
you

888
01:25:27,360 --> 01:25:29,420
you

889
01:25:57,360 --> 01:25:59,420
you

890
01:26:27,360 --> 01:26:29,420
you

891
01:26:57,360 --> 01:26:59,420
you

892
01:27:27,360 --> 01:27:29,420
you

893
01:27:57,360 --> 01:27:59,420
you

894
01:28:27,360 --> 01:28:29,420
you

895
01:28:57,360 --> 01:29:22,560
Hey, welcome back.

896
01:29:22,560 --> 01:29:25,480
So we are a little bit behind on schedule.

897
01:29:25,480 --> 01:29:30,240
Should we take a quick moment to look at the questions though or just get back to them

898
01:29:30,240 --> 01:29:31,880
at the end?

899
01:29:31,880 --> 01:29:36,320
I've been answering many through the break.

900
01:29:36,320 --> 01:29:38,680
I think we can go on.

901
01:29:38,680 --> 01:29:40,880
Okay, let's move on.

902
01:29:40,880 --> 01:29:49,640
So the next section here is code sync and the main thing here to talk about, so I will

903
01:29:49,640 --> 01:29:57,720
skip the demo, but the main thing to talk about is why is code different or when is code different?

904
01:29:58,440 --> 01:30:06,120
And the main point that you already mentioned in the motivation is that code changes quickly

905
01:30:06,120 --> 01:30:14,040
and has different versions. So, if you have a code base that you've been using for a while

906
01:30:14,040 --> 01:30:19,800
that the whole group is using then there's probably multiple branches and if you have

907
01:30:19,800 --> 01:30:28,000
one shared repository on the cluster then you can't just go and do git branch my stuff

908
01:30:28,000 --> 01:30:31,720
because everybody else will see the same change.

909
01:30:31,720 --> 01:30:41,360
So you want to give multiple copies for each person and some global repository where all

910
01:30:41,360 --> 01:30:50,240
of the different versions exist at the same time. You probably also have different environments,

911
01:30:50,240 --> 01:30:57,220
different prerequisites or different requirements for all of these versions. That's why a lot

912
01:30:57,220 --> 01:31:02,840
of the time just the things we did with the data just are syncing it from one place to

913
01:31:02,840 --> 01:31:13,400
another place doesn't really work. Unison works okay, but Git does the same job better.

914
01:31:13,400 --> 01:31:18,840
If you use Unison, you can have a cluster branch and a laptop branch. You just have

915
01:31:18,840 --> 01:31:24,400
one set of files reflected on both sides, and it will get confused if you change the

916
01:31:24,400 --> 01:31:30,600
the branch, it will be moving a lot of files back and forth.

917
01:31:30,600 --> 01:31:38,200
So what I do to develop code on the cluster, SSH, I should mention, SSHFS works quite well.

918
01:31:38,200 --> 01:31:42,720
So you can just use your local editor to edit the code on the cluster.

919
01:31:42,720 --> 01:31:47,480
But I have often an unreliable internet connection or had in the past or had some bad experiences

920
01:31:47,480 --> 01:31:53,080
with it, just kind of freezing the disk or the file system.

921
01:31:53,080 --> 01:32:00,840
ways around that, but it's a bit of a pain. So what I do is not the best thing, is to just have

922
01:32:00,840 --> 01:32:11,400
one repository online. In this case, we have the examples repository in GitHub, and you can have

923
01:32:12,920 --> 01:32:18,920
one version on the cluster, one Git repository on the cluster for yourself, one on your laptop

924
01:32:18,920 --> 01:32:27,480
for yourself and one that's in this case on GitHub that's for everybody and then you make

925
01:32:27,480 --> 01:32:32,840
your changes on the laptop, you commit and push and then you go to the cluster and you

926
01:32:32,840 --> 01:32:38,400
pull and then you run whatever you need to run the cluster.

927
01:32:38,400 --> 01:32:42,920
Maybe you can come up with a better way of doing it, but it works.

928
01:32:42,920 --> 01:32:50,520
make sure that it's always up to date on in the main version. And it is a convenient way

929
01:32:50,520 --> 01:32:57,560
of transferring stuff between multiple different systems. So that's my workflow.

930
01:32:58,440 --> 01:33:07,320
Yeah. Okay. So do you ever get to a place where you need to edit more frequently and

931
01:33:07,320 --> 01:33:15,440
and you don't want to have to commit, push, pull, and rerun?

932
01:33:15,440 --> 01:33:19,280
I do often make small changes on the cluster

933
01:33:19,280 --> 01:33:24,040
that I then have to remember to commit and push.

934
01:33:24,040 --> 01:33:30,120
Then just using some text editor that may be SSHFS,

935
01:33:30,120 --> 01:33:31,560
maybe some of the graphical things

936
01:33:31,560 --> 01:33:34,040
that we will show later, but mostly just Vim.

937
01:33:34,040 --> 01:33:35,480
And I'm not very good at Vim.

938
01:33:35,480 --> 01:33:38,800
So, I mean, there are people who use Vim as the main editor,

939
01:33:38,800 --> 01:33:40,360
but I'm not very good at it.

940
01:33:40,360 --> 01:33:44,240
So, I only do it for very small changes.

941
01:33:46,640 --> 01:33:48,360
So, yeah, I mean, it is perfectly fine

942
01:33:48,360 --> 01:33:50,620
to do editing on the cluster.

943
01:33:50,620 --> 01:33:53,640
And I think kind of the main part of this section

944
01:33:53,640 --> 01:33:55,480
is about editing on the cluster

945
01:33:56,920 --> 01:34:00,160
and not doing it on the laptop.

946
01:34:00,160 --> 01:34:04,360
So, but this is one good way.

947
01:34:04,360 --> 01:34:11,560
It has the big upside that you can have multiple different versions and you always keep the

948
01:34:12,360 --> 01:34:16,200
main version up to date. All of your branches are always getting pushed

949
01:34:16,920 --> 01:34:20,360
to the main repository and pulled from there.

950
01:34:23,560 --> 01:34:31,400
But should we move on to what I think is a better way? There is the demonstration there

951
01:34:31,400 --> 01:34:39,720
and exercises, you can do those in the exercise session. Not quite there yet, not quite in the

952
01:34:39,720 --> 01:34:47,640
better way yet, but from this one I want to do a demonstration of how to run small-ish

953
01:34:49,800 --> 01:34:59,480
graphical things on the cluster. So I would not necessarily use this for a big text editor

954
01:34:59,480 --> 01:35:06,040
unless i'm moving stuff around sorry unless you have a good internet connection and

955
01:35:08,360 --> 01:35:11,000
all the people who run the cluster recommend doing it this way

956
01:35:11,560 --> 01:35:18,040
but this is good for small like one window looking at the pot and it can be very convenient

957
01:35:18,040 --> 01:35:22,280
when you're doing interactive development on the cluster how often do you use it

958
01:35:22,280 --> 01:35:32,000
When I was doing research, not as a software engineer but also as a researcher, I would

959
01:35:32,000 --> 01:35:36,160
use it very often to look at plots.

960
01:35:36,160 --> 01:35:44,320
Essentially my SSH command was an alias to ssh -X or ssh -X because I would just want to use

961
01:35:44,320 --> 01:35:51,480
GNU plot to run, to look at all of my plots and what is currently happening on the cluster

962
01:35:51,480 --> 01:35:59,000
to look at just the state of the current run by looking at the plot. So yeah, I did use this very

963
01:35:59,000 --> 01:36:05,400
often. So basically throwing up an image viewer or plot viewer was quite useful. Yeah, basically.

964
01:36:06,920 --> 01:36:17,960
Okay, so I will bring up the terminal again. And I just tested that if I run ssh -X

965
01:36:17,960 --> 01:36:28,260
Triton, it will stop echoing the command here, which is expected.

966
01:36:28,260 --> 01:36:29,880
So I will not run the command.

967
01:36:29,880 --> 01:36:33,000
I will switch to here where I've already run the command.

968
01:36:33,000 --> 01:36:34,000
Okay.

969
01:36:34,000 --> 01:36:36,000
So now you're on the cluster.

970
01:36:36,000 --> 01:36:37,000
Yes.

971
01:36:37,000 --> 01:36:44,200
So host name tells me that I'm on Triton, and I'm actually in my home folder now.

972
01:36:44,200 --> 01:36:45,200
Okay.

973
01:36:45,200 --> 01:36:50,800
No, it's not in my home folder, so I need to go to the IO examples.

974
01:36:50,800 --> 01:36:58,680
And here we have this R example, which mainly I want to go to because there's this GNUplot

975
01:36:58,680 --> 01:37:01,680
file plotting script here.

976
01:37:01,680 --> 01:37:11,640
Actually, let's do a really simple demo first, just to check that it's actually able to open

977
01:37:11,640 --> 01:37:13,520
a window.

978
01:37:13,520 --> 01:37:19,040
So everybody should see a pair of eyes looking at my mouse right now over here.

979
01:37:19,040 --> 01:37:23,440
It's not echoing the command, so okay.

980
01:37:23,440 --> 01:37:24,440
That's too bad.

981
01:37:24,440 --> 01:37:25,440
That's okay.

982
01:37:25,440 --> 01:37:36,400
Now I'll have to actually stop this to get back to my terminal.

983
01:37:36,400 --> 01:37:41,440
So the more useful thing to do is, of course, run the GNU plot script.

984
01:37:41,440 --> 01:37:50,960
So I'm looking at this data file that exists for this R example.

985
01:37:50,960 --> 01:38:01,080
It needs a -c. Unrecognized option -c. What did I do wrong?

986
01:38:01,080 --> 01:38:02,080
Sorry.

987
01:38:02,080 --> 01:38:11,080
I do not remember enough about GNUPlot.

988
01:38:11,080 --> 01:38:16,080
Could GNUPlot be different there somehow?

989
01:38:16,080 --> 01:38:26,080
GNU Plot is not a module, it's just normal GNUPlot.

990
01:38:26,080 --> 01:38:39,280
plot. Okay, so I will not do that much debugging here. I don't have a new plot here. Okay,

991
01:38:39,280 --> 01:38:47,840
so I must have run it on this side. So, let's look at the file. Set x11 terminal, set auto

992
01:38:47,840 --> 01:38:50,520
title, that's fine. Okay, plot input.

993
01:38:50,520 --> 01:38:51,520
So that's the only thing.

994
01:38:51,520 --> 01:38:59,040
input file doesn't exist. Sorry. Yes. Okay. And I, in fact, did that on purpose because

995
01:38:59,040 --> 01:39:06,000
one of the demonstrations that we didn't do was modifying this file. So, yes. I need to change

996
01:39:06,000 --> 01:39:14,560
that so that the examples work independent of each other. Okay. So, now we can quickly open a window,

997
01:39:15,600 --> 01:39:19,200
take a look at the data. It's showing some growing numbers.

998
01:39:21,520 --> 01:39:25,160
Everything seems fine. Good.

999
01:39:28,240 --> 01:39:33,240
What this -x option is doing is it's actually running

1000
01:39:33,240 --> 01:39:36,440
the whole thing on the cluster and then sending

1001
01:39:36,440 --> 01:39:41,600
the contents of this window to my laptop which displays it.

1002
01:39:41,600 --> 01:39:45,520
You can imagine if you have anything more complicated

1003
01:39:45,520 --> 01:39:48,080
that has more objects in the view,

1004
01:39:48,080 --> 01:39:56,440
it's going to get unmanageable quickly unless you have a really good internet connection.

1005
01:39:56,440 --> 01:40:02,280
So it does work and if you're locally close to your cluster, then it works really well.

1006
01:40:02,280 --> 01:40:10,440
So compared to modern good internet connections, how good does it have to be to be smooth?

1007
01:40:10,440 --> 01:40:14,600
I'm actually surprised that it's so good on my system now because I don't have a very

1008
01:40:14,600 --> 01:40:20,040
good connection, but it's also a really simple thing. I would just say experiment with it

1009
01:40:20,040 --> 01:40:33,400
if it's something you want to do. What would probably have been better to do is to somehow

1010
01:40:33,400 --> 01:40:41,960
copy this data file to my laptop and then run the script here. If you can instead run

1011
01:40:41,960 --> 01:40:44,840
the thing locally with local data, that's, of course, faster.

1012
01:40:48,120 --> 01:40:56,360
Yeah, but I guess when there's things like remote desktops and so on, those use a different

1013
01:40:56,360 --> 01:41:03,720
protocol, which is much faster. So what you can do, you run the remote desktop at your

1014
01:41:03,720 --> 01:41:09,280
your organization and then you SSH -X from there.

1015
01:41:09,280 --> 01:41:10,840
Let's go back here.

1016
01:41:10,840 --> 01:41:12,520
Oh, that's a good point.

1017
01:41:12,520 --> 01:41:13,920
Yeah. So if you have

1018
01:41:13,920 --> 01:41:17,520
a local desktop thing that has a fast connection to

1019
01:41:17,520 --> 01:41:20,880
your cluster then you can use

1020
01:41:20,880 --> 01:41:25,360
that remote desktop to run SSH -X.

1021
01:41:25,520 --> 01:41:30,120
Another thing that you can take a look at if you have it on

1022
01:41:30,120 --> 01:41:33,360
your cluster is open on-demand or similar,

1023
01:41:33,360 --> 01:41:43,360
CSC has a similar interface and there are predefined apps you can run so for example

1024
01:41:43,360 --> 01:41:52,640
the RStudio app on Triton. So you can run a graphical user interfaces much more efficiently

1025
01:41:52,640 --> 01:42:01,360
with a less good internet connection. So this uses the same protocol basically as

1026
01:42:01,360 --> 01:42:05,360
as a remote desktop would.

1027
01:42:05,360 --> 01:42:08,400
So these days, remote desktops do work quite well.

1028
01:42:08,400 --> 01:42:10,080
I remember when they were always laggy.

1029
01:42:10,080 --> 01:42:14,960
But now, usually, I don't notice much of a difference.

1030
01:42:14,960 --> 01:42:17,960
OK, yeah.

1031
01:42:17,960 --> 01:42:18,460
OK.

1032
01:42:18,460 --> 01:42:19,800
OK.

1033
01:42:19,800 --> 01:42:22,280
So should we move on?

1034
01:42:22,280 --> 01:42:24,520
Yes.

1035
01:42:24,520 --> 01:42:30,760
So the next section is called not graphical interfaces,

1036
01:42:30,760 --> 01:42:32,200
But working interactively.

1037
01:42:32,200 --> 01:42:32,700
Yeah.

1038
01:42:35,400 --> 01:42:39,440
Who should share their screen here?

1039
01:42:39,440 --> 01:42:43,000
So if we continue so that I do the demos,

1040
01:42:43,000 --> 01:42:45,920
is there something you want to say before we go into the demos?

1041
01:42:45,920 --> 01:42:46,720
Yeah, OK.

1042
01:42:46,720 --> 01:42:49,880
Should I display this thing that I'm displaying right now?

1043
01:42:49,880 --> 01:42:51,480
Yes, let's show this.

1044
01:42:51,480 --> 01:42:56,040
So working interactively from the command line.

1045
01:42:56,040 --> 01:43:05,320
So these are just a few tricks that are useful. They're not really that advanced,

1046
01:43:05,320 --> 01:43:15,000
but it's some really good stuff that can put people on the same page. So yeah,

1047
01:43:15,800 --> 01:43:21,800
there's four things we'll talk about here. And the first one is interactive jobs. So if you're

1048
01:43:21,800 --> 01:43:26,840
on the cluster and you have to, and let's say you're like me and you're doing some editing on

1049
01:43:26,840 --> 01:43:34,840
the cluster, you edit your file, you submit the job, you wait maybe a few minutes, you see the

1050
01:43:34,840 --> 01:43:43,000
output, you modify again, you submit again, you wait. This is really slow. It slows your development

1051
01:43:43,000 --> 01:43:49,800
down quite a bit. So there actually is a better way to do things and that's called interactive jobs

1052
01:43:49,800 --> 01:44:01,780
jobs, where instead of submitting your main program as a batch job, you request the resources

1053
01:44:01,780 --> 01:44:10,900
you need as a shell, and then you run the job yourself on the cluster.

1054
01:44:10,900 --> 01:44:12,500
So what do you like to show?

1055
01:44:12,500 --> 01:44:16,300
Yes, okay, so I will mount this.

1056
01:44:16,300 --> 01:44:19,980
I don't know if other people, other clusters teach this.

1057
01:44:19,980 --> 01:44:24,100
At our cluster, we actually teach interactive jobs first,

1058
01:44:24,100 --> 01:44:28,260
partly to show just one thing at a time.

1059
01:44:31,340 --> 01:44:35,780
Sorry, I'm in the background doing a setup.

1060
01:44:35,780 --> 01:44:38,180
Yeah.

1061
01:44:38,180 --> 01:44:39,420
OK, here we go.

1062
01:44:42,180 --> 01:44:44,020
So we're on the screen.

1063
01:44:44,020 --> 01:44:58,500
So [name] can run srun, --pty, srun, this, and then bash.

1064
01:45:01,220 --> 01:45:05,700
And note that different clusters may have different ways of getting interactive jobs.

1065
01:45:05,700 --> 01:45:12,020
Actually, on our cluster, you can also do sinteractive, and there's a dedicated

1066
01:45:12,020 --> 01:45:16,340
interactive partition, but this is the simple way that can give you the same

1067
01:45:16,340 --> 01:45:24,140
resources as anywhere else. So, if [name] pushes enter, hopefully there is a

1068
01:45:24,140 --> 01:45:29,020
little bit of time. Ah, and now we've got a shell.

1069
01:45:29,020 --> 01:45:32,780
And the echoing to command is just not working.

1070
01:45:32,780 --> 01:45:34,380
Okay, yeah.

1071
01:45:34,380 --> 01:45:40,100
Okay. Right, so where are we now?

1072
01:45:40,100 --> 01:45:47,240
So, here we are on hostname, so we're actually on one of the compute nodes.

1073
01:45:47,240 --> 01:45:55,060
And if we had requested, say, five processors and a bunch of memory, we'd have that same

1074
01:45:55,060 --> 01:45:57,540
amount of resources here.

1075
01:45:57,540 --> 01:46:05,540
So basically, in a really short loop, we could go and run the job, see if it works or doesn't

1076
01:46:05,540 --> 01:46:12,500
do an edit, and run the job directly without any additional queuing, which for me when debugging

1077
01:46:12,500 --> 01:46:18,580
things like crashes and so on that happen really quickly, this is really useful.

1078
01:46:22,500 --> 01:46:24,900
How often do you use these?

1079
01:46:27,300 --> 01:46:32,580
I mean, I just said that sometimes I use Vim to develop small changes in the cluster. Whenever

1080
01:46:32,580 --> 01:46:36,140
or I'm doing that, I'm actually in an interactive job.

1081
01:46:36,140 --> 01:46:37,860
So you start the interactive job

1082
01:46:37,860 --> 01:46:42,300
and then you run Vim, the editor inside of the job.

1083
01:46:42,300 --> 01:46:43,140
Yeah.

1084
01:46:43,140 --> 01:46:43,960
Okay, yeah.

1085
01:46:43,960 --> 01:46:46,660
Also, basically whenever I need to develop something

1086
01:46:46,660 --> 01:46:47,780
that runs on a GPU,

1087
01:46:47,780 --> 01:46:51,500
because that's how we have access to GPUs mostly,

1088
01:46:51,500 --> 01:46:52,660
or at least I have,

1089
01:46:52,660 --> 01:46:55,260
it's the easiest way for me to get access to a GPU.

1090
01:46:56,220 --> 01:46:58,600
And it is usually for the cluster anyway.

1091
01:46:59,520 --> 01:47:00,360
That's the end.

1092
01:47:00,360 --> 01:47:04,360
The end result is that it should run on the cluster.

1093
01:47:04,360 --> 01:47:09,040
So what are some of the problems here, and what can go wrong?

1094
01:47:09,040 --> 01:47:10,760
When would you not want to use this?

1095
01:47:10,760 --> 01:47:15,040
Or put another way, would we combine this with...

1096
01:47:15,040 --> 01:47:17,800
No, actually, that's later.

1097
01:47:17,800 --> 01:47:20,360
When would we not want to use this?

1098
01:47:20,360 --> 01:47:29,800
So I guess the biggest downside from the point of view of the cluster is that I'm now taking

1099
01:47:29,800 --> 01:47:36,680
a resource. It's only one CPU right now, so that's fine. But if I'm taking a whole GPU

1100
01:47:37,880 --> 01:47:44,760
and if it's one of the newer ones, it's mostly idling while I'm changing the code.

1101
01:47:46,600 --> 01:47:54,280
So I guess if you are taking a GPU anyway, whether it's on your laptop or on the cluster,

1102
01:47:54,280 --> 01:48:01,740
then you are taking one, but if you are taking a new really expensive GPU and just keeping

1103
01:48:01,740 --> 01:48:07,080
it reserved without running anything on it, that's a bit of a waste.

1104
01:48:07,080 --> 01:48:13,120
The same goes for having an interactive job with a thousand cores or something, like if

1105
01:48:13,120 --> 01:48:20,520
you take a really big part of the cluster for an interactive thing, and it's just mostly

1106
01:48:20,520 --> 01:48:26,440
running idle while you're editing some text file, some editing the code, then that's not really good.

1107
01:48:26,440 --> 01:48:32,120
So I guess don't take a huge amount of resources and do this, but take enough for testing.

1108
01:48:32,120 --> 01:48:37,640
Yeah. Okay. So it's a balance. Like if you want to test in a realistic environment,

1109
01:48:38,600 --> 01:48:43,480
and you can make some quick changes to fix some bugs, but if you're starting to make,

1110
01:48:44,360 --> 01:48:49,720
actually rewrite some code, then maybe don't do it in an interactive job.

1111
01:48:49,720 --> 01:48:55,640
or they have a smaller one at least. The other thing is you do need to queue.

1112
01:48:56,280 --> 01:49:01,640
So I don't use the cluster for big jobs. I use it for development for the cluster. So

1113
01:49:03,320 --> 01:49:08,120
I never queue for all that long. But if you're actually doing research and running big

1114
01:49:08,120 --> 01:49:11,640
computational workflows, maybe you need to stick in the queue for quite a while

1115
01:49:12,600 --> 01:49:15,960
to get the interactive job, get the resources you need.

1116
01:49:15,960 --> 01:49:19,960
Especially if you need a few GPUs.

1117
01:49:19,960 --> 01:49:23,960
Okay.

1118
01:49:23,960 --> 01:49:27,960
So there's a good question in the notes.

1119
01:49:27,960 --> 01:49:31,960
If we get disconnected from the interactive session, can we get it back?

1120
01:49:31,960 --> 01:49:35,960
And that's actually what we'll show next.

1121
01:49:35,960 --> 01:49:39,960
So there's two programs called Screen and Tmux.

1122
01:49:39,960 --> 01:49:43,960
Maybe more. But this is exactly what it lets you do.

1123
01:49:43,960 --> 01:49:50,840
log into the cluster. Can we stop the interactive job? Yeah, I will log out from the interactive job.

1124
01:49:51,800 --> 01:49:57,800
And now you're on the cluster itself. Can you do hostname? Okay, so on the cluster.

1125
01:49:59,800 --> 01:50:09,000
Can you start? Do you prefer screen or tmux? I usually use screen because I've used it before,

1126
01:50:09,000 --> 01:50:15,640
but if I had a good opportunity, I would like to learn tmux.

1127
01:50:15,640 --> 01:50:16,640
Yeah.

1128
01:50:16,640 --> 01:50:17,640
So let's start.

1129
01:50:17,640 --> 01:50:19,120
Well, let's do what you know.

1130
01:50:19,120 --> 01:50:20,120
Let's start screen.

1131
01:50:20,120 --> 01:50:21,120
Okay.

1132
01:50:21,120 --> 01:50:26,580
And if we run this, now it looks like there's a new terminal.

1133
01:50:26,580 --> 01:50:29,360
So this is running inside of screen.

1134
01:50:29,360 --> 01:50:32,720
If we type hostname, we're still there.

1135
01:50:32,720 --> 01:50:34,200
And we're still in my home folder.

1136
01:50:34,200 --> 01:50:35,200
Yeah.

1137
01:50:35,200 --> 01:50:36,200
Okay.

1138
01:50:36,200 --> 01:50:37,200
Do you want to run like...

1139
01:50:37,200 --> 01:50:38,200
So what's different?

1140
01:50:38,200 --> 01:50:40,200
date command.

1141
01:50:40,200 --> 01:50:42,200
Date?

1142
01:50:42,200 --> 01:50:44,200
Yeah.

1143
01:50:44,200 --> 01:50:46,200
Okay.

1144
01:50:46,200 --> 01:50:48,200
So, we see this. So, what's different

1145
01:50:48,200 --> 01:50:50,200
is since we're inside of screen, we can

1146
01:50:50,200 --> 01:50:52,200
detach. So, if [name] does

1147
01:50:52,200 --> 01:50:54,200
Ctrl-A and the D key,

1148
01:50:54,200 --> 01:50:56,200
now

1149
01:50:56,200 --> 01:50:58,200
look, it says detached

1150
01:50:58,200 --> 01:51:00,200
from this computer.

1151
01:51:00,200 --> 01:51:06,200
Now, [name] can log out from the cluster.

1152
01:51:06,200 --> 01:51:07,200
Okay.

1153
01:51:07,200 --> 01:51:08,200
Okay.

1154
01:51:08,200 --> 01:51:09,200
No doubt.

1155
01:51:09,200 --> 01:51:12,200
And can we log in again?

1156
01:51:12,200 --> 01:51:13,200
Okay.

1157
01:51:13,200 --> 01:51:14,200
Let's just do this.

1158
01:51:14,200 --> 01:51:15,200
Okay.

1159
01:51:15,200 --> 01:51:16,200
So here we are.

1160
01:51:16,200 --> 01:51:20,200
Now, everything's blue because of this.

1161
01:51:20,200 --> 01:51:21,200
It's fine.

1162
01:51:21,200 --> 01:51:22,200
That's okay.

1163
01:51:22,200 --> 01:51:23,200
I think.

1164
01:51:23,200 --> 01:51:26,200
Can we do screen -ls?

1165
01:51:26,200 --> 01:51:29,200
-ls

1166
01:51:29,200 --> 01:51:30,200
Yeah.

1167
01:51:30,200 --> 01:51:33,200
Let's list what's going there.

1168
01:51:33,200 --> 01:51:42,680
And we see there's one detached screen session, so if we do screen -x, or there's other things,

1169
01:51:42,680 --> 01:51:52,440
I always do -x, then here we are, we've restored.

1170
01:51:52,440 --> 01:52:00,880
And this is really cool, because you can leave stuff running, leave your editor open, leave

1171
01:52:00,880 --> 01:52:07,280
several windows of stuff going and come back to it. But when do we not want to do this?

1172
01:52:13,520 --> 01:52:18,720
I can't really think of much. It is for leaving stuff running in case you get

1173
01:52:18,720 --> 01:52:23,120
disconnected for example. So if there's something you don't want to leave running.

1174
01:52:24,800 --> 01:52:30,160
Would you want to start some interactive jobs and leave them running for a long time this way?

1175
01:52:30,880 --> 01:52:34,800
Well, that's the same, like, you are then just taking resources.

1176
01:52:35,760 --> 01:52:41,520
Fortunately, you probably can't get an interactive job for weeks at a time,

1177
01:52:41,520 --> 01:52:46,400
but I don't know what's the limit. You can get it for quite a few hours.

1178
01:52:47,520 --> 01:52:49,680
It's probably not a good idea to leave it running.

1179
01:52:50,480 --> 01:52:57,280
Yeah, because then if the login node crashes or something goes down, has to be rebooted,

1180
01:52:57,280 --> 01:53:12,240
you lose your job. So that's the most important things from here. We should, or should we show,

1181
01:53:13,520 --> 01:53:20,560
have you ever used the Python debugger from the command line interface? Yes, we do need

1182
01:53:20,560 --> 01:53:27,520
some Python code for it. Yeah. Do you want to, okay, so there is a specific example I guess

1183
01:53:27,520 --> 01:53:40,400
that you have in mind. Yeah, but I'm thinking, um, maybe we should go on to the next part.

1184
01:53:41,040 --> 01:53:49,280
This can be read. Let's, yeah. So this is, um, also left as an exercise. Yes. Yeah.

1185
01:53:50,560 --> 01:53:56,480
Okay, so next up, um, should we check the notes quickly while

1186
01:53:58,000 --> 01:54:08,000
[name] is getting ready? Yes, okay. Oh, you mean the... yes. Yeah, so there's some good questions

1187
01:54:08,000 --> 01:54:14,080
here. This comment of screen tmux being absolutely one of the most important things

1188
01:54:14,080 --> 01:54:24,120
learning with Linux, I would basically agree with that. So it is really useful.

1189
01:54:24,120 --> 01:54:35,720
And I usually run it on the login node itself because that means that if your

1190
01:54:35,720 --> 01:54:41,520
connection to the login node gets lost, it stays open. And I can, for example, move

1191
01:54:41,520 --> 01:54:48,520
from home, move to home, and then resume it, and so on.

1192
01:54:48,520 --> 01:54:51,360
OK.

1193
01:54:51,360 --> 01:54:58,520
So one thing is that I want to either say for the first time

1194
01:54:58,520 --> 01:55:00,720
or reiterate properly.

1195
01:55:00,720 --> 01:55:04,920
So we skipped a bunch of things that you can do as exercises,

1196
01:55:04,920 --> 01:55:07,680
but that's only if that is a workflow that you actually

1197
01:55:07,680 --> 01:55:16,640
want to either just practice or maybe make part of your own workflow, there's a lot

1198
01:55:16,640 --> 01:55:24,280
of ways of doing the same thing here, so it really just depends on your preference.

1199
01:55:24,280 --> 01:55:30,840
We are trying to demonstrate or at least give you some hints about ways you can do things

1200
01:55:30,840 --> 01:55:35,840
or that we do things that might help you.

1201
01:55:35,840 --> 01:55:39,840
So the idea is not to do all the exercises

1202
01:55:39,840 --> 01:55:41,840
or do all of the demos yourself.

1203
01:55:41,840 --> 01:55:44,840
The idea is to see what can make your workflow better.

1204
01:55:44,840 --> 01:55:47,840
I guess we are ready for the next part.

1205
01:55:47,840 --> 01:55:51,840
Yeah, so...

1206
01:55:51,840 --> 01:55:53,840
[name], hi.

1207
01:55:53,840 --> 01:55:55,840
So [name]'s here for the last part

1208
01:55:55,840 --> 01:55:57,840
to tell us about VS Code.

1209
01:55:57,840 --> 01:56:03,200
Can I share my screen?

1210
01:56:03,200 --> 01:56:05,480
Yes, please do.

1211
01:56:05,480 --> 01:56:10,440
So I will grab it from [name], sorry for that, and I should go with the portion of the screen

1212
01:56:10,440 --> 01:56:12,440
as we discussed, right?

1213
01:56:12,440 --> 01:56:13,440
Yes.

1214
01:56:13,440 --> 01:56:14,440
Okay.

1215
01:56:14,440 --> 01:56:15,440
So...

1216
01:56:15,440 --> 01:56:20,440
Can you see it now?

1217
01:56:20,440 --> 01:56:25,380
Yes, and I will switch to this.

1218
01:56:25,380 --> 01:56:30,060
So why are we learning about VS Code here?

1219
01:56:30,060 --> 01:56:33,500
Why are we talking about it?

1220
01:56:33,500 --> 01:56:36,060
So when we are talking about project development,

1221
01:56:36,060 --> 01:56:38,500
I would say there are two approaches that you can do.

1222
01:56:38,500 --> 01:56:40,740
There are local versions that we discussed today

1223
01:56:40,740 --> 01:56:43,620
that you usually keep track of your project locally

1224
01:56:43,620 --> 01:56:46,460
and do occasional bit pool and git push

1225
01:56:46,460 --> 01:56:49,100
or transfer it with rsync and everything.

1226
01:56:49,100 --> 01:56:52,860
And also you can do completely remote development,

1227
01:56:52,860 --> 01:56:54,660
as we're discussing with the terminal.

1228
01:56:54,660 --> 01:57:00,080
And, uh, VS Code is like more of like a second approach, but it has

1229
01:57:00,080 --> 01:57:02,680
a nice UI and it's also open source.

1230
01:57:02,900 --> 01:57:04,400
So we don't have to worry about that.

1231
01:57:05,000 --> 01:57:07,800
And, um, yeah, it's like very easy and nice to use.

1232
01:57:09,280 --> 01:57:13,040
Um, although like the rsync and code sync and data sync that we've

1233
01:57:13,040 --> 01:57:18,160
discussed is a very good way to go, but it adds a bit of overhead to your

1234
01:57:18,160 --> 01:57:24,160
full workflow and VS Code can reduce that overhead and so you can focus on

1235
01:57:24,160 --> 01:57:26,320
your project development, I would say.

1236
01:57:26,320 --> 01:57:27,720
Yeah.

1237
01:57:27,720 --> 01:57:31,160
Once we were thinking, this was several years ago,

1238
01:57:31,160 --> 01:57:34,920
about how to improve user interfaces for the cluster.

1239
01:57:34,920 --> 01:57:37,960
And we realized with VS Code, you

1240
01:57:37,960 --> 01:57:41,600
can connect to the cluster by SSH,

1241
01:57:41,600 --> 01:57:44,560
which handles some of the SSH complexity for you,

1242
01:57:44,560 --> 01:57:45,960
puts it in one place.

1243
01:57:45,960 --> 01:57:50,200
That can give you the terminal to submit jobs.

1244
01:57:50,200 --> 01:57:53,880
It can give you the editor to edit jobs.

1245
01:57:53,880 --> 01:57:58,600
it can let you transfer files up and down relatively easily.

1246
01:57:58,600 --> 01:58:01,040
And this was amazing.

1247
01:58:01,040 --> 01:58:03,960
We've been thinking, how do we have an easier

1248
01:58:03,960 --> 01:58:05,200
interface for the cluster?

1249
01:58:05,200 --> 01:58:07,600
And it was right here in front of us.

1250
01:58:07,600 --> 01:58:09,000
Yeah.

1251
01:58:09,000 --> 01:58:11,760
Although we are not like, although in this session

1252
01:58:11,760 --> 01:58:13,400
we are talking about VS Code, but I

1253
01:58:13,400 --> 01:58:15,840
would say it's true about most of the IDEs

1254
01:58:15,840 --> 01:58:18,120
if you are using PyCharm or JetBrains,

1255
01:58:18,120 --> 01:58:19,320
the workflow is the same.

1256
01:58:19,320 --> 01:58:22,640
And usually all of the features that we're discussing here

1257
01:58:22,640 --> 01:58:25,440
or almost the same in other IDs as well.

1258
01:58:25,440 --> 01:58:29,520
So other IDs can also do the remote SSH connection?

1259
01:58:29,520 --> 01:58:33,080
At least with PyCharm and I guess JetBrains I have tried,

1260
01:58:33,080 --> 01:58:35,400
and yeah, it's mostly the same.

1261
01:58:35,400 --> 01:58:37,040
OK, cool.

1262
01:58:37,040 --> 01:58:38,800
That's good to know.

1263
01:58:38,800 --> 01:58:39,480
Yeah.

1264
01:58:39,480 --> 01:58:43,080
OK, so what can we demonstrate first?

1265
01:58:43,080 --> 01:58:47,760
So here, as you can see, I have my local VS code.

1266
01:58:47,760 --> 01:58:49,960
It's running on my local computer.

1267
01:58:49,960 --> 01:58:55,640
and when you want to get connected to a remote server you have to have this

1268
01:58:55,640 --> 01:59:01,560
extension which is coming with the vs code but if for some reason it's not you have to go to the

1269
01:59:01,560 --> 01:59:09,240
app store and search for something like ssh remote okay and install the plugin which is the

1270
01:59:10,120 --> 01:59:15,880
like open ssh extension for the vs code if you are using another ide it would be pretty much the

1271
01:59:15,880 --> 01:59:24,040
same but at least for PyCharm I know it's coming with the icon. Once you have it installed you can

1272
01:59:24,040 --> 01:59:32,760
see this blue button on the left bottom side. Also you have this remote explorer icon here

1273
01:59:33,480 --> 01:59:39,560
and both of them can be used to get connected to a remote host. If you click on here it would

1274
01:59:39,560 --> 01:59:44,920
remember all of the hosts that you have been connected to and also the most recent folders

1275
01:59:44,920 --> 01:59:51,000
that you have been connected in that specific host. So, for example, unlike Triton, our local

1276
01:59:51,000 --> 01:59:57,640
HPC on Aalto, I have been connected to the folder I created for this course and other

1277
01:59:57,640 --> 02:00:03,400
folders for other projects that I had. Okay, that's actually new to me. I didn't know of that tab.

1278
02:00:04,760 --> 02:00:09,240
Okay, so that lists things, and then you click somewhere.

1279
02:00:09,240 --> 02:00:15,320
Yeah, you can go, and for example, if I click here, it would connect to Triton and then

1280
02:00:15,320 --> 02:00:21,200
go to that specific folder, but maybe it would be better for demonstration to go from the

1281
02:00:21,200 --> 02:00:22,200
beginning.

1282
02:00:22,200 --> 02:00:23,200
Right, yes.

1283
02:00:23,200 --> 02:00:27,760
So let's say you don't have any host previously, so you would click on this guy, and you have

1284
02:00:27,760 --> 02:00:33,080
two options to connect to a new host, which would open it on a new window, or you can

1285
02:00:33,080 --> 02:00:38,760
connect to a host with the current window and it would list all of the hosts in

1286
02:00:38,760 --> 02:00:45,120
your ssh-config file which is located usually on your home folder and so these

1287
02:00:45,120 --> 02:00:51,280
these are the same things in your .ssh/config file so it uses it, opens it

1288
02:00:51,280 --> 02:01:02,200
and yeah so if I go to my local file you can see that yeah so it's the same exact

1289
02:01:02,200 --> 02:01:09,160
configuration from my ssh config file yeah yeah so you can add new configuration here as well

1290
02:01:09,160 --> 02:01:15,160
by by putting the address and also in the username unfortunately you cannot add with ssh key so if

1291
02:01:15,160 --> 02:01:21,560
you want to do with ssh key and like put the identity file in the configure as well you have to

1292
02:01:22,200 --> 02:01:28,840
manually change the config file but the good thing is if you click on the configuration of

1293
02:01:28,840 --> 02:01:34,920
ssh host and select the file you can easily do it inside the vscode so you don't need another

1294
02:01:34,920 --> 02:01:42,920
editor. So the adding the ssh adding an ssh host does that automatically add a new entry to the

1295
02:01:42,920 --> 02:01:52,200
file? Yes, but you cannot add it with ssh key it's just the username and also the address.

1296
02:01:52,200 --> 02:01:57,480
Yeah. That's also new to me. Okay. So let's get connected to Triton.

1297
02:01:59,960 --> 02:02:07,720
So this is doing an ssh to Triton and ssh-config expands that to triton.alto.v,

1298
02:02:07,720 --> 02:02:14,920
which is our cluster. Yeah. At the moment, in our cluster, it would complain about a very old

1299
02:02:14,920 --> 02:02:21,720
OS that we have. It would be removed. You don't see this pop up if you have a newer OS on your

1300
02:02:21,720 --> 02:02:28,040
a cluster but it's only a security alert so it doesn't affect any of the functionalities.

1301
02:02:28,040 --> 02:02:35,320
Okay. I can go ahead and click allow. So as you can see here on the left, the SSH button here,

1302
02:02:35,320 --> 02:02:42,200
we are connected to Triton and I can go ahead and open a terminal. So anything we do here,

1303
02:02:42,920 --> 02:02:49,320
open directories, whatever, it's actually opening on the cluster side. Exactly. So the VS Code is

1304
02:02:49,320 --> 02:02:54,920
running on my computer, but everything I put down on the terminal and everything I see on the

1305
02:02:56,120 --> 02:03:02,040
window is actually running on the login node on the server. On the terminal if I go with hostname

1306
02:03:02,040 --> 02:03:07,160
you can see I'm on the login node already. So even opening the terminal is sending it to the

1307
02:03:07,160 --> 02:03:16,280
other side automatically? Exactly. Okay, and if you open a directory then? Yeah, I can go ahead

1308
02:03:16,280 --> 02:03:22,840
and open a directory. For example, the one that I created. As you can see, it's already the file

1309
02:03:22,840 --> 02:03:30,920
explorer for Triton. So, I will go... Okay. This is Triton. Yeah. Yeah. This is completely Triton,

1310
02:03:30,920 --> 02:03:38,520
as you can see. And I can go and click okay. And again, for the security, just about the git and

1311
02:03:38,520 --> 02:03:47,800
nothing. So now I'm again inside Triton and I'm inside the folder that I had

1312
02:03:47,800 --> 02:03:53,720
for this specific course and session. And is everything the same?

1313
02:03:55,560 --> 02:04:02,600
What do you mean? Like it's the same VS Code, same interface, is there anything different?

1314
02:04:02,600 --> 02:04:06,760
Exactly. No, yeah, but and yeah, it's the same VS Code. It's still

1315
02:04:06,760 --> 02:04:11,560
running locally on my computer and now with the remote explorer I have this folder.

1316
02:04:12,200 --> 02:04:15,880
So the next time that I want to get connected to this specific folder,

1317
02:04:15,880 --> 02:04:19,160
I don't have to get connected to Triton first and then go to File Explorer.

1318
02:04:21,160 --> 02:04:25,240
So this File Explorer is very nice because you can list all of the things. You can

1319
02:04:25,240 --> 02:04:31,400
create a new file here. For example, I can create something here or I can create a folder.

1320
02:04:31,400 --> 02:04:39,480
Another interesting thing is you can do drag and drop from your local computer to here.

1321
02:04:39,480 --> 02:04:42,520
For example, I can upload a file very easily.

1322
02:04:42,520 --> 02:04:45,520
You will see [name] with a cat.

1323
02:04:45,520 --> 02:04:47,520
Is that from another course?

1324
02:04:47,520 --> 02:04:49,520
Parallelization, yeah.

1325
02:04:49,520 --> 02:04:50,520
Yeah.

1326
02:04:50,520 --> 02:04:54,520
So that's what you are missing some days here.

1327
02:04:54,520 --> 02:04:55,520
Yeah.

1328
02:04:55,520 --> 02:04:56,520
Okay.

1329
02:04:56,520 --> 02:04:57,520
Anyway.

1330
02:04:57,520 --> 02:05:03,440
Unfortunately, the drag-and-drop from VS Code to your local machine doesn't work, but you

1331
02:05:03,440 --> 02:05:12,600
can go and right-click and then click download, so it would download it to your local computer.

1332
02:05:12,600 --> 02:05:18,100
The nice thing is it also understands the folder hierarchy, so if you download a folder,

1333
02:05:18,100 --> 02:05:22,000
it would create a folder on your local machine and then download all of the things inside

1334
02:05:22,000 --> 02:05:24,520
it, which is nice.

1335
02:05:24,520 --> 02:05:25,520
Yeah.

1336
02:05:25,520 --> 02:05:26,520
Yeah.

1337
02:05:26,520 --> 02:05:32,680
Okay, so what happens if the network connection stops or dies?

1338
02:05:32,680 --> 02:05:36,680
Like, do you lose your work or is this persistent to any health?

1339
02:05:39,480 --> 02:05:45,880
So it would try to get you reconnected and try to keep everything cached and saved.

1340
02:05:46,600 --> 02:05:50,520
So if you're in the middle of editing code and you didn't save it,

1341
02:05:50,520 --> 02:05:56,120
it would remember the latest changes almost instantly.

1342
02:05:56,120 --> 02:06:02,840
so I would say if you don't close the application completely, it would save all of the caches and

1343
02:06:02,840 --> 02:06:07,880
if you lost your connection, your changes are still there, but you have to get a connection

1344
02:06:07,880 --> 02:06:19,960
again so it would be synced. Okay. So if you reconnect, does it resume where you were or just

1345
02:06:19,960 --> 02:06:31,960
If you lose your connection, it would try to get connected to the same exact window with the same exact setup, like the files open and folder.

1346
02:06:31,960 --> 02:06:35,960
Is this even the case if you close your laptop and go home, for example?

1347
02:06:35,960 --> 02:06:43,960
Exactly. But if you close the VS Code, you would lose all of the changes that you had made, unless you have saved it on the cluster.

1348
02:06:43,960 --> 02:06:47,960
I guess that's pretty similar to any other editor.

1349
02:06:47,960 --> 02:06:57,240
Yeah. Okay. Got it. Cool. So now let's say you have like a project and you want to do

1350
02:06:57,880 --> 02:07:04,520
running and like testing and debugging on the cluster. Okay. Yeah. So of course you can go ahead

1351
02:07:04,520 --> 02:07:10,680
and try to run it here but the problem is it would be running it on local node and repo would

1352
02:07:10,680 --> 02:07:17,400
send an email that you're running something on the plugin node. Because it's a shared resource

1353
02:07:17,400 --> 02:07:24,200
it's not recommended to do any computational heavy tasks on the login node.

1354
02:07:24,200 --> 02:07:32,360
Also, this specific program, like estimating the pi, is very, it's not computationally heavy,

1355
02:07:32,360 --> 02:07:35,400
so you can, I guess, run it, but it's not recommended.

1356
02:07:35,400 --> 02:07:39,560
So I would show you how you can run it on the cluster.

1357
02:07:39,560 --> 02:07:43,800
For sure, you can go and open a new terminal, as you can see,

1358
02:07:43,800 --> 02:07:47,600
and try to, for example, run it with S run.

1359
02:07:47,600 --> 02:07:52,600
For example, I need 10 minutes of time.

1360
02:07:54,280 --> 02:07:59,280
And like, yeah, I need one gigabyte of memory.

1361
02:07:59,320 --> 02:08:01,320
And I would run the application.

1362
02:08:06,040 --> 02:08:09,760
And it also has a mandatory argument here for estimation.

1363
02:08:09,760 --> 02:08:12,460
For example, like let's say 10,000 iteration.

1364
02:08:13,800 --> 02:08:24,600
Oh, yeah, it should be helpful here, yeah.

1365
02:08:24,600 --> 02:08:26,240
So it's like a normal terminal.

1366
02:08:26,240 --> 02:08:35,880
It would try to dedicate the resources and run it and show me the results.

1367
02:08:35,880 --> 02:08:43,760
I wasn't in the same folder, I guess, or there was a mistake with, oh, yeah.

1368
02:08:43,760 --> 02:08:58,760
Yeah, so now the results are out there, but as you can see, I calculated the pi wrong.

1369
02:08:58,760 --> 02:09:06,160
So obviously there is a bug in my code, and let's say I want to do a debug.

1370
02:09:06,160 --> 02:09:13,120
So the best rule of practice, the best rule of thumb is to try to see what is the interactive

1371
02:09:13,120 --> 02:09:18,560
sessions on your local HPC or what are the partitions that are dedicated for testing,

1372
02:09:18,560 --> 02:09:24,640
because you can do it on normal computational nodes as well, but you are wasting the resources.

1373
02:09:24,640 --> 02:09:31,200
For example, if you are getting one hour of time for debugging, like on a GPU node in our cluster,

1374
02:09:32,000 --> 02:09:39,920
Triton, one single GPU would be dedicated to you, but sometimes in like GPU test partitions or

1375
02:09:39,920 --> 02:09:48,160
interactive partitions, these kind of resources are shared, so there is less space for resources.

1376
02:09:49,440 --> 02:09:58,560
So if I go, for example, with slurm, I can see that we have like a debug partition here,

1377
02:09:58,560 --> 02:10:04,720
we have interactive session partition, we have GPU short and I guess GPU test as well,

1378
02:10:04,720 --> 02:10:10,640
that you can do the testing. It's like dedicated for these ones. Also, usually there is a limitation

1379
02:10:10,640 --> 02:10:17,760
for time in these kind of partitions, so your job would be almost instantly get in the queue and

1380
02:10:17,760 --> 02:10:27,200
get executed. So, VS Code has this, like not VS Code, but Microsoft has this

1381
02:10:27,200 --> 02:10:36,320
an open source application for debugging for various languages, including Python that we

1382
02:10:36,320 --> 02:10:39,640
are using, which is called DebugPy.

1383
02:10:39,640 --> 02:10:43,340
And DebugPy is very integrated to VS Code.

1384
02:10:43,340 --> 02:10:47,960
So you can, I guess, use other softwares as well, but I will demonstrate DebugPy here.

1385
02:10:47,960 --> 02:10:48,960
Okay.

1386
02:10:48,960 --> 02:10:52,040
So this is some advanced debugging thing.

1387
02:10:52,040 --> 02:10:55,760
Actually, I've never seen it, so I'm interested.

1388
02:10:55,760 --> 02:11:00,760
I have to install DebugPy, so let me log into like,

1389
02:11:00,880 --> 02:11:04,080
let me activate my, like one of that virtual environment

1390
02:11:04,080 --> 02:11:05,640
I created.

1391
02:11:05,640 --> 02:11:06,480
Yeah.

1392
02:11:07,400 --> 02:11:12,240
For example, let's say this one, I know the name

1393
02:11:12,240 --> 02:11:15,840
and I will try to install DebugPy.

1394
02:11:15,840 --> 02:11:18,320
I think it has been installed in that specific one,

1395
02:11:18,320 --> 02:11:19,200
but let's see.

1396
02:11:22,040 --> 02:11:24,240
Oh yeah, so it has been installed already

1397
02:11:24,240 --> 02:11:29,240
And I can run it to show you how it works, debugpy.

1398
02:11:32,640 --> 02:11:35,680
Yeah, maybe I can close the file explorer

1399
02:11:35,680 --> 02:11:37,600
so it would be easier to see.

1400
02:11:37,600 --> 02:11:41,440
So the debugpy has two options, like listen and connect.

1401
02:11:41,440 --> 02:11:45,240
And you can use it on terminal as well

1402
02:11:45,240 --> 02:11:47,000
if you don't want to use VS Code,

1403
02:11:47,000 --> 02:11:50,160
but here we would use VS Code.

1404
02:11:50,160 --> 02:11:53,560
It also gets a host and a port, like a normal port,

1405
02:11:53,560 --> 02:11:59,320
has a default one and I will explain this option and like there are like some options for logging

1406
02:11:59,320 --> 02:12:06,120
and the PID number for that specific Python application but I will just demonstrate it.

1407
02:12:06,120 --> 02:12:12,600
So the only difference that you have when you want to debug your code the only difference

1408
02:12:14,120 --> 02:12:20,040
when you are calling the program is you have to call it with debug.py and debug.py would go to

1409
02:12:20,040 --> 02:12:27,240
the resources and run the program and open a port that you are specifying here and it starts

1410
02:12:27,240 --> 02:12:33,160
listening to that port. So another DebugPy program that gets connected to that port

1411
02:12:33,160 --> 02:12:42,840
and start debugging the application. So I can go ahead and say I want to do a run on, for example,

1412
02:12:42,840 --> 02:12:50,600
interactive partition. I still need 10 minutes of time.

1413
02:12:55,560 --> 02:13:02,600
For example, one gigabyte of memory. And I will try to run it with debug.py.

1414
02:13:03,880 --> 02:13:09,960
Okay, so use the dash m to say run this module, and then that module runs the py program.

1415
02:13:09,960 --> 02:13:18,360
Exactly. Okay. And the debug pi has this mandatory option for listen for connect and when you want to

1416
02:13:19,240 --> 02:13:24,360
open the debugger from the VS code you should go with the connect option and when you want to

1417
02:13:24,360 --> 02:13:29,240
run the program you should go with listen so the debugger would listen to any upcoming debugger

1418
02:13:29,240 --> 02:13:39,080
attaching. So I would go for listen to any host coming on a specific port. I think the default

1419
02:13:39,080 --> 02:13:45,640
one is five, six, seven, eight, four, five, it's not mandatory, you can change it.

1420
02:13:48,200 --> 02:13:56,200
And yeah, and then I can run the program with, for example, again, ten iterations.

1421
02:13:56,200 --> 02:14:03,000
However, the problem is when I run this, I would get allocated resources and then debug.py would get

1422
02:14:04,040 --> 02:14:07,960
to the program, it would start running and at the same time listening to the board, right?

1423
02:14:07,960 --> 02:14:13,240
The problem is because 10,000 is like a very short iteration and I want to see where is the

1424
02:14:14,040 --> 02:14:23,640
bug in my program. There is another option called rate for client and the debug pi would not do

1425
02:14:23,640 --> 02:14:32,040
anything running the code unless a debugger is attached. So I would go with this option.

1426
02:14:32,040 --> 02:14:43,040
Um, the partition line is okay. Interactive. It's not there. There was a 't'

1427
02:14:46,040 --> 02:14:50,040
There's an extra 't' there.

1428
02:14:50,040 --> 02:14:52,040
Extra t.

1429
02:14:59,040 --> 02:15:01,440
I-N-T-E-R.

1430
02:15:01,440 --> 02:15:04,000
Yeah, I'm trying.

1431
02:15:04,000 --> 02:15:04,500
Yes.

1432
02:15:07,480 --> 02:15:10,040
So now the resources has been allocated,

1433
02:15:10,040 --> 02:15:13,200
and the debug file is opening the port.

1434
02:15:13,200 --> 02:15:16,120
But it's not running anything unless a debugger is

1435
02:15:16,120 --> 02:15:20,480
get attached, because I call it with wait for client.

1436
02:15:20,480 --> 02:15:23,520
So now I can go to the debug tab here,

1437
02:15:23,520 --> 02:15:27,600
and I can go ahead and create a JSON file, which

1438
02:15:27,600 --> 02:15:34,080
is how I want to debug my, like, how to go and get the debugger.

1439
02:15:34,080 --> 02:15:36,680
So you have to take this and tell it how to connect?

1440
02:15:36,680 --> 02:15:37,180
OK.

1441
02:15:37,180 --> 02:15:37,760
Exactly.

1442
02:15:37,760 --> 02:15:42,000
So I would select debugger, and there are many options.

1443
02:15:42,000 --> 02:15:44,640
And one of them is remote attach,

1444
02:15:44,640 --> 02:15:47,480
which means attaching a debugger to a remote run.

1445
02:15:47,480 --> 02:15:48,040
Yeah.

1446
02:15:48,040 --> 02:15:51,480
I would go ahead and it says, like, where is it located,

1447
02:15:51,480 --> 02:15:52,120
as you can see.

1448
02:15:52,120 --> 02:15:52,620
OK.

1449
02:15:52,620 --> 02:15:54,840
So I don't know in which computational node

1450
02:15:54,840 --> 02:15:56,360
it's at the moment located.

1451
02:15:56,360 --> 02:16:03,080
I have to figure that out first. So I can go ahead and open another terminal and see, for example,

1452
02:16:03,080 --> 02:16:11,720
what are my runs. Okay. Yeah. Yeah. And I can see that, uh, in like pe8, uh, the program is running.

1453
02:16:11,720 --> 02:16:17,960
So I would go ahead and say, it's like pe8. What is the port? 5, 6, 7, 8, as we said it.

1454
02:16:18,920 --> 02:16:25,320
And it would create a normal JSON file for me. Uh, but you can like do it manually as well.

1455
02:16:26,360 --> 02:16:31,960
Usually, it's a good idea to change the name because we can have multiple debugger settings.

1456
02:16:31,960 --> 02:16:36,760
I would say, like, remote debugger.

1457
02:16:36,760 --> 02:16:37,480
Okay, yeah.

1458
02:16:39,080 --> 02:16:40,200
Debug attach.

1459
02:16:41,160 --> 02:16:47,480
And you don't need the pass mapping because, yeah, you don't need it, but the other,

1460
02:16:47,480 --> 02:16:51,800
you can see what the other configuration do, but you don't need the pass mapping for this

1461
02:16:52,920 --> 02:16:53,800
specific test.

1462
02:16:53,800 --> 02:16:54,600
Okay, okay.

1463
02:16:54,600 --> 02:17:00,600
So now I have it and I save the JSON file and you can see that I have multiple debuggers and

1464
02:17:00,600 --> 02:17:07,720
the first one is the debugger. I can go ahead and like it creates a breakpoint here in the main

1465
02:17:07,720 --> 02:17:14,680
function and I can go ahead and say like run. So you can see this toolbar is getting blue which

1466
02:17:14,680 --> 02:17:21,240
means I'm getting connected to that one and the program is exactly paused here. So I can go ahead

1467
02:17:21,240 --> 02:17:25,320
and normally go to the next function and create another breakout point.

1468
02:17:25,880 --> 02:17:32,360
So the interesting thing is I'm using UI in my local computer and everything is running and

1469
02:17:32,360 --> 02:17:39,080
executed on the remote server on the computational node. It's like two levels of remote. There's from

1470
02:17:39,080 --> 02:17:45,640
your computer to login node and from login node to the cluster node. Exactly. So you can like watch

1471
02:17:45,640 --> 02:17:55,720
all of the valuables and everything. When you disconnect this, the debugger pie would again

1472
02:17:55,720 --> 02:18:03,480
run it completely and try to give you the result. However, you can again get connected to

1473
02:18:05,800 --> 02:18:11,720
the debugger because still the debugger port is open and until the program is finished,

1474
02:18:11,720 --> 02:18:20,520
you can get connected without an issue. Yeah. Okay. So yeah, let me run it. I know where is the

1475
02:18:20,520 --> 02:18:30,360
bug and the bug is right here so I can go ahead and fix it and run it completely and even save it.

1476
02:18:31,960 --> 02:18:38,760
Excellent. So for those who are able to join over the afternoon session in the Zoom,

1477
02:18:38,760 --> 02:18:44,400
So this is exactly the type of thing that you can try especially if you have never tried

1478
02:18:44,400 --> 02:18:57,480
it before and so we were checking the notes document and we have written there some feedback

1479
02:18:57,480 --> 02:18:58,720
for the day.

1480
02:18:58,720 --> 02:19:04,200
So if you want to specify if this was too slow or too fast or too basic or too advanced

1481
02:19:04,200 --> 02:19:08,200
Please, mark your...

1482
02:19:08,200 --> 02:19:11,200
Anything else to mention, [name]?

1483
02:19:11,200 --> 02:19:23,200
Yeah, I guess for help in doing all these things, so a lot of the exercises are basically doing the same things we've done here,

1484
02:19:23,200 --> 02:19:29,200
with a little bit of extra stuff, come to the exercise session and we can work it out.

1485
02:19:29,200 --> 02:19:41,200
So we resume not in one week, but two weeks from now, because there is a holiday in at least Finland in, well, a week and a day.

1486
02:19:41,200 --> 02:19:48,200
And we're talking about containers then, is that correct?

1487
02:19:48,200 --> 02:19:57,200
Yeah, on the 7th of May will be an episode dedicated to containers and clusters, specifically Apptainer/Singularity.

1488
02:19:57,200 --> 02:19:58,200
Okay.

1489
02:19:58,200 --> 02:20:01,800
Yeah, I mean, this was very useful, hopefully, for many of you.

1490
02:20:01,800 --> 02:20:08,000
Please write down one good thing that you really liked today and also something to improve.

1491
02:20:08,000 --> 02:20:10,240
I guess that's all for us.

1492
02:20:10,240 --> 02:20:13,120
Thank you very much, everyone.

1493
02:20:13,120 --> 02:20:14,760
And see you.

1494
02:20:14,760 --> 02:20:15,760
Yes.

1495
02:20:15,760 --> 02:20:16,760
See you.

1496
02:20:16,760 --> 02:20:17,760
Thanks.

1497
02:20:17,760 --> 02:20:18,760
Later.

1498
02:20:18,760 --> 02:20:19,760
Bye.

1499
02:20:19,760 --> 02:20:20,760
See you.

1500
02:20:20,760 --> 02:20:21,760
Bye.

1501
02:20:21,760 --> 02:20:22,260
Bye.

1502
02:20:27,200 --> 02:20:29,260
you

1503
02:20:57,200 --> 02:20:59,260
you

1504
02:21:27,200 --> 02:21:29,260
you

1505
02:21:57,200 --> 02:21:59,260
you

1506
02:22:27,200 --> 02:22:29,260
you

1507
02:22:57,200 --> 02:22:59,260
you

1508
02:23:27,200 --> 02:23:29,260
you

1509
02:23:57,200 --> 02:23:59,260
you

