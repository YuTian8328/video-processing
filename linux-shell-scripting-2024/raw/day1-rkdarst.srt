1
00:00:00,800 --> 00:00:06,800
Because of the commands they sometimes provide quite long outputs. So what we've done also,

2
00:00:06,800 --> 00:00:13,520
I have another one terminal over here which will automatically output what I'm typing here.

3
00:00:13,520 --> 00:00:19,600
So if I'm typing the command like echo test it will appear over here. You will find it useful

4
00:00:19,600 --> 00:00:26,080
later when the screen will go off and the will be polluted already by the output of the different

5
00:00:26,080 --> 00:00:30,200
and then I will clear the screen somehow of my terminal.

6
00:00:30,200 --> 00:00:34,320
And so you can still look at these commands over here.

7
00:00:34,320 --> 00:00:35,440
That's not it.

8
00:00:35,440 --> 00:00:39,420
I have also done this,

9
00:00:39,420 --> 00:00:43,800
my demo space in my home directory on my local computer

10
00:00:43,800 --> 00:00:48,000
as part of my university page.

11
00:00:48,000 --> 00:00:50,880
So I have on my university page,

12
00:00:51,920 --> 00:00:54,240
directory called shell.

13
00:00:54,240 --> 00:00:56,000
If you go to this HTTPS,

14
00:00:56,000 --> 00:00:59,580
user's auto.fi, my username and shell.

15
00:00:59,580 --> 00:01:04,420
So you should have this link actually over here

16
00:01:04,420 --> 00:01:05,380
on the code refinery.

17
00:01:05,380 --> 00:01:07,900
So you don't need to type it on your own,

18
00:01:07,900 --> 00:01:09,300
just click it over there.

19
00:01:09,300 --> 00:01:11,460
So here you will get first,

20
00:01:11,460 --> 00:01:14,420
here we'll get all the scripts that we will be preparing.

21
00:01:14,420 --> 00:01:17,340
They will be automatically added over here to the webpage.

22
00:01:17,340 --> 00:01:19,580
And then also you will hear the whole,

23
00:01:19,580 --> 00:01:22,280
you will hear, see the whole bash history.

24
00:01:22,280 --> 00:01:24,900
It's easy to take it out from here

25
00:01:24,900 --> 00:01:27,540
and copy-paste it to your own terminal.

26
00:01:29,100 --> 00:01:31,780
Okay, by saying that,

27
00:01:31,780 --> 00:01:33,780
I think I'm pretty much done with it.

28
00:01:37,220 --> 00:01:39,900
So this is a hands-on tutorial.

29
00:01:39,900 --> 00:01:43,740
So my target over here is to be more or less 50-50.

30
00:01:43,740 --> 00:01:46,500
If I'm saying something like for 10 minutes,

31
00:01:46,500 --> 00:01:48,820
then I expect that we will spend 10 minutes

32
00:01:48,820 --> 00:01:50,580
on actually doing something.

33
00:01:50,580 --> 00:01:53,300
So there will be lots of doing over here.

34
00:01:53,300 --> 00:01:54,820
And so it does really make sense

35
00:01:54,820 --> 00:01:56,360
that you have your terminal open

36
00:01:56,360 --> 00:02:01,360
and you have all the setup ready to go.

37
00:02:04,560 --> 00:02:07,040
I think this is pretty much what I had to say

38
00:02:07,040 --> 00:02:10,360
about the initial part.

39
00:02:10,360 --> 00:02:12,360
If any question is left,

40
00:02:12,360 --> 00:02:15,480
then please go and type it over here.

41
00:02:15,480 --> 00:02:17,000
I'm not alone on this course.

42
00:02:17,000 --> 00:02:19,200
I'm the speaking kind of head,

43
00:02:19,200 --> 00:02:23,560
but there will be several of our team guys

44
00:02:24,820 --> 00:02:29,620
helping you and me to answer these questions.

45
00:02:29,620 --> 00:02:31,140
So if you type the question,

46
00:02:31,140 --> 00:02:33,780
be sure there will be someone to reply you

47
00:02:33,780 --> 00:02:35,420
pretty much immediately.

48
00:02:35,420 --> 00:02:40,420
So there will be work done in the background.

49
00:02:40,480 --> 00:02:43,060
But let's get back to the material.

50
00:02:43,060 --> 00:02:46,340
So this Linux shell basics has been given,

51
00:02:46,340 --> 00:02:48,380
as I told you already, in autumn.

52
00:02:48,380 --> 00:02:52,020
So now we will be working on the Linux shell scripting.

53
00:02:52,020 --> 00:02:55,780
The material is quite comprehensive.

54
00:02:55,780 --> 00:02:58,140
This is the one which is online.

55
00:02:58,140 --> 00:03:00,300
I will not read you from the slides.

56
00:03:00,300 --> 00:03:02,340
I don't have actually any slide over here.

57
00:03:02,340 --> 00:03:05,900
I will use its material and everything

58
00:03:05,900 --> 00:03:09,420
what I will be saying, it's more or less somewhere here,

59
00:03:09,420 --> 00:03:13,300
but I don't really follow directly the material itself.

60
00:03:13,300 --> 00:03:17,620
And the exercises which are part of this material

61
00:03:17,620 --> 00:03:21,140
and actually written fully by our team,

62
00:03:21,140 --> 00:03:22,980
they will appear over here.

63
00:03:22,980 --> 00:03:25,860
So I have an example of first exercise

64
00:03:25,860 --> 00:03:29,220
and so that you, when we will come to this,

65
00:03:29,220 --> 00:03:30,900
you will see how it will go for.

66
00:03:31,900 --> 00:03:36,660
Okay, so the first icebreaker and the starter.

67
00:03:36,660 --> 00:03:41,340
So you're told already, if you haven't answered yet

68
00:03:41,340 --> 00:03:43,780
the question, please try to do it also over here.

69
00:03:43,780 --> 00:03:46,980
So that will give us some picture of what we are doing

70
00:03:46,980 --> 00:03:48,840
and who is taking the course.

71
00:03:48,840 --> 00:03:59,480
and let's get your hands dirty. So my first touch will be actually writing the script.

72
00:04:00,600 --> 00:04:06,200
So that's what we are here all together. So my first script will be

73
00:04:09,720 --> 00:04:14,600
let it be the hello bash. But before we go actually for writing the script we have to decide

74
00:04:14,600 --> 00:04:21,480
or you have to decide which editor you will use to write your scripts. So you have a number of

75
00:04:21,480 --> 00:04:27,960
options over here. There is a very popular like Emacs. If you are familiar with the Emacs, go with

76
00:04:27,960 --> 00:04:36,600
it. There is very popular another one EIM. It's also the text editor which is used by many people

77
00:04:36,600 --> 00:04:47,600
on Linux, but both of them and Emacs, let me put it this way, so it's the Emacs and

78
00:04:47,600 --> 00:04:53,040
VIM, they are quite complicated and they require some kind of passion and

79
00:04:53,040 --> 00:04:57,760
experience. So when you are becoming the experienced users of Linux shell, you

80
00:04:57,760 --> 00:05:02,560
will definitely, you will pick up one of them. For less experienced people, we

81
00:05:02,560 --> 00:05:10,080
suggest nano. Let me run it and let me show how it works. I would suggest if you are not really

82
00:05:10,080 --> 00:05:17,120
experienced with any kind of text editor on the Linux shell, then use that one. It will

83
00:05:19,120 --> 00:05:23,680
be the most intuitive, I would say. So when you type here something,

84
00:05:23,680 --> 00:05:36,400
type something and then you want to exit the code then you just press ctrl x it will ask you do you

85
00:05:36,400 --> 00:05:43,360
want to save it yes and then it will ask you where you want to save it and for instance i want to save

86
00:05:43,360 --> 00:05:53,680
it to the hello bash. Okay, and I'm now in my demo space and I've got this hello bash dot shell.

87
00:05:54,880 --> 00:06:02,240
So that's the first script I have created. It's not really a script. I have demonstrated how to

88
00:06:02,240 --> 00:06:10,000
use nano. It's up to you which one do you prefer. I prefer vim and during this course I will use

89
00:06:10,000 --> 00:06:17,600
mostly vim simply because it have it has really good highlightings it has and i'm just way more

90
00:06:17,600 --> 00:06:28,400
experienced with this one so let's try to i will delete this line and then let's try to write your

91
00:06:28,400 --> 00:06:37,840
first script your first script ever will come with this cryptic line what it stands for it's called

92
00:06:37,840 --> 00:06:46,560
the shebang. Shebang is nothing else than what it says to the program which runs it,

93
00:06:47,200 --> 00:06:54,480
which interpreter is supposed to be used. So binbash is the path to the binary

94
00:06:54,480 --> 00:07:04,720
which will run the code which comes after. And this number sign and exclamation mark

95
00:07:04,720 --> 00:07:09,760
is a special two special characters which are widely used on linux especially for the

96
00:07:10,640 --> 00:07:16,320
which are used on linux for the shebang mark so in the same way when you'll be writing some python

97
00:07:16,320 --> 00:07:22,000
script you will be putting this shebang with the usr being python if you will be writing some tcl

98
00:07:22,000 --> 00:07:30,080
or some other something which is just normal text so that will come into use as well in the next

99
00:07:30,080 --> 00:07:37,640
let's actually output something which is the hello bash

100
00:07:38,120 --> 00:07:47,640
let it be even correct way so now I'm done I'm also able to put here

101
00:07:47,640 --> 00:07:52,360
some comment so

102
00:07:52,360 --> 00:08:00,600
let me say that it prints hello bash that's that much you're supposed to know

103
00:08:00,600 --> 00:08:07,800
so then another one about syntax so this is the command this is the shebang

104
00:08:08,440 --> 00:08:14,920
that's the command which comes and which outputs the hello bash and then

105
00:08:14,920 --> 00:08:19,780
Then you can continue the string, for instance,

106
00:08:19,780 --> 00:08:21,180
to another line.

107
00:08:22,100 --> 00:08:26,960
So just put the backslash like this one.

108
00:08:28,300 --> 00:08:30,860
If the line is pretty long and you want to make it

109
00:08:30,860 --> 00:08:33,440
more or less compact and readable, you can use it.

110
00:08:33,440 --> 00:08:34,740
We don't need it right now,

111
00:08:34,740 --> 00:08:37,380
but just this part of the syntax.

112
00:08:37,380 --> 00:08:40,660
And then also the indentation.

113
00:08:40,660 --> 00:08:43,340
If you are a Python user,

114
00:08:43,340 --> 00:08:45,240
so that you know that you need to,

115
00:08:45,240 --> 00:08:47,080
all these strings, especially,

116
00:08:47,080 --> 00:08:51,220
all these blocks, they're supposed to be indented,

117
00:08:51,220 --> 00:08:54,760
but in case of bash, it doesn't really matter.

118
00:08:54,760 --> 00:08:58,780
So you can put another one command over here,

119
00:08:58,780 --> 00:09:03,480
like this, hello bash again.

120
00:09:06,880 --> 00:09:10,240
Okay, type in hello bash again.

121
00:09:10,240 --> 00:09:17,920
and that will be completely okay. You can do it even more compact, you can do it with the

122
00:09:17,920 --> 00:09:24,320
delimiter, it will be also okay. You can do it this way, it will be also okay from the bash syntax

123
00:09:24,320 --> 00:09:30,960
point of view. So bash will not tell you anything about your syntax, about all these lines. So the

124
00:09:30,960 --> 00:09:36,880
empty lines that will not be that will be just omitted as usually

125
00:09:40,160 --> 00:09:45,600
and this is pretty much everything else this pretty much it that you should supposed to know

126
00:09:45,600 --> 00:09:51,520
about the syntax so we will come later to the blocks we will come later to the if statements

127
00:09:51,520 --> 00:09:57,600
and this for loops etc and the other stuff and you will see that the actually i will use

128
00:09:57,600 --> 00:10:02,920
use indentation over there, but it's only for the sake of readability.

129
00:10:02,920 --> 00:10:06,360
So let's try to run the script.

130
00:10:06,360 --> 00:10:13,480
If I do it like this, first command not found.

131
00:10:13,480 --> 00:10:16,760
Okay, so what happens over here?

132
00:10:16,760 --> 00:10:23,520
You can see that actually, from the Linux perspective, you can check out what kind of

133
00:10:23,520 --> 00:10:26,680
permissions this script has.

134
00:10:26,680 --> 00:10:31,560
even if it's the already something with the .shell

135
00:10:31,560 --> 00:10:37,800
actually the .shell is nothing else than just the

136
00:10:38,520 --> 00:10:44,920
extension so extension can be any bash script is not supposed to use .shell

137
00:10:44,920 --> 00:10:49,560
i'm just using .shell because i want to make sure i want to make sure for

138
00:10:49,560 --> 00:10:53,640
myself that i know that that's the shell script and it's written by myself

139
00:10:53,640 --> 00:11:02,040
so but only because it's text it's supposed to be executable this execution bit over here

140
00:11:02,040 --> 00:11:06,760
it's missing so there should be x you remember from the previous course there should be it's

141
00:11:06,760 --> 00:11:13,880
readable it's writable but it's not executable so what first i need to do is i need to change mode

142
00:11:13,880 --> 00:11:23,120
and say that my script is going to be executable hello bash plus X so now you

143
00:11:23,120 --> 00:11:29,480
see I've got this plus X fine it's already executable if I still try to do

144
00:11:29,480 --> 00:11:36,600
it like this hello bash nothing is found

145
00:11:36,600 --> 00:11:48,600
Why? It's because the bash is actually to not pick up your local files by default, so it expects

146
00:11:48,600 --> 00:11:56,440
that your binaries, even including the scripts, they are somewhere in the

147
00:11:56,440 --> 00:12:02,520
directory, so you have to call them explicitly. And calling explicitly saying that I need to put

148
00:12:02,520 --> 00:12:09,080
the path. In my case it's just enough if I put dot and the slash. That means that in current directory

149
00:12:09,960 --> 00:12:18,280
take the hello bash and execute this. So now it has happened. Well, this is our first step.

150
00:12:19,800 --> 00:12:25,480
And now what's next? Next I would like to use the good practice

151
00:12:25,480 --> 00:12:30,480
and create a directory where I will be putting all my stuff

152
00:12:32,060 --> 00:12:35,940
and I'm not only will be keeping all my stuff in there,

153
00:12:35,940 --> 00:12:39,240
I will also make it this way that bash will actually look

154
00:12:39,240 --> 00:12:42,600
at my directory when I want to execute something

155
00:12:42,600 --> 00:12:45,500
and will be executed, the script will be executed

156
00:12:45,500 --> 00:12:47,320
without this dot slash.

157
00:12:47,320 --> 00:12:49,040
So how to do that?

158
00:12:49,040 --> 00:12:54,040
I suggest that you run make dir in your directory

159
00:12:54,040 --> 00:13:01,720
where you have been. We will come to this during the exercise. So I have already

160
00:13:01,720 --> 00:13:07,800
been directory so but when you will need to run it just like this. So I have

161
00:13:07,800 --> 00:13:13,000
already been directory. I have even a couple of scripts over there which

162
00:13:13,000 --> 00:13:21,880
we will be later used. No, just one. But then let me move that bash. No, hello bash

163
00:13:21,880 --> 00:13:29,640
only hello bash over here. So now I have it in bin

164
00:13:30,920 --> 00:13:39,480
and it's not yet enough. So what next I need to do? I need to modify

165
00:13:39,480 --> 00:13:47,720
the environment variable called path. So if you look at the echo path

166
00:13:47,720 --> 00:13:53,160
there should be some directories where your bash will be looking at

167
00:13:53,880 --> 00:13:59,400
to find the binary that you are trying to run. So even the bash itself

168
00:14:00,440 --> 00:14:04,440
it's somewhere in the directory. So in our case it's bin-bash.

169
00:14:07,640 --> 00:14:12,280
But you see that this bin-bash has been already added by default.

170
00:14:12,280 --> 00:14:21,560
so it's already part of the default, so it's bash user, bin bash etc, so it's part of the default

171
00:14:21,560 --> 00:14:32,360
and it's always there, but our local bin has never been added to the path. Path is modifiable,

172
00:14:32,360 --> 00:14:39,240
so you can edit this and let me do it this way, so I can use the command export,

173
00:14:39,240 --> 00:14:47,720
so now don't go deeply into this just type just you will just use it as is when we are

174
00:14:47,720 --> 00:14:56,440
we'll be doing the exercise export and I will say that export my path and do the changes

175
00:14:57,240 --> 00:15:04,360
so add to my path something which is called demo space

176
00:15:04,360 --> 00:15:17,000
pin. What will happen after? Let's see. If I take a look at the bash at the path once again you will

177
00:15:17,000 --> 00:15:25,000
see that actually my directory where I have my scripts has been added to that path and now it's

178
00:15:25,000 --> 00:15:33,000
executable. Now if I run something like hello bash it will immediately be executed as next

179
00:15:33,000 --> 00:15:44,440
and I can tell you even more this command type minus a this the utility within the Linux which

180
00:15:44,440 --> 00:15:51,400
can always ready to tell you which binary will be run when you type with with no absolute path

181
00:15:52,360 --> 00:15:57,080
so in this case it tells me exactly that hello bash is like this

182
00:15:57,080 --> 00:16:08,520
Okay, then what else I was about to tell you.

183
00:16:08,520 --> 00:16:18,480
So the execution summary, kind of executive summary is that you create the file, you make

184
00:16:18,480 --> 00:16:25,280
sure that shebang is there, then you don't really care much about syntax, that's a takeaway

185
00:16:25,280 --> 00:16:30,440
message then if case that should be enough already to get you running but

186
00:16:30,440 --> 00:16:38,880
then in case if you want to be efficient and productive so you will organize your

187
00:16:38,880 --> 00:16:45,800
own pin directory and you will add it and export later to the path variable so

188
00:16:45,800 --> 00:16:55,200
that information should be pretty much enough to go for the exercise to go for

189
00:16:55,200 --> 00:16:57,920
exercise

190
00:16:59,200 --> 00:17:06,240
let it be first exercise because you are still will be playing with the

191
00:17:06,240 --> 00:17:11,360
editor so let us say that it's going to be 10 minutes

192
00:17:11,360 --> 00:17:19,520
yeah and now it's 12 22 so that we will go till

193
00:17:19,520 --> 00:17:23,280
till till till where was the exercise down

194
00:17:23,280 --> 00:17:32,320
we will go the first exercise to 32 of your local time so i put here xx because i'm

195
00:17:33,200 --> 00:17:37,920
expected some people are not from finland so some people are from somewhere else so it's not

196
00:17:39,040 --> 00:17:48,160
uh no sorry the vice versa 30 or let it be three so now it's your time you try it

197
00:17:48,160 --> 00:17:55,320
you may succeed, you may not, not a big trouble, just ask your question online

198
00:17:55,320 --> 00:18:03,240
and when you are done please put something like this over here or if you

199
00:18:03,240 --> 00:18:10,020
see that it's come, time is coming, so press it over here like this or if you

200
00:18:10,020 --> 00:18:17,560
still don't really care, you're just listening, write it over here. Okay, so not

201
00:18:17,560 --> 00:18:21,720
10 minutes is yours and let's go

202
00:18:31,880 --> 00:18:45,720
I'll mute myself for a second

203
00:18:47,560 --> 00:18:49,620
you

204
00:19:17,560 --> 00:19:19,620
you

205
00:19:47,560 --> 00:19:49,620
you

206
00:20:17,560 --> 00:20:19,620
you

207
00:20:47,560 --> 00:20:49,620
you

208
00:21:17,560 --> 00:21:19,620
you

209
00:21:47,560 --> 00:21:49,620
you

210
00:22:17,560 --> 00:22:19,620
you

211
00:22:47,560 --> 00:22:49,620
you

212
00:23:17,560 --> 00:23:19,620
you

213
00:23:47,560 --> 00:23:49,620
you

214
00:24:17,560 --> 00:24:19,620
you

215
00:24:47,560 --> 00:24:49,620
you

216
00:25:17,560 --> 00:25:19,620
you

217
00:25:47,560 --> 00:25:49,620
you

218
00:26:17,560 --> 00:26:19,620
you

219
00:26:47,560 --> 00:27:13,160
If anyone still needs time, just mark it.

220
00:27:13,160 --> 00:27:16,160
I think we can, we are still adapting this.

221
00:27:16,160 --> 00:27:25,440
be I think 10 or even 15 minutes is just fine. It's just we need to see that what's the level of the

222
00:27:27,600 --> 00:27:34,800
and how fast we are. We are flexible, no trouble with the extra five minutes at all.

223
00:27:36,000 --> 00:27:42,960
And also I forgot to tell about the breaks. Thanks for reminding me is that we're going

224
00:27:42,960 --> 00:27:49,040
to have the breaks every hour, something like 10 minutes, so no worries about that too

225
00:27:55,520 --> 00:28:01,680
Even though I speak a lot and I'm trying to do it intensive, so it's kind of still intermediate

226
00:28:12,960 --> 00:28:18,560
Okay, I guess most of the people. I will continue. Can you hear me?

227
00:28:20,800 --> 00:28:23,440
Hopefully yes. I mean if you can't hear me

228
00:28:25,760 --> 00:28:32,320
then just tell me. Okay, so the first exercise has been already done, has been already over,

229
00:28:32,320 --> 00:28:38,480
so your hands are already dirty, which is good for me and good for you. So welcome to the world

230
00:28:38,480 --> 00:28:41,680
of the bash, even though that some of you have already written some scripts.

231
00:28:42,400 --> 00:28:51,680
Actually, even this hello world is not so practical, but let me write another script.

232
00:28:51,680 --> 00:28:58,080
Let me go back to the prompt. So if you are a Python user, for instance, then you may think,

233
00:28:58,080 --> 00:29:05,120
okay, I'm writing Python and I have a kind of sandbox where you can test it easily with just

234
00:29:05,120 --> 00:29:08,080
write in the command and then for instance you do something

235
00:29:13,760 --> 00:29:21,760
like that and you just quite yeah that's fairly easy and you can think about how to do that with

236
00:29:21,760 --> 00:29:28,560
the bash well you're already actually there so this command line that you have it is already the

237
00:29:28,560 --> 00:29:33,080
the kind of ready-to-go prompt for you.

238
00:29:33,080 --> 00:29:34,320
You don't need to put bash,

239
00:29:34,320 --> 00:29:35,760
you don't need to put anything else.

240
00:29:35,760 --> 00:29:38,200
You just put your comments and everything what you want

241
00:29:38,200 --> 00:29:40,200
you can put over here.

242
00:29:40,200 --> 00:29:42,000
So in this way,

243
00:29:42,000 --> 00:29:46,960
bash is adapted for the interactive usage.

244
00:29:46,960 --> 00:29:51,880
So scripting is just the kind of fancy addition

245
00:29:51,880 --> 00:29:54,120
and the kind of value added to the bash,

246
00:29:54,120 --> 00:29:57,360
but bash itself is mostly about prompt.

247
00:29:57,360 --> 00:30:00,820
and most of the commands you can run as is

248
00:30:00,820 --> 00:30:02,160
just from the prompt.

249
00:30:02,160 --> 00:30:05,720
And this is what we will use also over here.

250
00:30:05,720 --> 00:30:09,400
So some of the statements, some of the expressions,

251
00:30:09,400 --> 00:30:11,580
I will just test it from the command line

252
00:30:11,580 --> 00:30:16,580
before actually adding them to the script.

253
00:30:16,800 --> 00:30:20,160
So scripts are made mostly for a sake of automation.

254
00:30:20,160 --> 00:30:23,280
Scripts are made mostly for a sake of

255
00:30:23,280 --> 00:30:25,120
if you have a long list of commands,

256
00:30:25,120 --> 00:30:27,120
you don't remember all these parameters

257
00:30:27,120 --> 00:30:31,600
and you want to make out of this complex construct

258
00:30:31,600 --> 00:30:34,920
of some utilities, you want to make out of them

259
00:30:34,920 --> 00:30:36,840
some kind of one single command.

260
00:30:36,840 --> 00:30:39,320
So this is what for you are using the scripts.

261
00:30:42,040 --> 00:30:45,080
Again, and see that for instance,

262
00:30:45,080 --> 00:30:46,760
one example that I will show you.

263
00:30:46,760 --> 00:30:50,400
So for instance, I will be doing this archive

264
00:30:50,400 --> 00:30:52,800
in time to time of my demo space

265
00:30:52,800 --> 00:30:57,600
and saying that I want to compress it

266
00:30:57,600 --> 00:31:02,600
and my file name, which I want to my archive name

267
00:31:07,760 --> 00:31:11,240
will be like demo space tarc.gz.

268
00:31:11,240 --> 00:31:14,840
So it's the quite common in Linux,

269
00:31:14,840 --> 00:31:18,000
tarc utility and the gz compression.

270
00:31:18,000 --> 00:31:20,900
And then I'm saying that actually my directory,

271
00:31:20,900 --> 00:31:28,180
I want to compress, that's the demo space. So I can just put one single dot, but for the sake of

272
00:31:28,180 --> 00:31:35,780
readability, let me put it this way, demo space. So I'm doing the compression. So these are warnings,

273
00:31:35,780 --> 00:31:44,580
the edges, you can skip them. So now you see that I have got the file over here. I'm not exactly kind

274
00:31:44,580 --> 00:31:48,620
kind of, I'm not exactly,

275
00:31:51,900 --> 00:31:53,380
it's my colleague over here.

276
00:31:53,380 --> 00:31:58,380
So I'm not exactly, maybe wants to do it time to time.

277
00:31:58,580 --> 00:32:01,180
So what I want to make over here,

278
00:32:01,180 --> 00:32:03,500
that I want to put it to the bin

279
00:32:04,540 --> 00:32:06,940
and make it one single command,

280
00:32:06,940 --> 00:32:09,660
shorter one and easier to one,

281
00:32:09,660 --> 00:32:13,380
and which will serve us for the whole course.

282
00:32:13,380 --> 00:32:15,820
So we will do the modification to that.

283
00:32:15,820 --> 00:32:20,820
So let me call it tar me, for instance.

284
00:32:22,380 --> 00:32:25,620
My shell script will be starting once again

285
00:32:25,620 --> 00:32:29,120
with the bin bash, with the shebang.

286
00:32:29,980 --> 00:32:33,020
And then I'm putting here my command over here.

287
00:32:33,020 --> 00:32:35,180
And as a good practice,

288
00:32:35,180 --> 00:32:38,220
remember to have some kind of comments

289
00:32:38,220 --> 00:32:41,500
and some kind of revision history.

290
00:32:41,500 --> 00:32:43,580
so what you've done and when you have done.

291
00:32:43,580 --> 00:32:48,580
So I'm saying yet nothing you about the Git over here,

292
00:32:50,500 --> 00:32:55,500
but I'm encouraging you in your entire life after all,

293
00:32:55,860 --> 00:32:59,580
use Git for a kind of versioning.

294
00:32:59,580 --> 00:33:02,060
Here, we'll just skip this part

295
00:33:02,060 --> 00:33:07,060
and make it kind of more simple,

296
00:33:07,660 --> 00:33:09,980
and the Git part will be covered already

297
00:33:09,980 --> 00:33:16,220
the code refinery when you will be there so but here

298
00:33:17,580 --> 00:33:24,860
archive my directory so that's the easy way

299
00:33:24,860 --> 00:33:28,940
and then let's try once again change mode plus

300
00:33:28,940 --> 00:33:34,300
x and what's good about this because the

301
00:33:34,300 --> 00:33:40,780
If you put tar.me.shell, you will see that actually it's immediately found from

302
00:33:40,780 --> 00:33:44,140
my Bean directory because my Bean directory has been already added to the

303
00:33:44,140 --> 00:33:49,740
path and I don't need to do anything else if I decide to go and make another

304
00:33:49,740 --> 00:34:00,540
archive. I just run tar.me and that's it. We will use this further to develop a

305
00:34:00,540 --> 00:34:05,500
bigger script. So, this will be part of our exercises, it will be part of our

306
00:34:05,500 --> 00:34:12,620
demonstrations overall. So, this is why I did this right over here.

307
00:34:12,620 --> 00:34:22,780
Variables. So, definitely what you want to know about when you start

308
00:34:22,780 --> 00:34:26,620
programming something, how to use the variables within your code. So, the

309
00:34:26,620 --> 00:34:30,140
Variables is nothing really specific.

310
00:34:30,140 --> 00:34:35,140
So let me start doing this in the prompt

311
00:34:35,760 --> 00:34:38,980
and then we will move these variables to the file.

312
00:34:38,980 --> 00:34:41,360
So variables, it can be any.

313
00:34:43,320 --> 00:34:48,320
It can be just the letters and digits

314
00:34:48,840 --> 00:34:52,920
and then minus, it could be hash.

315
00:34:52,920 --> 00:34:55,560
So there is quite a number of the,

316
00:34:55,560 --> 00:34:57,680
There is some special characters,

317
00:34:57,680 --> 00:35:01,680
if you go to the variables section of this material,

318
00:35:06,720 --> 00:35:09,560
so you will see there were somewhere

319
00:35:10,640 --> 00:35:12,080
a list of special characters.

320
00:35:12,080 --> 00:35:14,320
Yeah, sure, it's here, it's coordinate substitution.

321
00:35:14,320 --> 00:35:17,840
So these characters cannot be really used in the variables

322
00:35:17,840 --> 00:35:21,600
because they are part of the other syntax,

323
00:35:21,600 --> 00:35:24,760
but then everything else can be used as a variable.

324
00:35:24,760 --> 00:35:29,480
so let's see what else so variables

325
00:35:32,200 --> 00:35:38,600
for instance assigning the variables you just put the equal sign and say my first

326
00:35:39,720 --> 00:35:47,720
bash variable it will be like this it's already there so in order to call that variable it's

327
00:35:47,720 --> 00:35:54,440
enough if you put the dollar sign in the front of the name and so you can see echo will give

328
00:35:54,440 --> 00:35:56,480
give you the output of that variable.

329
00:35:56,480 --> 00:36:00,900
In the same way, you can use this dollar sign variable name

330
00:36:00,900 --> 00:36:05,080
within any commands or within any part of your script.

331
00:36:05,080 --> 00:36:06,480
It's just will be a colon

332
00:36:06,480 --> 00:36:10,800
and it will be returning you the value of that variable.

333
00:36:10,800 --> 00:36:12,840
Variable, there is no kind of definition.

334
00:36:12,840 --> 00:36:14,280
There is no points.

335
00:36:14,280 --> 00:36:19,280
There is no strings, booleans, integers, et cetera.

336
00:36:19,960 --> 00:36:23,320
So all the variables inside of the bash,

337
00:36:23,320 --> 00:36:28,440
will be used as is. If you are doing this up as a string, that will be interpreted as a string.

338
00:36:28,440 --> 00:36:34,760
If you are doing something else, it will be. If you make an integer summation within the

339
00:36:34,760 --> 00:36:42,200
integer expressions, then it will be interpreted as an integer, etc. So bash is really flexible

340
00:36:42,200 --> 00:36:47,880
in terms of variables. So even if you are not defined it, but you still call it, it will just

341
00:36:47,880 --> 00:36:54,680
return you the empty variable and not the error so be careful about this and this is actually quite

342
00:36:54,680 --> 00:37:00,200
common error is that you are misprinting or mistyping the variable and you call it later

343
00:37:00,200 --> 00:37:06,840
and then you are surprised that okay nothing comes out actually bash doesn't really take care about

344
00:37:06,840 --> 00:37:13,880
it it relies on your and it still thinks that you are making your scripts pretty much robust

345
00:37:13,880 --> 00:37:22,920
in checking whether the variable is empty or does it exist at all. So here it comes the place where

346
00:37:22,920 --> 00:37:30,440
the quotation also matters. Let me open once again the hello script

347
00:37:33,400 --> 00:37:42,360
and I will use it as a sandbox for this kind of situation. So for instance I want to assign a

348
00:37:42,360 --> 00:37:52,760
variable and let it be some text

349
00:37:56,600 --> 00:38:03,880
and then if I go to the echo and want to output that variable that should be enough but then if

350
00:38:03,880 --> 00:38:08,880
if my syntax, or if my sentence is more or less complex.

351
00:38:09,760 --> 00:38:12,880
So if I want to say that var is,

352
00:38:12,880 --> 00:38:14,700
okay, I have to use already,

353
00:38:14,700 --> 00:38:16,720
well, not exactly have to use with echo,

354
00:38:16,720 --> 00:38:19,960
but let's assume that we have to also with echo.

355
00:38:19,960 --> 00:38:22,160
So I have to use the quotations.

356
00:38:22,160 --> 00:38:25,600
And here where comes the difference between the quotes.

357
00:38:25,600 --> 00:38:29,100
So the echo with the single quotes

358
00:38:29,100 --> 00:38:35,580
will produce you exactly the sentence you have it within the single quotes

359
00:38:35,580 --> 00:38:42,220
it will not open for you the variables but the double quote quotation will do it for you

360
00:38:42,220 --> 00:38:51,340
so here take a note quotation matters so then there are a few other things for instance

361
00:38:51,340 --> 00:38:59,820
less complicated cases

362
00:39:05,980 --> 00:39:12,940
so let's try it out so now we will actually we can use it

363
00:39:12,940 --> 00:39:18,940
we can comment this once just we don't need it

364
00:39:18,940 --> 00:39:26,860
and use it as a sandbox so it has been already added to the bin it's executable by default

365
00:39:26,860 --> 00:39:32,780
so and now you can see the difference the first line has been using the single quotes and the

366
00:39:32,780 --> 00:39:42,380
second line was using the double quotes so yes take it take it into account along with the variables

367
00:39:42,380 --> 00:39:49,980
which you kind of create yourself and define yourself. There is a bunch of other variables

368
00:39:49,980 --> 00:39:55,900
which have been already created for you by the environments, by the bash itself and by Linux

369
00:39:55,900 --> 00:40:05,580
itself. You will be surprised if you type this printenv, you will see a long list of all kind of

370
00:40:05,580 --> 00:40:14,300
of predefined variables. Some of them read-only, some of them are changeable, but most of them

371
00:40:14,300 --> 00:40:27,100
you don't really need to touch, except with something which is kind of, I don't know,

372
00:40:27,100 --> 00:40:33,420
well I don't know even the exact example when you need to change the variables. Well, sometimes

373
00:40:33,420 --> 00:40:36,620
you end up changing this, for instance, I've been doing this for the script which is

374
00:40:38,780 --> 00:40:39,980
over here, but anyway

375
00:40:44,380 --> 00:40:52,540
Anyway, so, and a few examples that you may find useful. The first one was already

376
00:40:54,140 --> 00:41:00,460
mentioned, that's the path, that gives you the list of the directories where Bash will be looking

377
00:41:00,460 --> 00:41:06,460
for the binaries when you type it without the absolute path. Then home, it's exactly your home

378
00:41:06,460 --> 00:41:15,660
directory. Then for instance shell, that's exactly your bash shell which is defined for you. So I

379
00:41:15,660 --> 00:41:23,500
said nothing about the other shells but that's probably the good point to do that. So bash is

380
00:41:23,500 --> 00:41:28,620
just one of the shells. We were talking about this on the first part of the course.

381
00:41:28,620 --> 00:41:35,260
and there are other ones which are perfectly fine to use like a Z-shell or something else like

382
00:41:35,260 --> 00:41:42,780
corn shell it's up to you but this course is focused on the bash mainly because bash is the

383
00:41:42,780 --> 00:41:50,220
most popular nowadays so and this is also the shell number one for us because we are running

384
00:41:50,220 --> 00:41:55,180
the big cluster installation triton and so on triton we expect everyone used to bash so this

385
00:41:55,180 --> 00:42:01,180
is one, and because I'm part of the team so we push people to use bash and the whole course is

386
00:42:01,180 --> 00:42:07,980
about bash. How to change your shell? It's the change shell command. If you want to do it on

387
00:42:07,980 --> 00:42:13,420
your local desktop it's easy to do. You do the change shell and you just put the bin bash and

388
00:42:13,420 --> 00:42:20,860
your next session will be started with the bin bash. Okay, said that I think we can now jump to the

389
00:42:20,860 --> 00:42:34,380
exercise number two. So I call it variables and I will give you another 10 minutes to do

390
00:42:35,580 --> 00:42:43,980
what. First you need to adapt your Hello Bash shell and assign the Hello Bash to a variable

391
00:42:43,980 --> 00:42:50,140
and print the variable to the output. So I've done it already for you during the demo.

392
00:42:50,140 --> 00:42:55,900
so now try to use your memory don't look yet at my hello bash but try to use your memory and

393
00:42:57,180 --> 00:43:03,020
try it out then the next one which haven't been done yet but now you have to implement it on your

394
00:43:03,020 --> 00:43:09,660
own so your script which will be placed also in the bin and call it whatever you want i call it

395
00:43:09,660 --> 00:43:20,460
here print vars which will print for us the home shell and path one per line so now time is yours

396
00:43:21,180 --> 00:43:30,140
and we are 48 so let's say that already 49 so that let's go this way we will have both

397
00:43:30,140 --> 00:43:41,060
and the how to call it break let's call it joint break and exercise sessions so

398
00:43:41,060 --> 00:43:51,340
we will come back to the screen at 1309 but so 10 minutes for the break 10

399
00:43:51,340 --> 00:43:58,540
minutes for the exercise and you decide how you use in which order I mute myself

400
00:43:58,540 --> 00:44:00,340
and I will add it to the.

401
00:44:28,540 --> 00:44:30,600
you

402
00:44:58,540 --> 00:45:00,600
you

403
00:45:28,540 --> 00:45:30,600
you

404
00:45:58,540 --> 00:46:00,600
you

405
00:46:28,540 --> 00:46:30,600
you

406
00:46:58,540 --> 00:47:00,600
you

407
00:47:28,540 --> 00:47:30,600
you

408
00:47:58,540 --> 00:48:00,600
you

409
00:48:28,540 --> 00:48:30,600
you

410
00:48:58,540 --> 00:49:00,600
you

411
00:49:28,540 --> 00:49:30,600
you

412
00:49:58,540 --> 00:50:00,600
you

413
00:50:28,540 --> 00:50:30,600
you

414
00:50:58,540 --> 00:51:00,600
you

415
00:51:28,540 --> 00:51:30,600
you

416
00:51:58,540 --> 00:52:00,600
you

417
00:52:28,540 --> 00:52:30,600
you

418
00:52:58,540 --> 00:53:00,600
you

419
00:53:28,540 --> 00:53:30,600
you

420
00:53:58,540 --> 00:54:00,600
you

421
00:54:28,540 --> 00:54:30,600
you

422
00:54:58,540 --> 00:55:00,600
you

423
00:55:28,540 --> 00:55:30,600
you

424
00:55:58,540 --> 00:56:00,600
you

425
00:56:28,540 --> 00:56:30,600
you

426
00:56:58,540 --> 00:57:00,600
you

427
00:57:28,540 --> 00:57:30,600
you

428
00:57:58,540 --> 00:58:00,600
you

429
00:58:28,540 --> 00:58:30,600
you

430
00:58:58,540 --> 00:59:00,600
you

431
00:59:28,540 --> 00:59:30,600
you

432
00:59:58,540 --> 01:00:00,600
you

433
01:00:28,540 --> 01:00:30,600
you

434
01:00:58,540 --> 01:01:00,600
you

435
01:01:28,540 --> 01:01:30,600
you

436
01:01:58,540 --> 01:02:00,600
you

437
01:02:28,540 --> 01:02:30,600
you

438
01:02:58,540 --> 01:03:20,820
If need, if there is a need for more time on this, just, just mark yourself yet need

439
01:03:20,820 --> 01:03:34,420
time and

440
01:03:50,820 --> 01:04:20,700
So it's kind of time already, so only some people marked the lag done.

441
01:04:20,700 --> 01:04:24,300
Do we still need time, or should we wait for everyone?

442
01:04:27,940 --> 01:04:30,940
Or if there is any kind of trouble, just ask.

443
01:04:32,180 --> 01:04:34,280
But definitely we will cover all the questions.

444
01:04:34,280 --> 01:04:39,280
There was the question about the bin bash,

445
01:04:39,860 --> 01:04:43,540
but this shebang was in the wrong order.

446
01:04:50,700 --> 01:05:16,220
Okay, let's get back to the material.

447
01:05:16,220 --> 01:05:29,100
my next stop was actually tell you even more about the variables. This is something which

448
01:05:29,100 --> 01:05:33,820
is very specific to the bash. This is what you probably will not see in most of the languages.

449
01:05:34,380 --> 01:05:42,940
So when you can do something with the variables on the fly, the constructions looks like

450
01:05:42,940 --> 01:05:55,420
this curly brackets column and then some kind of cryptic syntax which will do something to the

451
01:05:55,420 --> 01:06:02,380
variable as a string so what can be done with the string so you can make it for instance

452
01:06:02,380 --> 01:06:07,340
all capital, all small.

453
01:06:07,340 --> 01:06:12,340
You can replace some part of the variable value.

454
01:06:12,360 --> 01:06:14,180
Then you can, for instance,

455
01:06:14,180 --> 01:06:16,820
check whether this variable exists or not.

456
01:06:16,820 --> 01:06:19,220
You can redesign it,

457
01:06:19,220 --> 01:06:22,780
redefine it with some default value.

458
01:06:22,780 --> 01:06:27,780
So there are quite a number of things that can be done.

459
01:06:27,780 --> 01:06:28,640
can be done.

460
01:06:28,640 --> 01:06:32,380
So I'm not really put everything to this material.

461
01:06:32,380 --> 01:06:36,280
So, but the selected of them are over here.

462
01:06:36,280 --> 01:06:38,500
So you can check them out.

463
01:06:38,500 --> 01:06:39,760
And then on top of that,

464
01:06:39,760 --> 01:06:41,920
you can also actually forgot to sale.

465
01:06:42,780 --> 01:06:46,940
So if you're ever thinking about syntax,

466
01:06:46,940 --> 01:06:49,180
if you're ever thinking about some particular commands,

467
01:06:49,180 --> 01:06:53,060
which have been used within this bash scripting.

468
01:06:53,060 --> 01:06:57,740
So all the internal logic is written in the bash manual.

469
01:06:57,740 --> 01:07:00,180
If you go to the, for the man bash,

470
01:07:00,180 --> 01:07:01,820
you will see the very long,

471
01:07:01,820 --> 01:07:03,540
I mean, it's at least 100 pages

472
01:07:03,540 --> 01:07:06,800
if you will print it out in a normal font size,

473
01:07:06,800 --> 01:07:10,380
but you will see all the details about what else

474
01:07:10,380 --> 01:07:14,260
and what kind of, what kind of options,

475
01:07:14,260 --> 01:07:17,900
what kind of arguments are given by every single command,

476
01:07:17,900 --> 01:07:20,100
which I use internally,

477
01:07:20,100 --> 01:07:23,820
and then what all these magics, all these extensions,

478
01:07:23,820 --> 01:07:27,400
all these practical aspects of the bash programming.

479
01:07:27,740 --> 01:07:36,860
So, the magic I was thinking about is that, for instance, I know that the echo var already

480
01:07:36,860 --> 01:07:38,660
exists because I have it designed.

481
01:07:38,660 --> 01:07:42,140
Actually, let me tell you one thing, you can unset the variable.

482
01:07:42,140 --> 01:07:47,340
So if you don't really want this variable to exist anymore, it will exist as long as

483
01:07:47,340 --> 01:07:48,980
your session is there.

484
01:07:48,980 --> 01:07:54,360
So but if you don't want to exist it anymore, you just can do it with the unset var.

485
01:07:54,360 --> 01:08:02,200
now if you see that I'm trying to address var, it doesn't exist anymore. Bash is not complaining

486
01:08:02,200 --> 01:08:08,760
anything about calling the undefined variable, but it just returned the empty line, which is fine.

487
01:08:09,800 --> 01:08:16,040
Which is not an error, that's just a feature. So let me say that I want still to define it somehow

488
01:08:16,040 --> 01:08:26,840
and for instance it's still undefined but I want to check it out so my approach would be here

489
01:08:27,400 --> 01:08:30,440
checking out for instance

490
01:08:32,760 --> 01:08:42,200
this one is pretty simple for the sake of checking out the existence of this variable

491
01:08:42,200 --> 01:08:50,200
so you see what will happen so echo or bash on behind of echo it will check

492
01:08:50,200 --> 01:08:54,640
that variable exists or not and then give this error message which comes

493
01:08:54,640 --> 01:09:02,040
after the question mark so here I'm saying that bash var not defined so if

494
01:09:02,040 --> 01:09:06,720
you use it within the script or within your function it's perfectly enough to

495
01:09:06,720 --> 01:09:10,840
make your script more or less robust there is another one option if you

496
01:09:10,840 --> 01:09:20,040
instead of exclamation mark you put something like equal that would check that variable

497
01:09:20,040 --> 01:09:27,480
and if it does not exist it will assign some special value some default value it could be

498
01:09:27,480 --> 01:09:35,560
anything then just put default value oh it's up to you what do you decide to do this but then

499
01:09:35,560 --> 01:09:40,440
if you see from now on

500
01:09:40,760 --> 01:09:45,880
echo var even as it has been defined undefined over here you see you remember

501
01:09:45,880 --> 01:09:50,360
that now it's already the has the value and

502
01:09:50,360 --> 01:09:52,840
the thing to remember with all these major

503
01:09:52,840 --> 01:09:56,760
constructions with all these curly brackets

504
01:09:56,760 --> 01:10:03,720
this do column and the equal sign is the only operator

505
01:10:03,720 --> 01:10:10,120
which actually does something to the variable. It changes it. It assigns the default value or

506
01:10:10,120 --> 01:10:18,040
another value which you just put it over here. All the rest which are listed here as

507
01:10:18,040 --> 01:10:26,200
selected operators, they do really nothing to the variable. They just simply extract it or they

508
01:10:26,200 --> 01:10:35,240
modify it on the fly and put it to the online, give it to the output, print it to the output,

509
01:10:35,240 --> 01:10:41,480
but then they actually do nothing with the variable itself. So a variable stays as is.

510
01:10:44,040 --> 01:10:55,000
Let me do the example. For instance, here I'm grabbing the fpath. So I'm saying that that's my

511
01:10:55,000 --> 01:11:01,520
path to the file and I'm naming that variable accordingly. So if you take a

512
01:11:01,520 --> 01:11:08,880
look at the path it's pretty much like that. So what I want to say that

513
01:11:08,880 --> 01:11:13,920
I want to first get the path

514
01:11:15,280 --> 01:11:24,920
for instance here this cryptic says that okay return me everything what is

515
01:11:24,920 --> 01:11:34,280
before the last slash. Oh, actually everything except

516
01:11:36,120 --> 01:11:41,720
what is after the last slash. So now I'm getting the name of the file actually. So you see that

517
01:11:41,720 --> 01:11:48,280
I've got rid of this one while the file itself, I mean the fpath, has not been modified.

518
01:11:48,920 --> 01:11:53,640
It's only the modification which has happened on the fly and it has been outputted to the script.

519
01:11:53,640 --> 01:12:01,640
In order to make it modified, actually, you have to reassign it to another variable.

520
01:12:01,640 --> 01:12:07,640
So if I assign it to another variable and say, let's call it fpath2,

521
01:12:07,640 --> 01:12:17,640
now it's going to be already something which will be

522
01:12:17,640 --> 01:12:24,600
remember it, which will be saved to the memory and which will be part of your global space.

523
01:12:24,600 --> 01:12:29,480
So you see.

524
01:12:29,480 --> 01:12:31,740
And then, for instance, another example.

525
01:12:31,740 --> 01:12:39,520
If I want to keep running this fpath thing and want to return only the path.

526
01:12:39,520 --> 01:12:42,400
So that's another approach.

527
01:12:42,400 --> 01:12:46,280
So I'm not going any more deeply into this.

528
01:12:46,280 --> 01:12:52,760
I want you actually to go this deeper into this thing so learn this section and let's try it

529
01:12:53,960 --> 01:13:00,520
let's say that we go for another 10 minutes playing with this variable magics so what I

530
01:13:00,520 --> 01:13:06,680
want you to try I wanted to try in this construct where you have the variable name and then the

531
01:13:06,680 --> 01:13:12,600
curly brackets and then something after the variable name late on your own or

532
01:13:12,600 --> 01:13:17,420
or actually, if you will be ready,

533
01:13:19,600 --> 01:13:20,700
here is my,

534
01:13:22,300 --> 01:13:24,120
or did I put it over here already?

535
01:13:29,860 --> 01:13:34,460
So here is my suggestion for you.

536
01:13:34,460 --> 01:13:37,140
So you pick up, once again, your Hello Bash

537
01:13:38,380 --> 01:13:40,420
and you change it in such a way

538
01:13:40,420 --> 01:13:52,160
this variable HelloBash will be printed in capitals. That's the first. And the

539
01:13:52,160 --> 01:14:00,100
second one is that you will wrap once again that fpath variable in the way

540
01:14:00,100 --> 01:14:04,160
you want to, but I mean you just copy paste from the course material and make

541
01:14:04,160 --> 01:14:08,940
your script to return file name only without the full path and extension. So

542
01:14:08,940 --> 01:14:13,580
the hint over here is that I've said you previously over here is that you will

543
01:14:13,580 --> 01:14:20,100
not be able to do it with one single iteration you will have to do it with

544
01:14:20,100 --> 01:14:28,180
two iterations and for that you will have to save one variable to another so

545
01:14:28,180 --> 01:14:34,900
let's see how you will manage this to do you will have now 10 maybe even 15

546
01:14:34,900 --> 01:14:39,960
minutes because it's gonna be quite quite a challenge for you especially for

547
01:14:39,960 --> 01:14:54,580
the first time but then let's go so we will finish when at 1325

548
01:15:04,900 --> 01:15:06,960
you

549
01:15:34,900 --> 01:15:58,980
sorry i also forgot to mention so here i will put the

550
01:16:04,900 --> 01:16:07,700
the answers, both of them.

551
01:16:34,900 --> 01:16:54,900
That's the answers for the previous exercise I'll do the same for the exercise after all

552
01:17:04,900 --> 01:17:06,960
you

553
01:17:34,900 --> 01:17:36,960
you

554
01:18:04,900 --> 01:18:06,900
You

555
01:18:34,900 --> 01:18:36,960
you

556
01:19:04,900 --> 01:19:06,960
you

557
01:19:34,900 --> 01:19:36,960
you

558
01:20:04,900 --> 01:20:06,960
you

559
01:20:34,900 --> 01:20:36,960
you

560
01:21:04,900 --> 01:21:06,960
you

561
01:21:34,900 --> 01:21:36,960
you

562
01:22:04,900 --> 01:22:06,960
you

563
01:22:34,900 --> 01:22:36,960
you

564
01:23:04,900 --> 01:23:06,960
you

565
01:23:34,900 --> 01:23:36,960
you

566
01:24:04,900 --> 01:24:06,960
you

567
01:24:34,900 --> 01:24:36,960
you

568
01:25:04,900 --> 01:25:06,960
you

569
01:25:34,900 --> 01:25:36,960
you

570
01:26:04,900 --> 01:26:06,960
you

571
01:26:34,900 --> 01:26:36,960
you

572
01:27:04,900 --> 01:27:06,960
you

573
01:27:34,900 --> 01:27:36,960
you

574
01:28:04,900 --> 01:28:06,960
you

575
01:28:34,900 --> 01:28:36,960
you

576
01:29:04,900 --> 01:29:06,960
you

577
01:29:34,900 --> 01:29:36,960
you

578
01:30:04,900 --> 01:30:20,660
Okay, we're gonna keep going.

579
01:30:20,660 --> 01:30:27,500
So let me demonstrate you a few techniques over here.

580
01:30:27,500 --> 01:30:31,580
So the first, I will also put it to the,

581
01:30:31,580 --> 01:30:34,700
the answers to this, both exercises,

582
01:30:35,900 --> 01:30:40,300
to both tasks of this exercise will be on the notes,

583
01:30:40,300 --> 01:30:43,220
but then first let me go with demo.

584
01:30:43,220 --> 01:30:45,780
So quick demo for the first one, echo,

585
01:30:46,780 --> 01:30:51,780
and then we were expecting some modifications to the var.

586
01:30:53,380 --> 01:30:55,900
So we need the curly brackets,

587
01:30:55,900 --> 01:31:05,980
and then we need to say what we want so we put two hats over here that should be enough let's see

588
01:31:05,980 --> 01:31:13,340
what we get out of this so yeah so you can see that actually the first one was the

589
01:31:14,300 --> 01:31:17,980
from the previous version of the script and the second one was already the first

590
01:31:17,980 --> 01:31:26,380
they say the other one so regarding the fpath plane so there was a request to do the

591
01:31:27,180 --> 01:31:34,220
get the only the archive that was somewhat complicated and complex and I do hope that

592
01:31:34,220 --> 01:31:43,820
that place some of you have got already some of this so let me grab this one and say that I

593
01:31:43,820 --> 01:31:52,460
go to the bin and I will create my new script. I will call it some kind of fpath

594
01:31:54,060 --> 01:31:59,740
and I will play with that and I will say that it's gonna be bash once again

595
01:32:01,580 --> 01:32:06,140
and let's see what can be done. So I actually can use pretty much the variables

596
01:32:07,420 --> 01:32:10,220
modifications this magic from the

597
01:32:13,820 --> 01:32:16,820
from the

598
01:32:17,460 --> 01:32:22,580
learning material, but here what I'm getting, I would get it only on the fly

599
01:32:22,580 --> 01:32:27,620
I don't really want it on the fly, I want it to be

600
01:32:27,620 --> 01:32:33,540
another variable, but here I don't really care about the original fpath

601
01:32:33,540 --> 01:32:38,100
I can simply reassign it in order to make the

602
01:32:38,100 --> 01:32:45,460
modification not on the fly but save them to the variable

603
01:32:45,460 --> 01:32:51,940
I can simply assign it this way and you will see later that actually

604
01:32:55,540 --> 01:33:00,340
so let's say that I want to put the fpath

605
01:33:03,060 --> 01:33:07,620
and I can say here that's the phase one

606
01:33:08,100 --> 01:33:12,260
it's going to be the fpath

607
01:33:13,060 --> 01:33:19,860
part which will be I will take off everything which is behind this one

608
01:33:19,860 --> 01:33:24,900
this slash so the only thing which will be left to me

609
01:33:24,900 --> 01:33:30,820
that's this one okay and now that's the

610
01:33:30,820 --> 01:33:34,420
moment where I can already if I don't care

611
01:33:34,420 --> 01:33:37,780
about what's the final result of fpath

612
01:33:37,780 --> 01:33:38,980
this is where the moment

613
01:33:43,380 --> 01:33:45,700
where I can't put something like this

614
01:33:47,860 --> 01:33:53,700
but modify it a little bit so let's say that here

615
01:33:56,260 --> 01:33:57,300
I put the comments

616
01:33:59,860 --> 01:34:02,500
just to simply here we get

617
01:34:02,500 --> 01:34:12,100
archive with the extensions. Okay, you can check it out from the command line. I know that it's

618
01:34:12,100 --> 01:34:16,420
going to be like this already because I already checked so I just put it to the to my script

619
01:34:16,420 --> 01:34:27,540
already directly. So now, so this block is over here. Now the next step

620
01:34:27,540 --> 01:34:34,500
getArchive out of

621
01:34:39,060 --> 01:34:41,620
so now we have to get rid of this

622
01:34:43,220 --> 01:34:48,820
too so how to do that is that we can say that okay we don't need dots

623
01:34:51,220 --> 01:34:53,540
and we don't need anything out of these dots

624
01:34:53,540 --> 01:35:05,300
now the tricky thing because of this syntax so this will allow me to get rid of the only the last one

625
01:35:05,300 --> 01:35:13,460
content of which comes after the dot but what i want i want the everything after the after the

626
01:35:13,460 --> 01:35:21,140
after the dot so in this case i will have to use the two percentages so that was the complication

627
01:35:21,140 --> 01:35:27,140
over here and that was kind of thing that you had to had to find it out from the

628
01:35:29,300 --> 01:35:33,620
from the manual page or just to try it to fit with that

629
01:35:35,460 --> 01:35:44,100
okay now let's see what's going on change mode let it be okay okay it should be plus x

630
01:35:44,100 --> 01:35:55,380
and now I'm ready to run fpath and so in the phase one we've got archived argz and after the second

631
01:35:55,380 --> 01:36:03,860
one we got the archive so take a look once again it's nowadays looking like this so let me put it

632
01:36:03,860 --> 01:36:05,860
to the

633
01:36:08,860 --> 01:36:10,860
to the

634
01:36:10,860 --> 01:36:12,860
solution part

635
01:36:12,860 --> 01:36:14,860
where am I

636
01:36:14,860 --> 01:36:16,860
15 minutes functions

637
01:36:16,860 --> 01:36:18,860
that's going to be the next one here is the

638
01:36:26,860 --> 01:36:28,860
so here is for everyone who wants to

639
01:36:28,860 --> 01:36:30,860
take a look at this later on

640
01:36:33,860 --> 01:36:40,500
Okay, now we can, if any question please ask

641
01:36:40,660 --> 01:36:48,700
if something is yet unclear, so I can take rid of this one and we just have

642
01:36:48,700 --> 01:36:59,820
actually the part which we need. So saying that, I think I'm done with the

643
01:36:59,820 --> 01:37:06,540
variables and you know already pretty much a lot so you know already how to

644
01:37:06,540 --> 01:37:11,340
use the variables you know how to find them how to call them you should know by

645
01:37:11,340 --> 01:37:19,260
now know that the variable can be undefined and then you also know this

646
01:37:19,260 --> 01:37:24,620
matrix of this bash variables which you can do with the curly brackets and do

647
01:37:24,620 --> 01:37:29,100
some modifications on the fly in case you want to do this so if you want to

648
01:37:29,100 --> 01:37:36,300
substitute this modified variable and put it to the command line. So that's the way to do

649
01:37:38,140 --> 01:37:45,740
with the curly brackets. So now the next one I wanted to try is functions. Functions

650
01:37:47,740 --> 01:37:54,540
are everywhere. It's just a piece of code which you can use repeatedly. Usually, I mean, if you

651
01:37:54,540 --> 01:38:05,180
know that within the same code you will use the same snippets, so you can just put them somewhere

652
01:38:05,180 --> 01:38:10,780
else to the function and then use them all the time within the code. This is quite normal,

653
01:38:10,780 --> 01:38:17,180
this is quite usual, and this is not an exclusion in terms of bash. Functions are there. The only

654
01:38:17,180 --> 01:38:23,660
difference is that the functionality of the functions is nothing really extraordinary.

655
01:38:23,660 --> 01:38:29,260
it's just a piece of the code which will work in the normal global space.

656
01:38:29,980 --> 01:38:38,140
So, basically, you will have access to all the variables that you use within the script.

657
01:38:38,780 --> 01:38:43,980
You will have access to all the variables, the global space, that would mean that you have

658
01:38:43,980 --> 01:38:51,740
access to all the variables that you have assigned within the script itself. And then on top of that,

659
01:38:51,740 --> 01:38:56,700
every single modification of that variable that you do within the function will be seen

660
01:38:56,700 --> 01:39:04,380
to the end of the script. So just remember this. And this differs this function's functionality

661
01:39:04,380 --> 01:39:10,220
from the other languages. On top of that, functions do not really return the result

662
01:39:11,660 --> 01:39:18,060
of the modification of this variable with the return command. It does have a return command,

663
01:39:18,060 --> 01:39:24,380
but return command does nothing except returning the exit code. The exit code

664
01:39:25,660 --> 01:39:33,500
this is something which is I already mentioned it once and so every time

665
01:39:35,980 --> 01:39:42,060
every time when you run some command for instance if I run something like echo test

666
01:39:42,060 --> 01:39:50,780
you can expect that this command has returned some exit code. The exit code is saved in the

667
01:39:50,780 --> 01:40:03,900
variable called $ and then the question mark. And in case of bash, if it's zero that means

668
01:40:03,900 --> 01:40:10,220
that the action has succeeded. And if it's non-zero, one, two, three, any other digit.

669
01:40:10,220 --> 01:40:18,780
so it means that the action actually has failed. So this thing to remember and to take a note if

670
01:40:18,780 --> 01:40:26,220
you are doing so. Now let me get back to the functions. What I suggest to do is that I suggest

671
01:40:26,220 --> 01:40:34,220
to organize the file which I would call functions. Surprise, surprise! You don't need to put .shell

672
01:40:34,220 --> 01:40:39,820
or anything like this, it can be just functions. Another one surprise that within these functions

673
01:40:40,220 --> 01:40:47,740
those the file where you want to define it you don't really need to push the put the shebang

674
01:40:48,460 --> 01:40:55,020
i will tell you i will show you how to call the functions later on but just for now it's enough

675
01:40:55,020 --> 01:41:07,740
if you just do do it without it so my first example will be for you is the usage of your space

676
01:41:07,740 --> 01:41:16,780
So let me first get out of this and copy-paste the command from the material. You can do it

677
01:41:16,780 --> 01:41:27,260
on the same way. So what the command does, it shows you the files in this current directory

678
01:41:27,260 --> 01:41:36,820
and sort them out by their size. So in my situation, I'm trying to look at all the

679
01:41:36,820 --> 01:41:43,400
files including the hidden ones. So the hidden ones, as you remember from the

680
01:41:43,400 --> 01:41:51,500
previous course material, that's the one which start with a dot. So by default if

681
01:41:51,500 --> 01:41:58,100
If you don't address them specifically, no one of the commands, neither ALS nor other

682
01:41:58,100 --> 01:41:59,660
commands will see them.

683
01:41:59,660 --> 01:42:05,020
So this is why they are called hidden, even if they are not really hidden in such a way.

684
01:42:05,020 --> 01:42:09,820
But you must say explicitly, and this is the expression how to address all the hidden files

685
01:42:09,820 --> 01:42:11,860
in the current directory.

686
01:42:11,860 --> 01:42:16,820
So because no one of the hidden files is found, disk usage gives me the warning that nothing

687
01:42:16,820 --> 01:42:18,420
can be accessed.

688
01:42:18,420 --> 01:42:21,480
It's completely okay, it can be ignored.

689
01:42:21,480 --> 01:42:29,000
the other files are over here so I have tested this command and now I want to make a space

690
01:42:29,000 --> 01:42:33,000
usage out of this one so let me write a function

691
01:42:37,000 --> 01:42:40,680
or did I have a functions okay I probably haven't functions

692
01:42:42,520 --> 01:42:50,200
I haven't yeah that was empty so now let me go into that function and put the body of my function

693
01:42:50,200 --> 01:43:02,520
and then puts the actually name etc around so the way you write the function you open the curly

694
01:43:02,520 --> 01:43:12,360
brackets so you put the name of the function it should have this brackets round brackets

695
01:43:12,360 --> 01:43:18,440
parentheses and then you put the curly brackets and then you put actually the name of the

696
01:43:19,960 --> 01:43:26,760
the name of the uh the command itself so now it has been defined now it's in the file

697
01:43:27,400 --> 01:43:36,200
and the function file does not need even the execution bit so if you look at the ls

698
01:43:36,200 --> 01:43:43,480
minus l functions you will see that it's nothing else than just normal text file how to source it

699
01:43:44,520 --> 01:43:51,240
so you can go to you can just grab that file functions and type source

700
01:43:52,920 --> 01:44:01,080
and you will have these functions part of your environment how to check it again you can use

701
01:44:01,080 --> 01:44:10,600
type minus a and see that what kind of function is behind the space usage and you will get the list

702
01:44:10,600 --> 01:44:17,720
so there are two signs here first space usage is part of your environment by now and second sign

703
01:44:18,920 --> 01:44:23,880
that you can see that actually it's supposed to work right away so by now

704
01:44:23,880 --> 01:44:32,760
because it's your part of your environment you can run it pretty much like any other binary.

705
01:44:32,760 --> 01:44:40,120
So now you can see that after running space usage there will be this kind of list exactly that I

706
01:44:40,120 --> 01:44:47,800
would have get out of this command but this command is now has a kind of a nickname space usage.

707
01:44:47,800 --> 01:44:54,040
the name you come with is just up to you and actually bash doesn't really care except that

708
01:44:54,040 --> 01:45:02,200
you are if you are not trying to rename some real some real binaries and even for that there is

709
01:45:02,200 --> 01:45:09,880
medicine i don't tell you yet anything about this but for this there is medicine as well so let me

710
01:45:09,880 --> 01:45:17,800
say that I'm pretty happy with this already one, but there is something else that can be used with

711
01:45:17,800 --> 01:45:27,800
the functions. Functions can accept the input parameters. And input parameters, so if let me say

712
01:45:27,800 --> 01:45:39,400
that if I call space usage like this, and then if I say some argument number one, argument number two,

713
01:45:39,400 --> 01:45:46,360
argument number three and so on, they will immediately be within my

714
01:45:47,400 --> 01:45:59,960
function, they will immediately recognize as $1, $2, $3, etc. And we can use it.

715
01:46:01,720 --> 01:46:09,320
Okay, so let's say that we're expecting some input arguments, input parameters. And let's say that my

716
01:46:09,320 --> 01:46:16,280
space function will be actually expecting a directory, so that I don't

717
01:46:16,280 --> 01:46:23,800
really go and check the current one, but I can check any one.

718
01:46:24,160 --> 01:46:30,720
Now what to do? Now I know that my directory is going to be like this.

719
01:46:30,720 --> 01:46:37,520
And so what kind of thing I can implement over here? So I can say

720
01:46:37,520 --> 01:46:46,800
that everything within this directory like this or even more I can say that

721
01:46:46,800 --> 01:46:52,720
everything within this directory will be checked it's already a good progress so

722
01:46:52,720 --> 01:47:02,200
we've got already something to solve but in case in case I want to make sure that

723
01:47:02,200 --> 01:47:10,280
actually this directory is provided how to check it and here where we can use our magic variables

724
01:47:10,840 --> 01:47:19,640
and so we can implement it in a way that okay I keep it like this but I put my curly brackets

725
01:47:19,640 --> 01:47:32,200
and I use this operator which will say if it's equal if this one is not defined

726
01:47:32,200 --> 01:47:38,600
then let it be my current directory current directory in the bash notations

727
01:47:38,600 --> 01:47:46,560
is dot so in the same way I can do it over here if one is not defined then I

728
01:47:46,560 --> 01:47:50,200
I want to say that let it be dot.

729
01:47:50,200 --> 01:47:54,680
Now we are good enough to go with the new space usage.

730
01:47:54,680 --> 01:47:59,440
So now we already have created pretty robust code.

731
01:48:03,420 --> 01:48:04,640
Let me check it once again.

732
01:48:04,640 --> 01:48:07,720
Was it the minus or was it the...

733
01:48:09,960 --> 01:48:10,800
Yeah.

734
01:48:12,200 --> 01:48:13,040
Ah, okay.

735
01:48:13,040 --> 01:48:15,040
So here I'm doing one thing.

736
01:48:15,040 --> 01:48:18,880
So I don't want to reassign it, but I want to return it.

737
01:48:18,880 --> 01:48:21,780
So I'm using the minus operator.

738
01:48:21,780 --> 01:48:23,220
You see what's the difference?

739
01:48:23,220 --> 01:48:27,500
With the equal, I would reassign it.

740
01:48:27,500 --> 01:48:28,940
So I don't really want to change,

741
01:48:28,940 --> 01:48:33,860
and I will not be able to change this special variable $1.

742
01:48:33,860 --> 01:48:38,140
But with the minus, I will be able to return the dot

743
01:48:38,140 --> 01:48:41,640
without changing the variable itself.

744
01:48:41,640 --> 01:48:43,340
That's the difference.

745
01:48:43,340 --> 01:48:46,400
Okay, now we are pretty much robust,

746
01:48:46,400 --> 01:48:48,720
and now we can even put again,

747
01:48:50,400 --> 01:48:54,840
return the space usage,

748
01:48:57,920 --> 01:48:59,720
well, return the space usage

749
01:49:01,520 --> 01:49:04,060
with disk usage command.

750
01:49:04,920 --> 01:49:06,260
Now let's try.

751
01:49:06,260 --> 01:49:08,480
Now we need to source it once again,

752
01:49:10,580 --> 01:49:11,880
functions.

753
01:49:11,880 --> 01:49:14,240
Now let's try type once again.

754
01:49:14,240 --> 01:49:16,560
Now you see that my script function,

755
01:49:16,560 --> 01:49:20,920
which is now part of my environment has been modified.

756
01:49:20,920 --> 01:49:23,240
And now let's see how it works.

757
01:49:23,240 --> 01:49:27,440
First, I will use it with some variable.

758
01:49:27,440 --> 01:49:30,160
So I wanna, for instance, check the,

759
01:49:31,680 --> 01:49:33,700
my demo space.

760
01:49:33,700 --> 01:49:36,460
Okay, let's see, it works.

761
01:49:36,460 --> 01:49:41,460
So once again, this warning is just about the dot files.

762
01:49:41,460 --> 01:49:49,460
you can simply ignore this and then if I put no parameter what it do for me

763
01:49:50,180 --> 01:49:54,180
okay now I can see that actually it's trying to do it the same way

764
01:49:56,420 --> 01:50:02,020
like this so which is pretty much what I have expected out of this function

765
01:50:04,420 --> 01:50:05,140
say it again

766
01:50:05,140 --> 01:50:13,460
now you have written the first function which can be used then within the code

767
01:50:14,580 --> 01:50:15,700
so how to do that

768
01:50:18,100 --> 01:50:20,420
let's say that i want to

769
01:50:23,140 --> 01:50:26,740
i will demonstrate it for the sake of demonstration over here

770
01:50:26,740 --> 01:50:31,540
so now let me do the kind of dummy file

771
01:50:31,540 --> 01:50:36,500
let me copy functions to some

772
01:50:37,460 --> 01:50:43,540
space, whatever, space.shell. So, I do it only for the sake of demonstration how to

773
01:50:43,540 --> 01:50:50,100
call the function within the code. So, I'm now looking at the space.

774
01:50:50,100 --> 01:50:57,300
Here, I already need this shebang, because I'm doing the actual scripting

775
01:50:57,300 --> 01:51:03,780
and snow again in the previous file which was called functions i was only defining the function

776
01:51:03,780 --> 01:51:10,980
was not executing them in this situation i want to define it first and execute it after so and

777
01:51:10,980 --> 01:51:22,340
that's the way to space usage and then even if i put some arguments i can put the argument right

778
01:51:22,340 --> 01:51:29,620
away space, usage, and then, for instance, let it be my home. Yeah, like that.

779
01:51:32,260 --> 01:51:38,900
Let's see what it gives us. Oh, I can do it with the more readable format, so I can give it

780
01:51:38,900 --> 01:51:47,220
with the home. So let's see what we will get. Again, we will have to add the execution bit

781
01:51:47,220 --> 01:51:52,820
and then because we are already in the bin we don't need anything else

782
01:51:52,820 --> 01:52:02,660
space shell so yeah pretty much works. Okay so now you've got also the idea how

783
01:52:02,660 --> 01:52:12,340
to call the function within the script and again if you are kind of lost and

784
01:52:12,340 --> 01:52:18,980
and you you still can go to the bin and you can check it from here and see what's going on

785
01:52:20,020 --> 01:52:26,660
so I don't really steal all this this of course from you so you have access to them

786
01:52:30,420 --> 01:52:32,820
so what else I wanted to tell you about the

787
01:52:32,820 --> 01:52:42,580
There are also options how to use these pairs within these functions, how to use them

788
01:52:43,460 --> 01:52:47,380
with the local variables. We don't really want to check it out.

789
01:52:48,340 --> 01:52:51,060
One thing that I wanted to introduce you, another one

790
01:52:54,340 --> 01:53:01,220
beneficial part of the syntax which is called the command substitution.

791
01:53:01,220 --> 01:53:08,820
So, let me say that I want to define a function. I want to call this function

792
01:53:12,020 --> 01:53:14,100
me. Okay.

793
01:53:16,580 --> 01:53:22,180
So, what I'm doing right here, while defining this function, I'm actually putting to the command line

794
01:53:22,180 --> 01:53:29,060
not the command itself, but the outputs of this command into one single line. So,

795
01:53:29,060 --> 01:53:38,340
command line substitution means that you actually want to substitute the output of that command

796
01:53:38,340 --> 01:53:47,300
into some part of the code, into some part of the other command that you are typing. It's quite

797
01:53:47,300 --> 01:53:56,020
useful. You will see it in the further examples that we will run. And now just one single

798
01:53:56,020 --> 01:54:06,340
to show you how it works. So I have created it so I have it added to the functions and now I can

799
01:54:06,340 --> 01:54:14,420
once again with the type minus a see that my function has been added and if I run it you can

800
01:54:14,420 --> 01:54:20,980
now see okay host name is not found i didn't check it host name

801
01:54:28,340 --> 01:54:29,220
minus s

802
01:54:31,620 --> 01:54:34,180
strange well whatever so

803
01:54:38,500 --> 01:54:42,420
ah okay actually i know the i know the problem over here

804
01:54:42,420 --> 01:54:50,180
so it's good that we've got this error message so what has happened just now again this construction

805
01:54:50,180 --> 01:54:57,860
where you have the round brackets and the sign dollar sign at the very beginning it gives you

806
01:54:57,860 --> 01:55:05,860
the output of the command and it just prints it to the prompt so for instance i want to check id

807
01:55:05,860 --> 01:55:11,380
yeah and I want to check ID with the UN so I'm just checking my username

808
01:55:11,380 --> 01:55:18,820
basically if I do it like this it's completely fine it will return me the

809
01:55:18,820 --> 01:55:27,900
the the actual output of the command but if I will try to do it like that without

810
01:55:27,900 --> 01:55:33,900
substitution it to the code without substitution it to the prompt so I'm

811
01:55:33,900 --> 01:55:35,460
I'm getting the error message.

812
01:55:35,460 --> 01:55:36,420
Why?

813
01:55:36,420 --> 01:55:39,340
Because bash in the ground,

814
01:55:39,340 --> 01:55:42,980
it will execute this command substitution.

815
01:55:42,980 --> 01:55:45,780
It will put the output of the command substitution

816
01:55:45,780 --> 01:55:47,780
to the prompt and it will expect

817
01:55:47,780 --> 01:55:50,560
that it's going to be a name of the command,

818
01:55:50,560 --> 01:55:52,200
which is not correct.

819
01:55:52,200 --> 01:55:54,780
And so this is why you are getting the error.

820
01:55:54,780 --> 01:55:58,380
Let me fix that functions

821
01:55:58,380 --> 01:56:02,380
and say that actually what I'm looking for is the echo.

822
01:56:02,380 --> 01:56:09,380
So what I need, I need to put them all together and then output it to the screen.

823
01:56:09,380 --> 01:56:13,380
So let's see what will happen. I have to source it once again.

824
01:56:13,380 --> 01:56:17,380
Now I expect that it has been fixed. Yes.

825
01:56:17,380 --> 01:56:21,380
Now you see that I've got the perfect information about myself.

826
01:56:21,380 --> 01:56:25,380
Who am I? What's my group number? What's my group?

827
01:56:25,380 --> 01:56:30,380
And then also what's my machine name?

828
01:56:30,380 --> 01:56:38,140
cool so once again now you have at least two functions defined you know how to do

829
01:56:38,140 --> 01:56:43,700
it you know how to call it you know how to call it function both from the prompt

830
01:56:43,700 --> 01:56:50,140
and from the from within the script and then on top of that you also got some

831
01:56:50,140 --> 01:56:56,700
impression how to use the command line substitutions

832
01:56:57,580 --> 01:57:02,220
oh i think we are

833
01:57:02,860 --> 01:57:09,820
we are done but not yet fully i still wanted to add you

834
01:57:09,820 --> 01:57:13,020
something with the script because i touched the

835
01:57:13,020 --> 01:57:15,980
command substitution and so what i wanted to do

836
01:57:15,980 --> 01:57:24,460
I have to, I wanted to demonstrate you some other commands. So let me introduce you some practical

837
01:57:24,460 --> 01:57:31,340
usage. Well, me function was also practical, but this is even more practical than it is. So

838
01:57:32,220 --> 01:57:41,420
you remember that tar command which I used just with the explicit, saying explicitly what's the

839
01:57:41,420 --> 01:57:49,020
name of the archive is going to be and then send explicitly which exactly directory I wanted to

840
01:57:50,700 --> 01:57:59,660
archive. So here what I'm doing in this command, let me explain that. So let me make it more readable.

841
01:58:01,820 --> 01:58:06,060
Here what I'm doing, I'm using the command substitution

842
01:58:06,060 --> 01:58:14,820
for a good. So first of all I'm using date. Let me say that I save this command

843
01:58:14,820 --> 01:58:19,940
for you without executing right away so I know what date will provide to me. This

844
01:58:19,940 --> 01:58:26,020
format of the date will give me year, month and the day. Okay that's what I

845
01:58:26,020 --> 01:58:34,120
want. Then what I want else I want the current directory but I want to have a

846
01:58:34,120 --> 01:58:41,400
current directory only the actual name one so you remember we've done it with the variables

847
01:58:42,040 --> 01:58:48,920
now i introduce you another one way to do that you can use the built-in utility called

848
01:58:49,720 --> 01:58:55,080
base name or maybe it's not built-in maybe external but anyway it's part of the system

849
01:58:55,080 --> 01:59:04,040
So now you see that I'm getting the bean. So out of this one, out of this nested command substitution,

850
01:59:04,040 --> 01:59:09,400
so first of all the command substitution can be nested and Bash understands this kind of syntax.

851
01:59:09,400 --> 01:59:17,400
It's quite clever. So you will get bean, here you will get date, and the rest will be just as normal.

852
01:59:18,440 --> 01:59:21,080
Okay, let's try it and let's see what will happen.

853
01:59:25,080 --> 01:59:26,360
That's correct.

854
01:59:26,360 --> 01:59:29,320
So we have created some files inside the directory

855
01:59:29,320 --> 01:59:32,480
that we are archiving, so tar was given this warning.

856
01:59:32,480 --> 01:59:35,520
And now you can see that actually we've got the tar archive,

857
01:59:35,520 --> 01:59:39,080
which is named bin, and then the date,

858
01:59:39,080 --> 01:59:42,240
which is dynamically perfectly generated name,

859
01:59:42,240 --> 01:59:45,080
which can be used for the scripts.

860
01:59:45,080 --> 01:59:49,200
So my suggestion that we will use it right away,

861
01:59:49,200 --> 01:59:51,680
and actually we will go to this,

862
01:59:51,680 --> 02:00:00,720
was tar something tarmi and we will use it actually not as a function but we will use it

863
02:00:06,000 --> 02:00:12,080
as a command okay so so

864
02:00:14,320 --> 02:00:20,880
pretty good we're already on the functions and i think we are ready yet for another 10 minutes

865
02:00:20,880 --> 02:00:30,280
exercise. So let me see, it's there. Or maybe even 15 minutes, simply because it

866
02:00:30,280 --> 02:00:38,000
may take you 15 minutes. So now what I want you, this is the simple one, you can

867
02:00:38,000 --> 02:00:44,560
copy-paste it as is, just create the bin functions and make sure that space usage

868
02:00:44,560 --> 02:00:52,560
in me both are there. And then on top of that what I want you to ask is add yet another one

869
02:00:52,560 --> 02:01:00,080
function to that function's files and test it. So let it be called fast find function

870
02:01:00,960 --> 02:01:08,240
just the ff and what it's supposed to be you provide with the fast find any search word any

871
02:01:08,240 --> 02:01:16,160
and it must return all the files and directories in the current folder which name contains this word

872
02:01:17,520 --> 02:01:24,560
and I suggest let it be case insensitive so in case of find you just put this minus i name

873
02:01:25,920 --> 02:01:32,400
so basically just use this one put the search word the word I mean if you are not familiar

874
02:01:32,400 --> 02:01:39,520
with the find you still have some time to try man find or you can take a look at the

875
02:01:40,960 --> 02:01:50,560
course material from the reverse part so you can find some examples of find usage over here and

876
02:01:52,480 --> 02:01:59,680
yeah let's say that we get 15 minutes because this is i expected that you back to the

877
02:01:59,680 --> 02:02:05,500
functions and you will write something maybe more and then you'll write your

878
02:02:05,500 --> 02:02:11,420
first function and make it to work. So 15 minutes so that means that we are back

879
02:02:11,420 --> 02:02:15,660
to the at 14.22

880
02:02:15,660 --> 02:02:37,900
I guess Enrique is adding it to the bottom but I mean if you are up for this so the text

881
02:02:37,900 --> 02:02:38,900
is already over here

882
02:02:38,900 --> 02:02:39,900
Thank you.

883
02:02:39,900 --> 02:02:39,920
Bye-bye.

884
02:03:08,900 --> 02:03:10,960
you

885
02:03:38,900 --> 02:03:40,960
you

886
02:04:08,900 --> 02:04:10,960
you

887
02:04:38,900 --> 02:05:07,060
Ah, one addition, let's also have the break.

888
02:05:07,060 --> 02:05:15,140
so we set 22 so let it be till 32 so we are including this 10 minutes break

889
02:05:15,780 --> 02:05:18,420
sorry that's important just go and stretch your legs

890
02:05:21,460 --> 02:05:22,900
or whatever you want to stretch

891
02:05:37,060 --> 02:05:39,120
you

892
02:06:07,060 --> 02:06:09,120
you

893
02:06:37,060 --> 02:06:39,120
you

894
02:07:07,060 --> 02:07:09,120
you

895
02:07:37,060 --> 02:07:39,120
you

896
02:08:07,060 --> 02:08:09,120
you

897
02:08:37,060 --> 02:08:39,120
you

898
02:09:07,060 --> 02:09:09,120
you

899
02:09:37,060 --> 02:09:39,120
you

900
02:10:07,060 --> 02:10:09,120
you

901
02:10:37,060 --> 02:10:39,120
you

902
02:11:07,060 --> 02:11:09,120
you

903
02:11:37,060 --> 02:11:39,120
you

904
02:12:07,060 --> 02:12:09,120
you

905
02:12:37,060 --> 02:12:39,120
you

906
02:13:07,060 --> 02:13:09,120
you

907
02:13:37,060 --> 02:13:39,120
you

908
02:14:07,060 --> 02:14:09,120
you

909
02:14:37,060 --> 02:14:39,120
you

910
02:15:07,060 --> 02:15:09,120
you

911
02:15:37,060 --> 02:15:39,120
you

912
02:16:07,060 --> 02:16:09,120
you

913
02:16:37,060 --> 02:16:39,120
you

914
02:17:07,060 --> 02:17:09,120
you

915
02:17:37,060 --> 02:17:39,120
you

916
02:18:07,060 --> 02:18:09,120
you

917
02:18:37,060 --> 02:18:39,120
you

918
02:19:07,060 --> 02:19:09,120
you

919
02:19:37,060 --> 02:19:39,120
you

920
02:20:07,060 --> 02:20:09,120
you

921
02:20:37,060 --> 02:20:39,120
you

922
02:21:07,060 --> 02:21:09,120
you

923
02:21:37,060 --> 02:21:39,120
you

924
02:22:07,060 --> 02:22:09,120
you

925
02:22:37,060 --> 02:22:39,120
you

926
02:23:07,060 --> 02:23:09,120
you

927
02:23:37,060 --> 02:23:39,120
you

928
02:24:07,060 --> 02:24:09,120
you

929
02:24:37,060 --> 02:24:39,120
you

930
02:25:07,060 --> 02:25:09,120
you

931
02:25:37,060 --> 02:25:39,120
you

932
02:26:07,060 --> 02:26:09,120
you

933
02:26:37,060 --> 02:26:43,220
so we have left now already less than 30 minutes to go

934
02:26:44,660 --> 02:26:49,060
it's almost 32 so i see that less and less people are actually

935
02:26:51,620 --> 02:26:58,180
in time with doing the exercises so we will have a short also questionnaire at the end

936
02:26:58,180 --> 02:27:06,180
don't run away we will ask how complicated was the material so you will actually your

937
02:27:06,180 --> 02:27:12,260
opinion will have an impact. So if you think that we are pretty decent for the intermediate level

938
02:27:13,220 --> 02:27:19,060
your replies are warmly welcome. If you think that it's too complicated or too intensive or etc

939
02:27:19,860 --> 02:27:25,300
your replies are even more welcome. So I will try to adapt by tomorrow the

940
02:27:26,100 --> 02:27:33,780
material if I decide to do so. So let's get back to the functions. So the space usage and me

941
02:27:33,780 --> 02:27:45,300
actually the easiest probably was just to go to this demo space which I have

942
02:27:45,300 --> 02:27:51,980
posted on my web page copy it from there and there you would get the ready to go

943
02:27:51,980 --> 02:27:57,300
functions so please do it if you haven't done yet so or if you were typing on

944
02:27:57,300 --> 02:28:05,140
your own, then just consult these functions that this syntax is correct. So one question was

945
02:28:05,140 --> 02:28:14,820
why that was returning the error message that the command does not exist. So this was explained in a

946
02:28:14,820 --> 02:28:23,540
way that command substitution will print to the prompt the result of the executed command

947
02:28:23,540 --> 02:28:28,540
and that result will be already interpreted as a command.

948
02:28:29,020 --> 02:28:34,020
And so if you just put your login name on the prompt,

949
02:28:35,980 --> 02:28:39,540
then of course there is no command with that name.

950
02:28:39,540 --> 02:28:42,740
And so basically you will get the error message

951
02:28:42,740 --> 02:28:44,740
that the command doesn't exist.

952
02:28:44,740 --> 02:28:46,980
Just a second, I close the room.

953
02:28:53,540 --> 02:29:10,420
Oops. Back online. The other one. Fast found. So what I was trying to, what I was trying to

954
02:29:12,580 --> 02:29:22,260
make it to do. So find function. Where was it? Find name. So that should be already

955
02:29:22,260 --> 02:29:25,700
good enough to get started

956
02:29:27,060 --> 02:29:30,660
the only thing that you need to substitute is search word

957
02:29:30,660 --> 02:29:34,260
like for instance if i would like to be some kind of word

958
02:29:34,260 --> 02:29:38,740
i don't know let's say that i

959
02:29:39,140 --> 02:29:43,380
what kind of stuff i have here do we need store bin

960
02:29:43,380 --> 02:29:48,740
okay let me find for instance the bash history

961
02:29:48,740 --> 02:29:55,220
so now I want to iname and then I want to find something which has bash in name

962
02:29:56,180 --> 02:30:03,060
that wouldn't be enough because it will be looking explicitly for something which is named bash

963
02:30:03,780 --> 02:30:08,660
but we are looking for something which has bash in the name so we need to put this

964
02:30:12,340 --> 02:30:16,900
stars just to make sure that actually we are looking for something which has bash

965
02:30:16,900 --> 02:30:22,860
now that should be good enough and we found already bash history which is in

966
02:30:22,860 --> 02:30:27,660
the current directory and we also have found the hello bash which is somewhere

967
02:30:27,660 --> 02:30:34,360
down there okay now we need to create a function we have already ready to go

968
02:30:34,360 --> 02:30:40,220
command we have it tested from the prompt and we are ready to put it to the

969
02:30:40,220 --> 02:30:43,820
functions. So let me call it

970
02:30:47,820 --> 02:30:58,460
fastfound. I open this this way and I close it this way and I put my name over here. So I also

971
02:30:58,460 --> 02:31:05,900
was told that this should pick up any search word, not only bash. Okay, so we can

972
02:31:05,900 --> 02:31:09,300
and remove it from here,

973
02:31:09,300 --> 02:31:12,360
and then we need to specify what we want.

974
02:31:12,360 --> 02:31:13,580
The good practice,

975
02:31:13,580 --> 02:31:17,900
if we actually use some specific variable over here,

976
02:31:17,900 --> 02:31:20,820
even if you can use this $1,

977
02:31:20,820 --> 02:31:23,900
and you expect that the variable exists,

978
02:31:23,900 --> 02:31:27,980
we usually, and the best practice I usually suggest,

979
02:31:27,980 --> 02:31:29,620
well, I'm not sure about we,

980
02:31:29,620 --> 02:31:32,200
I usually suggest that you use the,

981
02:31:32,200 --> 02:31:40,360
you reassign this $1 to some other variable it's made in the way that you do not occasionally

982
02:31:40,360 --> 02:31:45,960
actually would try to edit this or modify and otherwise you would get the error message

983
02:31:45,960 --> 02:31:55,720
so in this case that should work perfectly yeah i guess so but let me see

984
02:31:55,720 --> 02:32:04,040
The only error over here is that I don't want to use the quotes, single quotes, I need to use this

985
02:32:05,000 --> 02:32:11,240
double quotes. Why? Because I did the explanation at the very beginning of this session, double quotes

986
02:32:13,080 --> 02:32:19,160
make the bash to actually open the variables and substitute the variables. Single quotes will just

987
02:32:19,160 --> 02:32:24,920
take the word as is with the dollar sign and nothing would happen. So this is already something.

988
02:32:25,720 --> 02:32:36,280
and let's say that I want to source it once again and I want to see that

989
02:32:37,640 --> 02:32:46,680
type minus AFA and see it's there and if I want to try this again with a bash see

990
02:32:46,680 --> 02:32:53,440
whether it works it works if I want to try without bash does it work it does

991
02:32:53,440 --> 02:33:01,200
work because find will find you everything even if you provide empty string so basically

992
02:33:01,760 --> 02:33:09,360
it's just we're using this star to tell you that it has lots of file inside

993
02:33:10,000 --> 02:33:17,360
okay we don't really want this kind of situation so it really wants to make sure that actually

994
02:33:17,360 --> 02:33:23,360
this word is not empty what to do in this case we can use once again a logic

995
02:33:24,960 --> 02:33:35,040
a magic of this variable exchange and then what we do here is that we are supposed to actually

996
02:33:35,760 --> 02:33:46,320
give out either the variable itself or the error message and so that we can say here that

997
02:33:47,360 --> 02:33:58,360
what was a directory or search word so sorry we are search word is missing

998
02:33:58,360 --> 02:34:03,640
does it work for us yeah I'm pretty sure this would be already good enough for us

999
02:34:03,640 --> 02:34:13,600
but one thing to remember we still don't want that this find will be executed how

1000
02:34:13,600 --> 02:34:24,000
to do that and this where we come with another one thing which i didn't tell you yet but i will tell

1001
02:34:24,000 --> 02:34:29,520
you on the next session but i will already use it over here just to make this kind of function

1002
02:34:29,520 --> 02:34:39,520
complete so let's say that i will execute it like this and let's see what's going on so source

1003
02:34:39,520 --> 02:34:48,640
and then if I run ff search word is missing so it's already completely correct and so we have

1004
02:34:48,640 --> 02:34:54,320
just exited the bash so we don't really need anything over there but then if you want to be

1005
02:34:54,320 --> 02:35:03,680
completely sure what's going on actually let's don't go that far and let's go to the next session

1006
02:35:03,680 --> 02:35:08,960
and then I will do the explanation and do the modification to this code already right away

1007
02:35:09,520 --> 02:35:25,240
so to have to have it on the line and go in line with the traditional thing I can

1008
02:35:25,240 --> 02:35:29,440
put it as a replace

1009
02:35:30,280 --> 02:35:35,840
okay here you go

1010
02:35:35,840 --> 02:35:38,800
brush

1011
02:35:42,960 --> 02:35:46,880
so here you go and let's make it more compact

1012
02:35:50,800 --> 02:35:51,360
like this

1013
02:35:54,720 --> 02:36:01,440
good so let's get back to the material so my next step was actually touch a little bit the

1014
02:36:01,440 --> 02:36:09,280
redirections. So I'm not going to the conditionals yet, so I wanted to tell you something about

1015
02:36:09,280 --> 02:36:14,560
redirections because I want to touch a few other things within these subjects. Redirections have

1016
02:36:14,560 --> 02:36:23,760
been actually pretty much covered, I think, due to command line utilities. I think they have been,

1017
02:36:23,760 --> 02:36:30,640
yeah, redirections have been covered pretty much in the same, in the previous ones. And then also

1018
02:36:30,640 --> 02:36:38,640
we have it's quite a lot of things covered also within this material so that's a kind of advanced

1019
02:36:38,640 --> 02:36:46,560
one but let me say a few words because it's important even if you know this it's still

1020
02:36:46,560 --> 02:36:52,720
important so every time every time when you are running some kind of any command when you are

1021
02:36:52,720 --> 02:36:59,360
running any script whatever program a lot of happens actually under the hood and one of the

1022
02:36:59,360 --> 02:37:07,920
thing which has happened is that you are getting along with your running file several file descriptors

1023
02:37:07,920 --> 02:37:17,680
open for you. Some of them are reserved and even enumerated so that's the 0, 1 and 2

1024
02:37:17,680 --> 02:37:24,320
and they stand for the standard input, standard output and standard error output

1025
02:37:24,320 --> 02:37:31,880
and all of those guys there actually can be controlled. So you can control where

1026
02:37:31,880 --> 02:37:37,640
by default if you type something like echo or if you type any commands and hit

1027
02:37:37,640 --> 02:37:40,960
output something it goes to your standard output and the standard output

1028
02:37:40,960 --> 02:37:46,320
is the screen the terminal of your terminal so you just see it on your

1029
02:37:46,320 --> 02:37:52,720
on your display basically but you can control where it goes and one thing to

1030
02:37:52,720 --> 02:37:59,960
do is to actually do the redirection and you can redefine actually all of them

1031
02:37:59,960 --> 02:38:06,560
but let's say that I want to do the redirection of something which I don't

1032
02:38:06,560 --> 02:38:14,800
want to see I can use as an example pink command so pink one of the Google DNS

1033
02:38:14,800 --> 02:38:24,320
servers what it tells me that if pink goes through that means i am online so i don't want this to be

1034
02:38:24,320 --> 02:38:35,920
interactive i want to just one single one single packet which will be sent and then exited but i

1035
02:38:35,920 --> 02:38:46,000
still don't want this one go to the screen. I want only the exit code. And we were talking with you

1036
02:38:46,000 --> 02:38:52,960
already, the exit code, even if you don't get any output of the command, you can always take a look

1037
02:38:52,960 --> 02:39:00,080
at what kind of exit code was given by that command. And if it's succeeded, then the exit code

1038
02:39:00,080 --> 02:39:06,720
will be zero if it's not succeeded it will be something else than zero one usually one or it

1039
02:39:06,720 --> 02:39:14,800
could be two it could be in two five six six so that's kind of exit code so i think uh maximum is

1040
02:39:14,800 --> 02:39:22,080
256 that's the maximum but uh can be wrong so not really sure usually from the programmer

1041
02:39:22,080 --> 02:39:29,200
perspective you can by the number of this output you can say what exactly has happened and what

1042
02:39:29,200 --> 02:39:34,960
went wrong. Okay, but in this case what I am saying here, I've used the redirection sign.

1043
02:39:35,760 --> 02:39:45,520
This says me that I want to redirect the standard output to some other place. So, you can do it

1044
02:39:45,520 --> 02:39:51,840
and redirect it to a file and that would be part of the exercise. But you can also do something else

1045
02:39:51,840 --> 02:39:58,400
and you can use the special device called null. On Linux that means that everything what goes to

1046
02:39:58,400 --> 02:40:06,160
the dev null will disappear it will not be seen anywhere so let's see what will happen over here

1047
02:40:07,360 --> 02:40:11,840
pink is okay and then if you see that i can actually check the

1048
02:40:13,200 --> 02:40:17,200
status which has been returned it's zero so it's correct

1049
02:40:19,440 --> 02:40:25,840
let's emulate somehow the situation that we didn't reach the pink so i will not be

1050
02:40:25,840 --> 02:40:31,760
disconnected myself from here but let me just come with something which does not exist and

1051
02:40:31,760 --> 02:40:38,320
which will generate the error message so in this situation ping actually has returned the error

1052
02:40:38,320 --> 02:40:45,440
message it still came to the screen and you see that actually the status the exit code of this

1053
02:40:45,440 --> 02:40:54,240
command was something which is not zero which is already from the point of view if you want to for

1054
02:40:54,240 --> 02:41:02,400
instance run some kind of if or conditional statement so this will be already good enough

1055
02:41:02,400 --> 02:41:09,600
to say that okay it's if it's not succeeded then do that and that okay but we still have one other

1056
02:41:09,600 --> 02:41:18,400
problem if there is an error it's still on the screen so what we do by default this redirection

1057
02:41:18,400 --> 02:41:26,240
pipe, this redirection sign will redirect everything which goes to the standard output.

1058
02:41:26,240 --> 02:41:33,920
But we also want to redirect everything which will go to the standard error output. So how to do that?

1059
02:41:35,120 --> 02:41:40,000
And we can say explicitly here that please redirect the file descriptor number two

1060
02:41:41,040 --> 02:41:46,800
and here we put the redirection sign to the one. So what will happen over here?

1061
02:41:46,800 --> 02:41:51,040
Okay, so from the bash point of view,

1062
02:41:51,040 --> 02:41:54,920
both standard output and standard error output

1063
02:41:54,920 --> 02:41:57,800
will be joined together and redirected

1064
02:41:57,800 --> 02:42:01,340
to the standard output,

1065
02:42:01,340 --> 02:42:04,080
which means they will go directly to def null.

1066
02:42:04,080 --> 02:42:07,520
What will happen here is that no error message

1067
02:42:07,520 --> 02:42:09,000
will appear on the screen.

1068
02:42:09,000 --> 02:42:12,520
And this exit status is the only one we get

1069
02:42:12,520 --> 02:42:14,760
because we are just requesting it explicitly.

1070
02:42:14,760 --> 02:42:24,200
it's correct, but in the modern version of, so this is the most common syntax for this kind of

1071
02:42:24,200 --> 02:42:32,920
notation, but in the modern version of the bash you can also use the compact way

1072
02:42:32,920 --> 02:42:34,840
so you can do it the same, but

1073
02:42:34,840 --> 02:42:43,840
but probably the other way around

1074
02:42:49,840 --> 02:42:53,840
Ah, yeah, that was the problem, not this one

1075
02:42:55,840 --> 02:42:58,840
Yeah, so here you go

1076
02:42:58,840 --> 02:43:11,400
So, here you actually, you get the output, only the exit output.

1077
02:43:11,400 --> 02:43:18,080
And what else I wanted to introduce you, but actually not the introduction, but the kind

1078
02:43:18,080 --> 02:43:27,240
of remembering from the previous course, is that this exit status can be used with the

1079
02:43:27,240 --> 02:43:34,120
logical operands. There are two operands in the bash syntax. That's the logical end and

1080
02:43:34,120 --> 02:43:42,960
logical or. So basically end says that if the exit code of the previous command was

1081
02:43:42,960 --> 02:43:51,320
not zero, was zero, so if it succeeded, then do next. And we can say that echo, we are

1082
02:43:51,320 --> 02:43:55,480
online like this yeah

1083
02:43:58,040 --> 02:44:03,240
let's put the quotes just to be more readable

1084
02:44:03,800 --> 02:44:08,760
essentially we are not uh i mean we are getting the error message

1085
02:44:08,760 --> 02:44:12,760
we are not getting the error message we are online and in the same way

1086
02:44:12,760 --> 02:44:16,600
that if something went wrong we can always say that

1087
02:44:16,600 --> 02:44:19,080
echo

1088
02:44:19,080 --> 02:44:23,800
we are down

1089
02:44:23,800 --> 02:44:28,680
okay at the moment we are online but then if something went wrong

1090
02:44:28,680 --> 02:44:35,080
whatever so we will be getting the message that we are down so this is my

1091
02:44:35,080 --> 02:44:45,400
touch on the redirections and then these logical or logical and and logical or

1092
02:44:45,400 --> 02:44:51,840
You can use it within the script easily, you can use it from the command line and

1093
02:44:51,840 --> 02:44:57,840
this is the most often used, how it's most often used on the command line, but

1094
02:44:57,840 --> 02:45:03,280
nothing stops you from using this on the screen. Then another one thing which I

1095
02:45:03,280 --> 02:45:13,840
was about to tell you is that actually usage of the pipe. Pipe, this is something

1096
02:45:13,840 --> 02:45:16,500
which stands for this one.

1097
02:45:16,500 --> 02:45:19,200
So basically, output of this command

1098
02:45:19,200 --> 02:45:23,600
will be redirected from the standard output

1099
02:45:23,600 --> 02:45:28,120
of one command to the standard input of another command.

1100
02:45:28,120 --> 02:45:29,800
And so let's see how it works.

1101
02:45:29,800 --> 02:45:34,800
So we have had kind of a couple of examples,

1102
02:45:36,040 --> 02:45:37,920
like for instance,

1103
02:45:37,920 --> 02:45:40,660
actually we have had already this disk usage.

1104
02:45:40,660 --> 02:45:42,340
So let's try it once again.

1105
02:45:43,840 --> 02:46:01,680
Okay, what I did, so what's happening over here is that we are redirecting everything

1106
02:46:01,680 --> 02:46:07,880
what we've got from the disk usage command to the sort and the tricky thing that if you

1107
02:46:07,880 --> 02:46:16,840
want to redirect also the error from the from the command number first you will

1108
02:46:16,840 --> 02:46:21,880
also do it this way okay

1109
02:46:23,080 --> 02:46:30,240
maybe it's the other way around so I was yeah that's the other way around but

1110
02:46:30,240 --> 02:46:35,720
actually if I want to get rid of if I want to get rid of for instance this

1111
02:46:35,720 --> 02:46:44,680
message you can do it from this exactly situation so I don't really want to get everything what

1112
02:46:44,680 --> 02:46:52,200
comes as an error I only want to get something which comes to the standard output and so you

1113
02:46:52,200 --> 02:46:59,880
can see that our output is way more clear even if it's harmless it's still if you want to make your

1114
02:46:59,880 --> 02:47:06,000
code robust, you can do it this way. And also I have demonstrated you how to do

1115
02:47:06,000 --> 02:47:13,680
that the other way around. And I think we're pretty much

1116
02:47:17,080 --> 02:47:24,200
what I was thinking about. So we have eight minutes left, but if you're up for

1117
02:47:24,200 --> 02:47:31,880
the yet another one exercise i was actually planning to finish right on this exercise so

1118
02:47:31,880 --> 02:47:40,120
we can try to do it right now and then we will come back to this on on wednesday tomorrow at

1119
02:47:41,480 --> 02:47:48,600
12 i'll do the explanation so let's say that the rest of the time you spent playing with the

1120
02:47:48,600 --> 02:47:53,020
the redirection and piping this exercise.

1121
02:47:53,020 --> 02:47:55,880
Do as much as you want, as much as you can.

1122
02:47:55,880 --> 02:47:59,480
I'll be here probably for the next 15 minutes at least.

1123
02:47:59,480 --> 02:48:04,480
And we will continue otherwise tomorrow at 12.

1124
02:48:05,400 --> 02:48:08,500
And [name], if you want to get something

1125
02:48:08,500 --> 02:48:11,400
like how complicated material is,

1126
02:48:11,400 --> 02:48:13,920
that's also a good chance to do it right now.

1127
02:48:13,920 --> 02:48:24,560
but otherwise let's say that our last exercise for today is this one

1128
02:48:24,560 --> 02:48:30,240
redirection and piping so try to do it that should be fairly easy but except

1129
02:48:30,240 --> 02:48:37,600
the last one last one will probably take you some time to get to the point but

1130
02:48:37,600 --> 02:48:42,080
it's also doable there should be no something

1131
02:48:42,960 --> 02:48:46,160
not much of the troubles

1132
02:48:48,160 --> 02:48:51,920
okay let's try to do this and then i will

1133
02:48:51,920 --> 02:48:57,840
get back to the screen we will be about three minutes late

1134
02:48:57,840 --> 02:49:02,160
running today but let's hope that's okay

1135
02:49:07,600 --> 02:49:09,660
you

1136
02:49:37,600 --> 02:49:39,660
you

1137
02:50:07,600 --> 02:50:09,660
you

1138
02:50:37,600 --> 02:50:39,600
You

1139
02:51:07,600 --> 02:51:09,660
you

1140
02:51:37,600 --> 02:51:39,660
you

1141
02:52:07,600 --> 02:52:09,660
you

1142
02:52:37,600 --> 02:52:39,660
you

1143
02:53:07,600 --> 02:53:09,660
you

1144
02:53:37,600 --> 02:53:39,660
you

1145
02:54:07,600 --> 02:54:09,660
you

1146
02:54:37,600 --> 02:54:39,660
you

1147
02:55:07,600 --> 02:55:09,660
you

1148
02:55:37,600 --> 02:55:39,660
you

1149
02:56:07,600 --> 02:56:09,660
you

1150
02:56:37,600 --> 02:56:39,660
you

1151
02:57:07,600 --> 02:57:09,660
you

1152
02:57:37,600 --> 02:57:39,660
you

1153
02:58:07,600 --> 02:58:09,660
you

