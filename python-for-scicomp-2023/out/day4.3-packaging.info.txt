4.3 Packaging - Python for Scientific Computing 2023

How to package and distribute software you write.

After you create code, what comes next: how do you distribute it? Here, we discuss how to package and distribute your work via pyproject.toml and the Python Package Index and other things.

https://aaltoscicomp.github.io/python-for-scicomp/packaging/

00:09 What is packaging?  How do you distribute code?
01:32 Organizing Python projects / Creating a new sample project
07:12 Adding __init__.py to make it a package
11:33 Making it installable with pyproject.toml
13:58 Exercise 1 introduction
14:43 Sharing packages via PyPI
22:04 Wrap-up, Q&A

-----

Python for Scientific Computing is a bridge between basic Python courses and scientific work with Python.  This is a basic to intermediate course in Python tools such as NumPy, SciPy, Matplotlib, and Pandas.  It also covers some more advanced tools, such as Binder, releasing software, data formats, etc.  It is suitable for people who have a basic understanding of Python and want to know some internals and important libraries for science.  We don't cover anything in too much depth, but we do introduce you to all of the main tools you will need.

This course was put on as a collaboration between partners in Finland, Norway, and Sweden, coordinated by Aalto Scientific Computing.

Links:

- Playlist: https://www.youtube.com/playlist?list=PLZLVmS9rf3nNI3oQEqSJW6yXltOAZnkpa

- Course material: https://aaltoscicomp.github.io/python-for-scicomp/

- Workshop webpage: https://scicomp.aalto.fi/training/scip/python-for-scicomp-2023/

- Aalto Scientific Computing: https://scicomp.aalto.fi/

- CodeRefinery: https://coderefinery.org