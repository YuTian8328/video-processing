1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:11,000
Hello, test 1-2. Can anyone hear us?

16
00:07:11,000 --> 00:07:14,000
Yes.

17
00:07:14,000 --> 00:07:20,000
Well, people on stream, can they hear us?

18
00:07:20,000 --> 00:07:28,000
So, as usual we've got some icebreakers here.

19
00:07:28,000 --> 00:07:36,280
Today, we do a bit more than usual with a command line interface, so you can answer

20
00:07:36,280 --> 00:07:37,960
the size breaker.

21
00:07:37,960 --> 00:07:40,640
This question, I didn't write it very well.

22
00:07:40,640 --> 00:07:49,100
How do you run the same things over and over again, but with slightly different parameters?

23
00:07:49,100 --> 00:07:57,160
So this is like you have 10 different datasets, and you want to run the same code on all of

24
00:07:57,160 --> 00:08:08,280
of them, or you have one data set

25
00:08:08,280 --> 00:08:10,620
and you need to run with 10 different values

26
00:08:10,620 --> 00:08:11,920
of some parameter.

27
00:08:11,920 --> 00:08:16,040
So how would you do that?

28
00:08:16,040 --> 00:08:18,440
OK, there's these other questions here,

29
00:08:18,440 --> 00:08:20,760
which we can try to answer in a bit.

30
00:08:20,760 --> 00:08:23,040
But we have a special guest with us.

31
00:08:23,040 --> 00:08:31,280
So [name], can you introduce yourself?

32
00:08:31,280 --> 00:08:32,560
Yeah, sure.

33
00:08:32,560 --> 00:08:34,120
Yeah, so I'm [name].

34
00:08:34,120 --> 00:08:35,480
I'm based in Finland.

35
00:08:35,480 --> 00:08:40,840
And at the moment, I'm finishing my PhD in computer science.

36
00:08:40,840 --> 00:08:44,920
And I'm also working in industry as a Julia software developer

37
00:08:44,920 --> 00:08:48,040
in a startup for AI.

38
00:08:48,040 --> 00:08:50,680
So yeah, I'm Julia Enthusiast.

39
00:08:50,680 --> 00:08:53,960
And in Finland, I organized this Julia Users Helsinki.

40
00:08:53,960 --> 00:08:58,200
It is a small community of people in Helsinki area, or even outside the Helsinki area,

41
00:08:58,200 --> 00:09:01,400
who want to come together and talk about Julia.

42
00:09:02,280 --> 00:09:07,400
Yeah. And you may wonder, why do we have a Julia visitor here in a Python course?

43
00:09:07,400 --> 00:09:11,320
Yeah. And indeed, I brought the white flag because, you know,

44
00:09:11,320 --> 00:09:13,720
I come in peace and also want to live in one piece.

45
00:09:15,080 --> 00:09:18,280
But I mean, my answer to that is that, why not?

46
00:09:18,280 --> 00:09:23,760
I mean, it's not like one language is better than another

47
00:09:23,760 --> 00:09:24,800
for everything.

48
00:09:24,800 --> 00:09:26,860
But there's all these different things here.

49
00:09:26,860 --> 00:09:29,080
And knowing more about different languages

50
00:09:29,080 --> 00:09:33,400
would have helped me in the future some, or in the past.

51
00:09:33,400 --> 00:09:36,400
But also, the idea is to have role models

52
00:09:36,400 --> 00:09:39,680
of different kinds of career paths.

53
00:09:39,680 --> 00:09:42,040
So [name], can you tell us a little bit about how

54
00:09:42,040 --> 00:09:43,520
you got to where you are now?

55
00:09:43,520 --> 00:09:46,880
Like, what's your background, and how did you like?

56
00:09:46,880 --> 00:09:50,880
Yeah, so my background is more like computer science, signal

57
00:09:50,880 --> 00:09:54,440
process, statistical signal processing, that kind of stuff.

58
00:09:54,440 --> 00:09:58,400
And I was like, when I think when I started doing my master

59
00:09:58,400 --> 00:10:02,160
thesis, I had like the traditional story that I was

60
00:10:03,280 --> 00:10:05,720
doing a lot of coding at the beginning, I was doing in a very

61
00:10:05,720 --> 00:10:08,360
like painful way, like moving files around, and that felt

62
00:10:08,360 --> 00:10:12,120
wrong. So I started like getting more into proper way and got

63
00:10:13,000 --> 00:10:16,760
like more into proper scientific computing, and so on. And

64
00:10:16,760 --> 00:10:22,960
And also, I heard about open source communities, and I was interested in that.

65
00:10:22,960 --> 00:10:25,920
And at some point, Julia came under my radar.

66
00:10:25,920 --> 00:10:33,020
So I heard about this Julia language that was meant for scientific computing and researchers.

67
00:10:33,020 --> 00:10:34,960
And I was pretty interested in it.

68
00:10:34,960 --> 00:10:40,360
But what really sparkled my enthusiasm about Julia wasn't even the technical features of

69
00:10:40,360 --> 00:10:41,360
Julia.

70
00:10:41,360 --> 00:10:43,600
Because at the beginning, I didn't know anything about it.

71
00:10:43,600 --> 00:10:45,200
I didn't know why it was good.

72
00:10:45,200 --> 00:10:49,560
I didn't know about internals or multiple dispatch or metaprogramming or whatever.

73
00:10:49,560 --> 00:10:52,800
What was cool is that it was beginning 2020.

74
00:10:52,800 --> 00:10:57,360
I had started my PhD and as you probably remember, COVID had also started, so I was stuck in

75
00:10:57,360 --> 00:11:01,220
my room and I joined the Julia Slack.

76
00:11:01,220 --> 00:11:08,600
And then it was pretty cool to see how everybody was very friendly, how everybody was very

77
00:11:08,600 --> 00:11:09,600
active.

78
00:11:09,600 --> 00:11:15,280
And I was seeing famous people, like people of popular Julia packages, who were sitting

79
00:11:15,280 --> 00:11:21,920
there answering my dumb questions and getting me step-by-step, so it was more this community

80
00:11:21,920 --> 00:11:27,000
feeling that really got me into open source, so I sticked to Julia.

81
00:11:27,000 --> 00:11:35,240
Then I actually started writing documentation, so I was in this Google Summer of Docs for

82
00:11:35,240 --> 00:11:39,560
writing documentation, and I started building a web page for a couple of libraries, and

83
00:11:39,560 --> 00:11:44,120
writing documentation for libraries. And then I was twice in this Google Summer of Code

84
00:11:44,120 --> 00:11:49,680
program, like doing more Julia programming. And after that, I also found a job as a software

85
00:11:49,680 --> 00:11:54,280
developer, Julian, like a startup through like people I knew in the Julia community.

86
00:11:54,280 --> 00:11:58,720
And I have, of course, like been using Julia in my research also for like for my PhD and

87
00:11:58,720 --> 00:12:04,200
for my own research. And yeah,

88
00:12:04,200 --> 00:12:07,320
Julian is a pretty new language, right?

89
00:12:07,320 --> 00:12:10,840
Yeah, we celebrated the last year's 10 years of Julia

90
00:12:10,840 --> 00:12:15,860
There was this a heck MD kind of a yearbook where you could design your experience of 10 years of Julia

91
00:12:15,940 --> 00:12:22,500
so it was I think the first commit was from 2009 and the first

92
00:12:22,900 --> 00:12:28,940
Public release was from 2012 and it achieved the version 1.0 at the 2018

93
00:12:29,780 --> 00:12:31,780
it was developed at MIT and

94
00:12:31,780 --> 00:12:37,540
And the goal of Julia was to solve this so-called two-language problem.

95
00:12:37,540 --> 00:12:41,780
So, you know, you encounter this problem that you start writing in Python,

96
00:12:41,780 --> 00:12:46,500
and then you hit some performance bottlenecks, because Python is an interpreted language,

97
00:12:46,500 --> 00:12:48,660
and then you needed to rewrite it in C.

98
00:12:48,660 --> 00:12:55,060
Or also, people who use Python, actually, under the hood, TensorFlow is written in C.

99
00:12:55,060 --> 00:12:58,420
Or a lot of libraries are written in C or Python.

100
00:12:58,420 --> 00:13:00,900
Sorry, in Cython, I meant, not Python.

101
00:13:00,900 --> 00:13:08,500
So whereas in Julia, the power about Julia is that it allows to prototype and achieve

102
00:13:08,500 --> 00:13:14,820
performance in the same language. So the magic word here is multiple dispatch,

103
00:13:14,820 --> 00:13:19,700
and there's a very inspiring talk like the unreasonable effectiveness of multiple dispatch

104
00:13:19,700 --> 00:13:28,020
from JuliaCon 2019, which explains how it achieves both dynamicity and performance.

105
00:13:28,020 --> 00:13:40,020
Okay. Interesting. Okay, so we're almost where we need to begin the next lesson.

106
00:13:40,020 --> 00:13:48,020
Anyone have any questions for [name]? If you do, please write down there.

107
00:13:48,020 --> 00:13:55,340
there. So [name], there's something I always ask people. So what do you know now that you

108
00:13:55,340 --> 00:13:59,460
wish someone had told you at the start of your career?

109
00:13:59,460 --> 00:14:08,260
Yeah. So what for like more like my open source career, like being involved in the Julia community,

110
00:14:08,260 --> 00:14:13,380
like one thing that I really wished people like told me before, which I learned kind

111
00:14:13,380 --> 00:14:21,300
of my experience is that you really don't need to be scared to start and you don't need

112
00:14:21,300 --> 00:14:26,340
to ask permission. That's a good thing about open source. Also, at the beginning, when

113
00:14:26,340 --> 00:14:32,780
I started, I was a bit shy. I was like, okay, maybe a first prototype in closed repository.

114
00:14:32,780 --> 00:14:38,820
Should I open it? Will people just say it's dumb or will people steal my job or stuff

115
00:14:38,820 --> 00:14:43,180
like that, but this doesn't happen in open source, at least not in Julia communities,

116
00:14:43,180 --> 00:14:47,060
like a reasonable size for it not to happen.

117
00:14:47,060 --> 00:14:51,100
So just put your code out there and don't be afraid.

118
00:14:51,100 --> 00:14:54,660
The best way to get the answer is not to ask the question, it's to post the wrong answer.

119
00:14:54,660 --> 00:14:57,860
So just put your code out there, put your work out there, and people will help you.

120
00:14:57,860 --> 00:15:01,500
You don't need to be afraid of that.

121
00:15:01,500 --> 00:15:08,540
And actually, similarly applies to research, at least like in my field, I don't need to

122
00:15:08,540 --> 00:15:11,080
worry that much about scooping.

123
00:15:11,080 --> 00:15:13,500
So it's pretty cool that also research

124
00:15:13,500 --> 00:15:17,120
I can put my code and my work out there publicly

125
00:15:17,120 --> 00:15:18,680
and I just meet new people.

126
00:15:18,680 --> 00:15:22,440
So that, and maybe other quick thing about

127
00:15:22,440 --> 00:15:25,240
is that open source is not about code, it's about community.

128
00:15:25,240 --> 00:15:29,200
So we have already a lot of people coding in open source

129
00:15:29,200 --> 00:15:30,560
and of course the more the merrier,

130
00:15:30,560 --> 00:15:32,560
but we also need the non-technical people in open source,

131
00:15:32,560 --> 00:15:34,320
people helping with writing documentation,

132
00:15:34,320 --> 00:15:36,620
people helping with bringing people together,

133
00:15:36,620 --> 00:15:38,440
people helping with improving diversity

134
00:15:38,440 --> 00:15:44,920
inclusion. So open source is really not about code, but it's more about community. And as I mentioned,

135
00:15:44,920 --> 00:15:49,640
like, I got, like, sparkled from truly not because of multiple dispatch, which I didn't know what it

136
00:15:49,640 --> 00:15:56,600
was, but because of people friendliness. So, yeah. Yeah. Okay. Great. Thanks. And I can also

137
00:15:56,600 --> 00:16:03,080
say about what [name] said about putting your code out there. If you want to be hired somewhere,

138
00:16:03,080 --> 00:16:08,440
like whenever I'm looking to hire people, having public code and saying that,

139
00:16:09,080 --> 00:16:12,440
like being able to see things, that's a huge benefit there.

140
00:16:14,120 --> 00:16:17,080
Okay, but now we need to get started.

141
00:16:18,520 --> 00:16:19,800
Thanks for visiting.

142
00:16:19,800 --> 00:16:24,120
Yeah, last thing, if you are in Finland, we have every month in Helsinki,

143
00:16:24,120 --> 00:16:27,320
this Julia Helsinki meetup, except not this month,

144
00:16:27,320 --> 00:16:30,680
but the next one is going to be on the 13th of December,

145
00:16:30,680 --> 00:16:34,760
and it's gonna be especially for beginners about Julia, so we're gonna be like intro about Julia

146
00:16:34,760 --> 00:16:42,200
and about how to use Julia research and teaching. I also put in the notes, so 13th of December. It's

147
00:16:42,200 --> 00:16:45,960
not official, it's not even on the website yet, but I can give you the spoiler of this. Congrats

148
00:16:45,960 --> 00:16:51,560
and hope to see you there. Yeah, okay, great, thank you. Yeah, thank you for having me. Bye.

149
00:16:51,560 --> 00:16:52,120
Okay, bye.

150
00:16:57,960 --> 00:17:02,840
So, with that said, I guess we should get started for the day.

151
00:17:07,080 --> 00:17:10,840
Yes, so the first lesson is [name] and I.

152
00:17:12,200 --> 00:17:15,960
Hello, [name], have you already introduced yourself? I think so.

153
00:17:15,960 --> 00:17:22,360
I don't think so. I think this is my first appearance this year.

154
00:17:22,360 --> 00:17:29,080
So yeah, I'm a research software engineer at Arthur University, working in [Name]'s group

155
00:17:31,080 --> 00:17:35,240
and in general interested in programming.

156
00:17:38,360 --> 00:17:42,040
In general. Okay, so what's our first lesson of today?

157
00:17:42,040 --> 00:17:47,520
The first lesson of today will be scripts, so going from the

158
00:17:47,520 --> 00:17:55,640
Jupyter Notebooks more into a command line area, and kind of

159
00:17:55,640 --> 00:18:01,120
the very, very first step to make code really reusable without

160
00:18:01,120 --> 00:18:02,720
modifying the code itself.

161
00:18:02,720 --> 00:18:07,360
And that's related to this first icebreaker or second icebreaker

162
00:18:07,360 --> 00:18:08,000
question here.

163
00:18:08,000 --> 00:18:11,200
How do you run the same thing over and over, but with slightly

164
00:18:11,200 --> 00:18:14,400
different parameters, like the same code with different data.

165
00:18:17,000 --> 00:18:21,440
So should I share my screen and we

166
00:18:21,440 --> 00:18:23,040
can get straight to the lesson?

167
00:18:23,040 --> 00:18:23,760
Yep.

168
00:18:23,760 --> 00:18:25,560
Sounds like a plan.

169
00:18:25,560 --> 00:18:30,280
I will push a button here.

170
00:18:30,280 --> 00:18:33,800
And it transfers.

171
00:18:33,800 --> 00:18:37,080
I adjust that.

172
00:18:37,080 --> 00:18:40,680
OK, so as a reminder for the schedule

173
00:18:40,680 --> 00:18:46,200
Coming to scripts here, I open this.

174
00:18:46,200 --> 00:18:48,200
So what does the word script even mean?

175
00:18:51,040 --> 00:18:57,120
To me, script means a kind of self-contained, very small

176
00:18:57,120 --> 00:19:02,360
program that doesn't have a lot of interactions yet,

177
00:19:02,360 --> 00:19:06,000
but that's just some very small thing.

178
00:19:06,000 --> 00:19:09,240
It can call additional libraries, but in itself,

179
00:19:09,240 --> 00:19:15,800
it doesn't provide a lot of code.

180
00:19:15,800 --> 00:19:20,320
That's what I think of when I'm talking about a script.

181
00:19:20,320 --> 00:19:22,840
When it gets more complex, I would rather

182
00:19:22,840 --> 00:19:23,680
talk about a program.

183
00:19:26,840 --> 00:19:31,040
So is this lesson really about scripts or programs or?

184
00:19:34,720 --> 00:19:36,040
I think both.

185
00:19:36,040 --> 00:19:37,280
Yeah.

186
00:19:37,280 --> 00:19:39,920
I guess how it's about the transition

187
00:19:39,920 --> 00:19:47,360
from different systems of using code.

188
00:19:47,360 --> 00:19:48,840
Yes.

189
00:19:48,840 --> 00:19:49,720
And exactly.

190
00:19:49,720 --> 00:19:53,200
So the point is, this lesson, so far we've

191
00:19:53,200 --> 00:19:54,880
been showing things in Jupyter.

192
00:19:54,880 --> 00:19:57,080
So basically, you can click and run things

193
00:19:57,080 --> 00:19:59,040
in whatever order you want.

194
00:19:59,040 --> 00:20:01,440
So now that we have scripts here,

195
00:20:01,440 --> 00:20:08,400
we'll be able to plug our code into other things

196
00:20:08,400 --> 00:20:09,280
a little bit better.

197
00:20:12,160 --> 00:20:19,560
Yeah, or at least we will be able to rerun our code

198
00:20:19,560 --> 00:20:24,880
with different parameter sets without actually modifying

199
00:20:24,880 --> 00:20:25,380
the code.

200
00:20:25,380 --> 00:20:29,320
Because if you're modifying a Python script or the Jupyter

201
00:20:29,320 --> 00:20:33,920
notebook by editing your initial conditions or the source

202
00:20:33,920 --> 00:20:34,840
files or whatever.

203
00:20:34,840 --> 00:20:37,680
You're always modifying the code.

204
00:20:37,680 --> 00:20:39,240
Yeah.

205
00:20:39,240 --> 00:20:41,280
OK.

206
00:20:41,280 --> 00:20:43,920
So up here, there's the section on why scripts.

207
00:20:43,920 --> 00:20:48,480
So if you had to convince the people listening here

208
00:20:48,480 --> 00:20:52,600
that you should consider making a script or a program out

209
00:20:52,600 --> 00:20:54,840
of your code.

210
00:20:54,840 --> 00:20:58,040
Well, the main reason, I would say,

211
00:20:58,040 --> 00:21:04,040
It very often comes down to, I have a certain pipeline

212
00:21:04,040 --> 00:21:07,640
that I've developed for one example.

213
00:21:07,640 --> 00:21:12,080
And now people want to use this pipeline

214
00:21:12,080 --> 00:21:16,920
for multiple different data sets.

215
00:21:16,920 --> 00:21:20,360
Of course, if I have that in a Jupyter Notebook,

216
00:21:20,360 --> 00:21:24,360
I can, every time, change the Jupyter Notebook,

217
00:21:24,360 --> 00:21:29,080
change the input variables, and run it for their data set.

218
00:21:29,080 --> 00:21:34,120
But that needs me to do it again, and again, and again.

219
00:21:34,120 --> 00:21:40,160
And I will likely do typos and whatnot in there.

220
00:21:40,160 --> 00:21:43,240
So I'd rather have some kind of folder

221
00:21:43,240 --> 00:21:46,000
where I have the data sets, and I

222
00:21:46,000 --> 00:21:48,320
want to go through all the files in that folder.

223
00:21:48,320 --> 00:21:56,320
And potentially, I want to run this on a cluster or something.

224
00:21:56,320 --> 00:21:58,320
Yeah, that's a good way to say it.

225
00:21:58,320 --> 00:22:03,320
Some people come and want to use our cluster to run tens.

226
00:22:03,320 --> 00:22:05,320
They have hundreds of input data sets.

227
00:22:05,320 --> 00:22:07,320
Let's say I have this Jupyter Notebook.

228
00:22:07,320 --> 00:22:11,320
How do I run it on 100 different things in parallel?

229
00:22:11,320 --> 00:22:12,320
That's sort of hard.

230
00:22:12,320 --> 00:22:17,320
But if you make a script out of it, then we can make a thing that

231
00:22:17,320 --> 00:22:21,080
extremely easy to just run it with 100 different input

232
00:22:21,080 --> 00:22:22,080
parameters.

233
00:22:22,080 --> 00:22:23,760
Yeah.

234
00:22:23,760 --> 00:22:27,200
And that's where scripts or the transition to Python scripts

235
00:22:27,200 --> 00:22:30,560
from a Python notebook comes in.

236
00:22:30,560 --> 00:22:36,240
So we have two exercises prepared for today.

237
00:22:36,240 --> 00:22:40,120
The first one is coming up shortly.

238
00:22:40,120 --> 00:22:46,080
So it's just about converting a Python notebook or a Jupyter

239
00:22:46,080 --> 00:22:48,720
notebook to a Python script.

240
00:22:48,720 --> 00:22:49,760
Yeah.

241
00:22:49,760 --> 00:22:51,400
I guess here's our short-term road map.

242
00:22:51,400 --> 00:22:56,240
So I will do a demonstration of converting a notebook

243
00:22:56,240 --> 00:22:58,280
to a Python script.

244
00:22:58,280 --> 00:23:01,280
And then you'll have five minutes to try this yourself.

245
00:23:01,280 --> 00:23:03,720
Then we'll come back, talk, demonstrate more,

246
00:23:03,720 --> 00:23:06,400
and then there'll be a much longer exercise

247
00:23:06,400 --> 00:23:11,880
where you can finish up number one and try some more things.

248
00:23:11,880 --> 00:23:13,240
Does that sound good?

249
00:23:13,240 --> 00:23:14,840
Yeah, at least to me.

250
00:23:14,840 --> 00:23:17,640
because that's what we're going to do.

251
00:23:17,640 --> 00:23:21,600
OK, so I'll show my JupyterLab here.

252
00:23:21,600 --> 00:23:32,320
So yeah, essentially, it should be.

253
00:23:32,320 --> 00:23:33,700
So this is the instructions here.

254
00:23:33,700 --> 00:23:37,000
Should we go to the exercise and show?

255
00:23:37,000 --> 00:23:40,880
Yeah, you can also just download it now.

256
00:23:40,880 --> 00:23:48,240
Okay, so I'll use the same trick I used before. I will right click here and do copy link

257
00:23:49,120 --> 00:23:56,560
and come into JupyterLab and do file open from URL and paste it here.

258
00:23:59,360 --> 00:24:06,640
And it both downloads it as you see on the side here and it's opened it in JupyterLab.

259
00:24:06,640 --> 00:24:11,640
Should I try running it to show that it works?

260
00:24:11,640 --> 00:24:14,640
Yes.

261
00:24:14,640 --> 00:24:19,640
Okay, there we go.

262
00:24:19,640 --> 00:24:26,640
Okay, and now you essentially want to export this into a Python file.

263
00:24:26,640 --> 00:24:33,640
The easiest is just going to File, Save and Export Notebook as.

264
00:24:33,640 --> 00:24:38,640
So, this will download it to my computer?

265
00:24:38,640 --> 00:24:41,640
Yep.

266
00:24:41,640 --> 00:24:44,640
And not save file as, save and export.

267
00:24:44,640 --> 00:24:47,640
File...

268
00:24:47,640 --> 00:24:50,640
Further down. Save and export.

269
00:24:50,640 --> 00:24:53,640
As executable script.

270
00:24:53,640 --> 00:24:56,640
Executable script.

271
00:24:56,640 --> 00:24:59,640
Okay.

272
00:24:59,640 --> 00:25:05,640
But this is downloaded, and where is it now?

273
00:25:05,640 --> 00:25:06,640
Yeah.

274
00:25:06,640 --> 00:25:07,640
Okay.

275
00:25:07,640 --> 00:25:17,680
So, another, I suppose we also do, we try it from the command line here.

276
00:25:17,680 --> 00:25:23,120
So I think that what I'm about to show will work for more people.

277
00:25:23,120 --> 00:25:24,120
I'll go to file.

278
00:25:24,120 --> 00:25:27,160
Or at least it's easier that way.

279
00:25:27,160 --> 00:25:36,280
launcher and from the new launcher I start the terminal and I see this is the directory where

280
00:25:36,280 --> 00:25:41,240
I'm doing course things. So this may be the first introduction to command line for some people.

281
00:25:41,240 --> 00:25:47,000
So for some people this may seem impossibly hard and for some people will be impossibly easy.

282
00:25:47,640 --> 00:25:55,800
That's just sort of how it goes unfortunately. So if it's too hard take this lesson as a demo

283
00:25:55,800 --> 00:25:59,240
and work slowly and come back to it later now that you're inspired.

284
00:26:00,280 --> 00:26:08,520
That's all I can recommend. So I'm copying this line here and I will paste it.

285
00:26:09,720 --> 00:26:16,920
And for me ctrl shift v works. I think just ctrl v might do something.

286
00:26:17,640 --> 00:26:19,160
Ctrl v actually does work.

287
00:26:19,160 --> 00:26:30,520
Anyway, so if I run this, then it converts it.

288
00:26:30,520 --> 00:26:36,280
So it says it's writing data to weatherObservations.py.

289
00:26:36,280 --> 00:26:39,720
You can try if it works.

290
00:26:39,720 --> 00:26:47,000
If I open the file browser, I see weatherObservations.py here.

291
00:26:47,000 --> 00:26:51,880
if we come here, we can try running it this way. Python.

292
00:26:59,320 --> 00:27:07,160
Oh, it looks like it ran. Yeah, and if you now type ls or dir, depending on the operating system,

293
00:27:07,160 --> 00:27:12,520
you see that there is a weather.png being created. It wasn't there before. Let's come

294
00:27:12,520 --> 00:27:16,920
come back to the file browser, and we see weather.png.

295
00:27:16,920 --> 00:27:18,760
And if I click on this, I see it.

296
00:27:18,760 --> 00:27:23,880
The same image that was generated before.

297
00:27:23,880 --> 00:27:25,600
The same.

298
00:27:25,600 --> 00:27:26,520
OK, so it showed it.

299
00:27:26,520 --> 00:27:30,800
It was also generated from the notebook,

300
00:27:30,800 --> 00:27:33,560
but it was updated, as you can see.

301
00:27:33,560 --> 00:27:36,280
It was created seconds ago.

302
00:27:36,280 --> 00:27:37,000
OK.

303
00:27:37,000 --> 00:27:40,080
It actually works.

304
00:27:40,080 --> 00:27:53,680
So, let's give our, sorry for the videos hiding, well I would say let's give our viewers

305
00:27:53,680 --> 00:27:59,760
five minutes to just repeat this again and see that that works on their machine.

306
00:27:59,760 --> 00:28:06,640
So we'll give you five minutes, yeah, if things go horribly wrong then

307
00:28:06,640 --> 00:28:11,320
Then, well, we're sorry,

308
00:28:11,320 --> 00:28:16,440
something's gone wrong and sit back and do this as a demo.

309
00:28:16,640 --> 00:28:22,360
Thanks. Five minutes. See you shortly. Bye.

310
00:28:36,640 --> 00:28:38,700
you

311
00:29:06,640 --> 00:29:08,700
you

312
00:29:36,640 --> 00:29:38,700
you

313
00:30:06,640 --> 00:30:08,700
you

314
00:30:36,640 --> 00:30:38,700
you

315
00:31:06,640 --> 00:31:08,700
you

316
00:31:36,640 --> 00:31:38,700
you

317
00:32:06,640 --> 00:32:08,700
you

318
00:32:36,640 --> 00:32:38,700
you

319
00:33:06,640 --> 00:33:08,700
you

320
00:33:36,640 --> 00:34:06,600
And there we should be back on track.

321
00:34:06,600 --> 00:34:14,320
And now coming more to what the actual use is of doing this

322
00:34:14,320 --> 00:34:15,800
and putting it in a script.

323
00:34:15,800 --> 00:34:16,300
Yeah.

324
00:34:16,300 --> 00:34:19,720
So reading through the notes, there's

325
00:34:19,720 --> 00:34:23,320
some different problems here.

326
00:34:23,320 --> 00:34:27,280
And this is sort of, I mean, this is expected.

327
00:34:27,280 --> 00:34:29,040
So of course, we don't want problems.

328
00:34:29,040 --> 00:34:35,240
But there's always some places where

329
00:34:35,240 --> 00:34:37,680
like someone's own computer is different,

330
00:34:37,680 --> 00:34:39,640
or with different operating systems,

331
00:34:39,640 --> 00:34:43,040
or I have a feeling that there is some cloud service which

332
00:34:43,040 --> 00:34:47,280
is not working and doesn't provide shell access.

333
00:34:47,280 --> 00:34:54,200
And this is, well, yeah, in that case.

334
00:34:54,200 --> 00:34:57,520
Not much we can do about that, especially

335
00:34:57,520 --> 00:35:00,000
if Jupyter is run on a web service,

336
00:35:00,000 --> 00:35:03,480
then it's mostly out of our control, unfortunately.

337
00:35:05,240 --> 00:35:10,240
Yeah. So if it doesn't work, just watch.

338
00:35:10,240 --> 00:35:11,240
Okay.

339
00:35:11,240 --> 00:35:16,240
Or if it doesn't work, what I would suggest is you download the file,

340
00:35:16,240 --> 00:35:21,240
copy the data from the file into

341
00:35:21,240 --> 00:35:26,240
a new file that you call .py

342
00:35:26,240 --> 00:35:31,240
because it mainly is exactly the same.

343
00:35:31,240 --> 00:35:35,560
But that Jupyter Notebook is mainly Python code.

344
00:35:38,240 --> 00:35:40,360
And doesn't contain a lot of other stuff.

345
00:35:40,360 --> 00:35:41,720
Yeah.

346
00:35:41,720 --> 00:35:43,160
OK.

347
00:35:43,160 --> 00:35:45,360
So let's continue.

348
00:35:45,360 --> 00:35:45,880
Yeah.

349
00:35:45,880 --> 00:35:53,440
So the nice thing with having this as a script

350
00:35:53,440 --> 00:35:57,920
is that we now have access to command line arguments.

351
00:35:57,920 --> 00:36:00,400
So if you run this from the command line like [Name] just

352
00:36:00,400 --> 00:36:05,280
did when he was in the terminal, we

353
00:36:05,280 --> 00:36:08,680
can add additional information in.

354
00:36:12,440 --> 00:36:16,320
And that information is accessible inside the code

355
00:36:16,320 --> 00:36:26,600
via the sys.argv, or via the sys object and via sys.argv.

356
00:36:26,600 --> 00:36:30,720
And it's interesting to know that the first value,

357
00:36:30,720 --> 00:36:34,520
so this argv stands for argument values.

358
00:36:34,520 --> 00:36:38,280
The first argument value is always the program,

359
00:36:38,280 --> 00:36:43,000
or the script name that you're calling,

360
00:36:43,000 --> 00:36:47,360
because it's actually the arguments to Python

361
00:36:47,360 --> 00:36:50,280
that you're getting there.

362
00:36:50,280 --> 00:36:52,000
Yeah.

363
00:36:52,000 --> 00:36:54,520
So basically, I could run something

364
00:36:54,520 --> 00:36:59,220
like Python weather observations, as an example.

365
00:36:59,220 --> 00:36:59,720
Hello.

366
00:37:02,280 --> 00:37:04,360
Hello.png.

367
00:37:04,360 --> 00:37:09,580
And the code can figure out that this hello.png is

368
00:37:09,580 --> 00:37:13,440
where I should save the figure.

369
00:37:13,440 --> 00:37:16,640
Needs to be modified accordingly, but yes.

370
00:37:16,640 --> 00:37:20,520
So from the command line, we have a and b arguments.

371
00:37:20,520 --> 00:37:27,800
And from the code, we have it accessible as ARCv1 and ARCv2.

372
00:37:27,800 --> 00:37:29,880
So should I do it?

373
00:37:33,440 --> 00:37:35,200
Yes.

374
00:37:35,200 --> 00:37:40,200
The example I'll go also adds the time range,

375
00:37:40,200 --> 00:37:43,040
because we are looking for something

376
00:37:43,040 --> 00:37:44,680
with weather observations that maybe we

377
00:37:44,680 --> 00:37:49,960
want to change what times we actually want to look at.

378
00:37:49,960 --> 00:37:54,160
But yeah, we can also first just change it

379
00:37:54,160 --> 00:37:58,360
so that it just changes the output name.

380
00:37:58,360 --> 00:38:02,200
So I will come, I will open the script itself.

381
00:38:02,200 --> 00:38:07,400
So here, the icon is a Python script thing.

382
00:38:07,400 --> 00:38:16,520
So I double click this, and I've opened now weather.py.

383
00:38:16,520 --> 00:38:17,400
And I see the script.

384
00:38:17,400 --> 00:38:22,000
So it looks a lot like the Python code in 1,

385
00:38:22,000 --> 00:38:25,040
in 2, where the cells were.

386
00:38:25,040 --> 00:38:26,920
So what do I change?

387
00:38:26,920 --> 00:38:32,560
So if you want to change that, the first input argument

388
00:38:32,560 --> 00:38:38,320
is the we will depart from the code that's

389
00:38:38,320 --> 00:38:40,400
in here a little bit at the moment,

390
00:38:40,400 --> 00:38:44,440
just to make people aware of that.

391
00:38:44,440 --> 00:38:48,440
So if we want to have the first input argument as the output

392
00:38:48,440 --> 00:38:54,320
file name, then we would need to go to, essentially,

393
00:38:54,320 --> 00:38:57,640
to the end of the script, where it says fig.savefig.

394
00:38:57,640 --> 00:39:02,040
Well, let's do what it shows here in the screen share.

395
00:39:02,040 --> 00:39:04,160
So OK, then, the first thing we need to do

396
00:39:04,160 --> 00:39:10,040
is we need to actually import the system information.

397
00:39:10,040 --> 00:39:14,000
And that's just to know that, OK, now

398
00:39:14,000 --> 00:39:15,800
we can access this system information.

399
00:39:15,800 --> 00:39:20,480
It's a package that's always available in Python

400
00:39:20,480 --> 00:39:23,960
because it's a basic package.

401
00:39:23,960 --> 00:39:25,960
But we still need to import it so that we

402
00:39:25,960 --> 00:39:28,320
can access the information.

403
00:39:28,320 --> 00:39:31,520
And so now, if you're watching, if you're still

404
00:39:31,520 --> 00:39:35,720
working on the exercise, stop and just listen to us.

405
00:39:35,720 --> 00:39:40,040
So that's what I'd recommend.

406
00:39:40,040 --> 00:39:43,560
We will change it so that we can set the start and end

407
00:39:43,560 --> 00:39:46,560
for always the first and second argument.

408
00:39:46,560 --> 00:39:47,560
Arguments are always,

409
00:39:47,560 --> 00:39:50,560
command line arguments are always separated by spaces.

410
00:39:50,560 --> 00:39:55,560
So the first in that instance actually is number one

411
00:39:55,560 --> 00:39:58,560
because zero, as we said before, is the script name.

412
00:39:59,560 --> 00:40:01,560
So that's sysargv1.

413
00:40:01,560 --> 00:40:04,560
And the second and the end date would be sysargv2.

414
00:40:07,560 --> 00:40:10,560
And then we want to have the third argument

415
00:40:10,560 --> 00:40:12,560
being the output file name.

416
00:40:12,560 --> 00:40:20,600
And we can either directly say here, sys.arcv3,

417
00:40:20,600 --> 00:40:27,040
or we can create a variable in between that indicates

418
00:40:27,040 --> 00:40:27,880
the output file name.

419
00:40:34,680 --> 00:40:37,080
OK, here we go.

420
00:40:37,080 --> 00:40:38,840
I've saved it.

421
00:40:38,840 --> 00:40:43,800
And if you now go back to the terminal.

422
00:40:43,800 --> 00:40:45,200
Terminal.

423
00:40:45,200 --> 00:40:54,880
So Python weather observations from the 1st of March, 2021,

424
00:40:54,880 --> 00:40:55,720
the end of May.

425
00:41:00,480 --> 00:41:01,440
Let's see.

426
00:41:01,440 --> 00:41:04,120
Did it work?

427
00:41:04,120 --> 00:41:06,440
Let's come back to the file browser.

428
00:41:06,440 --> 00:41:13,240
And I see there's an image now called Spring in Tapiola.

429
00:41:13,240 --> 00:41:18,960
And it looks different, for sure.

430
00:41:18,960 --> 00:41:25,040
And it's still quite cold and dirty water.

431
00:41:25,040 --> 00:41:27,360
It doesn't look that bad, though.

432
00:41:27,360 --> 00:41:30,160
Actually, there's something odd here.

433
00:41:30,160 --> 00:41:35,080
Might be that the data actually doesn't contain the March part,

434
00:41:35,080 --> 00:41:38,800
because it only starts at somewhere beginning of May.

435
00:41:43,600 --> 00:41:49,800
OK, so yeah.

436
00:41:49,800 --> 00:41:53,840
OK, so now what do we get from this?

437
00:41:53,840 --> 00:41:58,440
Well, we get the option that we can now essentially modify

438
00:41:58,440 --> 00:42:04,480
or call the same code, but use different input variables

439
00:42:04,480 --> 00:42:08,280
without going back into the code and modifying the script.

440
00:42:08,280 --> 00:42:11,640
So you can run this script multiple times

441
00:42:11,640 --> 00:42:14,160
with different input parameters.

442
00:42:14,160 --> 00:42:16,800
That has the advantage that you can essentially

443
00:42:16,800 --> 00:42:19,840
call it from some other tool, or you

444
00:42:19,840 --> 00:42:25,960
can call it in another script and can automatically

445
00:42:25,960 --> 00:42:32,000
call it with a list of things, making it a bit more

446
00:42:32,000 --> 00:42:35,480
robust to potential changes.

447
00:42:35,480 --> 00:42:36,720
Yeah.

448
00:42:36,720 --> 00:42:41,800
So now, before we go to the exercise,

449
00:42:41,800 --> 00:42:43,840
there's a little bit more.

450
00:42:43,840 --> 00:42:49,680
So here, what we've done in this code is very basic.

451
00:42:49,680 --> 00:42:55,080
So we're just using the system directly.

452
00:42:55,080 --> 00:42:57,400
But there's more advanced modules to do this.

453
00:42:57,400 --> 00:42:59,320
So what can you tell us about that?

454
00:42:59,320 --> 00:43:03,120
Well, there are a lot of so-called command-line argument

455
00:43:03,120 --> 00:43:05,640
parses.

456
00:43:05,640 --> 00:43:10,240
All of them have their advantages and disadvantages.

457
00:43:10,240 --> 00:43:14,760
Essentially, the more complex stuff you want to do,

458
00:43:14,760 --> 00:43:21,520
the more complex code you have to write in the end.

459
00:43:21,520 --> 00:43:24,920
For simple programs, I think ArcParse

460
00:43:24,920 --> 00:43:33,240
is quite efficient, because it doesn't need a lot of details.

461
00:43:33,240 --> 00:43:35,320
But it's not as flexible.

462
00:43:35,320 --> 00:43:40,680
So if you have some requirements where, yeah,

463
00:43:40,680 --> 00:43:43,400
you can have requirements that just are not

464
00:43:43,400 --> 00:43:44,720
achievable with ArcPars.

465
00:43:44,720 --> 00:43:57,720
All of these parsers commonly give some kind of positional arguments or named arguments.

466
00:43:57,720 --> 00:44:04,200
Named arguments help you to, if you have multiple arguments and you have some default values,

467
00:44:04,200 --> 00:44:12,400
you don't want to have to make sure that, okay, position one is always that, position

468
00:44:12,400 --> 00:44:17,280
2 is always that and always have to check okay is it the right thing but you can essentially write

469
00:44:17,280 --> 00:44:24,080
okay in the end or you can in the end write um whether observations by minus minus

470
00:44:25,120 --> 00:44:30,080
start date and give the start date minus minus end date give the end date minus minus

471
00:44:31,120 --> 00:44:39,280
um output file or output file name or something and the output file name um making the

472
00:44:39,280 --> 00:44:44,720
the command line arguments or the command line call

473
00:44:44,720 --> 00:44:52,560
that you give a lot more readable and a lot less prone

474
00:44:52,560 --> 00:44:55,840
to, oh, that was the wrong position.

475
00:44:55,840 --> 00:44:58,200
Yeah.

476
00:44:58,200 --> 00:45:01,040
So I believe the next exercise is

477
00:45:01,040 --> 00:45:05,240
having you try to modify this weather script to do

478
00:45:05,240 --> 00:45:10,600
what we just demonstrated and also use ArcParse.

479
00:45:10,600 --> 00:45:11,280
Let's see.

480
00:45:11,280 --> 00:45:13,920
Yes.

481
00:45:13,920 --> 00:45:20,160
So there's some, well, it's up to you what you work on.

482
00:45:20,160 --> 00:45:24,320
So you can keep working on the first part if needed.

483
00:45:24,320 --> 00:45:26,280
You can try to do what we just did.

484
00:45:26,280 --> 00:45:30,440
You can use ArcParse if you want and have extra time.

485
00:45:30,440 --> 00:45:43,440
Then there's another exercise at the very bottom which we won't talk about but you can try working on it now.

486
00:45:43,440 --> 00:45:48,440
Okay, should we go to the exercise now?

487
00:45:48,440 --> 00:45:54,440
I think so, and when we come back we'll quickly discuss a few more details.

488
00:45:54,440 --> 00:46:05,160
Yes, so this is 15 minutes, so a relatively long amount of time.

489
00:46:05,160 --> 00:46:06,640
Okay, great.

490
00:46:06,640 --> 00:46:11,000
So see you at 45.

491
00:46:11,000 --> 00:46:14,760
Okay, bye.

492
00:46:24,440 --> 00:46:26,500
you

493
00:46:54,440 --> 00:46:56,500
you

494
00:47:24,440 --> 00:47:26,500
you

495
00:47:54,440 --> 00:47:56,500
you

496
00:48:24,440 --> 00:48:26,500
you

497
00:48:54,440 --> 00:48:56,500
you

498
00:49:24,440 --> 00:49:26,500
you

499
00:49:54,440 --> 00:49:56,500
you

500
00:50:24,440 --> 00:50:26,500
you

501
00:50:54,440 --> 00:50:56,500
you

502
00:51:24,440 --> 00:51:26,500
you

503
00:51:54,440 --> 00:51:56,500
you

504
00:52:24,440 --> 00:52:26,500
you

505
00:52:54,440 --> 00:52:56,500
you

506
00:53:24,440 --> 00:53:26,500
you

507
00:53:54,440 --> 00:53:56,500
you

508
00:54:24,440 --> 00:54:26,500
you

509
00:54:54,440 --> 00:54:56,500
you

510
00:55:24,440 --> 00:55:26,500
you

511
00:55:54,440 --> 00:55:56,500
you

512
00:56:24,440 --> 00:56:26,500
you

513
00:56:54,440 --> 00:56:56,500
you

514
00:57:24,440 --> 00:57:26,500
you

515
00:57:54,440 --> 00:57:56,500
you

516
00:58:24,440 --> 00:58:26,500
you

517
00:58:54,440 --> 00:58:56,500
you

518
00:59:24,440 --> 00:59:26,500
you

519
00:59:54,440 --> 00:59:56,500
you

520
01:00:24,440 --> 01:00:26,500
you

521
01:00:54,440 --> 01:00:56,500
you

522
01:01:24,440 --> 01:01:38,680
Hello, we're back.

523
01:01:38,680 --> 01:01:41,800
So let's see.

524
01:01:41,800 --> 01:01:47,340
So from the note, it was clear there were lots of different problems in here.

525
01:01:47,340 --> 01:01:56,220
that's sort of that's unfortunate but I mean it's this really is a pretty

526
01:01:57,100 --> 01:02:02,300
interesting and difficult thing because this is the first time we're going from pure Python

527
01:02:03,100 --> 01:02:08,380
to going and connecting to the bigger operating system you're running on and there's so many

528
01:02:08,380 --> 01:02:15,980
different variations there there's things like can't access pandas for example so that means

529
01:02:15,980 --> 01:02:21,900
your Python on the command line is running in a different environment from that on the

530
01:02:25,660 --> 01:02:28,540
the... Python on the program, yeah.

531
01:02:30,860 --> 01:02:41,260
So if you're having really big problems here, don't give up. So take it and basically

532
01:02:41,260 --> 01:02:48,500
Basically, go to one of your colleagues who can sit there with your screen and ask, okay,

533
01:02:48,500 --> 01:02:51,380
so I'm trying to do this lesson.

534
01:02:51,380 --> 01:02:54,820
Can you tell me what's going on here?

535
01:02:54,820 --> 01:02:59,540
And you can get some help that way, and it will work much better.

536
01:02:59,540 --> 01:03:05,820
As long as you sort of understand the general idea of what we've done here, and why these

537
01:03:05,820 --> 01:03:10,860
scripts should be used, then you've gotten to the main points.

538
01:03:10,860 --> 01:03:17,100
So with that being said, what have we learned here in the end?

539
01:03:17,100 --> 01:03:21,700
Well, I hope we have learned that you can,

540
01:03:21,700 --> 01:03:29,540
by changing the notebook into a script or into pure Python,

541
01:03:29,540 --> 01:03:34,380
use command line arguments to modify

542
01:03:34,380 --> 01:03:40,700
what your program does without modifying the program's code.

543
01:03:40,700 --> 01:03:46,340
And yeah, I think I would call it program, because in the end,

544
01:03:46,340 --> 01:03:51,860
this is exactly what kind of distinguishes things.

545
01:03:51,860 --> 01:03:55,060
Here, if you have command line arguments,

546
01:03:55,060 --> 01:03:58,540
that's something that you kind of always

547
01:03:58,540 --> 01:04:00,980
have to call a program with.

548
01:04:00,980 --> 01:04:05,620
Because any other part is self-contained,

549
01:04:05,620 --> 01:04:10,580
but a program you can call with different arguments.

550
01:04:10,580 --> 01:04:11,080
Yeah.

551
01:04:11,080 --> 01:04:11,580
Yeah.

552
01:04:14,300 --> 01:04:16,260
So if someone comes to us and wants

553
01:04:16,260 --> 01:04:21,060
to run some code with a program on our cluster

554
01:04:21,060 --> 01:04:23,980
on many different input files, how would we approach that?

555
01:04:26,780 --> 01:04:30,580
That depends a little bit.

556
01:04:30,580 --> 01:04:36,540
So if the input files have a certain naming convention

557
01:04:36,540 --> 01:04:39,380
or are just numbered, then it's relatively simple

558
01:04:39,380 --> 01:04:42,140
because you can essentially just go through the numbers

559
01:04:42,140 --> 01:04:46,940
and have a for loop in a batch script

560
01:04:46,940 --> 01:04:52,620
where you, with that for loop, call the individual files

561
01:04:52,620 --> 01:04:56,180
or call your script with the individual files as file names.

562
01:04:56,180 --> 01:04:59,540
If they are not ordered in a specific way,

563
01:04:59,540 --> 01:05:03,580
you probably need to either provide

564
01:05:03,580 --> 01:05:08,380
a file that contains the file names

565
01:05:08,380 --> 01:05:16,780
and you read those in or you might go into well either write an additional python script or you

566
01:05:16,780 --> 01:05:22,940
or you provide a or you change your your script so that it reads in a certain file and if

567
01:05:23,580 --> 01:05:29,180
or a certain folder and goes through the folder but if each each of the computations is quite

568
01:05:29,180 --> 01:05:34,460
expensive so you can't just do this in one python script or it would take ages but you want to

569
01:05:34,460 --> 01:05:40,140
parallelize the computation, you will likely

570
01:05:40,140 --> 01:05:41,980
write some additional script that

571
01:05:41,980 --> 01:05:47,460
loops through those files, and then provides them

572
01:05:47,460 --> 01:05:52,780
as inputs for your script at the end.

573
01:05:52,780 --> 01:05:57,100
And those inputs are then run individually,

574
01:05:57,100 --> 01:06:00,260
and each use one job on the cluster.

575
01:06:00,260 --> 01:06:09,460
Yeah, so there is no clear this and that because it depends a lot on your situation.

576
01:06:09,460 --> 01:06:18,940
But one thing that happens quite regularly is that people have input parameters and want

577
01:06:18,940 --> 01:06:24,700
to go through, let's say, a thousand different input parameters that they have more or less

578
01:06:24,700 --> 01:06:25,700
predefined.

579
01:06:25,700 --> 01:06:31,140
have them predefined, they can, in the script, define them once.

580
01:06:31,140 --> 01:06:37,460
And then the input parameter, or the command line argument,

581
01:06:37,460 --> 01:06:39,340
would be the position of that parameter

582
01:06:39,340 --> 01:06:42,780
in the list of parameters that they have defined.

583
01:06:42,780 --> 01:06:49,260
And each run will take one input parameter set, for example.

584
01:06:49,260 --> 01:06:55,260
Okay. So with that being said, should we go to a break?

585
01:06:55,260 --> 01:06:59,260
I would

586
01:06:59,260 --> 01:07:03,260
give a few more words about

587
01:07:03,260 --> 01:07:07,260
additional options like using configuration files

588
01:07:07,260 --> 01:07:11,260
because I think the problem with

589
01:07:11,260 --> 01:07:15,260
command line arguments is that at some point the command line string gets

590
01:07:15,260 --> 01:07:17,460
It's really long.

591
01:07:17,460 --> 01:07:21,980
And even if you have an argument parser or something,

592
01:07:21,980 --> 01:07:26,220
it becomes not really well-readable anymore,

593
01:07:26,220 --> 01:07:27,220
the individual call.

594
01:07:27,220 --> 01:07:29,540
So we are running out of time.

595
01:07:29,540 --> 01:07:32,740
So please continue, but let's try to be quick.

596
01:07:32,740 --> 01:07:36,340
And I just want to mention that there are then

597
01:07:36,340 --> 01:07:39,780
methods that you can have a look at later on

598
01:07:39,780 --> 01:07:44,420
to write the configurations for your program

599
01:07:44,420 --> 01:07:50,340
into a configuration file and use that as and just be given a configuration file as input argument

600
01:07:50,340 --> 01:07:57,540
that is then parsed. That's just what I wanted to mention. Yeah, so like here for example we've

601
01:07:57,540 --> 01:08:08,260
defined all the parameters for the plot and it can be generated. Okay, great. So let's take a break

602
01:08:08,260 --> 01:08:17,860
until two minutes past the hour and we'll see you back for the next episode. Thanks and bye for now.

603
01:08:17,860 --> 01:08:19,540
Bye-bye!

604
01:08:38,260 --> 01:08:40,320
you

605
01:09:08,260 --> 01:09:10,320
you

606
01:09:38,260 --> 01:09:40,320
you

607
01:10:08,260 --> 01:10:10,320
you

608
01:10:38,260 --> 01:10:40,320
you

609
01:11:08,260 --> 01:11:10,320
you

610
01:11:38,260 --> 01:11:40,320
you

611
01:12:08,260 --> 01:12:10,320
you

612
01:12:38,260 --> 01:12:40,320
you

613
01:13:08,260 --> 01:13:10,320
you

614
01:13:38,260 --> 01:13:40,320
you

615
01:14:08,260 --> 01:14:10,320
you

616
01:14:38,260 --> 01:14:40,320
you

617
01:15:08,260 --> 01:15:10,320
you

618
01:15:38,260 --> 01:15:40,320
you

619
01:16:08,260 --> 01:16:10,320
you

620
01:16:38,260 --> 01:16:40,320
you

621
01:17:08,260 --> 01:17:10,320
you

622
01:17:38,260 --> 01:17:40,320
you

623
01:18:08,260 --> 01:18:10,320
you

624
01:18:38,260 --> 01:18:40,320
you

625
01:19:08,260 --> 01:19:22,180
Hello, welcome back from the breaks.

626
01:19:22,180 --> 01:19:30,800
So we'll now move on to something about the library ecosystem, how the Python libraries

627
01:19:30,800 --> 01:19:32,000
are set up.

628
01:19:32,000 --> 01:19:37,580
And also after that, we'll move on to dependency management.

629
01:19:37,580 --> 01:19:40,700
[name], have you introduced yourself already?

630
01:19:40,700 --> 01:19:43,700
Yeah, I introduced myself yesterday.

631
01:19:43,700 --> 01:19:45,620
Have you?

632
01:19:45,620 --> 01:19:47,420
Yes, so my name is [Name].

633
01:19:47,420 --> 01:19:49,420
So disclaimer, I'm not a Python programmer,

634
01:19:49,420 --> 01:19:54,460
but I support users on our high-performance computer

635
01:19:54,460 --> 01:19:55,820
systems.

636
01:19:55,820 --> 01:20:00,140
My current job is as the manager of the Norwegian AI Cloud.

637
01:20:00,140 --> 01:20:04,620
But I also contribute to Code Refinery and Alto

638
01:20:04,620 --> 01:20:08,660
and all the partners when I can.

639
01:20:08,660 --> 01:20:13,580
So this library ecosystem, [Name], is

640
01:20:13,580 --> 01:20:21,580
that when you want to achieve a certain task,

641
01:20:21,580 --> 01:20:25,780
somebody might have already made some code

642
01:20:25,780 --> 01:20:28,660
that you can achieve the thing you want to do.

643
01:20:28,660 --> 01:20:33,540
So instead of you try to write it again,

644
01:20:33,540 --> 01:20:37,380
you could reuse others' work.

645
01:20:37,380 --> 01:20:42,740
In the first introduction, there was this interview

646
01:20:42,740 --> 01:20:44,060
with the student.

647
01:20:44,060 --> 01:20:48,460
So when we study, it seems people tell you

648
01:20:48,460 --> 01:20:50,060
not to take others' work.

649
01:20:50,060 --> 01:20:52,860
You have to do everything yourself.

650
01:20:52,860 --> 01:20:56,100
But when you come to the real research,

651
01:20:56,100 --> 01:21:00,060
practically, you can't do, quote, everything you want.

652
01:21:00,060 --> 01:21:03,580
For example, if you want some matrix transformation

653
01:21:03,580 --> 01:21:09,660
or Fourier transformation, some array sorting kind of thing,

654
01:21:09,660 --> 01:21:11,620
it's already there out there.

655
01:21:11,620 --> 01:21:13,700
So you have to use them.

656
01:21:13,700 --> 01:21:19,060
So we will talk about how to reuse work.

657
01:21:19,060 --> 01:21:23,420
So this is not like stealing other people's work.

658
01:21:23,420 --> 01:21:27,140
This is actually reusing and collaboration.

659
01:21:27,140 --> 01:21:29,220
Do you use a lot of libraries, [Name]?

660
01:21:30,020 --> 01:21:37,300
Yes, all the time. So I would say that why Python is so popular, especially in scientific

661
01:21:37,300 --> 01:21:43,940
context, is because of this library ecosystem. Python is not the perfect language for scientific

662
01:21:43,940 --> 01:21:50,660
computation, like what, for example, [name] said at the Icebreaker session this morning, that

663
01:21:50,660 --> 01:21:56,260
there are languages that are designed for scientific computing. Python is not one of them.

664
01:21:56,260 --> 01:22:02,660
But Python is a very general language. It has all kinds of things. And the library ecosystem

665
01:22:02,660 --> 01:22:10,500
makes it possible to have various things. So, like [name] said, in a job interview or something,

666
01:22:10,500 --> 01:22:14,980
you might be asked to do a quicksort algorithm or something. But I would never trust my own

667
01:22:14,980 --> 01:22:20,340
algorithm compared to something that is in a library ecosystem that has been validated by

668
01:22:20,340 --> 01:22:26,660
hundreds or thousands of users. So yes, I use a lot of libraries all the time. I don't want to

669
01:22:26,660 --> 01:22:36,020
reinvent the wheel if somebody already has perfected it. Correct. So if you were there

670
01:22:36,020 --> 01:22:41,060
in the first day when [Name] and [Name] were introducing some beautiful introduction to the

671
01:22:41,060 --> 01:22:47,140
course. So [Name] asked from [Name], when did you start using Python? And I know for a fact that

672
01:22:47,140 --> 01:22:50,340
Yano is a very heavy user of this Python.

673
01:22:50,340 --> 01:22:52,660
But he has to think a little bit.

674
01:22:52,660 --> 01:22:54,780
When did I actually use Python?

675
01:22:54,780 --> 01:22:57,780
So that's a very important thing that you mentioned, [Name].

676
01:22:57,780 --> 01:23:04,140
That means Python itself is not a very useful part of it.

677
01:23:04,140 --> 01:23:06,740
It is just what people made out of Python.

678
01:23:06,740 --> 01:23:10,460
So earlier, if you remember that,

679
01:23:10,460 --> 01:23:14,060
I don't know when you were young how you learned programming.

680
01:23:14,060 --> 01:23:17,180
they taught us pseudocode, you know,

681
01:23:17,180 --> 01:23:20,740
and you had to learn how the programming tactics

682
01:23:20,740 --> 01:23:22,900
in order to actually write a big,

683
01:23:22,900 --> 01:23:24,900
by the time you end up writing some code,

684
01:23:24,900 --> 01:23:26,780
you have learned about a semester of,

685
01:23:26,780 --> 01:23:29,140
you know, what programming is.

686
01:23:29,140 --> 01:23:31,820
So this Python made it more democratic.

687
01:23:31,820 --> 01:23:33,460
It doesn't matter where you come from.

688
01:23:33,460 --> 01:23:35,700
We have come from biology, mathematics,

689
01:23:35,700 --> 01:23:38,180
space science, or whatever it is.

690
01:23:38,180 --> 01:23:41,540
You can just start achieving something.

691
01:23:41,540 --> 01:23:45,380
So that achievement comes from the library ecosystem, as you said.

692
01:23:46,220 --> 01:23:46,580
Yes.

693
01:23:46,580 --> 01:23:53,420
And also I would add here that, like, for example, my first start in Python,

694
01:23:53,420 --> 01:23:57,420
when I started working on it, I was in a summer job in Aalto University, actually.

695
01:23:57,420 --> 01:24:01,940
And I had to convert a code that was using Python numeric, which was

696
01:24:01,940 --> 01:24:03,860
this really old library, to NumPy.

697
01:24:04,380 --> 01:24:09,420
So I had to convert this code that used this old library to a new library.

698
01:24:09,420 --> 01:24:15,980
And the reason behind is that NumPy, like we have spoken already, underneath it, it's

699
01:24:15,980 --> 01:24:18,380
C and Fortran, like underneath it.

700
01:24:18,380 --> 01:24:20,060
But nobody wants to touch that part.

701
01:24:20,060 --> 01:24:25,300
Like nobody wants to see that part because it's harder to write and more laborious to

702
01:24:25,300 --> 01:24:26,300
write.

703
01:24:26,300 --> 01:24:28,420
It's much easier to work with the NumPy.

704
01:24:28,420 --> 01:24:32,480
And that's why like Python is so popular.

705
01:24:32,480 --> 01:24:36,060
You can write these like other things on top of other things.

706
01:24:36,060 --> 01:24:40,980
So at the bottom, you can have the C stuff and the Fortran stuff and that sort of thing,

707
01:24:40,980 --> 01:24:42,980
but you don't ever have to necessarily touch it.

708
01:24:42,980 --> 01:24:46,880
You can just interact with Python things and that's fine.

709
01:24:46,880 --> 01:24:53,740
And that still gives you most of the speed that C and Fortran would give, but much more

710
01:24:53,740 --> 01:24:54,740
usability.

711
01:24:54,740 --> 01:24:55,740
Correct.

712
01:24:55,740 --> 01:25:00,660
So it is not the time you first tried the Hello World, you know, it's not the Python

713
01:25:00,660 --> 01:25:01,660
usage.

714
01:25:01,660 --> 01:25:05,920
People actually use Python when they use a library and do something.

715
01:25:05,920 --> 01:25:08,120
So that's why people think a little bit,

716
01:25:08,120 --> 01:25:09,480
when did I actually use Python?

717
01:25:09,480 --> 01:25:11,640
So it's not the Python hello world print,

718
01:25:11,640 --> 01:25:13,920
it's actually the libraries ecosystem.

719
01:25:13,920 --> 01:25:17,200
And then it is very nice that we have placed

720
01:25:17,200 --> 01:25:21,160
all these terms in the same screen

721
01:25:22,080 --> 01:25:24,000
because taking them alone,

722
01:25:24,000 --> 01:25:25,840
libraries, packages, and dependencies,

723
01:25:25,840 --> 01:25:28,640
sometimes it's hard to sort of comprehend

724
01:25:28,640 --> 01:25:29,680
what this is about.

725
01:25:30,560 --> 01:25:35,560
So I like to think of libraries as like a screwdriver.

726
01:25:35,560 --> 01:25:48,680
you can it's it's not like well documented or well sort of made for like there's no big description

727
01:25:48,680 --> 01:25:53,880
of how to do it but people who know how to use it they know how to use it but the package is more

728
01:25:53,880 --> 01:25:59,480
like a tool set with a set of screwdrivers and there are some instruction and there are different

729
01:25:59,480 --> 01:26:04,880
different gauges, different lengths. So you have this difference. So is that a good way

730
01:26:04,880 --> 01:26:10,480
to look at it, these libraries and packages? So how do you look at it?

731
01:26:10,480 --> 01:26:16,760
Yeah, like libraries, when we talk about libraries, we can often mean multiple things. So for

732
01:26:16,760 --> 01:26:23,040
example, like library can be, like usually everything in Python is a module also. Like

733
01:26:23,040 --> 01:26:27,320
I'm not completely certain what module means in the context of Python, because it's used

734
01:26:27,320 --> 01:26:32,680
so many places so that it becomes a bit more like, like it's used so often that it loses

735
01:26:32,680 --> 01:26:33,980
the meaning.

736
01:26:33,980 --> 01:26:38,600
Like if you say a certain word enough, you don't know what it means anymore.

737
01:26:38,600 --> 01:26:44,320
But usually like libraries are like, libraries and modules, they can be a bit like all over

738
01:26:44,320 --> 01:26:51,520
the place, unless they have been like packaged together and made into like a complete set

739
01:26:51,520 --> 01:26:53,760
of like tools.

740
01:26:53,760 --> 01:27:00,880
and like usually when we talk about packages, we mean that there's like a bunch of code and

741
01:27:00,880 --> 01:27:05,280
you don't want to look what necessarily what's inside of it if it works correctly. But you want

742
01:27:05,280 --> 01:27:11,600
to interact with that code with certain like functions or objects or certain things that it

743
01:27:12,160 --> 01:27:18,320
presents you. So, for example, like you NumPy arrays have a lot of like hidden things inside

744
01:27:18,320 --> 01:27:21,840
of the hidden attributes and that sort of thing. But you don't want to work with those because they

745
01:27:21,840 --> 01:27:28,240
are inside the package. You want to work with the functions that the arrays present you or what the

746
01:27:28,240 --> 01:27:34,720
developers of the package present you. So, you want to only deal with the outermost layer of

747
01:27:34,720 --> 01:27:40,080
the package because that's what the developers of the package want to give you. And that's how it

748
01:27:40,080 --> 01:27:45,760
usually goes, that you have an outermost layer of nice things that you can use and inside there's

749
01:27:46,800 --> 01:27:51,600
a whole mess of stuff. But you don't necessarily need to worry about that because that's the

750
01:27:51,600 --> 01:27:56,280
the packet manager's problem, or developer's problem.

751
01:27:56,280 --> 01:27:59,560
Yeah, you are presented with an easier interface

752
01:27:59,560 --> 01:28:01,200
for what you want to achieve.

753
01:28:01,200 --> 01:28:02,760
And when it becomes dependencies,

754
01:28:02,760 --> 01:28:05,000
it's also like libraries and packages.

755
01:28:05,000 --> 01:28:06,960
If you are building something, let's

756
01:28:06,960 --> 01:28:08,880
say if you were to build a table,

757
01:28:08,880 --> 01:28:10,800
you need nails and bolts.

758
01:28:10,800 --> 01:28:14,240
So these nails and bolts are sort of like dependencies.

759
01:28:14,240 --> 01:28:17,160
So the table could not be made without those things.

760
01:28:17,160 --> 01:28:20,760
And then these nails, they are specific length, type,

761
01:28:20,760 --> 01:28:25,440
and gurge, you know, not all nails will fit all joints.

762
01:28:25,440 --> 01:28:27,560
So there are, when it comes to dependencies,

763
01:28:27,560 --> 01:28:30,660
it's about other things that you need to,

764
01:28:31,840 --> 01:28:33,280
for your code to work.

765
01:28:33,280 --> 01:28:35,120
And also there are some specifications

766
01:28:35,120 --> 01:28:37,520
that we will go on later on.

767
01:28:37,520 --> 01:28:41,160
And then we talk about this sci-fi,

768
01:28:41,160 --> 01:28:43,800
scientific Python ecosystem.

769
01:28:43,800 --> 01:28:48,800
This is maybe the ecosystem most of the research community,

770
01:28:48,800 --> 01:28:54,400
they get, they would think that they start using Python, you know, when they start using this.

771
01:28:55,360 --> 01:29:02,000
So we have this NumPy, SciFi, Matplotlib, Panda for data structures, you know, Panda could,

772
01:29:02,720 --> 01:29:08,400
when people work, researchers work with data, it could do wonders, they get, you know, really amazed

773
01:29:08,400 --> 01:29:14,320
how Panda could help them, you know, they could scrape web pages for tables, they could create

774
01:29:14,320 --> 01:29:21,840
data frames and then you have the NumPy with all the optimized array functions and all the

775
01:29:21,840 --> 01:29:29,280
mathematical functions there. So this is kind of the ecosystem that people start actually

776
01:29:29,280 --> 01:29:35,760
interacting, not all people, but researchers that we interact with. And yes, [Name]?

777
01:29:35,760 --> 01:29:40,800
Yeah, and I'll just mention quickly that also this ecosystem is highly influential to other

778
01:29:40,800 --> 01:29:50,160
packages. Yesterday, there was questions in the chat, for example, about Bollars or Dusk, which

779
01:29:50,160 --> 01:29:55,840
are built upon pandas, but do pandas more efficiently or more in parallel or something like

780
01:29:55,840 --> 01:30:02,320
that? But they usually build upon the syntax and the ideas behind these packages. So there are

781
01:30:02,320 --> 01:30:09,520
lots of packages that do the same thing again, but they try to reuse as much of the language that

782
01:30:09,520 --> 01:30:14,720
NumPy and Pandas and Matplotlib. They do similar kinds of things, but they might do it a bit

783
01:30:14,720 --> 01:30:22,240
differently or better or something like that, or efficiently or in parallel. But they usually

784
01:30:22,240 --> 01:30:28,880
reuse the language. They reuse the same kinds of concepts. So if you learn these core concepts

785
01:30:28,880 --> 01:30:37,440
around the NumPy ecosystem, you can then transfer them to other things or in other ecosystems

786
01:30:37,440 --> 01:30:40,440
or in other tools that use this?

787
01:30:40,440 --> 01:30:45,440
Yes. So in addition, there are other packages like scikit-learn.

788
01:30:45,440 --> 01:30:48,440
This is not like an exhaustive list here.

789
01:30:48,440 --> 01:30:50,440
So this is a part of it.

790
01:30:50,440 --> 01:30:53,440
So if you're doing some classification machine learning,

791
01:30:53,440 --> 01:30:58,440
even scikit-learn is using these packages.

792
01:30:58,440 --> 01:31:03,440
And if you extend things like PyTorch has an optimized version of NumPy

793
01:31:03,440 --> 01:31:10,160
by manipulations for machine learning related operations.

794
01:31:10,160 --> 01:31:12,840
And the rest is really similar.

795
01:31:12,840 --> 01:31:18,520
This is for people to read about the packages.

796
01:31:18,520 --> 01:31:21,400
So I would not spend time on reading through this

797
01:31:21,400 --> 01:31:23,640
because I think the next lesson of dependency

798
01:31:23,640 --> 01:31:26,960
we can talk a little bit more.

799
01:31:26,960 --> 01:31:30,240
Only thing before I give it to you, I want to mention

800
01:31:30,240 --> 01:31:36,240
is this connected to Python to other languages,

801
01:31:36,240 --> 01:31:40,080
because we'll talk about Conda, for example, next.

802
01:31:40,080 --> 01:31:42,680
So connected to other languages, the library

803
01:31:42,680 --> 01:31:45,760
that we were talking about, NumPy, is a good example.

804
01:31:45,760 --> 01:31:51,320
So there are certain things Python, they could do it,

805
01:31:51,320 --> 01:31:54,760
but there are other programming languages like C

806
01:31:54,760 --> 01:31:56,640
could do it better.

807
01:31:56,640 --> 01:32:01,480
For initially, when the code you write,

808
01:32:01,480 --> 01:32:04,120
it could write on your laptop, run on laptop.

809
01:32:04,120 --> 01:32:06,520
But if you want to go to a high-performance computer

810
01:32:06,520 --> 01:32:10,720
system, or a bigger server, or to achieve bigger things,

811
01:32:10,720 --> 01:32:13,240
you have to use the resources optimally,

812
01:32:13,240 --> 01:32:16,320
and also to understand the underlying hardware.

813
01:32:16,320 --> 01:32:20,920
For example, how wide is your processor's registry width,

814
01:32:20,920 --> 01:32:21,960
for example.

815
01:32:21,960 --> 01:32:23,800
That kind of things we don't worry about when

816
01:32:23,800 --> 01:32:25,680
you do Python programming.

817
01:32:25,680 --> 01:32:29,120
So Python provides these libraries.

818
01:32:29,120 --> 01:32:34,420
Behind the scenes, they use C or Fortran or other languages.

819
01:32:34,420 --> 01:32:36,120
For example, [Name] slightly mentioned

820
01:32:36,120 --> 01:32:41,080
that you have this one data, one program that you want

821
01:32:41,080 --> 01:32:43,440
to introduce different data sets.

822
01:32:43,440 --> 01:32:47,920
So we call this the SIMD, single instruction multiple data

823
01:32:47,920 --> 01:32:50,320
kind of work.

824
01:32:50,320 --> 01:32:53,680
So those are better done in other languages than Python.

825
01:32:53,680 --> 01:32:56,000
But you don't have to learn all those things.

826
01:32:56,000 --> 01:32:58,920
You only need to learn how to call those.

827
01:32:58,920 --> 01:33:03,920
So if you want to do some vectorization, for example,

828
01:33:03,920 --> 01:33:07,280
if you have a loop that goes through 10 things,

829
01:33:07,280 --> 01:33:08,960
you could do Python loop.

830
01:33:08,960 --> 01:33:11,400
But if the loop is going through 100,000 things,

831
01:33:11,400 --> 01:33:14,680
you don't want to go through the 100,000 steps one by one.

832
01:33:14,680 --> 01:33:18,880
You want to go 100 steps at a time or 1,000 steps at a time.

833
01:33:18,880 --> 01:33:22,440
So those kind of things we call loop vectorization

834
01:33:22,440 --> 01:33:28,200
could be handled by this code, but you could still use them inside your Python environment.

835
01:33:29,960 --> 01:33:33,880
Is there anything else that you want to mention here before I give it to you?

836
01:33:33,880 --> 01:33:38,360
Yeah, I'll quickly mention this last chapter about evaluating Python packages.

837
01:33:38,360 --> 01:33:44,920
So how do you know what is good? If you go to GitHub, there's like a million packages.

838
01:33:44,920 --> 01:33:50,680
And there is no single way of determining what is good or something is bad. What I usually do

839
01:33:50,680 --> 01:33:59,160
is like, let's say our user wants to solve a certain problem and they wonder if they should

840
01:33:59,160 --> 01:34:06,200
re-implement an algorithm or if there already exists an algorithm that does it. I try to find

841
01:34:06,200 --> 01:34:12,520
with the corresponding keywords, like a git repository or something in GitHub that would

842
01:34:12,520 --> 01:34:17,560
provide such a package. And then I look for various factors, like is there a community around

843
01:34:17,560 --> 01:34:23,880
this package? Has it been validated scientifically? Is there papers published from the package?

844
01:34:23,880 --> 01:34:28,840
Are there lots of stars? When was the last commit? These sort of things. You need to usually check

845
01:34:29,640 --> 01:34:35,960
what is the community around it? Is it a trustworthy source? Is it some random guy

846
01:34:35,960 --> 01:34:42,280
somewhere? Can I actually myself validate it? Of course, I cannot validate, let's say, NumPy. I

847
01:34:42,280 --> 01:34:44,880
I don't have time to read the whole source code,

848
01:34:44,880 --> 01:34:48,480
but if it's like one page long,

849
01:34:48,480 --> 01:34:50,480
maybe I can see what it does.

850
01:34:50,480 --> 01:34:52,960
And these sort of things, there's various factors.

851
01:34:52,960 --> 01:34:55,440
And here's some questions that you can ask yourself

852
01:34:55,440 --> 01:34:57,520
when you're trying to validate.

853
01:34:57,520 --> 01:34:59,360
And I would say that it's always a good idea

854
01:34:59,360 --> 01:35:01,840
to first look if somebody else has done it

855
01:35:01,840 --> 01:35:04,720
and maybe check if you can extend upon it.

856
01:35:04,720 --> 01:35:07,520
Like, for example, many frameworks,

857
01:35:07,520 --> 01:35:09,520
like, for example, Scikit-learn,

858
01:35:09,520 --> 01:35:11,840
they provide a very comprehensive way

859
01:35:11,840 --> 01:35:14,880
of extending their own things so that you can,

860
01:35:14,880 --> 01:35:16,840
like if you write the way they write,

861
01:35:16,840 --> 01:35:19,560
they're like models and that sort of thing,

862
01:35:19,560 --> 01:35:23,000
you can reuse all of the other tools that they provide.

863
01:35:23,000 --> 01:35:26,760
And then you don't have to like figure out

864
01:35:26,760 --> 01:35:29,000
how to do like a cross-validation

865
01:35:29,000 --> 01:35:30,280
or something like that yourself,

866
01:35:30,280 --> 01:35:31,520
because you can use the algorithm

867
01:35:31,520 --> 01:35:33,480
that they use for cross-validation

868
01:35:33,480 --> 01:35:35,680
for your model or something like that.

869
01:35:35,680 --> 01:35:37,440
So it's usually a good idea to check

870
01:35:37,440 --> 01:35:40,360
what the packages provide, how to extend.

871
01:35:40,360 --> 01:35:43,060
Usually there's like a development document somewhere

872
01:35:43,060 --> 01:35:45,500
where they say that, okay, how to extend these packets.

873
01:35:45,500 --> 01:35:48,140
And then they provide like guide

874
01:35:48,140 --> 01:35:50,700
on how to write my own stuff

875
01:35:50,700 --> 01:35:53,220
on top of already existing library.

876
01:35:53,220 --> 01:35:54,780
And it's usually not that hard.

877
01:35:54,780 --> 01:35:58,060
It's usually much harder to start something from scratch.

878
01:35:58,060 --> 01:35:59,820
And of course, sometimes it's needed,

879
01:35:59,820 --> 01:36:02,820
but a lot of times you can build upon

880
01:36:02,820 --> 01:36:04,780
what other people have done.

881
01:36:04,780 --> 01:36:07,580
Yes, so I will only comment about the security part

882
01:36:07,580 --> 01:36:10,380
because you mentioned the list,

883
01:36:10,380 --> 01:36:12,420
there could be malicious packages as well.

884
01:36:12,420 --> 01:36:16,460
So there is trust, so research is based on trust actually.

885
01:36:16,460 --> 01:36:20,860
So when you use a library,

886
01:36:20,860 --> 01:36:23,940
especially if the library concerns like web security,

887
01:36:23,940 --> 01:36:26,220
for example, you can't just use a,

888
01:36:26,220 --> 01:36:28,700
just because it's doing the thing what you do,

889
01:36:28,700 --> 01:36:30,260
you need to have a proper understanding

890
01:36:30,260 --> 01:36:32,460
of what it actually do.

891
01:36:32,460 --> 01:36:34,860
And also there could be malicious libraries,

892
01:36:34,860 --> 01:36:37,140
misspelled malicious libraries.

893
01:36:37,140 --> 01:36:41,360
you have NumPy and you like NumDy or something,

894
01:36:41,360 --> 01:36:42,400
just to elude you.

895
01:36:42,400 --> 01:36:45,520
So you have to be a little cautious as well.

896
01:36:45,520 --> 01:36:48,000
Then I think we should go to the next lesson

897
01:36:48,000 --> 01:36:51,520
about how we manage dependencies.

898
01:36:51,520 --> 01:36:53,920
Yeah, yeah, let's jump to that.

899
01:36:53,920 --> 01:36:55,900
So I'll take the screen share.

900
01:36:56,880 --> 01:37:00,860
If [Name] can then switch to mine.

901
01:37:07,140 --> 01:37:14,140
I'm working on it, something.

902
01:37:14,140 --> 01:37:15,140
Yeah.

903
01:37:15,140 --> 01:37:16,140
No worries.

904
01:37:16,140 --> 01:37:22,420
So, the question here is, like, we've talked about library ecosystem, and libraries are

905
01:37:22,420 --> 01:37:29,540
all fine and dandy, but quite often you have a case where you want to install certain libraries

906
01:37:29,540 --> 01:37:30,540
for your code.

907
01:37:30,540 --> 01:37:36,500
Like, you want certain kind of a situation, and the ecosystem is so big, like the whole

908
01:37:36,500 --> 01:37:42,620
Python ecosystem, there's probably hundreds of thousands of packages available for different

909
01:37:42,620 --> 01:37:48,620
Python versions and different kinds of different installations, different dependencies and

910
01:37:48,620 --> 01:37:49,620
different things.

911
01:37:49,620 --> 01:37:53,260
And they are not compatible all at the same time.

912
01:37:53,260 --> 01:37:56,580
You cannot install Python, I mean, the whole Python.

913
01:37:56,580 --> 01:37:57,580
It's impossible.

914
01:37:57,580 --> 01:37:59,140
There's so many packages.

915
01:37:59,140 --> 01:38:04,140
You cannot have everything in one installation.

916
01:38:04,140 --> 01:38:11,540
So that brings to mind that, okay, how do you manage installing multiple things at the

917
01:38:11,540 --> 01:38:13,840
same time for different projects?

918
01:38:13,840 --> 01:38:18,820
How do you manage that you get the correct dependencies for certain projects?

919
01:38:18,820 --> 01:38:27,740
And there are two major players in this thing, and they are the Python Packaging Index and

920
01:38:27,740 --> 01:38:29,920
Anaconda.

921
01:38:29,920 --> 01:38:31,580
So they are the major things.

922
01:38:31,580 --> 01:38:40,460
So here's a big list of what is the difference between Python Packaging Index and Anaconda.

923
01:38:40,460 --> 01:38:45,380
I can try to say it in short form.

924
01:38:45,380 --> 01:38:55,160
So Python Packaging Index is this community-like project that basically provides Python packages

925
01:38:55,160 --> 01:39:00,060
as these so-called wheels, like wheels of cheese, because everything in Python is a

926
01:39:00,060 --> 01:39:09,860
multi-python joke, but it provides packages as these, like you have Python package as

927
01:39:09,860 --> 01:39:16,320
one file that you can download from this Python packaging index. These are often used in conjunction

928
01:39:16,320 --> 01:39:21,000
with these virtual environments. They don't have to be installed into virtual environments,

929
01:39:21,000 --> 01:39:27,780
but they're quite often used so that you can have your own small Python world where you

930
01:39:27,780 --> 01:39:34,500
install only the packages you need from the Python pip package. And this is very good.

931
01:39:34,500 --> 01:39:41,700
And it was originally developed for sharing Python code. So, Python code written in Python.

932
01:39:41,700 --> 01:39:48,900
But like we talked already, much of the Python code is not written in Python. There's underlying

933
01:39:48,900 --> 01:39:54,900
layers that are written in C. There might be dependencies. So, for example, NumPy uses these

934
01:39:54,900 --> 01:40:00,980
plus linear algebra libraries to run the matrix operations and that sort of stuff.

935
01:40:00,980 --> 01:40:05,140
So it uses underlying libraries that are not part of Python.

936
01:40:06,260 --> 01:40:08,980
They are not written in Python, they're written in Fortran and C.

937
01:40:10,740 --> 01:40:14,420
Providing these is a bit of a complicated thing for the

938
01:40:14,420 --> 01:40:19,420
for the 2T packaging index.

939
01:40:20,020 --> 01:40:22,780
So what they do is that they basically

940
01:40:22,780 --> 01:40:26,420
put everything into these wheels,

941
01:40:26,420 --> 01:40:28,420
and then they provide everything with you,

942
01:40:28,420 --> 01:40:33,140
which can result in very big installations quite often.

943
01:40:33,140 --> 01:40:36,660
And it's a bit complicated there.

944
01:40:36,660 --> 01:40:39,940
How do you share non-Python code?

945
01:40:39,940 --> 01:40:42,460
There is a lot of packages that provide that,

946
01:40:42,460 --> 01:40:44,100
but it's a bit complicated.

947
01:40:44,100 --> 01:40:46,280
Writing these packages is pretty simple.

948
01:40:46,280 --> 01:40:48,660
Like you can easily write your own bit packages.

949
01:40:48,660 --> 01:40:50,460
We'll talk about it tomorrow.

950
01:40:50,460 --> 01:40:54,260
There will be a session on packaging your code.

951
01:40:54,260 --> 01:40:56,600
So writing these is pretty simple.

952
01:40:56,600 --> 01:40:58,580
Like how do you write them?

953
01:40:58,580 --> 01:41:00,240
And then you can publish them

954
01:41:00,240 --> 01:41:02,040
in the packaging index yourself.

955
01:41:02,040 --> 01:41:03,680
And if you're writing Python code

956
01:41:03,680 --> 01:41:05,700
that depends on other Python code.

957
01:41:05,700 --> 01:41:08,060
So for example, you write your own thing

958
01:41:08,060 --> 01:41:10,100
that depends on other Python things

959
01:41:10,100 --> 01:41:12,900
or other libraries like NumPy and that sort of thing.

960
01:41:12,900 --> 01:41:17,900
it's very easy to share it in Python Packaging Index

961
01:41:18,220 --> 01:41:19,860
and use pip to install it.

962
01:41:19,860 --> 01:41:23,180
So pip is the installer tool

963
01:41:23,180 --> 01:41:25,700
for Python Packaging Index packages.

964
01:41:25,700 --> 01:41:28,380
The other major player is conda.

965
01:41:28,380 --> 01:41:32,380
And conda is basically like a solution to the question of,

966
01:41:32,380 --> 01:41:36,260
okay, like we have so many of these different dependencies

967
01:41:36,260 --> 01:41:39,940
or different packages and they might not work together.

968
01:41:39,940 --> 01:41:42,180
So how do we like, how do we make certain

969
01:41:42,180 --> 01:41:45,720
that we get like a consistent working environment.

970
01:41:45,720 --> 01:41:48,600
And the Anaconda Incorporated,

971
01:41:48,600 --> 01:41:51,940
which used to be Continuum Analytics,

972
01:41:51,940 --> 01:41:53,720
now it's Anaconda Incorporated,

973
01:41:53,720 --> 01:41:58,720
they developed this tool called Konda,

974
01:41:58,820 --> 01:42:01,840
which basically is a packaging installer.

975
01:42:01,840 --> 01:42:05,320
And then they provide it in this Anaconda installation.

976
01:42:05,320 --> 01:42:10,200
So they provide like a wide bunch of already existing tools

977
01:42:10,200 --> 01:42:12,680
in one installation, which is this Anaconda installation.

978
01:42:12,680 --> 01:42:14,680
Many of you probably already use it,

979
01:42:15,600 --> 01:42:18,480
which contains, like, it was basically designed

980
01:42:18,480 --> 01:42:20,920
for data science people or people in banks

981
01:42:20,920 --> 01:42:22,200
or something like that.

982
01:42:22,200 --> 01:42:24,680
Like, you get one installation that contains

983
01:42:24,680 --> 01:42:26,920
a lot of already good stuff,

984
01:42:26,920 --> 01:42:29,600
but it has moved beyond that.

985
01:42:29,600 --> 01:42:31,320
Like, the project has moved beyond that

986
01:42:31,320 --> 01:42:32,960
because the community thought that,

987
01:42:32,960 --> 01:42:35,600
okay, like, we want more packages there.

988
01:42:35,600 --> 01:42:36,680
We want more packages.

989
01:42:36,680 --> 01:42:39,000
We want more things.

990
01:42:39,000 --> 01:42:47,080
like we don't want to be all dependent on the Anaconda Incorporated. So what happened is that

991
01:42:47,080 --> 01:42:54,360
Anaconda also provides their own Anaconda.org, which is this packaging index for Conda packages.

992
01:42:54,360 --> 01:42:59,640
And you can have your own channels there where you can provide your own packages.

993
01:42:59,640 --> 01:43:05,320
And some of these channels are now bigger, like the CondaForge, which is this open source channel,

994
01:43:05,320 --> 01:43:09,720
is a lot bigger than the channels provided by the Anaconda Incorporated.

995
01:43:10,680 --> 01:43:16,360
But basically, it's a different world. And what Conda does is that it can manage all of these

996
01:43:17,160 --> 01:43:25,560
low-level dependencies as well. So it can install you compilers and tools and different kinds of

997
01:43:26,200 --> 01:43:32,120
linear algebra libraries. And especially when it comes to CUDA, like GPU programming,

998
01:43:32,120 --> 01:43:39,640
it can install you the correct CUDA toolkits, which are these GPU libraries that your code needs.

999
01:43:39,640 --> 01:43:44,840
So it can try to manage this dependency thing. But of course, it's very complicated because

1000
01:43:44,840 --> 01:43:49,560
there's a huge bunch of these libraries and different combinations.

1001
01:43:50,200 --> 01:43:56,280
Is it correct to say that the Python package index, PPI index, the things you install in Python

1002
01:43:56,280 --> 01:44:01,280
with PIP is more or less Python packages and Python APIs.

1003
01:44:01,440 --> 01:44:04,440
You know, Python packages and other C and Fortran

1004
01:44:04,440 --> 01:44:06,840
and other code that's called from Python.

1005
01:44:06,840 --> 01:44:08,600
But we need to come to Conda.

1006
01:44:08,600 --> 01:44:09,640
In addition to that,

1007
01:44:09,640 --> 01:44:13,160
you can also rely on system level libraries

1008
01:44:13,160 --> 01:44:14,960
and also additional tools.

1009
01:44:14,960 --> 01:44:16,600
For example, the bioinformatics,

1010
01:44:16,600 --> 01:44:18,600
there are tools like SAM tools.

1011
01:44:18,600 --> 01:44:20,880
So if you want to analyze something,

1012
01:44:20,880 --> 01:44:23,000
Conda will also get these tools

1013
01:44:23,000 --> 01:44:24,840
which are not Python interfaces,

1014
01:44:24,840 --> 01:44:27,720
but all tools on their own.

1015
01:44:27,720 --> 01:44:31,520
In addition to that, in PIP, when you install this,

1016
01:44:31,520 --> 01:44:34,480
they also distribute the source code.

1017
01:44:34,480 --> 01:44:35,880
For example, a unique system.

1018
01:44:35,880 --> 01:44:38,680
For Windows and Mac, mostly you have the binaries.

1019
01:44:38,680 --> 01:44:41,640
In the PIP, if the source code is there,

1020
01:44:41,640 --> 01:44:44,160
and if you are Ubuntu computer, for example,

1021
01:44:44,160 --> 01:44:47,680
when you download it, the PIP expects that your computer,

1022
01:44:47,680 --> 01:44:51,240
your system to have the compiler.

1023
01:44:51,240 --> 01:44:53,680
But Conta could also bring down the compiler

1024
01:44:53,680 --> 01:44:55,300
and set up everything.

1025
01:44:56,360 --> 01:44:59,880
But mostly, maybe all the time,

1026
01:44:59,880 --> 01:45:02,360
Conda is pre-compiled binaries.

1027
01:45:02,360 --> 01:45:05,760
You know, they're compiled, so they're ready to be used.

1028
01:45:05,760 --> 01:45:06,600
Yes, yes.

1029
01:45:06,600 --> 01:45:08,160
And of course you can combine these.

1030
01:45:08,160 --> 01:45:12,000
So you can install P packages in Conda.

1031
01:45:12,000 --> 01:45:13,960
Like Conda creates its own environments,

1032
01:45:13,960 --> 01:45:15,680
which are similar to the virtual environments

1033
01:45:15,680 --> 01:45:19,920
I've already mentioned, but they're managed by Conda.

1034
01:45:19,920 --> 01:45:22,520
So there's, to the whole ecosystem,

1035
01:45:22,520 --> 01:45:26,020
I'll quickly mention this over here.

1036
01:45:26,020 --> 01:45:28,400
There's this kind of like glossary of different terms.

1037
01:45:28,400 --> 01:45:30,840
So when we talk about Anaconda and Konda,

1038
01:45:30,840 --> 01:45:33,280
like you can get headache from just hearing

1039
01:45:33,280 --> 01:45:34,560
about all of these different terms

1040
01:45:34,560 --> 01:45:36,160
because there's so many of them.

1041
01:45:37,120 --> 01:45:40,480
So I'll try to quickly like go through

1042
01:45:40,480 --> 01:45:41,840
the whole Konda thing.

1043
01:45:41,840 --> 01:45:43,920
Like what are the different partners

1044
01:45:43,920 --> 01:45:46,160
basically in the ecosystem?

1045
01:45:46,160 --> 01:45:47,960
So there's the Anaconda cloud.

1046
01:45:47,960 --> 01:45:52,300
So this is the place where people store the packages.

1047
01:45:52,300 --> 01:45:56,620
Then there's CondaForge, which is the largest open source

1048
01:45:56,620 --> 01:45:58,160
community channel.

1049
01:45:58,160 --> 01:46:00,840
And Anaconda Cloud also contains like packages

1050
01:46:00,840 --> 01:46:03,840
by the Anaconda Incorporated,

1051
01:46:03,840 --> 01:46:06,400
which are in so-called defaults channel

1052
01:46:06,400 --> 01:46:09,640
or base channel and R channel and those kinds of channels.

1053
01:46:09,640 --> 01:46:12,840
But they are incompatible usually with CondaForge

1054
01:46:12,840 --> 01:46:14,920
because CondaForge is basically like a completely

1055
01:46:14,920 --> 01:46:17,420
different world in the same ecosystem.

1056
01:46:17,420 --> 01:46:19,920
So Anaconda Cloud contains like two worlds.

1057
01:46:19,920 --> 01:46:22,120
There's this like open source world with CondaForge

1058
01:46:22,120 --> 01:46:24,240
And then there's the default world,

1059
01:46:24,240 --> 01:46:29,000
which is like curated by the company, Anaconda Incorporated.

1060
01:46:29,000 --> 01:46:32,360
You can use both, but usually you don't want to mix

1061
01:46:32,360 --> 01:46:34,560
and match them because you can get problems.

1062
01:46:35,840 --> 01:46:37,480
Then there's the package managers.

1063
01:46:37,480 --> 01:46:41,480
So peep is the package manager for Python packaging index.

1064
01:46:41,480 --> 01:46:42,760
So if you install from Peepy,

1065
01:46:42,760 --> 01:46:45,200
you install it with peep usually.

1066
01:46:45,200 --> 01:46:46,520
But then there's conda,

1067
01:46:46,520 --> 01:46:50,600
which is like the package manager for conda environments

1068
01:46:50,600 --> 01:46:53,480
and Anaconda stuff and that sort of things.

1069
01:46:53,480 --> 01:46:56,320
And there's a newer version that we usually recommend

1070
01:46:56,320 --> 01:46:58,240
to our customers called Mamba,

1071
01:46:58,240 --> 01:47:00,320
which is like a open source,

1072
01:47:00,320 --> 01:47:02,200
like Konda is open source project as well,

1073
01:47:02,200 --> 01:47:05,480
but there's a C++ implementation of this.

1074
01:47:05,480 --> 01:47:08,560
So because like, again, like Konda is written in Python,

1075
01:47:08,560 --> 01:47:09,800
so it's slow.

1076
01:47:09,800 --> 01:47:12,400
So when you create this huge environment,

1077
01:47:12,400 --> 01:47:15,360
sometimes it can take like minutes to figure out

1078
01:47:15,360 --> 01:47:17,340
how do I match these different packages

1079
01:47:17,340 --> 01:47:18,560
into the same environment?

1080
01:47:18,560 --> 01:47:20,920
And that's why people usually use this Mamba,

1081
01:47:20,920 --> 01:47:23,800
which can do it much faster, this solving.

1082
01:47:23,800 --> 01:47:26,080
So inside it, it's a mess,

1083
01:47:26,080 --> 01:47:29,000
but there's like a SAT solver inside the condan.

1084
01:47:29,000 --> 01:47:31,000
It tries to figure out the correct packages

1085
01:47:31,000 --> 01:47:34,940
that you need in the environment,

1086
01:47:34,940 --> 01:47:37,520
because it wants like a working consistent environment.

1087
01:47:37,520 --> 01:47:39,000
Maybe we will just like,

1088
01:47:39,000 --> 01:47:42,060
it will just install stuff into the environment.

1089
01:47:43,740 --> 01:47:47,680
Then there's like the package manager deployments.

1090
01:47:47,680 --> 01:47:50,120
So basically you can get already existing

1091
01:47:50,120 --> 01:47:54,440
like a good set of packages if you install the Anaconda.

1092
01:47:54,440 --> 01:47:57,960
So the Anaconda is like a distribution of lots of packages

1093
01:47:57,960 --> 01:48:00,440
by Anaconda Incorporated.

1094
01:48:00,440 --> 01:48:03,680
And it's free for academic and non-commercial use,

1095
01:48:03,680 --> 01:48:06,120
but for companies it's face money,

1096
01:48:06,120 --> 01:48:10,840
like the license is not covered,

1097
01:48:10,840 --> 01:48:12,960
it doesn't cover companies.

1098
01:48:12,960 --> 01:48:15,320
Then there's Miniconda, which is basically,

1099
01:48:15,320 --> 01:48:17,560
it's provided by Anaconda Incorporated

1100
01:48:17,560 --> 01:48:22,560
and it uses default channel by default,

1101
01:48:23,160 --> 01:48:24,880
like the Anaconda packages,

1102
01:48:24,880 --> 01:48:28,620
it comes, by default it tries to install them from there

1103
01:48:28,620 --> 01:48:33,320
and it's like, it only contains the conda installer.

1104
01:48:33,320 --> 01:48:35,680
So you can use that as like a starting point

1105
01:48:35,680 --> 01:48:38,240
if you want to like create your own environments

1106
01:48:38,240 --> 01:48:39,560
or something, you don't have to install

1107
01:48:39,560 --> 01:48:41,720
the whole Anaconda installation.

1108
01:48:41,720 --> 01:48:44,760
Then there's also this mini-forge,

1109
01:48:44,760 --> 01:48:49,760
which is like a Konda Forge version of the whole thing,

1110
01:48:51,640 --> 01:48:55,240
where it basically, it uses the Konda Forge by default.

1111
01:48:55,240 --> 01:48:58,880
So it's an open source version of mini Konda basically.

1112
01:48:58,880 --> 01:49:03,080
And it has Mamba as well installed.

1113
01:49:03,080 --> 01:49:06,540
So these are some of the words you might hear

1114
01:49:06,540 --> 01:49:09,280
when you look at webpages and look at installations.

1115
01:49:09,280 --> 01:49:13,040
So you need to basically choose what you want to use.

1116
01:49:13,040 --> 01:49:15,240
Usually when people are using, let's say Windows,

1117
01:49:15,240 --> 01:49:17,360
the Anaconda Navigator is so good

1118
01:49:17,360 --> 01:49:21,240
that like using that is a good idea.

1119
01:49:21,240 --> 01:49:23,280
And you can manage packages with that as well.

1120
01:49:23,280 --> 01:49:25,480
Like you don't have to use these command line tools

1121
01:49:25,480 --> 01:49:27,480
or anything, you can use the Anaconda Navigator

1122
01:49:27,480 --> 01:49:30,280
to manage your package installations.

1123
01:49:30,280 --> 01:49:31,760
If you're using Linux,

1124
01:49:31,760 --> 01:49:35,120
you often either maybe get the Anaconda installation

1125
01:49:35,120 --> 01:49:38,640
and just use that and maybe create your own environments

1126
01:49:38,640 --> 01:49:40,680
that doesn't have the packages you need,

1127
01:49:40,680 --> 01:49:43,520
or you just take like, let's say MiniForge

1128
01:49:43,520 --> 01:49:46,680
and then you use that to create your environments.

1129
01:49:46,680 --> 01:49:49,360
But that's like a more like command line,

1130
01:49:49,360 --> 01:49:53,520
let's do it like ourselves kind of a way.

1131
01:49:53,520 --> 01:49:56,040
So there's different ways of installing the packages.

1132
01:49:56,040 --> 01:49:58,040
Yeah, it's correct to say that regardless

1133
01:49:58,040 --> 01:50:00,560
of you have installed Anaconda or Miniconda

1134
01:50:00,560 --> 01:50:03,240
or some packages to get Conda,

1135
01:50:03,240 --> 01:50:06,160
you can use any of the other package managers,

1136
01:50:06,160 --> 01:50:12,480
you know, conda to install packets from any source. For example, you know, anaconda and

1137
01:50:12,480 --> 01:50:17,560
miniconda both could be used to install the same source, but miniconda is lightweight.

1138
01:50:17,560 --> 01:50:24,240
But when you, wouldn't you recommend that when you distribute the code that need conda,

1139
01:50:24,240 --> 01:50:29,800
that you'd recommend miniconda to be the requirements. And then you provide the package list other

1140
01:50:29,800 --> 01:50:34,160
than rather than asking the user to install anaconda and use your package.

1141
01:50:34,160 --> 01:50:40,920
Yes, usually it's a good idea to provide the minimal example.

1142
01:50:40,920 --> 01:50:44,720
So usually if you go to a web page and you see like,

1143
01:50:44,720 --> 01:50:48,280
okay, pip install this, if you have a library or something.

1144
01:50:48,280 --> 01:50:54,240
What they mean is that this is the minimum needed for the installation,

1145
01:50:54,240 --> 01:50:57,480
but usually you can have it installed in various other ways.

1146
01:50:57,480 --> 01:51:00,640
You might install it via conda packets or something.

1147
01:51:00,640 --> 01:51:08,800
or what they really are saying that, okay, like, create your own environment and then run this bp

1148
01:51:08,800 --> 01:51:13,600
install command. Because like, if you just run the bp install command, you usually install to whatever

1149
01:51:13,600 --> 01:51:20,000
environment you currently have. And that's not a good idea. So usually, it's a good idea to choose.

1150
01:51:20,880 --> 01:51:26,960
Yeah. For the sake of time, shall we show this best practice you are talking about?

1151
01:51:26,960 --> 01:51:29,600
Yes. What is this environment and why do we have to isolate?

1152
01:51:29,600 --> 01:51:40,040
So, when we're talking about environments, usually when you start, for example, if you

1153
01:51:40,040 --> 01:51:45,880
now have started JupyterLab, you might have started it in the base environment of your

1154
01:51:45,880 --> 01:51:50,040
Anaconda installation, or maybe you have installed the environment that we have provided in the

1155
01:51:50,040 --> 01:51:51,040
webpage.

1156
01:51:51,040 --> 01:51:56,560
But the environment, what we mean is that wherever your Python interpreter basically

1157
01:51:56,560 --> 01:52:02,080
is like what is your Python interpreter that you're running? That determines like Python,

1158
01:52:02,080 --> 01:52:08,320
based on where it is, it will try to find packages near that. Basically, it goes one

1159
01:52:08,320 --> 01:52:13,920
folder up and then one folder down and tries to find packages that are present in the system.

1160
01:52:13,920 --> 01:52:18,640
If the Python is the system Python, it will try to find it from the system libraries.

1161
01:52:18,640 --> 01:52:25,360
And if it's installed into a completely different place, it will try to find packages from there.

1162
01:52:25,360 --> 01:52:32,720
So what this environment means is that we create a folder, basically, we get some Python there,

1163
01:52:32,720 --> 01:52:39,840
and then we install packages relative to that Python. And then they are installed into this

1164
01:52:39,840 --> 01:52:45,840
own world where they won't interact with others, and we don't have it loaded all the time,

1165
01:52:45,840 --> 01:52:52,960
but we can load it per case. If we need to do one kind of a thing with certain packages,

1166
01:52:52,960 --> 01:52:59,440
we can activate this environment. So we basically go into this world of this Python and then we run

1167
01:52:59,440 --> 01:53:03,920
whatever we want there. And if we are doing a different project, we can activate a different

1168
01:53:03,920 --> 01:53:11,280
environment. And this is a good idea because it makes it possible to reproduce your code much

1169
01:53:11,280 --> 01:53:17,840
more and you run into less problems. Because as we mentioned previously, there's so many packages.

1170
01:53:17,840 --> 01:53:23,760
you cannot get them all working at the same time. So it's better to just have a small world

1171
01:53:23,760 --> 01:53:29,360
where there's not that many problems that has only the things you need, basically.

1172
01:53:30,400 --> 01:53:40,000
And that's in the environment. I always start with a new environment whenever there's a problem with

1173
01:53:40,800 --> 01:53:45,680
Python. You start from scratch and you start building up the environment that you need.

1174
01:53:45,680 --> 01:53:53,880
need. And you can create an environment by running some commands yourself. But nowadays,

1175
01:53:53,880 --> 01:53:58,760
and that is often recommended somewhere, but that is like we will, you will find in the

1176
01:53:58,760 --> 01:54:06,320
exercise, exercise two, you can run it after the course and run the environment yourself.

1177
01:54:06,320 --> 01:54:11,320
But we don't recommend that way of installing packages in general. So let's jump straight

1178
01:54:11,320 --> 01:54:15,240
to the correct solution basically, or the better solution.

1179
01:54:15,240 --> 01:54:24,040
So what you're saying is that, let's say if I want NumPy 1.24 and NumPy 1.23, both versions

1180
01:54:24,040 --> 01:54:29,800
of NumPy in my same system, rather than just installing pip install NumPy, that there's

1181
01:54:29,800 --> 01:54:34,000
a better way to do this, which will help me to reproduce this later?

1182
01:54:34,000 --> 01:54:35,000
Yes.

1183
01:54:35,000 --> 01:54:36,000
Yes.

1184
01:54:36,000 --> 01:54:39,520
And this is by recording the dependencies into this environment file, because the problem

1185
01:54:39,520 --> 01:54:44,520
with, like, if you, for example, with that, of course, you can, like, install NumPy some

1186
01:54:44,520 --> 01:54:50,200
version. And then you realize, okay, my other code needs another version. So, you can basically

1187
01:54:50,200 --> 01:54:55,080
install the other version. But now you lost the other one. So, basically, either you need

1188
01:54:55,080 --> 01:55:00,440
to constantly reinstall stuff. And maybe when you do a reinstall, suddenly some dependency

1189
01:55:00,440 --> 01:55:06,040
of that package gets reinstalled. And suddenly you're in this mess where, like, the route

1190
01:55:06,040 --> 01:55:13,080
took to get to the current state of the environment is depending on what commands you run in what

1191
01:55:13,080 --> 01:55:19,160
order. And then you cannot reproduce it. You cannot anymore. You don't know how you got there.

1192
01:55:19,160 --> 01:55:28,520
So it's usually better to just create a world where everything is correct at the correct time.

1193
01:55:28,520 --> 01:55:36,360
And how you do that is that you record the dependencies into either the requirements.txt

1194
01:55:36,360 --> 01:55:41,160
or environment.yaml. Does it matter what you call this, [Name]?

1195
01:55:41,160 --> 01:55:48,120
Does it matter what you call these files? Yes. You can, of course, record them. You can

1196
01:55:48,120 --> 01:55:53,960
name them anything you want. But the thing is that if other people are trying to find them,

1197
01:55:53,960 --> 01:55:59,640
find, they will look at these files and they think that, okay, these are the files.

1198
01:55:59,640 --> 01:56:04,840
And these are the ones that the tools will, by default, try to search for.

1199
01:56:04,840 --> 01:56:09,800
If you try to install via people, for example, it will try to find the requirements.txt.

1200
01:56:09,800 --> 01:56:16,000
But these are basically like the conventions, so you should abide by the conventions.

1201
01:56:16,000 --> 01:56:21,160
Of course, if you don't, then let the users know or the other people know that, okay,

1202
01:56:21,160 --> 01:56:26,120
requirements are in foobar.txt or something, but that's not a good thing.

1203
01:56:26,120 --> 01:56:30,680
If I visit the GitHub page or GitLab page, if the requirement.txt is there,

1204
01:56:30,680 --> 01:56:33,960
I know what it is. So it's better that you follow this.

1205
01:56:33,960 --> 01:56:39,640
Yes, yes, exactly. So you can always look at these. And what the requirements.txt,

1206
01:56:39,640 --> 01:56:45,400
so the requirements.txt is meant for PEEP installations. And what it contains is just

1207
01:56:45,400 --> 01:56:49,800
a list of packages. Usually it can have, we'll talk about versioning a bit later,

1208
01:56:49,800 --> 01:56:56,120
but it's usually just a list of packages, a text file. And when you tell a peep to install

1209
01:56:56,120 --> 01:57:03,160
an environment, it will just install these packages. Condor environments are a bit more

1210
01:57:03,160 --> 01:57:10,760
complicated. Not in a bad way, but they have more information in them. And they're usually

1211
01:57:10,760 --> 01:57:19,160
called these environment YAML. There's a typo. It's environment.yaml, not environments.yaml

1212
01:57:19,160 --> 01:57:25,160
usually. So, and they contain like the name of the environment, usually, what environment you want

1213
01:57:25,160 --> 01:57:31,160
to use. And then where do you want the packages to come from? I talked about defaults and CondaForge,

1214
01:57:31,160 --> 01:57:36,120
the channels. So you usually define like, okay, I want the packages for in this case, for example,

1215
01:57:36,120 --> 01:57:41,800
to come from defaults channel. So the Anaconda incorporated packages. And then you have a list

1216
01:57:41,800 --> 01:57:48,680
of dependencies that are the packages. And you can usually convert, like you can notice from

1217
01:57:48,680 --> 01:57:55,640
syntax that you can easily convert PIP packages, PIP requirements txt to environment.yaml and

1218
01:57:55,640 --> 01:58:04,120
other way around. If you just take these and put them into requirements.txt, you can get

1219
01:58:04,120 --> 01:58:09,400
basically a PIP installation. And the other way around, if you take these, you can convert them

1220
01:58:09,400 --> 01:58:12,440
quite easily. So which version of NumPy would this install?

1221
01:58:12,440 --> 01:58:20,200
So in this case, because we haven't specified any versions, like the both tools, they try

1222
01:58:20,200 --> 01:58:22,600
to get the newest one.

1223
01:58:22,600 --> 01:58:28,480
Like if there's some other packets that of course creates like a requirement that, okay,

1224
01:58:28,480 --> 01:58:32,920
I need a lower version, then you might get that lower version.

1225
01:58:32,920 --> 01:58:37,320
But the point is here is that you let the tools do its job.

1226
01:58:37,320 --> 01:58:40,920
That like, if you don't know what version you need, if you don't have a specific need

1227
01:58:40,920 --> 01:58:47,520
for a version, it's usually a good idea to let the tool decide what versions to get.

1228
01:58:47,520 --> 01:58:54,220
Because if you don't have any specific requirement, it's a good idea to let the solvers figure

1229
01:58:54,220 --> 01:58:59,100
out what is compatible and what is needed.

1230
01:58:59,100 --> 01:59:04,140
Because you mentioned that it is easily interchangeable, so I want to mention one thing.

1231
01:59:04,140 --> 01:59:09,860
So if you have some packages, depending on the channel you select, there might be different

1232
01:59:09,860 --> 01:59:10,860
versions.

1233
01:59:10,860 --> 01:59:16,540
pip, it's always the latest version, you know, it might pick up. But depending on the channels you

1234
01:59:16,540 --> 01:59:23,900
specify, maybe some different versions can be installed. So you also need to, that's why it's

1235
01:59:23,900 --> 01:59:29,100
important that you specify the channel in your environmental file, rather than depending on what

1236
01:59:29,100 --> 01:59:35,180
defaults you have. Yes. And also in Conda environment, you can also, let's say, specify

1237
01:59:35,180 --> 01:59:39,900
the Python version you want to use, and that sort of, you can get more complicated with those.

1238
01:59:39,900 --> 01:59:46,140
But so why is this important to have the requirements file? Because it makes it

1239
01:59:46,140 --> 01:59:52,700
possible to recreate the environment quickly. So you can recreate the whole thing. You can

1240
01:59:52,700 --> 01:59:58,140
remove it and you can recreate it and you should get basically the same kind of situation.

1241
01:59:58,860 --> 02:00:05,260
Of course, in some cases you want to lock down some versions. So if you need to

1242
02:00:05,260 --> 02:00:13,100
to reproduce it. Let's say you run something for your paper and you want the collaborators

1243
02:00:13,100 --> 02:00:19,420
or reviewers or whoever, you want them to be able to reproduce the thing. So then you

1244
02:00:19,420 --> 02:00:24,740
might want to lock down the versions or pin the versions that you are currently using

1245
02:00:24,740 --> 02:00:33,100
because you know that those work. And in that case, you can give these versioning numbers.

1246
02:00:33,100 --> 02:00:37,420
So there's various logic you can give, like larger than, smaller than, that kind of stuff.

1247
02:00:37,420 --> 02:00:43,100
You can give all kinds of, but you can basically lock down certain versions of packages.

1248
02:00:43,100 --> 02:00:50,260
So let's say you want these exact versions of numpy, matplotlib, pandas, and scipy.

1249
02:00:50,260 --> 02:00:56,460
And same with the conda and with the added Python 3.10 here, so that you want it with

1250
02:00:56,460 --> 02:00:58,080
a certain Python version.

1251
02:00:58,080 --> 02:01:03,480
So as a best practice, wouldn't you recommend instead of having these exact versions, you

1252
02:01:03,480 --> 02:01:07,880
would say that something bigger than this version, but less than this, give us some

1253
02:01:07,880 --> 02:01:10,360
range being very specific?

1254
02:01:10,360 --> 02:01:11,360
Yes.

1255
02:01:11,360 --> 02:01:16,560
The versioning, how it goes usually in these packages, if the people abide by it, is so-called

1256
02:01:16,560 --> 02:01:18,360
semantic versioning.

1257
02:01:18,360 --> 02:01:21,560
So the first version is usually the major release.

1258
02:01:21,560 --> 02:01:25,920
So between two major releases, nothing usually works.

1259
02:01:25,920 --> 02:01:31,280
the number goes from one to two, the first number, it basically means that it's no longer compatible

1260
02:01:31,280 --> 02:01:39,440
and you should do major changes to it. In the minor version, the second number there,

1261
02:01:39,440 --> 02:01:45,440
it basically means that they can introduce new features and they can deprecate old features,

1262
02:01:45,440 --> 02:01:51,440
but they usually give a few versions of leeway where you see these deprecation warnings and

1263
02:01:51,440 --> 02:01:55,920
and that sort of things. These will go away in the next version or something like that.

1264
02:01:55,920 --> 02:02:04,880
So, usually, the second version will basically mean that, okay, we are doing some changes between

1265
02:02:04,880 --> 02:02:10,160
the versions, and some things might not work anymore. But usually, the main things are the

1266
02:02:10,160 --> 02:02:15,680
same. And the third version is basically a patch version. So, that shouldn't ever affect.

1267
02:02:15,680 --> 02:02:20,800
Like, if they have done their job correctly, it should never affect your code. It's like fixes

1268
02:02:20,800 --> 02:02:26,640
for bugs and that sort of thing. But that means that you can usually give quite a bit of a leeway.

1269
02:02:27,600 --> 02:02:33,840
You can say that it needs to be higher than version one, but less than version two or something. It

1270
02:02:33,840 --> 02:02:40,640
needs to be version one, but that's all. Or version something, some range of versions.

1271
02:02:41,280 --> 02:02:46,880
So all the advice you gave, we also need to take care when we distribute packages to stick to

1272
02:02:46,880 --> 02:02:52,160
those rules, because people expect that. Yes. And it's usually a good idea not to pin yourself

1273
02:02:52,160 --> 02:02:57,200
too hard to the packages, especially if you're developing something. Because if you're pinning

1274
02:02:57,200 --> 02:03:02,640
yourself to a certain version, you're basically locked in time. You're at that time moment.

1275
02:03:02,640 --> 02:03:09,520
And then the world will move onwards, but you are stuck in that time when you created an environment

1276
02:03:09,520 --> 02:03:15,520
and when you pinned the versions. And in two years, in three years, in four years,

1277
02:03:15,520 --> 02:03:19,920
Yes, most likely nobody else can recreate that environment anymore.

1278
02:03:19,920 --> 02:03:21,440
And that's a bad thing.

1279
02:03:21,440 --> 02:03:23,640
So your code will be stuck in that time.

1280
02:03:23,640 --> 02:03:28,080
So it's usually not a good idea to do that too often.

1281
02:03:28,080 --> 02:03:29,080
Yeah.

1282
02:03:29,080 --> 02:03:34,520
Sometimes we go on sort of bypassing these practices and say, if I have created an environment,

1283
02:03:34,520 --> 02:03:41,760
is it possible to create this file from an existing environment that I can give to other

1284
02:03:41,760 --> 02:03:42,760
people?

1285
02:03:42,760 --> 02:03:43,760
Yes.

1286
02:03:43,760 --> 02:03:54,480
In this exercise, there's an example how you can freeze an environment, so you can use this

1287
02:03:54,480 --> 02:03:59,040
conda env export. There's also an additional flag here that you can put

1288
02:03:59,040 --> 02:04:04,480
dashdash from history, if you want to freeze it based on the commands that you have run previously.

1289
02:04:04,480 --> 02:04:09,760
And you can also run this pip freeze. But what I usually recommend, if you don't

1290
02:04:09,760 --> 02:04:16,160
know how you created your environment. I personally start from completely blank slate

1291
02:04:16,160 --> 02:04:21,920
and then I run the code until I no longer get import errors. Because if you really don't know

1292
02:04:21,920 --> 02:04:29,360
what the environment has eaten, it's very hard to reproduce it. But you can freeze it

1293
02:04:29,360 --> 02:04:34,880
if you want to have an environment for posterity or publication or something like that.

1294
02:04:34,880 --> 02:04:47,560
Should we just show one example while learners could also follow or what do you recommend?

1295
02:04:47,560 --> 02:04:56,680
Let's do an example. So this will, of course, be dependent on what system you're running.

1296
02:04:56,680 --> 02:05:02,600
So like in my case, I'm running Linux, so I can use the terminal, for example, in JupyterLab

1297
02:05:02,600 --> 02:05:05,760
if I start, well, I can start a new one, let's say here.

1298
02:05:06,720 --> 02:05:10,640
I'll, oops, I'll start a new terminal.

1299
02:05:10,640 --> 02:05:13,720
If you're running in, let's say, Anaconda Navigator,

1300
02:05:13,720 --> 02:05:18,720
you can basically, like, point it to the environment file

1301
02:05:19,040 --> 02:05:21,840
and you can let it work on that.

1302
02:05:21,840 --> 02:05:25,960
But you can have various different user interfaces.

1303
02:05:25,960 --> 02:05:29,480
But because I'm using command line,

1304
02:05:29,480 --> 02:05:32,160
I'll create the environment in this way.

1305
02:05:32,600 --> 02:05:34,520
So let's say I have an environment YAML.

1306
02:05:34,520 --> 02:05:39,360
So in this case, it's basically the one over here

1307
02:05:39,360 --> 02:05:42,200
with the NumPy and Matplotlib and whatever.

1308
02:05:42,200 --> 02:05:50,280
So I'll run the exercise 4.

1309
02:05:50,280 --> 02:05:54,920
You can probably run it yourself, but because, yeah.

1310
02:05:54,920 --> 02:05:58,080
Or you can run it yourself, and I recommend trying it.

1311
02:05:58,080 --> 02:06:01,080
But because there's differences in environments,

1312
02:06:01,080 --> 02:06:06,080
it might be complicated if you get it working,

1313
02:06:06,280 --> 02:06:09,300
but do try if you feel like it.

1314
02:06:10,560 --> 02:06:11,800
So what I'm going to do,

1315
02:06:11,800 --> 02:06:14,080
I'm going to create this environment

1316
02:06:14,080 --> 02:06:16,360
using this conda-env-create,

1317
02:06:16,360 --> 02:06:20,920
and then I'm going to point it to the environment YAML

1318
02:06:22,120 --> 02:06:23,400
that I have.

1319
02:06:23,400 --> 02:06:24,880
Can you show us that file,

1320
02:06:24,880 --> 02:06:26,720
how it looks like in your-

1321
02:06:26,720 --> 02:06:28,280
Yes, yes.

1322
02:06:28,280 --> 02:06:31,440
So the environment, it's just a .yaml file.

1323
02:06:31,440 --> 02:06:32,600
So yaml syntax.

1324
02:06:32,600 --> 02:06:37,080
So it has this list of packages over here.

1325
02:06:38,120 --> 02:06:40,680
Or following, it's the teaching material.

1326
02:06:40,680 --> 02:06:41,520
Oh, yeah.

1327
02:06:41,520 --> 02:06:42,520
It's a CMS.

1328
02:06:42,520 --> 02:06:43,720
Yeah.

1329
02:06:43,720 --> 02:06:47,680
I've already have it, so I'm going to remove it.

1330
02:06:47,680 --> 02:06:52,680
So you can remove the environments with this command.

1331
02:06:52,680 --> 02:07:00,680
with this command and why it's also very important to do this environment.

1332
02:07:00,680 --> 02:07:06,920
I usually remove all of my environments every two months or something, and the reason behind

1333
02:07:06,920 --> 02:07:12,700
is that I'm secure in the knowledge that I can recreate it from the environment files

1334
02:07:12,700 --> 02:07:13,700
that I have.

1335
02:07:13,700 --> 02:07:22,660
I don't fear losing my system that I have set up is so fragile that I'm worried that

1336
02:07:22,660 --> 02:07:28,020
I mess it up, and now I cannot recreate it anymore. And that's a terrible fear to have

1337
02:07:28,020 --> 02:07:34,180
as a programmer, that you cannot recreate the environment you already have. And that's why

1338
02:07:34,180 --> 02:07:39,780
it's very important to create the environment file, because then you can let go of that fear.

1339
02:07:39,780 --> 02:07:48,500
You don't have to worry about that anymore. So typing, installing one by one would be easier.

1340
02:07:48,500 --> 02:07:53,460
That is the easy way out. But the robust way is that what you're doing. Slightly more work,

1341
02:07:53,460 --> 02:08:01,220
but you will thank your past self at some point. Yes. Yes. Yes. Yeah. And if you want to like,

1342
02:08:01,220 --> 02:08:05,300
let's say you want to recreate, like you want to add a new package there. What I usually do is

1343
02:08:05,300 --> 02:08:11,060
that if I run, let's say the install command in the environment myself, or in the documentation,

1344
02:08:11,060 --> 02:08:17,460
there's also this, you can update the environment based on an updated environment YAML. You can

1345
02:08:17,460 --> 02:08:19,460
and instant new packets there,

1346
02:08:19,460 --> 02:08:23,100
but they always record it into the environment anyway.

1347
02:08:23,100 --> 02:08:26,460
Because like eventually you mess up the environment anyway.

1348
02:08:26,460 --> 02:08:27,700
Like everybody does that.

1349
02:08:27,700 --> 02:08:30,380
Like everybody does a wrong installation or something

1350
02:08:30,380 --> 02:08:33,100
and then it's broken the environment.

1351
02:08:33,100 --> 02:08:35,220
And this is unfortunately the side effect

1352
02:08:35,220 --> 02:08:38,340
of having so many different choices of libraries.

1353
02:08:38,340 --> 02:08:40,980
But at the same time, you can fix it

1354
02:08:40,980 --> 02:08:45,980
by having a consistent way of recreating where you are.

1355
02:08:45,980 --> 02:08:52,540
are. And that is either the environment YAML or the requirements TXT. Of course, the requirements

1356
02:08:52,540 --> 02:09:00,780
TXT, it works very well if you're only using Python packages and stuff in the pip world.

1357
02:09:00,780 --> 02:09:09,260
But if you're using GPUs, if you're using more complex things, I recommend checking the conda

1358
02:09:09,260 --> 02:09:14,700
because it makes it possible to install much more complex environments where everything

1359
02:09:14,700 --> 02:09:20,860
works together. So it is thinking now, the Konda is thinking and it's solving the environment. You

1360
02:09:20,860 --> 02:09:28,300
see this timer going on. So when you work on a system and when you create environments like

1361
02:09:28,300 --> 02:09:34,940
this in the requirement file, the waiting time is also less rather than you add more and more

1362
02:09:34,940 --> 02:09:42,380
to an existing environment. Because Konda needs to figure out all the matching files. And the

1363
02:09:42,380 --> 02:09:47,100
other thing is when you work on a system for a long time, it might create a big cache,

1364
02:09:48,620 --> 02:09:55,820
the packages you don't want will get accumulated. So in addition to being reproducible, there are

1365
02:09:55,820 --> 02:10:01,500
so many other benefits by following the procedure that you are doing now.

1366
02:10:02,860 --> 02:10:08,860
Yes. And I'll also mention that if you want to share the environment or reproduce it in

1367
02:10:08,860 --> 02:10:14,860
another system. Usually, the environments are not easy to transfer. There are tools to do this,

1368
02:10:14,860 --> 02:10:22,460
but it's very finicky. Usually, it's better to just move the environment YAML to a different

1369
02:10:22,460 --> 02:10:27,500
place and recreate the environments there. It's just one text file, and it's very easy to copy

1370
02:10:27,500 --> 02:10:36,860
that and then recreate it in another place. Because the environments, if you're doing

1371
02:10:36,860 --> 02:10:40,700
work with like deep learning or something. The environments can get to like, I don't know,

1372
02:10:40,700 --> 02:10:46,460
like four gigabytes. You don't want to like move four gigabytes when you can move a text file.

1373
02:10:47,820 --> 02:10:52,460
That's not usually a good idea. So moving around things on different systems,

1374
02:10:53,340 --> 02:10:59,420
it would create issues as well because these are pre-compiled binaries. If you want to move

1375
02:10:59,420 --> 02:11:04,300
something from Windows to a Unix computer, almost it will never work. But if you can move this

1376
02:11:04,300 --> 02:11:09,580
environmental file and recreate it according to their system, according to your target system.

1377
02:11:09,580 --> 02:11:13,900
And also you could easily version control this environment file because it's text file,

1378
02:11:13,900 --> 02:11:19,340
you could have Git and other ways of version control. You can have multiple snapshots.

1379
02:11:20,060 --> 02:11:27,180
So yeah, that's an important thing. And I should mention that in the Python packaging index,

1380
02:11:27,180 --> 02:11:33,420
and also in the conduct channels, there's huge amounts of variety based on what operating system

1381
02:11:33,420 --> 02:11:38,940
you're running. So for example, some packages, usually the packages are built for Mac OS X,

1382
02:11:38,940 --> 02:11:43,820
they're built for Windows, they're built for Linux, different variants of Linux,

1383
02:11:43,820 --> 02:11:51,020
different dependencies, and you can have a huge amount of different combinations of the same

1384
02:11:51,020 --> 02:11:57,420
package. The same package, but it's built in different ways based on where it's going to be

1385
02:11:57,420 --> 02:12:06,780
installed. These tools make it possible to install it. Of course, this is a bit of a demo

1386
02:12:06,780 --> 02:12:11,820
effect, but the environment solving takes a long time. This is why the Mamba is so popular.

1387
02:12:14,140 --> 02:12:19,260
If we have time, I can show you how long it takes with Mamba, but I'm pretty certain it

1388
02:12:19,260 --> 02:12:24,060
doesn't take this long. But this can also happen in Anaconda Navigator, for example. It's pretty

1389
02:12:24,060 --> 02:12:28,620
annoying sometimes that it doesn't produce output that often. Like what's it doing?

1390
02:12:28,620 --> 02:12:35,740
Like it's trying to solve the environment and yeah, it takes a while and it doesn't

1391
02:12:35,740 --> 02:12:40,460
necessarily produce output so you can think that it's crashed. But yeah, sometimes the

1392
02:12:40,460 --> 02:12:47,900
solving just takes a long time. Let's see if there's any good questions in the chat.

1393
02:12:47,900 --> 02:12:57,540
Yeah. So I will also try on my terminal. Let's see. Yes. The one reason could be that you

1394
02:12:57,540 --> 02:13:04,020
have a lot of, we could, there are ways to clear conda cache, for example, to check less

1395
02:13:04,020 --> 02:13:08,980
things and also your base environment where this JupyterLab is installed. It might have

1396
02:13:08,980 --> 02:13:14,140
a certain libraries already installed. So what conda trying to do is it's trying to

1397
02:13:14,140 --> 02:13:18,780
sort of not to redo things and maybe reuse things and also be compatible.

1398
02:13:19,340 --> 02:13:22,780
Yeah, and also maybe it's because of the share and that sort of thing.

1399
02:13:23,580 --> 02:13:27,180
There's other things running on my laptop at this point.

1400
02:13:44,140 --> 02:14:06,100
Yeah, let's see. Are there any good questions? So where should it be stored? So usually a

1401
02:14:06,100 --> 02:14:11,740
good idea to, if you're using version control or something, you should usually store the

1402
02:14:11,740 --> 02:14:22,600
environments and requirements with the code, so that it's easy to reproduce.

1403
02:14:22,840 --> 02:14:28,840
There's a good question there, honda-update-or, this is a good thing to

1404
02:14:28,840 --> 02:14:34,160
mention, that updating already existing environments can sometimes be really

1405
02:14:34,160 --> 02:14:39,740
complicated, like it's, well, for pip it's less complicated because pip usually

1406
02:14:39,740 --> 02:14:44,900
It just downloads stuff and it doesn't care necessarily.

1407
02:14:44,900 --> 02:14:47,580
It just will install them.

1408
02:14:47,580 --> 02:14:49,300
It doesn't look...

1409
02:14:49,300 --> 02:14:55,940
It just goes YOLO and it just installs packages, which is good in many cases, but it sometimes

1410
02:14:55,940 --> 02:14:58,880
gets you environments that don't work anymore.

1411
02:14:58,880 --> 02:15:01,140
What Conda does is the complete opposite.

1412
02:15:01,140 --> 02:15:04,540
So it tries to make certain that everything works.

1413
02:15:04,540 --> 02:15:12,220
And if you have like, basically, if you have, let's say, if you have ever been to like a

1414
02:15:12,220 --> 02:15:17,460
tour or something, like a tourist tour or something, and there's one person who walks

1415
02:15:17,460 --> 02:15:20,500
slowly, then the whole group needs to walk slowly.

1416
02:15:20,500 --> 02:15:25,420
And that's basically what can happen with the conda packages, is that there's one package

1417
02:15:25,420 --> 02:15:30,420
that is basically like, I don't want to update, like I don't like updating, I don't want

1418
02:15:30,420 --> 02:15:32,420
to like be updated.

1419
02:15:32,420 --> 02:15:35,140
And then it can hold the whole environment back.

1420
02:15:35,140 --> 02:15:41,020
And it can create this kind of a situation where, like, the content goes on a tangent

1421
02:15:41,020 --> 02:15:49,180
and it tries to, like, create an environment which doesn't want to update anymore.

1422
02:15:49,180 --> 02:15:58,220
So for all of these situations, usually the solution is to just create a new environment.

1423
02:15:58,220 --> 02:16:06,860
For fun's sake, I created a new environment here. Let's try with Mamba. I'm running it

1424
02:16:06,860 --> 02:16:14,220
now from my terminal, and it's the same command, exact same command, but this time I'm running it

1425
02:16:15,500 --> 02:16:22,940
with Mamba. Mamba is much faster, so I'm pretty certain that this will finish before this

1426
02:16:22,940 --> 02:16:33,940
And it gives more output as well, it tells where it tries to find the packages and what does it download, like what packages and that sort of stuff.

1427
02:16:39,940 --> 02:16:40,940
Yeah.

1428
02:16:42,940 --> 02:16:45,940
So now it tells what we are looking for.

1429
02:16:45,940 --> 02:16:52,380
we are looking for, and soon it should probably give you the answer to what it's, yeah.

1430
02:16:52,380 --> 02:16:54,060
So now it's already doing the installation.

1431
02:16:54,060 --> 02:16:59,020
So this is why we usually recommend people to use Mamba when they create environments.

1432
02:16:59,020 --> 02:17:06,620
So it's already done when the conda is still wondering about, and this is why this is maybe

1433
02:17:06,620 --> 02:17:12,460
a good demo on why certain tools have been reinvented.

1434
02:17:12,460 --> 02:17:15,860
But the user interface is basically the same.

1435
02:17:15,860 --> 02:17:21,460
But maybe we should have, like, do we have anything for this session?

1436
02:17:21,460 --> 02:17:28,980
Do you want to show something more?

1437
02:17:28,980 --> 02:17:35,020
Yeah, maybe I'll quickly show how to activate the environment.

1438
02:17:35,020 --> 02:17:42,700
So, when we often, often in places, we recommend you don't necessarily run this conda init.

1439
02:17:42,700 --> 02:17:43,700
You can run it.

1440
02:17:43,700 --> 02:17:45,820
So if you see, let's say you have a terminal

1441
02:17:45,820 --> 02:17:48,060
and you see, let's say the space over here,

1442
02:17:48,060 --> 02:17:52,460
it means that your conda is active now

1443
02:17:52,460 --> 02:17:55,540
and the Python will always be found from that environment.

1444
02:17:55,540 --> 02:17:57,940
And then this can cause problems in many systems.

1445
02:17:57,940 --> 02:17:59,660
Like if you want to,

1446
02:17:59,660 --> 02:18:01,500
if you don't want to always have it active,

1447
02:18:01,500 --> 02:18:04,260
like if you have a program that tries to use Python,

1448
02:18:04,260 --> 02:18:07,620
but suddenly it wants to use the Python

1449
02:18:07,620 --> 02:18:11,260
from the activated conda, that can cause problems.

1450
02:18:11,260 --> 02:18:21,460
So, we usually recommend that people don't run this conda in it, but you can, of course,

1451
02:18:21,460 --> 02:18:22,460
run it.

1452
02:18:22,460 --> 02:18:31,300
And if you run it, you can use this conda activate to activate the environment.

1453
02:18:31,300 --> 02:18:35,060
And now you have an environment here.

1454
02:18:35,060 --> 02:18:45,820
But if you, yeah, usually we don't recommend you run it all the time, because then other

1455
02:18:45,820 --> 02:18:50,500
programs that want to use Python as well, they might find this wrong Python instead

1456
02:18:50,500 --> 02:18:55,780
of the Python that you want to use.

1457
02:18:55,780 --> 02:19:00,860
So here in this file that you activated, we didn't mention which version of Python we

1458
02:19:00,860 --> 02:19:01,860
need.

1459
02:19:01,860 --> 02:19:12,340
So, we can check what is the version of the Python, so we got 3.12, so in this environment

1460
02:19:12,340 --> 02:19:27,180
I didn't specify what Python to use, so yeah, I just got the newest Python in this case,

1461
02:19:27,180 --> 02:19:36,380
if I run which Python, this is like Linux specific command, but you can see that it shows Python from

1462
02:19:36,380 --> 02:19:42,460
my newly created environment. So in an environment, does it always include a Python as well?

1463
02:19:45,980 --> 02:19:50,380
Not necessarily. Even if you don't have it, mention it in your requirement file,

1464
02:19:50,380 --> 02:19:55,260
does it always include a Python? No, no. If there's nothing that requires Python,

1465
02:19:55,260 --> 02:19:59,660
it doesn't always contain Python. So usually when you create an environment, it might be sometimes

1466
02:19:59,660 --> 02:20:04,780
a good idea to add, let's say, pip and Python always there so that you always get pip and

1467
02:20:04,780 --> 02:20:11,820
Python into the environment. But sometimes, like most of the time, you install NumPy or something,

1468
02:20:11,820 --> 02:20:17,660
and then that has a dependency to Python. So it will bring Python with it. But it's always like

1469
02:20:17,660 --> 02:20:22,700
this kind of a question of who are the major players? What are the major packages that you

1470
02:20:22,700 --> 02:20:28,540
want to get. And those are the ones that bring everybody with them. So they're basically like

1471
02:20:28,540 --> 02:20:37,740
the Taylor Swift going into a restaurant. Other people come because Taylor Swift is at the

1472
02:20:37,740 --> 02:20:43,740
restaurant. And those are the stars of the environment. Let's say PyTorch or something.

1473
02:20:43,740 --> 02:20:49,900
PyTorch will bring its friends with it. But nobody's really caring about the friends. They

1474
02:20:49,900 --> 02:20:55,020
are caring about the PyTorch. And this is usually how you want to think about the environment. So

1475
02:20:55,020 --> 02:20:59,420
there's usually the major players that you want to, these are the major things that they want

1476
02:20:59,420 --> 02:21:05,020
the conda to focus on. So to sort of, sort of investigate that, what you said, you know,

1477
02:21:05,020 --> 02:21:10,620
there might be other packages that pandas needed. Is it possible for you to rephrase this

1478
02:21:10,620 --> 02:21:16,780
environment and show how that would look like, you know, after creating? Yes, let's, let's,

1479
02:21:16,780 --> 02:21:24,860
Let's run the conda-env-export.

1480
02:21:24,860 --> 02:21:31,340
And you notice here that I get this pretty horrible looking environment file, where suddenly

1481
02:21:31,340 --> 02:21:33,940
there's a huge bunch of stuff here.

1482
02:21:33,940 --> 02:21:37,860
And this is basically the exact versions I got.

1483
02:21:37,860 --> 02:21:46,980
And most of these are packages that come as dependencies to, let's say, NumPy.

1484
02:21:46,980 --> 02:21:54,060
But you don't want to give other people these as an installation instruction, unless they

1485
02:21:54,060 --> 02:21:56,000
want the exact same environment.

1486
02:21:56,000 --> 02:21:57,200
But usually you don't want it.

1487
02:21:57,200 --> 02:22:02,660
You want to give them the actual instructions that you need.

1488
02:22:02,660 --> 02:22:03,660
The one you use.

1489
02:22:03,660 --> 02:22:04,660
Yeah, yeah, yeah.

1490
02:22:04,660 --> 02:22:09,900
So, in fact, this will break in most systems because if you see the hash, like the third,

1491
02:22:09,900 --> 02:22:16,020
like you have two equal signs, the third hash actually is very unique to the system you

1492
02:22:16,020 --> 02:22:17,020
are in now.

1493
02:22:17,020 --> 02:22:21,460
So, there's very likely that it will break on a different system.

1494
02:22:21,460 --> 02:22:22,460
Yes.

1495
02:22:22,460 --> 02:22:28,660
So, many of the things here are like, you can read it as you have a package, then you

1496
02:22:28,660 --> 02:22:33,340
have a package version, and then you have a specific build of that package.

1497
02:22:33,340 --> 02:22:39,820
For example, in this case, it's for Python 3.12. But yeah, it's very specific. And that's why you

1498
02:22:39,820 --> 02:22:46,060
usually want to give the broad outline of the environment instead of the exact requirements.

1499
02:22:50,060 --> 02:22:54,380
Of course, if you want to create the exact same cake that somebody else has created,

1500
02:22:54,380 --> 02:23:02,300
you can give the exact grams of what flour to get, exact brand of the flour, exact date of the flour

1501
02:23:02,300 --> 02:23:08,140
when it was made, like exact amount of the flour that is needed. But most of the time,

1502
02:23:08,140 --> 02:23:13,980
you want to give a generic recipe that says that, okay, just get me flour this amount.

1503
02:23:14,620 --> 02:23:19,340
So it's like similar, you don't want, you want to give a general recipe, you don't want to give,

1504
02:23:20,860 --> 02:23:23,980
and the Konda is like the cook that can then manage this.

1505
02:23:25,660 --> 02:23:29,980
Yeah. Then also the file you used, the environment file, you should also give the

1506
02:23:29,980 --> 02:23:33,460
the others to build upon your package. For example, if they

1507
02:23:33,460 --> 02:23:37,620
need a, let's say, PyTorch in their program, in addition to

1508
02:23:37,620 --> 02:23:41,740
what you install, it's easier for them to add PyTorch instead

1509
02:23:41,740 --> 02:23:45,100
of editing this file. So this is sort of overwhelming. And this

1510
02:23:45,100 --> 02:23:48,340
is not something you want to show. And it's also very

1511
02:23:48,340 --> 02:23:48,940
simple.

1512
02:23:49,460 --> 02:23:52,180
Should we now go to a break before?

1513
02:23:53,700 --> 02:23:59,180
We have two minutes. I think one minute you can have a look at

1514
02:23:59,180 --> 02:24:05,420
questions? Yeah, let's look at the questions quickly and then go to a break.

1515
02:24:10,860 --> 02:24:18,700
So let's see. If you have any more questions, please go and ask them. I will try to answer

1516
02:24:18,700 --> 02:24:24,860
them. Do you want me to share the questions? Yes, maybe. Yeah, that would be great. Okay, here we go.

1517
02:24:29,180 --> 02:24:37,180
You can only see on the stream how this goes.

1518
02:24:37,180 --> 02:24:49,180
I can see the questions on the stream.

1519
02:24:49,180 --> 02:24:57,860
There's some questions about things like, how do you make the stuff in the environment

1520
02:24:57,860 --> 02:24:58,860
file?

1521
02:24:58,860 --> 02:24:59,860
Do you have to do it manually?

1522
02:24:59,860 --> 02:25:02,860
I think you might have answered that.

1523
02:25:02,860 --> 02:25:08,500
It usually is a good idea to write it yourself.

1524
02:25:08,500 --> 02:25:10,540
Where do you store the environment file?

1525
02:25:10,540 --> 02:25:11,540
Yeah.

1526
02:25:11,540 --> 02:25:18,020
So I think we have some Mamba installation instructions somewhere as well.

1527
02:25:18,020 --> 02:25:20,180
So we had to find that and place it.

1528
02:25:20,180 --> 02:25:23,100
So under question 44, we'll place it

1529
02:25:23,100 --> 02:25:27,060
as soon as I find the link for the mobile installation.

1530
02:25:27,060 --> 02:25:27,580
Yes.

1531
02:25:30,300 --> 02:25:36,580
So about the question, I often think of environments

1532
02:25:36,580 --> 02:25:42,020
like if you go camping or if you go to a hotel,

1533
02:25:42,020 --> 02:25:44,980
like you go on a trip, you always

1534
02:25:44,980 --> 02:25:46,420
pack the usual suspects.

1535
02:25:46,420 --> 02:25:50,780
like you pack your toothbrush and you pack your shampoo and whatever,

1536
02:25:50,980 --> 02:25:51,860
like this kind of stuff.

1537
02:25:51,940 --> 02:25:54,420
And that's basically what most of the environments are.

1538
02:25:54,580 --> 02:25:58,940
You always get numpies and matplotlibs and scipies and python and beef.

1539
02:25:58,940 --> 02:26:04,060
And like most of the stuff is like, it rolls off your tongue.

1540
02:26:04,540 --> 02:26:08,540
Like you know that, okay, I will need these anyway.

1541
02:26:08,540 --> 02:26:10,020
Like I always want these stuff.

1542
02:26:10,140 --> 02:26:15,660
And then there's all like, usually like maybe two, three packages that are the

1543
02:26:15,660 --> 02:26:21,980
actual like meat of the whole thing and they are the special like let's say you need a certain

1544
02:26:21,980 --> 02:26:29,100
kind of like clothing when you go to a like a trip you need clothing for warm weather or

1545
02:26:30,060 --> 02:26:36,620
something like that and that's the actual thing there. Yes although it's very interesting our

1546
02:26:36,620 --> 02:26:43,500
discussion [Name] that we have to stop now. On question number 46 I'll slightly mention something

1547
02:26:43,500 --> 02:26:49,500
about it especially we see this if it says access denied when you try to install especially on

1548
02:26:49,500 --> 02:26:54,860
shared HPC systems for example it's always like that you are not allowed to modify the central

1549
02:26:54,860 --> 02:27:00,220
environment and actually you should not do that try to do that you can use with dash as user

1550
02:27:00,780 --> 02:27:06,540
as mentioned answer but you should go for this environment what [name] was promoting so create

1551
02:27:06,540 --> 02:27:13,540
isolated silos where you can add things and have different versions and also delete them

1552
02:27:13,540 --> 02:27:17,540
if they don't want. So don't try to install it centrally.

1553
02:27:17,540 --> 02:27:23,300
Yes. So if you install like Anaconda Navigator or something, usually like in that example,

1554
02:27:23,300 --> 02:27:28,100
you install it into program files and you install it as root or something like that.

1555
02:27:28,100 --> 02:27:32,420
And you don't have maybe right access to that folder. And that's a good thing because then

1556
02:27:32,420 --> 02:27:37,140
you cannot mess up the installation. But what you want to do is create a separate realm,

1557
02:27:37,140 --> 02:27:42,020
separate world, virtual environment, or conda environment, where you then install the stuff.

1558
02:27:42,020 --> 02:27:48,100
Because if you run, for example, the pip install, it will install into folders where

1559
02:27:48,100 --> 02:27:55,220
they will always be present. So if some other environment uses the same Python version,

1560
02:27:55,220 --> 02:28:02,340
it will find the same packages, and then all hell breaks loose, and suddenly nothing works anymore.

1561
02:28:02,340 --> 02:28:10,260
So, you want to keep the packages that you want in the environment, you want to keep

1562
02:28:10,260 --> 02:28:17,300
it in a separate silo, like [Name] said, a separate world, and you want to first create

1563
02:28:17,300 --> 02:28:19,580
the world for it, like the environment.

1564
02:28:19,580 --> 02:28:25,660
You want to create the world, and you want the packages to that world.

1565
02:28:25,660 --> 02:28:29,020
And [Name] will take the rest of the questions and the community, and thank you very much

1566
02:28:29,020 --> 02:28:39,020
Thank you so much for your this great introduction. I think it will be very useful for most of us. [Name], can you please take on.

1567
02:28:39,020 --> 02:28:47,020
Yes. So, yeah, I guess, um, we will have a break until 23 past hour.

1568
02:28:47,020 --> 02:28:50,020
So, see you then.

1569
02:28:50,020 --> 02:28:52,080
you

1570
02:29:20,020 --> 02:29:22,080
you

1571
02:29:50,020 --> 02:29:52,080
you

1572
02:30:20,020 --> 02:30:22,080
you

1573
02:30:50,020 --> 02:30:52,080
you

1574
02:31:20,020 --> 02:31:22,080
you

1575
02:31:50,020 --> 02:31:52,080
you

1576
02:32:20,020 --> 02:32:22,080
you

1577
02:32:50,020 --> 02:32:52,080
you

1578
02:33:20,020 --> 02:33:22,080
you

1579
02:33:50,020 --> 02:33:52,080
you

1580
02:34:20,020 --> 02:34:22,080
you

1581
02:34:50,020 --> 02:34:52,080
you

1582
02:35:20,020 --> 02:35:22,080
you

1583
02:35:50,020 --> 02:35:52,080
you

1584
02:36:20,020 --> 02:36:22,080
you

1585
02:36:50,020 --> 02:36:52,080
you

1586
02:37:20,020 --> 02:37:22,080
you

1587
02:37:50,020 --> 02:37:52,080
you

1588
02:38:20,020 --> 02:38:22,080
you

1589
02:38:50,020 --> 02:38:52,080
you

1590
02:39:20,020 --> 02:39:44,420
There we go, we are in gallery.

1591
02:39:44,420 --> 02:39:46,060
Hi, so welcome back.

1592
02:39:46,060 --> 02:39:49,780
We've got a last exercise here,

1593
02:39:49,780 --> 02:39:56,100
So you may see on the notes,

1594
02:39:56,100 --> 02:39:58,320
there's this initial discussion question,

1595
02:39:58,320 --> 02:40:01,720
which we will talk about shortly.

1596
02:40:01,960 --> 02:40:06,400
But we'll get back there in a minute.

1597
02:40:06,400 --> 02:40:10,560
So I will switch to [name]'s screen.

1598
02:40:11,040 --> 02:40:15,480
We are now on the Binder lesson here.

1599
02:40:15,480 --> 02:40:25,800
So, yeah, so the question is,

1600
02:40:25,800 --> 02:40:29,640
when is sharing code alone not sufficient?

1601
02:40:29,640 --> 02:40:32,560
So let's reflect on what just happened in

1602
02:40:32,560 --> 02:40:35,800
the first two lessons of today.

1603
02:40:35,800 --> 02:40:42,560
So we had scripts which worked roughly okay for many people,

1604
02:40:42,560 --> 02:40:44,680
but there were many different problems there.

1605
02:40:44,680 --> 02:40:50,200
And once we start having these dependencies, everyone's computer is different. So we have

1606
02:40:50,200 --> 02:40:56,840
people running via Anaconda Navigator, Anaconda Cloud, making own environments, maybe some people

1607
02:40:56,840 --> 02:41:02,760
on clusters, and multiply this all by three different operating systems. So basically,

1608
02:41:02,760 --> 02:41:08,520
even if someone has the code, it really doesn't work that well. So look at this picture here.

1609
02:41:08,520 --> 02:41:14,280
So what looks really simple, so there's we say okay there's this code it says

1610
02:41:14,280 --> 02:41:21,280
Python import pandas. There's all these things underneath and it can all go

1611
02:41:21,280 --> 02:41:28,240
wrong some different ways. But what happens if we want to make our code a

1612
02:41:28,240 --> 02:41:37,720
little bit more reusable? So we want to find a way to have code and have someone

1613
02:41:37,720 --> 02:41:43,160
else to easily be able to try it out even if we aren't giving them all the resources directly.

1614
02:41:43,160 --> 02:41:51,960
And that leads to this question, which is being shown here. So Leia is a PhD student in

1615
02:41:51,960 --> 02:41:56,680
computation biology, and after two years of work, she's ready to publish her first paper.

1616
02:41:56,680 --> 02:42:02,040
The code used for analyzing data is available on GitHub, but the supervisor is an advocate

1617
02:42:02,040 --> 02:42:09,720
open science and says just sharing this code is not sufficient. So if this code is just on GitHub,

1618
02:42:09,720 --> 02:42:17,560
what kind of problems could happen? And by the way, GitHub is a version control platform. It's a way

1619
02:42:17,560 --> 02:42:24,680
to share code and control changes to it. So this course is definitely not about Git and GitHub.

1620
02:42:24,680 --> 02:42:31,880
Our other big course, Code Refinery, is about this. So don't worry about that name.

1621
02:42:32,040 --> 02:42:38,040
But what kind of things can go wrong? Please write in notes, and I will flip back there.

1622
02:42:40,040 --> 02:42:42,040
So what can go wrong?

1623
02:42:49,040 --> 02:42:56,040
The easiest is probably we miss requirements. We miss dependencies.

1624
02:42:56,040 --> 02:42:57,040
case.

1625
02:42:57,040 --> 02:42:58,040
Okay.

1626
02:42:58,040 --> 02:43:06,580
So, so basically the NumPy or pandas that worked five years ago doesn't work anymore

1627
02:43:06,580 --> 02:43:09,080
because something has changed.

1628
02:43:09,080 --> 02:43:14,140
That or we don't even know that it is there or that we need it initially.

1629
02:43:14,140 --> 02:43:15,380
Yeah.

1630
02:43:15,380 --> 02:43:19,300
So if there's code that shared but doesn't have this environment file or requirements

1631
02:43:19,300 --> 02:43:25,620
file, then there's really hardly any chance there.

1632
02:43:25,620 --> 02:43:38,100
documentation it can be really hard to use. So what about the whole version of Python changes?

1633
02:43:38,100 --> 02:43:43,300
So for example, a lot of my old codes were written with Python 2 and I never updated them because

1634
02:43:43,300 --> 02:43:48,500
I'm not doing that anymore. That code is probably effectively dead by now.

1635
02:43:48,500 --> 02:43:58,500
Very likely, except if someone, well, it's, okay, I would make a distinction. It's dead for current development.

1636
02:43:58,500 --> 02:44:07,500
It might still work if someone has a Python 2 and their respective dependencies to run it.

1637
02:44:07,500 --> 02:44:14,500
So the code might still work if you get the right dependencies, if you know which versions are needed for it.

1638
02:44:14,500 --> 02:44:19,500
But it's probably dead for further development.

1639
02:44:19,500 --> 02:44:24,500
And then what about the practical difficulties of someone installing these?

1640
02:44:24,500 --> 02:44:29,500
Let's say you're sharing it with someone that's not an expert in Python and doesn't

1641
02:44:29,500 --> 02:44:34,500
use environment files and all these things. Is there any way that they can

1642
02:44:34,500 --> 02:44:39,500
explore this code and do anything with it at all?

1643
02:44:39,500 --> 02:44:49,620
Well, yeah, there are tools like binders, which essentially provide a virtual environment

1644
02:44:49,620 --> 02:44:53,300
that is independent of your machine.

1645
02:44:53,300 --> 02:44:59,180
And if they don't want to care about it, this kind of, yeah, more or less virtual machine

1646
02:44:59,180 --> 02:45:06,420
for a virtual interpreter can help you there.

1647
02:45:06,420 --> 02:45:09,100
I wouldn't know of anything else that you could really

1648
02:45:09,100 --> 02:45:12,420
do if they don't want to install anything.

1649
02:45:15,180 --> 02:45:16,540
Yeah.

1650
02:45:16,540 --> 02:45:19,340
So well, anyway, that leads to what

1651
02:45:19,340 --> 02:45:22,380
our lesson is now, which is sharing computational

1652
02:45:22,380 --> 02:45:24,460
environments with Binder.

1653
02:45:24,460 --> 02:45:28,020
So back to [name]'s screen.

1654
02:45:28,020 --> 02:45:31,460
So this is something where you can try to follow along

1655
02:45:31,460 --> 02:45:33,740
and do it with us if you want.

1656
02:45:33,740 --> 02:45:41,100
But for most people I would say don't just watch us and ask questions. And why is that?

1657
02:45:41,100 --> 02:45:48,940
It requires knowledge of git and the github account and for a later part is the nodo account.

1658
02:45:48,940 --> 02:45:55,740
And these things are definitely not prerequisites of this course. So we don't expect everyone to be

1659
02:45:55,740 --> 02:46:06,060
able to do this. So try if you want, but try to get the point of what we're doing and ask questions

1660
02:46:06,060 --> 02:46:13,260
and get inspired to do this later. So let's see. Let's get started then.

1661
02:46:13,260 --> 02:46:19,940
and how I'm arranging my screen so I

1662
02:46:19,940 --> 02:46:22,420
can see what [name] is doing.

1663
02:46:22,420 --> 02:46:29,620
So we start off with this example

1664
02:46:29,620 --> 02:46:32,140
we used from a previous lesson.

1665
02:46:32,140 --> 02:46:32,940
Which lesson was it?

1666
02:46:32,940 --> 02:46:34,340
The data visualization.

1667
02:46:34,340 --> 02:46:36,020
So it's a little plot.

1668
02:46:36,020 --> 02:46:37,700
So we see the code here.

1669
02:46:37,700 --> 02:46:39,220
It's in a notebook.

1670
02:46:39,220 --> 02:46:42,540
Can you run it?

1671
02:46:42,540 --> 02:46:45,820
I hope it works and I didn't do anything wrong, but yeah.

1672
02:46:45,820 --> 02:46:48,780
Yes, okay, so there's a plot.

1673
02:46:48,780 --> 02:46:55,900
So we need to... we want to make this reusable by other people.

1674
02:46:55,900 --> 02:47:00,140
So to do that, the first step is to make a git repository.

1675
02:47:00,140 --> 02:47:04,700
So we would probably do this from a command line, but instead we're doing it

1676
02:47:04,700 --> 02:47:08,860
from GitHub. So here we are on github.com.

1677
02:47:08,860 --> 02:47:11,660
[name] is logged in, and we'll click New.

1678
02:47:14,140 --> 02:47:19,100
And this allows us to make a new repository. We can call it Binder Demo.

1679
02:47:20,140 --> 02:47:24,620
Okay, and there's no description needed. Public.

1680
02:47:25,820 --> 02:47:30,060
It's relatively important that it is public, otherwise Binder might get into problems.

1681
02:47:31,020 --> 02:47:33,660
Yes, and click Create Repository.

1682
02:47:33,660 --> 02:47:41,820
So, so far, what we've done is a pretty standard way of using GitHub.

1683
02:47:41,820 --> 02:47:47,180
And next up, we will find on this page, upload existing file.

1684
02:47:47,180 --> 02:47:49,340
So we can do everything here.

1685
02:47:49,340 --> 02:47:51,940
It's right around there.

1686
02:47:51,940 --> 02:47:53,540
Yes.

1687
02:47:53,540 --> 02:47:55,460
Okay.

1688
02:47:55,460 --> 02:47:57,380
Did you save it in JupyterLab?

1689
02:47:57,380 --> 02:48:00,380
And give it a title?

1690
02:48:00,380 --> 02:48:01,380
Yes.

1691
02:48:01,380 --> 02:48:02,380
Or rename the file?

1692
02:48:02,380 --> 02:48:10,220
It is. I just try navigating there or actually choose your files.

1693
02:48:11,100 --> 02:48:12,780
So this is a bit.

1694
02:48:14,860 --> 02:48:17,500
Word finder teaching.

1695
02:48:19,820 --> 02:48:23,260
There. Called it plotting.

1696
02:48:25,740 --> 02:48:31,020
So it's been added and we give a git command message.

1697
02:48:31,020 --> 02:48:36,780
So this is this provides a history and explains what we're doing. So we commit changes.

1698
02:48:39,660 --> 02:48:45,180
And there we go. There's a notebook. Can we click on it and see what it looks like when we open it?

1699
02:48:46,940 --> 02:48:53,580
Yep. GitHub has a preview. Okay. Yeah that looks like what we just did.

1700
02:48:54,780 --> 02:48:58,620
So now in fact maybe someone can copy the link and put it

1701
02:48:58,620 --> 02:49:04,620
in the notes, but this is something that anyone can see.

1702
02:49:08,260 --> 02:49:10,300
OK, [name] is doing it.

1703
02:49:10,300 --> 02:49:17,420
Yeah, just need to find the notes again.

1704
02:49:27,260 --> 02:49:28,300
OK, there we go.

1705
02:49:29,580 --> 02:49:37,580
Okay. Okay. Let's go back. So now here we are. So what what's the first minimum step in order

1706
02:49:37,580 --> 02:49:45,260
for anyone to be able to run this code? Telling what requirements there are. So what other

1707
02:49:45,980 --> 02:49:51,340
what dependencies it has. Yeah so exactly what we just covered in the lesson. So we'll create a new

1708
02:49:51,340 --> 02:49:59,980
file. We will call it, we'll copy this,

1709
02:50:00,780 --> 02:50:05,020
and we paste it and call it requirements.txt.

1710
02:50:05,020 --> 02:50:08,700
So now we've just made another file in this repository

1711
02:50:08,700 --> 02:50:12,940
from the github web interface, and we paste it in

1712
02:50:12,940 --> 02:50:16,540
the requirements.txt version of dependencies.

1713
02:50:16,540 --> 02:50:19,100
So we can click Commit Changes.

1714
02:50:19,100 --> 02:50:23,380
It gives us some standard message to create the files.

1715
02:50:23,380 --> 02:50:28,080
We can do it, and we click Commit Changes.

1716
02:50:28,080 --> 02:50:30,020
And now if we look at our code, we

1717
02:50:30,020 --> 02:50:34,740
have plotting.ipynb and requirements.

1718
02:50:34,740 --> 02:50:39,740
So there we go.

1719
02:50:39,740 --> 02:50:44,460
So now, OK, so what is Binder?

1720
02:50:44,460 --> 02:50:51,500
If we go to mybinder.org, which is listed, it's a way where we can...

1721
02:50:52,780 --> 02:50:55,580
So it's a cloud service that starts Jupyter

1722
02:50:57,660 --> 02:51:03,340
in the environment specified in the repository. So Binder will read the requirements

1723
02:51:04,140 --> 02:51:08,780
and make an environment and then start Jupyter in there for anyone online.

1724
02:51:08,780 --> 02:51:22,820
So, if we copy this URL, yeah, let's copy, actually no, we can copy it from there, and

1725
02:51:22,820 --> 02:51:24,380
then paste.

1726
02:51:24,380 --> 02:51:31,380
So, what it tells us to do is not to click launch, but to click the little arrow down

1727
02:51:31,380 --> 02:51:37,100
below, lower, there.

1728
02:51:37,100 --> 02:51:43,300
And this gives us a launch binder button, just like we see up there.

1729
02:51:43,300 --> 02:51:50,620
So copy that, and let's go back to the GitHub repository, and let's make a new README file.

1730
02:51:50,620 --> 02:51:54,340
And oh, there's this nice button there to do it.

1731
02:51:54,340 --> 02:51:56,000
So it's called Binder Demo.

1732
02:51:56,000 --> 02:51:59,580
We can paste this.

1733
02:51:59,580 --> 02:52:02,620
Maybe we can put it below the title.

1734
02:52:02,620 --> 02:52:06,280
Okay, yeah.

1735
02:52:06,280 --> 02:52:07,440
So we see Binder.

1736
02:52:07,440 --> 02:52:13,280
And if we commit the changes, commit directly.

1737
02:52:21,440 --> 02:52:22,640
Yes, OK.

1738
02:52:22,640 --> 02:52:25,520
So now our repository is described.

1739
02:52:25,520 --> 02:52:28,720
And this readme file would be, like it would say,

1740
02:52:28,720 --> 02:52:32,360
this is my example code for such and such a project.

1741
02:52:32,360 --> 02:52:34,960
Here's my citation, stuff like that.

1742
02:52:36,280 --> 02:52:40,280
And if you're following along online, you will see this there also.

1743
02:52:40,280 --> 02:52:43,280
And now you can click LaunchBinder, this button.

1744
02:52:43,280 --> 02:52:46,280
Maybe open it in a new tab.

1745
02:52:46,280 --> 02:52:49,280
But it's okay.

1746
02:52:49,280 --> 02:52:54,280
Yeah. So we see a preview of it,

1747
02:52:54,280 --> 02:52:57,280
and we see it's running some stuff here.

1748
02:52:57,280 --> 02:53:04,280
So this is building the environment.

1749
02:53:04,280 --> 02:53:05,680
And can you zoom in a little bit?

1750
02:53:10,320 --> 02:53:13,480
So we see it's running a bunch of code looking stuff,

1751
02:53:13,480 --> 02:53:18,560
but it looks like it's trying to install from the requirements.txt

1752
02:53:18,560 --> 02:53:19,060
file.

1753
02:53:25,920 --> 02:53:27,520
And it might take a little while.

1754
02:53:27,520 --> 02:53:36,520
Um, I'm not sure why it took me a long time yesterday.

1755
02:53:36,520 --> 02:53:52,520
Um, maybe we can take a short break and ask, did you

1756
02:53:52,520 --> 02:53:59,880
No, I just went over.

1757
02:53:59,880 --> 02:54:00,880
You went to a new...

1758
02:54:00,880 --> 02:54:01,880
Okay.

1759
02:54:01,880 --> 02:54:02,880
Yeah, it's not.

1760
02:54:02,880 --> 02:54:06,480
So we're just open the git repository again.

1761
02:54:06,480 --> 02:54:11,400
So if there's any questions, please write in the notes because I'm sure there's all

1762
02:54:11,400 --> 02:54:17,800
kinds of things here.

1763
02:54:17,800 --> 02:54:30,120
So yeah, it's still going.

1764
02:54:30,120 --> 02:54:33,960
Building, let's hope that gets done soonish.

1765
02:54:33,960 --> 02:54:38,280
Yeah, it took a few minutes for me.

1766
02:54:38,280 --> 02:54:41,160
So while we're waiting, in what cases

1767
02:54:41,160 --> 02:54:42,480
is this especially useful?

1768
02:54:42,480 --> 02:54:53,160
I would say for a relatively well for for research code that you want people

1769
02:54:53,160 --> 02:54:59,960
to be able to explore and that does not depend too much on particular data sets

1770
02:54:59,960 --> 02:55:05,440
that you have so as soon as you depend as your code depends on really large

1771
02:55:05,440 --> 02:55:12,460
data sets it might not be the easiest or best approach yeah because they need to

1772
02:55:12,460 --> 02:55:15,660
to be stored somewhere and you only

1773
02:55:15,660 --> 02:55:17,740
have limited resources on Binder.

1774
02:55:17,740 --> 02:55:19,260
Yeah.

1775
02:55:19,260 --> 02:55:23,340
So in Code Refinery, we gave an example

1776
02:55:23,340 --> 02:55:25,980
or we showed a demo, I think.

1777
02:55:25,980 --> 02:55:27,980
There's a scientific project that

1778
02:55:27,980 --> 02:55:30,500
was analyzing some data and making

1779
02:55:30,500 --> 02:55:32,540
some interesting pictures.

1780
02:55:32,540 --> 02:55:40,660
And they created a Binder repository out of this.

1781
02:55:40,660 --> 02:55:52,500
So basically anyone else with a little bit of knowledge with Python could start this up and regenerate the figures and see how little changes would affect what the results are.

1782
02:55:53,340 --> 02:56:00,540
And this was really good for science because the more people that can use your work, the more likely you are to get citations about it.

1783
02:56:01,300 --> 02:56:06,420
And that is presumably one of your goals here.

1784
02:56:06,420 --> 02:56:13,820
I mean, of course, it's also good for science if other people can explore and reuse things

1785
02:56:13,820 --> 02:56:17,420
and stuff like that.

1786
02:56:17,420 --> 02:56:18,660
There's a good question coming up.

1787
02:56:18,660 --> 02:56:23,660
So would Binder be suitable for projects where the same project folder has the raw data files

1788
02:56:23,660 --> 02:56:25,520
used by the study?

1789
02:56:25,520 --> 02:56:29,460
So yes, I mean, if the data is small, then this makes sense.

1790
02:56:29,460 --> 02:56:33,260
So you could have the data within the Git repository.

1791
02:56:33,260 --> 02:56:41,020
I would say it makes sense up to like a few megabytes of data size or something like that.

1792
02:56:42,060 --> 02:56:47,740
Otherwise, GitHub and Binder Hub might not be very happy because it's basically using their

1793
02:56:47,740 --> 02:56:53,820
resources to host data. But one thing that can be done is the data is put somewhere else

1794
02:56:53,820 --> 02:57:04,820
And your notebook itself is made so that it downloads the data

1795
02:57:04,820 --> 02:57:06,540
whenever it runs.

1796
02:57:06,540 --> 02:57:08,860
So the code would say, OK, does the data already

1797
02:57:08,860 --> 02:57:10,700
exist if .downloaded?

1798
02:57:10,700 --> 02:57:13,340
And then it uses a downloaded file in that directory.

1799
02:57:18,540 --> 02:57:21,020
Does Binder run on your local machine,

1800
02:57:21,020 --> 02:57:25,860
Or does the Binder instance run remotely?

1801
02:57:25,860 --> 02:57:27,980
This is running remotely.

1802
02:57:27,980 --> 02:57:34,060
So Binder is run by some nonprofit group,

1803
02:57:34,060 --> 02:57:37,540
which gets donations of the computing resources

1804
02:57:37,540 --> 02:57:43,220
from Google and other kinds of places.

1805
02:57:43,220 --> 02:57:45,500
Is it running?

1806
02:57:45,500 --> 02:57:46,380
It's running.

1807
02:57:46,380 --> 02:57:47,380
It's installing things.

1808
02:57:47,380 --> 02:58:00,380
Yeah, so they get donations of these resources, and basically BinderHub is a modified JupyterHub.

1809
02:58:00,380 --> 02:58:10,020
And it, um, yeah, so it's running in the cloud.

1810
02:58:10,020 --> 02:58:16,540
So it provides resources for a short time, like after 15 or 30 minutes it would time

1811
02:58:16,540 --> 02:58:25,360
out and remove everything. So it's not suitable for storing things online for a long period

1812
02:58:25,360 --> 02:58:37,080
of time. Like not suitable for long term work or doing your main work. You know, if we do

1813
02:58:37,080 --> 02:58:41,640
this again, maybe we could have a break while the binder is launching.

1814
02:58:41,640 --> 02:58:43,240
That sounds very reasonable.

1815
02:58:49,240 --> 02:58:51,040
While we're waiting, we can preview

1816
02:58:51,040 --> 02:58:53,520
what would happen next.

1817
02:58:53,520 --> 02:58:56,880
Or actually, maybe we could do it at the same time even.

1818
02:58:59,680 --> 02:59:04,840
So the next section is about how can I get a DOI from Zenodo.

1819
02:59:04,840 --> 02:59:08,600
So DOI is Digital Object Identifier.

1820
02:59:08,600 --> 02:59:14,360
and basically it is what is used to cite papers and other things.

1821
02:59:16,920 --> 02:59:23,560
So the idea here is that let's say you have a project and you make some code

1822
02:59:23,560 --> 02:59:33,480
and you want your code to be cited. So Zenodo is a publicly funded data repository.

1823
02:59:33,480 --> 02:59:42,040
It's funded by the EU for open science purposes. It's run by CERN. But people can upload data

1824
02:59:42,040 --> 02:59:47,160
there and it gets permanently archived. And then you can refer to this, you can cite it,

1825
02:59:47,800 --> 02:59:50,680
you don't have to worry about storing it yourself, things like that.

1826
02:59:52,200 --> 02:59:59,560
And what we will do is we will connect GitHub to this. So basically Zenodo has GitHub integration.

1827
02:59:59,560 --> 03:00:13,940
So, whenever you go to Zenodo, you can tell it, okay, you can log in with, well, log in

1828
03:00:13,940 --> 03:00:21,340
with GitHub, and it requests permission to connect there

1829
03:00:21,340 --> 03:00:22,460
so we can authorize.

1830
03:00:32,260 --> 03:00:35,020
Firefox is managing the passwords.

1831
03:00:35,020 --> 03:00:43,900
I am multi-factor authentications.

1832
03:00:43,900 --> 03:00:44,900
Yes.

1833
03:00:44,900 --> 03:00:45,900
Okay.

1834
03:00:45,900 --> 03:01:04,620
And here we are.

1835
03:01:04,620 --> 03:01:14,860
So this is making the account on Zenodo,

1836
03:01:14,860 --> 03:01:22,980
complete registration, or whatever.

1837
03:01:22,980 --> 03:01:25,260
Yeah.

1838
03:01:25,260 --> 03:01:29,420
This is for the sandbox, so yeah.

1839
03:01:29,420 --> 03:01:33,580
Yes, so we wouldn't want to do a demo for a course using

1840
03:01:33,580 --> 03:01:37,020
primary Zenodo because it's permanently archived.

1841
03:01:37,020 --> 03:01:41,540
But this sandbox.zenodo.org is just for testing purposes

1842
03:01:41,540 --> 03:01:43,780
and teaching.

1843
03:01:43,780 --> 03:01:44,380
So OK.

1844
03:01:44,380 --> 03:01:46,660
As you can see in the recent uploads,

1845
03:01:46,660 --> 03:01:49,660
big stuff for more downloading.

1846
03:01:49,660 --> 03:01:51,460
So yeah.

1847
03:01:51,460 --> 03:01:53,540
Yeah.

1848
03:01:53,540 --> 03:02:00,380
OK, so if we go to the three line menu at the top right,

1849
03:02:00,380 --> 03:02:02,660
There is GitHub down below.

1850
03:02:05,780 --> 03:02:08,060
That's it.

1851
03:02:08,060 --> 03:02:11,460
So we choose our repository, which would be Binder Demo.

1852
03:02:11,460 --> 03:02:13,420
We would flip this to on.

1853
03:02:13,420 --> 03:02:21,420
And it goes and tells GitHub to set up this repository.

1854
03:02:21,420 --> 03:02:25,660
OK, and now that's all we need to do on the Binder side.

1855
03:02:25,660 --> 03:02:27,540
Can we go check Binder?

1856
03:02:27,540 --> 03:02:29,140
OK, that's still running.

1857
03:02:29,140 --> 03:02:31,600
And I really wonder why this is taking.

1858
03:02:31,600 --> 03:02:34,520
Actually, I bet it's because we gave it

1859
03:02:34,520 --> 03:02:36,640
these exact requirements.

1860
03:02:36,640 --> 03:02:39,800
So maybe it's actually taking a long time

1861
03:02:39,800 --> 03:02:43,080
to figure out what packages are even

1862
03:02:43,080 --> 03:02:49,960
compatible with pandas 1.2.3 and matplotlib 3.4.2.

1863
03:02:49,960 --> 03:02:50,960
Possible.

1864
03:02:50,960 --> 03:02:52,960
Actually, I bet that's it.

1865
03:02:52,960 --> 03:02:54,800
Well, it's building the wheel, so it

1866
03:02:54,800 --> 03:02:56,120
doesn't know what it wants.

1867
03:02:56,120 --> 03:02:58,880
So it's not at that stage anymore.

1868
03:02:58,880 --> 03:03:07,280
a compiling pandas or something. Yeah. Well, anyway, we don't know. Okay, so let's go back to GitHub.

1869
03:03:09,360 --> 03:03:14,240
So here we are. And now in order to make this code appear on GitHub, we have to do

1870
03:03:14,240 --> 03:03:20,800
what's called a release. So if you look on the right side under releases,

1871
03:03:23,440 --> 03:03:24,880
there's create a new release.

1872
03:03:24,880 --> 03:03:36,480
And we would, our first release, we need to choose, yeah.

1873
03:03:36,480 --> 03:03:44,120
Yeah, there's a good question.

1874
03:03:44,120 --> 03:03:48,040
How big of datasets can be shared on the Zenodo?

1875
03:03:48,040 --> 03:03:53,080
And the default limit is 50, but I have a feeling that if you ask, they can allow more.

1876
03:03:53,080 --> 03:03:59,400
the default has to be small because otherwise it gets filled up with random stuff. Okay,

1877
03:03:59,400 --> 03:04:06,680
so we can choose a tag towards the top. We would do create a new tag. We have to push the

1878
03:04:07,400 --> 03:04:14,440
plus button. Yeah, okay, there we go. First release. We can do publish release.

1879
03:04:14,440 --> 03:04:27,760
Okay, so it has this archive here. It has a zip file and tar.gz of the stuff. And if

1880
03:04:27,760 --> 03:04:48,720
If we go to Zenodo again, and let's see, if you click on profile, maybe, no, you go to,

1881
03:04:48,720 --> 03:04:50,120
maybe click there.

1882
03:04:50,120 --> 03:04:52,520
We have a DOI for this.

1883
03:04:52,520 --> 03:04:56,640
So after you first release a DOI batch that you can include in GitHub, right, we will appear

1884
03:04:56,640 --> 03:04:58,680
next to your repository below.

1885
03:04:58,680 --> 03:05:01,120
So this is our badge.

1886
03:05:01,120 --> 03:05:02,680
Yeah.

1887
03:05:02,680 --> 03:05:04,120
Do you want to add this to there?

1888
03:05:04,120 --> 03:05:06,720
We can copy this.

1889
03:05:06,720 --> 03:05:08,840
Wait.

1890
03:05:08,840 --> 03:05:13,360
Which is a bit funny that we do a release

1891
03:05:13,360 --> 03:05:18,040
and then add the Zenodo badge, which is kind of, yeah, OK,

1892
03:05:18,040 --> 03:05:20,320
so we are changing the release.

1893
03:05:20,320 --> 03:05:20,960
But yeah.

1894
03:05:20,960 --> 03:05:31,360
I mean, the release has the Zenodo thing in there, so anyway, okay.

1895
03:05:41,120 --> 03:05:49,600
And there we go. So let's click there. Maybe open in new tab. This works. So we see here on Zenodo,

1896
03:05:50,960 --> 03:05:59,360
the sandbox. We see the thing, we see the files that were there, we can download it,

1897
03:05:59,360 --> 03:06:11,920
we see the citation for it, we can see it can track different versions when we

1898
03:06:11,920 --> 03:06:20,480
make more releases. This actually looks a bit more organized than it looked

1899
03:06:20,480 --> 03:06:23,920
when I was checking before.

1900
03:06:24,480 --> 03:06:28,320
Anyway. That's the citation.

1901
03:06:29,840 --> 03:06:33,760
Do you know if this citation updates if you have multiple contributors?

1902
03:06:33,760 --> 03:06:39,520
That's a good question. I don't know. Maybe someone can answer

1903
03:06:39,520 --> 03:06:44,960
in the notes. Or someone else can join for our wrap-up.

1904
03:06:44,960 --> 03:06:50,000
Or someone wants to make a pull request for...

1905
03:06:50,000 --> 03:06:51,120
Yeah.

1906
03:06:51,120 --> 03:06:52,320
But yeah.

1907
03:06:52,320 --> 03:06:52,720
Yeah.

1908
03:06:52,720 --> 03:06:53,200
OK.

1909
03:06:53,200 --> 03:06:53,760
OK.

1910
03:06:53,760 --> 03:06:55,360
Has Binder finished building yet?

1911
03:06:56,560 --> 03:06:57,520
One second.

1912
03:06:59,360 --> 03:06:59,840
Binder.

1913
03:07:01,200 --> 03:07:02,480
Building wheels for map.

1914
03:07:03,360 --> 03:07:03,840
OK.

1915
03:07:03,840 --> 03:07:05,440
So I guess it really is just.

1916
03:07:06,240 --> 03:07:07,040
Slow today.

1917
03:07:11,360 --> 03:07:14,320
I also remember that this used to be faster.

1918
03:07:15,920 --> 03:07:16,420
Yeah.

1919
03:07:20,960 --> 03:07:27,840
So I propose we go back to our notes and we can have a final discussion of today.

1920
03:07:33,280 --> 03:07:41,440
I will switch to my note screen again and if you see this is built we can switch back to it.

1921
03:07:44,720 --> 03:07:45,760
Okay here we are.

1922
03:07:45,760 --> 03:07:56,640
So, yeah, um, we've got plenty of time for a wrap-up today, so what would you all like

1923
03:07:56,640 --> 03:08:06,840
to discuss?

1924
03:08:06,840 --> 03:08:10,640
Is there any news for Day 4 before people start leaving?

1925
03:08:10,640 --> 03:08:14,640
So, I think we go back to...

1926
03:08:14,640 --> 03:08:18,640
So there is one thing

1927
03:08:18,640 --> 03:08:22,640
which uses the command line and this other environment

1928
03:08:22,640 --> 03:08:26,640
a little bit more.

1929
03:08:26,640 --> 03:08:30,640
But there are two

1930
03:08:30,640 --> 03:08:34,640
things which can purely be done in JupyterLab.

1931
03:08:34,640 --> 03:08:38,640
Oh, hello [Name].

1932
03:08:38,640 --> 03:08:51,220
I heard a bad signal basically with the requirements thing.

1933
03:08:51,220 --> 03:08:59,300
So what I think is happening is that because you see that it's building wheels, it means

1934
03:08:59,300 --> 03:09:05,680
that it didn't find the correct versions of matplotlib straight up from pip.

1935
03:09:05,680 --> 03:09:08,940
So it starts to build it itself from source code.

1936
03:09:08,940 --> 03:09:12,320
And because the version numbers, I think they are locked down to a previous version.

1937
03:09:12,320 --> 03:09:19,200
So because you're running like, it's probably running most recent Python, Python 3.12 or

1938
03:09:19,200 --> 03:09:20,200
something.

1939
03:09:20,200 --> 03:09:26,960
And because you have an older version, it probably has to rebuild it from scratch.

1940
03:09:26,960 --> 03:09:29,680
So that might be the reason why you're encountering this.

1941
03:09:29,680 --> 03:09:35,280
So essentially what it means is we need to update the requirements, the versions that

1942
03:09:35,280 --> 03:09:41,120
want that or we just remove the version deployments. But now it seems to be finishing,

1943
03:09:41,120 --> 03:09:45,600
so maybe you don't want to do it at this point. But yeah, this is the kind of stuff,

1944
03:09:45,600 --> 03:09:52,800
like if you see something like building wheel, it might be a situation where it's like

1945
03:09:52,800 --> 03:09:56,480
like it actually is doing something from a source code

1946
03:09:56,480 --> 03:09:58,320
instead of installing from it.

1947
03:10:05,440 --> 03:10:06,560
But yeah, I have.

1948
03:10:06,560 --> 03:10:11,240
Yeah, so we're showing [name]'s screen again.

1949
03:10:11,240 --> 03:10:12,480
And it's pushing.

1950
03:10:12,480 --> 03:10:14,680
And oh, look, it.

1951
03:10:14,680 --> 03:10:15,880
Starts the Jupyter.

1952
03:10:15,880 --> 03:10:16,560
Just started.

1953
03:10:22,800 --> 03:10:26,960
Yeah, there we go.

1954
03:10:26,960 --> 03:10:32,480
And we see along the side, there is the plotting notebook.

1955
03:10:32,480 --> 03:10:40,320
So I guess [name] can click that to open it and then probably

1956
03:10:40,320 --> 03:10:40,800
run it.

1957
03:10:45,600 --> 03:10:48,000
And there we go.

1958
03:10:48,000 --> 03:10:50,200
Yep.

1959
03:10:50,200 --> 03:10:51,080
Yeah.

1960
03:10:51,080 --> 03:10:59,560
So, do you want to try the thing without, if you, okay, lack stack requirements, what happens?

1961
03:10:59,560 --> 03:11:02,440
Yeah, well, we can try that later. Yeah, we can try it later.

1962
03:11:04,360 --> 03:11:07,160
Yeah, I agree that is very likely the case. Yep.

1963
03:11:09,000 --> 03:11:10,520
Switched back here.

1964
03:11:13,000 --> 03:11:19,960
So, what's the summary of today? So, this course, the started alph on days one and two,

1965
03:11:19,960 --> 03:11:27,880
which is just about using Python. And that works in JupyterLab in the cloud wherever.

1966
03:11:27,880 --> 03:11:33,640
But as we're going on we're moving further and further towards how Python interacts with the

1967
03:11:33,640 --> 03:11:40,840
operating system itself. So basically we're seeing how you would break out of the Jupyter notebooks

1968
03:11:40,840 --> 03:11:49,960
and be able to run these other, like run things on your computer, run it without Jupyter, run it

1969
03:11:49,960 --> 03:11:55,880
more times, be able to share your code, things like this. And these are the kind of things which

1970
03:11:55,880 --> 03:12:03,160
are needed to go to the next level. So someone, like there is plenty of work that can be done

1971
03:12:03,160 --> 03:12:12,520
only within the Jupyter web interface, but many of you probably need to at least know of these

1972
03:12:12,520 --> 03:12:18,600
concepts of how to go out, even if it's someone else you're working with that's managing these

1973
03:12:18,600 --> 03:12:30,600
kinds of things. So there's feedback which is coming here. Please answer. I see right now

1974
03:12:30,600 --> 03:12:37,160
there's 86 people who are still on the stream and this is not many answers. So please vote

1975
03:12:38,280 --> 03:12:40,040
for what you think.

1976
03:12:45,720 --> 03:12:56,040
Okay. So the news for tomorrow. So there's one lesson tomorrow which uses the command line

1977
03:12:56,040 --> 03:12:59,880
and it's actually about packaging. So it's basically how you can make

1978
03:12:59,880 --> 03:13:07,960
a package which can itself go on the pip or conda repositories and then other people can use it.

1979
03:13:08,520 --> 03:13:13,960
But it doesn't have to go that far. I oftentimes make things into packages but I install it

1980
03:13:13,960 --> 03:13:21,000
directly from github because the use isn't really that much and I'm just using it internally myself.

1981
03:13:21,000 --> 03:13:29,720
So, the topics are more advanced, but also you can do things, there's the first lesson

1982
03:13:29,720 --> 03:13:35,920
can be done only through JupyterLab and the third one.

1983
03:13:35,920 --> 03:13:45,440
So these have good exercises which other people can do also.

1984
03:13:45,440 --> 03:13:54,220
Also at the end, we have a panel discussion where you can basically ask all of us instructors

1985
03:13:54,220 --> 03:14:01,640
anything you may want, like, what do you recommend for this case or that case, and so on.

1986
03:14:01,640 --> 03:14:11,320
And in fact, you can ask some good questions and, you know, try to get us debating each

1987
03:14:11,320 --> 03:14:15,080
other about what's the right answer.

1988
03:14:16,920 --> 03:14:21,880
Or maybe there is no clear right answer.

1989
03:14:22,840 --> 03:14:27,400
Yes, sometimes programs are a bit like lawyers.

1990
03:14:27,400 --> 03:14:30,200
It depends.

1991
03:14:30,600 --> 03:14:33,800
Yeah, and often like I think it happens

1992
03:14:33,800 --> 03:14:37,720
quite often in the Python ecosystem that it's basically like

1993
03:14:37,720 --> 03:14:42,040
Once you start your studies and you start your bachelor's and that sort of thing,

1994
03:14:43,640 --> 03:14:49,880
you have your friends in the same courses and you're all working on the same courses

1995
03:14:49,880 --> 03:14:56,040
and you do the same things because those are the basics. And basically the NumPy and Pandas and

1996
03:14:56,040 --> 03:15:00,280
those sort of things, Matplotlib, they are the basics when it comes to scientific computing

1997
03:15:00,280 --> 03:15:06,280
with Python. Those are where everybody goes. But then it quite quickly diverges into different

1998
03:15:06,280 --> 03:15:12,120
fields. Different fields have different needs and different tools they use. Neuroimaging,

1999
03:15:12,120 --> 03:15:21,880
they need to do 3D plotting of MRI slices or something like that. If you do deep learning,

2000
03:15:21,880 --> 03:15:27,240
you do completely different tools. Of course, the ecosystem is still the same and everybody's

2001
03:15:27,240 --> 03:15:32,760
working the same kind of things, but the problems become more specialized and specific for the field.

2002
03:15:32,760 --> 03:15:39,160
And that makes it, of course, hard to give a general answer, what is good.

2003
03:15:39,160 --> 03:15:50,760
But what we can hopefully provide is some semblance of like, there are these kinds of tools that go across all of these different fields.

2004
03:15:50,760 --> 03:15:58,760
They are tools that are like ecosystem tools and these kinds of things that help you or processes, like packaging in a certain way,

2005
03:15:58,760 --> 03:16:06,360
or that help you maybe even if you're working in a very specific field. But of course like every

2006
03:16:06,360 --> 03:16:12,120
field has their own special cases that might be complicated or certain kinds of like plotting

2007
03:16:12,120 --> 03:16:19,960
or certain kind of thing and you need to like yeah it's a different like specific question

2008
03:16:19,960 --> 03:16:30,200
at that field, of course. Yeah, there's some good comments here about today being advanced

2009
03:16:30,200 --> 03:16:42,360
and getting stuck. And yeah, I mean, this is unfortunately something that happens sometimes.

2010
03:16:42,360 --> 03:16:51,240
We have such a broad audience here, we tried to do something that's a little bit interesting

2011
03:16:51,240 --> 03:16:56,040
for advanced people, and for people who get stuck, you can still watch it and take it

2012
03:16:56,040 --> 03:17:01,240
as a demo, and then learn more yourself later.

2013
03:17:01,240 --> 03:17:09,240
I think that's the only way to manage such a wide audience.

2014
03:17:12,760 --> 03:17:20,600
Yeah, and there are different ways of working in different systems. So, for example, many of

2015
03:17:20,600 --> 03:17:26,440
the things might be that we go to a terminal and in Windows you don't usually work with a terminal

2016
03:17:26,440 --> 03:17:33,320
that often. You don't necessarily use that much of it. The working environment might be different.

2017
03:17:33,320 --> 03:17:38,120
But in Windows, let's say you use VS Code or something, you might have OpiCharm or something,

2018
03:17:38,120 --> 03:17:45,640
and they can replicate. With an IDE, you can get an even better working environment than with a

2019
03:17:46,680 --> 03:17:53,720
terminal, in many cases, like you would do maybe in a Linux system. So there are different ways of

2020
03:17:53,720 --> 03:18:00,520
working. So there's no right answer. It is only answer that you want to choose from.

2021
03:18:00,520 --> 03:18:05,240
So if you encounter problems with, let's say, environment creation or some of the

2022
03:18:06,120 --> 03:18:10,760
command line things or scripting or these kind of things, like PyCharm and VS Code,

2023
03:18:10,760 --> 03:18:15,880
you can give arguments to run. When you run, press the green button to run a code,

2024
03:18:15,880 --> 03:18:21,800
you can give it arguments to run like it would run as a script. So you can basically demo

2025
03:18:21,800 --> 03:18:27,160
how it would behave as a script, even when you're not using terminal. And this is quite common

2026
03:18:27,720 --> 03:18:34,920
in the IDE world. So there's different ways of working with the same things. But of course,

2027
03:18:35,480 --> 03:18:41,480
when we present it, we present it with the way that we most commonly see in our users,

2028
03:18:41,480 --> 03:18:46,760
which is using the command lines or scripts and that sort of thing. But the same things can apply

2029
03:18:46,760 --> 03:18:55,960
to different workflows as well. Yeah, so we're over time. If there's no more comments from

2030
03:18:55,960 --> 03:19:02,040
anyone, maybe I'd wrap up with this one comment at the bottom. I like this course. It gives a good

2031
03:19:02,040 --> 03:19:07,000
overview of good coding practices, but the course requires weeks of hands-on practice to learn.

2032
03:19:07,000 --> 03:19:14,600
And I'd say that's absolutely true. And for a 12-hour course, I think any one of the lessons

2033
03:19:14,600 --> 03:19:23,720
we teach could easily become a 12-hour course just on their own. And our goal here is to show

2034
03:19:23,720 --> 03:19:27,800
you what's possible and give you a little bit of hands-on practice of what's there,

2035
03:19:28,680 --> 03:19:34,680
but to inspire you to go learn these later on. And you can learn them by

2036
03:19:36,200 --> 03:19:42,360
doing yourself reading more, or probably more likely working with other people that do things

2037
03:19:42,360 --> 03:19:48,760
and finding it together. If you're at any of the universities that have partners, you can try

2038
03:19:48,760 --> 03:19:53,560
asking the people that are advertising the course and see if they can provide support in these

2039
03:19:53,560 --> 03:20:03,640
things. At Aalto University we do plenty of this and I know the people in Sweden and Norway are

2040
03:20:03,640 --> 03:20:10,440
very happy to help you with these kinds of things. So with that being said, should we

2041
03:20:12,360 --> 03:20:16,360
Should we wrap up?

2042
03:20:16,360 --> 03:20:20,360
I think so.

2043
03:20:20,360 --> 03:20:24,360
Okay, great. Thank you so much.

2044
03:20:24,360 --> 03:20:28,360
See you tomorrow, same time.

2045
03:20:28,360 --> 03:20:32,360
Yes, thank you. Bye.

2046
03:20:42,360 --> 03:20:44,420
you

2047
03:21:12,360 --> 03:21:14,420
you

2048
03:21:42,360 --> 03:21:44,420
you

2049
03:22:12,360 --> 03:22:14,420
you

2050
03:22:42,360 --> 03:22:44,420
you

2051
03:23:12,360 --> 03:23:14,420
you

2052
03:23:42,360 --> 03:23:44,420
you

