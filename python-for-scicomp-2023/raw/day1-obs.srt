1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:56,500
Test one, two, three, four, five, six, seven, eight, nine, 10, 11, 12, 13, 14, 15, 16, 17,

11
00:04:56,500 --> 00:05:20,460
Test one, two. Can anyone hear us? Yes. Okay. Good. So, welcome, everyone. We're in the

12
00:05:20,460 --> 00:05:29,820
the 10 minutes of icebreaker time, so we're just here to chat while we're getting ready.

13
00:05:29,820 --> 00:05:39,100
So my name is [name]. I'm here to, well, I'm one of the instructors and organizers

14
00:05:39,100 --> 00:05:46,100
of the course. And with me here, would you all like to introduce yourselves? So [name]

15
00:05:46,100 --> 00:05:47,460
is next on my screen.

16
00:05:55,180 --> 00:05:57,060
Did [name]'s internet.

17
00:05:57,060 --> 00:05:57,900
Oh, there.

18
00:05:57,900 --> 00:05:58,720
Hello.

19
00:05:58,720 --> 00:05:59,560
Hello.

20
00:05:59,560 --> 00:06:02,940
Sorry, I was just switching to a wired connection.

21
00:06:02,940 --> 00:06:03,780
Good idea.

22
00:06:04,920 --> 00:06:05,900
So hello, I'm [name].

23
00:06:05,900 --> 00:06:07,980
I'm also one of the instructors

24
00:06:07,980 --> 00:06:10,820
and a research software engineer at Aalto University.

25
00:06:10,820 --> 00:06:21,580
Hi, I'm [name]. I'm an application expert at UPPMAX, Uppsala University in Sweden,

26
00:06:21,580 --> 00:06:27,460
and I will also be teaching during this workshop. Hi, everyone.

27
00:06:27,460 --> 00:06:34,460
Okay, so what I'm screen-sharing here is what we call the notes.

28
00:06:38,460 --> 00:06:40,460
So, right here.

29
00:06:43,460 --> 00:06:44,460
You can't see the cursor.

30
00:06:44,460 --> 00:06:48,460
So, this is only for registered participants.

31
00:06:48,460 --> 00:06:58,060
So if you would, if you're watching and you're not registered, if you register, I think you'll get an auto-reply that has this information here.

32
00:06:58,060 --> 00:07:12,860
So how does it work? So at the top it has all the important links, and down below we see, well it's like Google Docs, so it's a collaborative writing thing.

33
00:07:12,860 --> 00:07:22,620
So, I think the microphones might be wrong here.

34
00:07:22,620 --> 00:07:26,620
[name] or [name], can you say something?

35
00:07:26,620 --> 00:07:29,620
Hello, one, two, three.

36
00:07:29,620 --> 00:07:31,620
One, two.

37
00:07:31,620 --> 00:07:38,620
Okay. It seems... Oh, wait.

38
00:07:38,620 --> 00:07:49,220
Okay, now I think it's better. Yeah. I know what the problem was. If there was an echo,

39
00:07:49,220 --> 00:07:51,540
that was me.

40
00:07:51,540 --> 00:07:56,340
So there's a question in Twitch chat which is asking, is this recorded? So the answer

41
00:07:56,340 --> 00:08:06,300
is yes. So Twitch has the videos available immediately. And on YouTube, by the same night,

42
00:08:06,300 --> 00:08:08,820
it should already be there.

43
00:08:08,820 --> 00:08:12,580
And we can talk about the video processing later.

44
00:08:12,580 --> 00:08:18,580
But OK, so back to the notes that we're talking about.

45
00:08:18,580 --> 00:08:23,500
So if you go to the top, you can switch to an edit mode,

46
00:08:23,500 --> 00:08:25,540
and then back to view mode.

47
00:08:25,540 --> 00:08:27,660
You can even do the split mode.

48
00:08:27,660 --> 00:08:29,540
But we used this like a chat.

49
00:08:29,540 --> 00:08:34,620
So any time you would be asking something in a chat,

50
00:08:34,620 --> 00:08:41,180
instead come here and write it somewhere. So you see at the bottom there's a Q&A part,

51
00:08:41,180 --> 00:08:46,060
so someone could demonstrate writing the question. Let's practice writing the question.

52
00:08:48,380 --> 00:08:49,340
Is this recorded?

53
00:08:53,100 --> 00:08:59,500
And then we have a whole bunch of people who are also course instructors, and we're watching and

54
00:08:59,500 --> 00:09:01,700
and answering it in real time.

55
00:09:01,700 --> 00:09:06,580
So it's like a synchronous parallel chat Q&A kind

56
00:09:06,580 --> 00:09:07,980
of thing.

57
00:09:07,980 --> 00:09:14,420
So with this, we can have so many different questions

58
00:09:14,420 --> 00:09:17,860
and answers at the same time and actually keep track of it.

59
00:09:17,860 --> 00:09:21,500
And then we can archive it later.

60
00:09:21,500 --> 00:09:23,500
But for now, we have icebreakers.

61
00:09:23,500 --> 00:09:27,340
So if you scroll up, you see some questions

62
00:09:27,340 --> 00:09:31,980
from registrations and so on, but then down here

63
00:09:31,980 --> 00:09:33,500
to icebreaker questions.

64
00:09:33,500 --> 00:09:42,620
So everyone that's registered, please take this, open it,

65
00:09:42,620 --> 00:09:48,900
and scroll down to this point, and write down where

66
00:09:48,900 --> 00:09:53,020
or write down the answers to the questions.

67
00:09:53,020 --> 00:09:55,060
And let's see.

68
00:09:55,060 --> 00:10:01,860
So you can also answer plus one for anything

69
00:10:01,860 --> 00:10:03,300
that you're agreeing with.

70
00:10:03,300 --> 00:10:04,860
And this is also a common thing.

71
00:10:04,860 --> 00:10:07,340
So if you see something that you'd especially like answered

72
00:10:07,340 --> 00:10:09,340
or you agree with, you can plus one it.

73
00:10:13,300 --> 00:10:15,580
So where's everyone?

74
00:10:15,580 --> 00:10:17,060
Where are we from?

75
00:10:17,060 --> 00:10:21,300
So right now, I'm from a small office

76
00:10:21,300 --> 00:10:25,940
at Aalto University in Finland.

77
00:10:25,940 --> 00:10:32,820
And I guess [name] is teaching from home today?

78
00:10:32,820 --> 00:10:37,140
Yeah, from somewhere in Espoo, Finland.

79
00:10:37,140 --> 00:10:40,780
Yeah, and I'm in my office in Uppsala.

80
00:10:40,780 --> 00:10:41,280
Yeah.

81
00:10:44,780 --> 00:10:45,820
Oh, OK.

82
00:10:45,820 --> 00:10:54,100
So we see a big variety of people from mostly European

83
00:10:54,100 --> 00:10:56,180
countries, but not only.

84
00:10:56,180 --> 00:10:59,820
So that's good.

85
00:10:59,820 --> 00:11:04,100
We're glad that people can join us from all over.

86
00:11:04,100 --> 00:11:06,460
And how much do people use Python?

87
00:11:06,460 --> 00:11:10,180
Fair amount, quite a bit.

88
00:11:10,180 --> 00:11:12,900
How much have the instructors used Python?

89
00:11:12,900 --> 00:11:17,860
So, I don't know, what was your intro to Python and how long have you been using it?

90
00:11:18,900 --> 00:11:19,860
I don't remember.

91
00:11:21,860 --> 00:11:23,460
Which is, I guess, for a long time.

92
00:11:26,660 --> 00:11:27,160
Yeah.

93
00:11:32,100 --> 00:11:34,900
So, at least six, seven years ago.

94
00:11:36,740 --> 00:11:38,660
So, I don't remember the first thing I did with Python.

95
00:11:38,660 --> 00:11:41,140
But yeah, I do most things with Python these days.

96
00:11:41,140 --> 00:11:41,640
Okay.

97
00:11:41,640 --> 00:11:46,120
And before Python, what did you use?

98
00:11:46,120 --> 00:11:53,280
C, C++ mostly, so I was doing very different kinds of things, so those were appropriate

99
00:11:53,280 --> 00:11:56,840
languages for what I was doing, yeah.

100
00:11:56,840 --> 00:11:57,840
And [name]?

101
00:11:57,840 --> 00:12:06,520
Yeah, I had started with C, some C++ and Fortran, and it's mostly during the, I don't know,

102
00:12:06,520 --> 00:12:08,360
maybe five years, past five years

103
00:12:08,360 --> 00:12:13,640
that I've been using Python.

104
00:12:13,640 --> 00:12:15,520
OK, yeah.

105
00:12:15,520 --> 00:12:20,000
And as for me, I remember, so at first, I

106
00:12:20,000 --> 00:12:22,760
was doing some stuff in C. And I had this friend saying

107
00:12:22,760 --> 00:12:25,680
I needed to learn Python some.

108
00:12:28,200 --> 00:12:32,400
But I didn't for a while until I did.

109
00:12:32,400 --> 00:12:36,360
And well, I've been using it as my main language.

110
00:12:36,360 --> 00:12:38,480
ever since.

111
00:12:38,480 --> 00:12:41,920
So yeah.

112
00:12:41,920 --> 00:12:42,640
And let's see.

113
00:12:42,640 --> 00:12:45,800
So our audience here, how much have we used Python?

114
00:12:48,520 --> 00:12:49,960
Yeah.

115
00:12:49,960 --> 00:12:51,720
So I'd say this whole course, it's

116
00:12:51,720 --> 00:12:55,120
designed for people that know a little bit about Python,

117
00:12:55,120 --> 00:12:58,040
like the basic programming, but not the details

118
00:12:58,040 --> 00:13:01,640
of using it for science.

119
00:13:01,640 --> 00:13:04,560
And we're especially going into these libraries.

120
00:13:04,560 --> 00:13:06,680
But if you're more advanced than that,

121
00:13:06,680 --> 00:13:09,280
you'll probably still learn some tricks,

122
00:13:09,280 --> 00:13:13,240
although the first few days may be a bit slow.

123
00:13:13,240 --> 00:13:16,000
Just come back for the later days.

124
00:13:16,000 --> 00:13:18,440
And if you haven't done any Python at all,

125
00:13:18,440 --> 00:13:20,080
well, we're not covering that.

126
00:13:20,080 --> 00:13:27,760
But by watching, you'll probably learn about, well,

127
00:13:27,760 --> 00:13:32,880
learn some good things to help when you do start using Python.

128
00:13:32,880 --> 00:13:37,200
OK, using Jupyter before, almost nothing.

129
00:13:37,200 --> 00:13:40,840
So Jupyter is something that we talk a little bit more about.

130
00:13:40,840 --> 00:13:44,400
And I believe, who's the first instructors here

131
00:13:44,400 --> 00:13:47,000
for the Jupyter part?

132
00:13:47,000 --> 00:13:48,760
It's me and [name].

133
00:13:48,760 --> 00:13:52,640
OK, yeah, so Jarna and [name] will talk about that.

134
00:13:55,720 --> 00:13:57,960
Oh, these JupyterLab extensions.

135
00:13:57,960 --> 00:14:04,400
So maybe I should give some background on why we ask this question.

136
00:14:04,400 --> 00:14:11,400
So some of our participants are working on hearing what those are, but we won't really

137
00:14:11,400 --> 00:14:13,360
have time during the course.

138
00:14:13,360 --> 00:14:15,440
And it's also great to hear from you all.

139
00:14:15,440 --> 00:14:19,360
But if you do not know what those are, don't worry.

140
00:14:19,360 --> 00:14:20,360
Yeah.

141
00:14:20,360 --> 00:14:21,360
Okay.

142
00:14:21,360 --> 00:14:24,760
So it's time to start the main part.

143
00:14:24,760 --> 00:14:29,480
I saw a comment in chat that our audio might not be balanced.

144
00:14:29,480 --> 00:14:31,720
So should we do our standard test first?

145
00:14:31,720 --> 00:14:34,400
So the order is me, [name], [name].

146
00:14:34,400 --> 00:14:36,360
We say 1, 1, 1, 2, 2, 2.

147
00:14:36,360 --> 00:14:37,360
1.

148
00:14:37,360 --> 00:14:39,320
1.

149
00:14:39,320 --> 00:14:40,400
1.

150
00:14:40,400 --> 00:14:41,600
2.

151
00:14:41,600 --> 00:14:42,640
2.

152
00:14:42,640 --> 00:14:44,680
2.

153
00:14:44,680 --> 00:14:46,200
OK, how's our audio balance?

154
00:14:46,200 --> 00:15:02,760
So, I guess I'm a little bit lower than [name].

155
00:15:02,760 --> 00:15:05,040
I'm slightly louder.

156
00:15:05,040 --> 00:15:06,040
I can handle that.

157
00:15:06,040 --> 00:15:08,480
I can slightly increase my volume.

158
00:15:08,480 --> 00:15:09,480
Okay.

159
00:15:09,480 --> 00:15:12,360
I don't know how slightly.

160
00:15:12,360 --> 00:15:13,360
Maybe slightly.

161
00:15:13,360 --> 00:15:14,360
Okay.

162
00:15:14,360 --> 00:15:17,880
Okay, well, people say audio is okay.

163
00:15:17,880 --> 00:15:19,740
Let's go on. So okay,

164
00:15:19,740 --> 00:15:21,240
I will go to an introduction.

165
00:15:21,240 --> 00:15:24,980
So as another example of the notes here,

166
00:15:24,980 --> 00:15:29,480
you see when we go to a part at the bottom,

167
00:15:29,480 --> 00:15:37,440
we will add introduction,

168
00:15:37,440 --> 00:15:39,120
and then someone will add

169
00:15:39,120 --> 00:15:41,240
the link to where we're talking about now,

170
00:15:41,240 --> 00:15:49,080
and then someone will start adding more places for questions here.

171
00:15:49,760 --> 00:15:53,960
With that being said, I will try to go to

172
00:15:53,960 --> 00:16:01,640
my screen share and hope that this works.

173
00:16:01,640 --> 00:16:13,440
It's trying to work, but it's blank.

174
00:16:18,360 --> 00:16:18,880
So zoom.

175
00:16:23,600 --> 00:16:26,560
Oh, OK.

176
00:16:26,560 --> 00:16:29,320
So here we go.

177
00:16:29,320 --> 00:16:32,000
So this is the course web page.

178
00:16:35,960 --> 00:16:37,600
This is the course web page.

179
00:16:37,600 --> 00:16:41,680
And if you scroll down, you find the schedule.

180
00:16:41,680 --> 00:16:44,440
And right now, here we are at intro.

181
00:16:44,440 --> 00:16:45,440
So I open that.

182
00:16:48,920 --> 00:16:53,520
So hi, welcome to Python for Scientific Computing.

183
00:16:53,520 --> 00:16:55,800
So we've already introduced ourselves

184
00:16:55,800 --> 00:16:59,760
in the little icebreaker session.

185
00:16:59,760 --> 00:17:02,120
So let's go right past that.

186
00:17:02,120 --> 00:17:04,480
Maybe we can talk about our organization some.

187
00:17:04,480 --> 00:17:08,560
So [name] and I work at Aalto University in Finland.

188
00:17:08,560 --> 00:17:13,560
And [name], who, what, where do you work right now?

189
00:17:14,880 --> 00:17:19,640
I'm working at Uppsala University in Sweden.

190
00:17:19,640 --> 00:17:21,160
Yes.

191
00:17:21,160 --> 00:17:23,640
And as you may have noticed from the webpage,

192
00:17:23,640 --> 00:17:25,700
there's a lot of different partners here.

193
00:17:25,700 --> 00:17:30,260
So we have instructors from Finland, Norway, and Sweden,

194
00:17:30,260 --> 00:17:31,860
at least.

195
00:17:31,860 --> 00:17:37,500
And people all around have been advertising the course.

196
00:17:37,500 --> 00:17:39,860
So the basic course contents.

197
00:17:39,860 --> 00:17:43,860
So day one starts off with some basic tools.

198
00:17:43,860 --> 00:17:46,220
So if you've used Python for science a little bit,

199
00:17:46,220 --> 00:17:47,820
you probably know these.

200
00:17:47,820 --> 00:17:49,660
But we have to cover them to make

201
00:17:49,660 --> 00:17:55,020
sure everyone's on the same page and has a good foundation.

202
00:17:55,020 --> 00:17:57,660
On day two, it's still fairly basic,

203
00:17:57,660 --> 00:18:00,800
but we start going to more interesting things,

204
00:18:00,800 --> 00:18:04,540
such as the visualization and data formats.

205
00:18:04,540 --> 00:18:06,300
And then days three and four gets

206
00:18:06,300 --> 00:18:08,660
to even more specialized tools, which,

207
00:18:08,660 --> 00:18:11,460
unless you've done a lot of stuff,

208
00:18:11,460 --> 00:18:17,140
this is probably still new to you.

209
00:18:17,140 --> 00:18:19,220
And we can adjust the schedule as needed.

210
00:18:19,220 --> 00:18:23,740
So what you see on the website might be adjusted some.

211
00:18:23,740 --> 00:18:26,940
Also, on the last day, we have this panel discussion.

212
00:18:26,940 --> 00:18:29,420
And in the panel discussion,

213
00:18:29,420 --> 00:18:32,100
we have all the instructors together

214
00:18:32,100 --> 00:18:34,140
and you can ask us any questions.

215
00:18:34,140 --> 00:18:35,700
And that's usually a lot of fun.

216
00:18:37,220 --> 00:18:38,180
Okay, so how to attend.

217
00:18:38,180 --> 00:18:40,980
So obviously you figured out this is a live stream.

218
00:18:40,980 --> 00:18:43,060
So you're watching on Twitch.

219
00:18:43,060 --> 00:18:44,640
You're free to share the link

220
00:18:44,640 --> 00:18:47,720
to anyone you may want in the world.

221
00:18:47,720 --> 00:18:50,480
That's completely fine and intended.

222
00:18:50,480 --> 00:18:54,880
But there can be different pathways beyond that.

223
00:18:54,880 --> 00:18:57,000
So some people will pay close attention,

224
00:18:57,000 --> 00:18:59,800
do all the exercises, try to learn everything.

225
00:18:59,800 --> 00:19:01,720
Other people may watch,

226
00:19:01,720 --> 00:19:05,040
you may follow along with some of the examples and solutions,

227
00:19:05,040 --> 00:19:07,040
but you might be a little bit less active.

228
00:19:07,040 --> 00:19:09,360
Some people might be watching passively,

229
00:19:09,360 --> 00:19:11,200
seeing what's there, and then come back

230
00:19:11,200 --> 00:19:14,000
later whenever it becomes more relevant to you.

231
00:19:14,000 --> 00:19:18,280
These are all OK ways of attending.

232
00:19:18,280 --> 00:19:20,000
And we support them all.

233
00:19:22,840 --> 00:19:23,840
Practicalities.

234
00:19:23,840 --> 00:19:26,160
So live streaming is different.

235
00:19:26,160 --> 00:19:29,080
So whenever we would do these workshops in person,

236
00:19:29,080 --> 00:19:31,400
we might have a few tens of people there.

237
00:19:31,400 --> 00:19:35,160
Right now, according to my Twitch description,

238
00:19:35,160 --> 00:19:37,800
there's 209 people following us.

239
00:19:37,800 --> 00:19:42,360
And there are more than 400 people registered.

240
00:19:44,000 --> 00:19:45,800
So how does this work?

241
00:19:45,800 --> 00:19:48,000
So we're like a TV production, something like that.

242
00:19:48,000 --> 00:19:49,280
Anyone can watch.

243
00:19:49,280 --> 00:19:52,200
There's pauses for exercises, like considerate,

244
00:19:52,200 --> 00:19:54,400
like commercial breaks or something like that.

245
00:19:54,400 --> 00:19:57,080
And we will say, OK, now it's time for an exercise.

246
00:19:57,080 --> 00:19:58,640
We mute the stream.

247
00:19:58,640 --> 00:20:00,840
Us instructors come and plan what

248
00:20:00,840 --> 00:20:02,600
to do next in the background.

249
00:20:02,600 --> 00:20:05,040
And then you have time to work on things.

250
00:20:05,040 --> 00:20:11,240
We keep watching the notes and let's see.

251
00:20:11,240 --> 00:20:12,200
So we watch the notes.

252
00:20:12,200 --> 00:20:17,320
answer questions there during the exercises and we come back and based on what the questions were

253
00:20:17,320 --> 00:20:25,160
and what people are interested in, we can go over the exercises and the solutions or go straight on.

254
00:20:28,440 --> 00:20:38,280
In some places there may be other in-person or online meetings where people are working together.

255
00:20:38,280 --> 00:20:40,200
For example, some people might be

256
00:20:40,200 --> 00:20:42,040
with their friends in a conference room.

257
00:20:42,040 --> 00:20:44,040
You're watching together, and during the breaks

258
00:20:44,040 --> 00:20:45,960
you're working there.

259
00:20:45,960 --> 00:20:49,640
This is also completely fine, and actually we'd recommend it.

260
00:20:49,640 --> 00:20:53,920
So some years we've organized these Zoom sessions ourselves,

261
00:20:53,920 --> 00:21:00,480
but this time it's all on our partners to organize those.

262
00:21:00,480 --> 00:21:03,520
Within the workshop, we have different parts.

263
00:21:03,520 --> 00:21:07,600
So we have the part where we're talking, the live stream.

264
00:21:07,600 --> 00:21:14,400
we have type along where we're typing and you can try to type along with us. There's exercises.

265
00:21:15,120 --> 00:21:22,480
So this is where you do your own thing. And then we have breaks. So at least 10 minutes per hour,

266
00:21:22,480 --> 00:21:31,040
sometime between the 50 and the 10 of the hour. Chat and communication. So some of us are

267
00:21:31,040 --> 00:21:36,160
watching the Twitch chat, but it's not where you recommend the questions go because we can't follow

268
00:21:36,160 --> 00:21:45,360
it. Instead, we recommend that you ask an answer in the notes document, which you get if you

269
00:21:45,360 --> 00:21:53,280
register. It's the benefit for registering. So like this, so this is from a different course,

270
00:21:53,280 --> 00:21:59,200
but you see there's sections, there's things, people ask questions in bullet points, and answer

271
00:21:59,200 --> 00:22:03,760
in other bullet points. And we have people that are always watching this, so you'll usually get

272
00:22:03,760 --> 00:22:11,920
an answer very quickly. Always write at the very bottom because that's the only part we're

273
00:22:11,920 --> 00:22:21,120
actively monitoring. Every so often we copy all the old questions away and put them in an archive

274
00:22:21,680 --> 00:22:27,840
notes document and that's findable from the top. You can also use this to figure out where we are

275
00:22:27,840 --> 00:22:28,680
are in the lesson.

276
00:22:28,680 --> 00:22:33,480
We update the section, stuff like that.

277
00:22:33,480 --> 00:22:36,860
Yeah, here's the way you switch between view and edit modes

278
00:22:36,860 --> 00:22:37,640
and so on.

279
00:22:40,400 --> 00:22:41,200
Yeah.

280
00:22:41,200 --> 00:22:45,080
So one thing or two things to be aware of.

281
00:22:45,080 --> 00:22:47,360
So there's going to be a lot of stuff written here,

282
00:22:47,360 --> 00:22:49,080
so don't get overloaded.

283
00:22:49,080 --> 00:22:52,800
So the point is that you can come back and follow this later.

284
00:22:52,800 --> 00:22:55,680
So during the course, I'd recommend if you're bored,

285
00:22:55,680 --> 00:22:56,320
look at it.

286
00:22:56,320 --> 00:23:02,080
you're actively focusing on what we're saying, focus on that and leave the notes alone. And also,

287
00:23:02,080 --> 00:23:08,560
please never include any identifiers or names or things in the notes because it's archived and

288
00:23:08,560 --> 00:23:17,200
anyone may see it. So from the course website, you can find these forever. They're not going away.

289
00:23:19,120 --> 00:23:24,800
So if you haven't done it yet, please open the notes and answer the icebreaker there.

290
00:23:24,800 --> 00:23:31,240
there. We've already been doing that some, but now really do it.

291
00:23:31,240 --> 00:23:40,240
Okay, screen arrangement. So you may notice we're broadcasting in this weird little vertical

292
00:23:40,240 --> 00:23:45,320
arrangement. There's a very specific reason for this. So you can arrange the screen like

293
00:23:45,320 --> 00:23:51,760
this, where Twitch with the vertical arrangement is taking half, and the other half is for

294
00:23:51,760 --> 00:23:56,600
you. So you can have the lesson and notes in the web browser, your workspace where you're

295
00:23:56,600 --> 00:24:04,720
doing work. I guess in this case, your workspace might be a Jupyter, JupyterLab or something

296
00:24:04,720 --> 00:24:13,240
like that. Whatever the case. And yes. And we found this works pretty well, even for

297
00:24:13,240 --> 00:24:19,140
small screens. Okay. I've already talked a little bit about this, but just to emphasize.

298
00:24:19,140 --> 00:24:26,300
So we recommend first you focus on the screen sharing lecture when we're talking.

299
00:24:26,300 --> 00:24:27,940
And that's your first priority.

300
00:24:27,940 --> 00:24:31,200
Then is your own type of longer exercises.

301
00:24:31,200 --> 00:24:37,620
And then only after that, you focus on the notes, your own exercise group if you have

302
00:24:37,620 --> 00:24:40,440
one, and the lesson webpage.

303
00:24:40,440 --> 00:24:44,220
And we have plenty of breaks where you can follow up and catch up later.

304
00:24:44,220 --> 00:24:47,820
I mean, everything we say is written down somewhere,

305
00:24:47,820 --> 00:24:51,980
so you're not really losing information.

306
00:24:52,820 --> 00:24:55,860
This year, we don't have the Zoom,

307
00:24:55,860 --> 00:25:00,340
but we will explicitly tell you when you go to exercises,

308
00:25:00,340 --> 00:25:02,460
and when you come back to the main lecture.

309
00:25:02,460 --> 00:25:05,060
If you're trying to work like that,

310
00:25:05,060 --> 00:25:06,900
you don't have any worries.

311
00:25:06,900 --> 00:25:10,060
What can go wrong, or should I say will go wrong?

312
00:25:10,060 --> 00:25:12,900
Some of these variation will always be,

313
00:25:12,900 --> 00:25:14,700
will happen in every one of our courses.

314
00:25:14,700 --> 00:25:18,020
So for some people, the lessons are too simple.

315
00:25:18,020 --> 00:25:18,620
So it's OK.

316
00:25:18,620 --> 00:25:21,220
The later lessons will become interesting.

317
00:25:21,220 --> 00:25:23,620
You're in your home or office or wherever,

318
00:25:23,620 --> 00:25:27,020
so just do something else and listen passively.

319
00:25:27,020 --> 00:25:29,100
The lessons are too advanced.

320
00:25:29,100 --> 00:25:32,380
Well, you can keep watching passively

321
00:25:32,380 --> 00:25:33,860
and learn and come back later.

322
00:25:33,860 --> 00:25:37,660
All our material is open and will stay open forever.

323
00:25:37,660 --> 00:25:45,660
However, if the instructors make a mistake, well, actually, that's by design.

324
00:25:45,660 --> 00:25:50,720
So you'll learn by seeing when things don't work and how we debug it.

325
00:25:50,720 --> 00:25:52,560
If the nodes stop responding.

326
00:25:52,560 --> 00:25:57,480
So if we have 200 people editing this document at the same time, it might get a little bit

327
00:25:57,480 --> 00:25:58,480
slow.

328
00:25:58,480 --> 00:26:07,080
So in that case, people will wait a little bit and hopefully it will pass.

329
00:26:07,080 --> 00:26:11,960
also keep trying to keep it short to avoid this by moving to the archive notes. And you can find

330
00:26:11,960 --> 00:26:17,800
that link at the top. If the stream dies. So if the computer I'm on, well, if one of them dies,

331
00:26:18,360 --> 00:26:26,120
then all the broadcasting gets lost. And in that case, well, you'll get a message from Twitch.

332
00:26:26,120 --> 00:26:32,280
So just wait around some, I'll restart everything, and we'll get back as soon as we can.

333
00:26:32,280 --> 00:26:35,720
It's happened only very rarely, but be aware.

334
00:26:35,720 --> 00:26:38,800
Internet dies. Actually, during one of our courses,

335
00:26:38,800 --> 00:26:41,560
the Fastly CDN had a problem,

336
00:26:41,560 --> 00:26:44,360
and then people couldn't rejoin the stream,

337
00:26:44,360 --> 00:26:46,120
and that was lots of fun.

338
00:26:46,120 --> 00:26:50,880
But in that case, just wait around and we'll be back eventually.

339
00:26:50,880 --> 00:26:52,840
Oh wait, this isn't a problem.

340
00:26:52,840 --> 00:26:54,280
So if I was at home,

341
00:26:54,280 --> 00:26:56,040
which hopefully I will be,

342
00:26:56,040 --> 00:26:58,360
my cat might come and visit us,

343
00:26:58,360 --> 00:27:01,520
and that's always one of the joys of the workshop.

344
00:27:01,520 --> 00:27:07,520
So, hang around and maybe you get to see us get distracted that way.

345
00:27:07,520 --> 00:27:09,080
Okay, videos.

346
00:27:09,080 --> 00:27:11,020
So yes, it is recorded.

347
00:27:11,020 --> 00:27:17,360
Twitch saves them for seven days directly there, the raw video, and usually on YouTube

348
00:27:17,360 --> 00:27:21,040
by the same night, we have them processed and released.

349
00:27:21,040 --> 00:27:26,320
If you want to follow this process or help us, please get in touch.

350
00:27:26,320 --> 00:27:27,320
Okay.

351
00:27:27,320 --> 00:27:32,340
It should be respectful and helpful to everyone.

352
00:27:32,340 --> 00:27:37,340
So here's four main pieces of advice, and you probably heard more later.

353
00:27:37,340 --> 00:27:41,780
But be aware, everyone here is at different levels, and that's just expected.

354
00:27:41,780 --> 00:27:44,500
So people focus on different things.

355
00:27:44,500 --> 00:27:48,260
Passive learning is okay, so be kind to each other.

356
00:27:48,260 --> 00:27:51,100
Everyone is both a teacher and a learner, even us.

357
00:27:51,100 --> 00:27:56,220
So I think all of us, when preparing for this course, we've learned a few new things about

358
00:27:56,220 --> 00:27:59,100
the different stuff we're teaching.

359
00:27:59,700 --> 00:28:01,980
As a learner yourself,

360
00:28:01,980 --> 00:28:06,020
you're a teacher to other people you're interacting with.

361
00:28:06,260 --> 00:28:09,020
Yes, keep this in mind.

362
00:28:09,020 --> 00:28:11,140
Take the time to check it.

363
00:28:11,140 --> 00:28:13,540
Ask the other people you're with,

364
00:28:13,540 --> 00:28:15,860
and we'll be asking you, how's it going?

365
00:28:15,860 --> 00:28:16,980
Are you able to follow?

366
00:28:16,980 --> 00:28:19,460
Do you need us to go faster or slower?

367
00:28:19,460 --> 00:28:22,220
Then finally, when something isn't right,

368
00:28:22,220 --> 00:28:23,540
let us know immediately.

369
00:28:23,540 --> 00:28:31,620
So the classic case here is that the sound is too low,

370
00:28:31,620 --> 00:28:33,900
or you can't see the screen, or I've

371
00:28:33,900 --> 00:28:35,900
forgotten to adjust the broadcast

372
00:28:35,900 --> 00:28:37,940
to include what's needed.

373
00:28:37,940 --> 00:28:41,340
Write in the notes or Twitch chat or somewhere immediately,

374
00:28:41,340 --> 00:28:43,580
and we'll see, even if you think it's

375
00:28:43,580 --> 00:28:47,740
only a minor inconvenience, like our audio is imbalanced.

376
00:28:47,740 --> 00:28:48,780
OK, final notes.

377
00:28:48,780 --> 00:28:54,420
So we have information on credits on the web page.

378
00:28:54,420 --> 00:28:56,900
You can read it there as much as you want.

379
00:28:59,500 --> 00:29:02,260
You can keep in touch with us these ways.

380
00:29:02,260 --> 00:29:05,220
We're always happy to have new people taking part,

381
00:29:05,220 --> 00:29:08,580
especially if you would like to co-teach or become

382
00:29:08,580 --> 00:29:10,700
a partner in this workshop later.

383
00:29:10,700 --> 00:29:16,260
So basically advertise and run own workshop sessions.

384
00:29:16,260 --> 00:29:17,860
This date is not out of date, but we

385
00:29:17,860 --> 00:29:20,540
have other workshops which are going on.

386
00:29:20,540 --> 00:29:23,260
We recommend you sign up for the Code Refinery newsletter

387
00:29:23,260 --> 00:29:25,060
to get those announcements.

388
00:29:25,060 --> 00:29:27,140
And Code Refinery, that newsletter

389
00:29:27,140 --> 00:29:28,380
is findable from here.

390
00:29:28,380 --> 00:29:29,860
OK, that's all.

391
00:29:29,860 --> 00:29:32,980
I'm not too over time.

392
00:29:32,980 --> 00:29:36,660
So I will switch back to the notes

393
00:29:36,660 --> 00:29:38,060
to see if there's any questions.

394
00:29:44,500 --> 00:29:47,460
These are all being answered here.

395
00:29:47,460 --> 00:29:54,460
So yes, whoever is sharing screen next, please grab it and we can get going.

396
00:29:54,460 --> 00:29:59,460
Okay, that would be me.

397
00:29:59,460 --> 00:30:08,460
I had a couple of times when the internet connection somehow wasn't great and your voice broke.

398
00:30:08,460 --> 00:30:13,460
So I hope it doesn't happen again. I closed Twitch stream and all of that.

399
00:30:13,460 --> 00:30:14,460
Okay.

400
00:30:14,460 --> 00:30:21,940
So, yeah, pay attention to what's happening instead of me, which, you know, and I will

401
00:30:21,940 --> 00:30:24,940
concentrate on what I'm sharing.

402
00:30:24,940 --> 00:30:25,940
Okay.

403
00:30:25,940 --> 00:30:30,940
So, so the first lesson is Jupyter.

404
00:30:30,940 --> 00:30:37,100
And I guess one main reason, one big reason to talk about Jupyter is that we will use

405
00:30:37,100 --> 00:30:38,100
it a lot.

406
00:30:38,100 --> 00:30:43,660
It's a convenient way of teaching and showing things.

407
00:30:43,660 --> 00:30:51,020
[name], do you want to say anything about why Jupyter is good to learn before we start?

408
00:30:51,020 --> 00:30:56,940
I think it's great at the very beginning when you are starting to write your Python

409
00:30:56,940 --> 00:30:57,940
scripts.

410
00:30:57,940 --> 00:31:03,860
It's easier to, it's more readable.

411
00:31:03,860 --> 00:31:09,900
I find it easier to debug as well, but I would say, I mean, if you're used to IPython or

412
00:31:09,900 --> 00:31:13,140
just running it from the command line, that is great as well.

413
00:31:13,140 --> 00:31:16,180
So it's really a matter of preference.

414
00:31:16,180 --> 00:31:20,500
If you are used to Python and you have a favorite way of using it, then just go ahead and use

415
00:31:20,500 --> 00:31:24,380
that instead.

416
00:31:24,380 --> 00:31:26,700
So getting started with Jupyter.

417
00:31:26,700 --> 00:31:29,100
So let's just show one way of opening it.

418
00:31:29,100 --> 00:31:33,260
is how I will use it.

419
00:31:33,500 --> 00:31:39,420
And just to note, so in the installation

420
00:31:39,420 --> 00:31:42,220
instructions that you hopefully did take a look at

421
00:31:42,220 --> 00:31:45,500
before the course, if you didn't just ask questions, but

422
00:31:45,500 --> 00:31:50,380
if you did, there is also instructions for how to open Jupyter for

423
00:31:50,380 --> 00:31:54,700
whatever method of installing it you chose.

424
00:31:54,700 --> 00:31:57,660
So, I will activate a conda environment in my terminal.

425
00:32:02,220 --> 00:32:06,780
And while [name] is doing this, I will mention that you can also open it from the Anaconda

426
00:32:06,780 --> 00:32:14,300
navigator. So, if you prefer that, that's perfectly okay. And if you're using Anaconda

427
00:32:14,300 --> 00:32:19,260
and did not create a special environment, then you don't need to activate anything. You just run

428
00:32:19,260 --> 00:32:25,300
on this command, jupyter lab.

429
00:32:25,300 --> 00:32:31,980
And this opens a new browser window or a new tab in the browser.

430
00:32:31,980 --> 00:32:34,460
And there's a lot of stuff here.

431
00:32:34,460 --> 00:32:40,300
That's probably not the most useful information at this point.

432
00:32:40,300 --> 00:32:44,420
So oh, I'm running it in my main folder.

433
00:32:44,420 --> 00:32:48,500
Is there a way of easily going to another folder here, or should I just restart?

434
00:32:48,500 --> 00:32:52,980
Maybe I'll just go to Python for SciComp.

435
00:32:52,980 --> 00:32:56,300
Okay, that works.

436
00:32:56,300 --> 00:33:00,740
Also, there is a file browser here.

437
00:33:00,740 --> 00:33:06,820
You can clearly go to into folders, I will use it to delete my previous version of this

438
00:33:06,820 --> 00:33:07,820
session.

439
00:33:07,820 --> 00:33:13,700
Okay, so now I have no files in the folder.

440
00:33:13,700 --> 00:33:20,340
And if you have nothing open, it will automatically open this launcher, which will show you what

441
00:33:20,340 --> 00:33:26,820
kinds of programming languages you can use in Jupyter, basically.

442
00:33:26,820 --> 00:33:30,500
So this is a Python 3 kernel, and it's the only one I have.

443
00:33:30,500 --> 00:33:33,820
So I can open a Python 3 notebook here.

444
00:33:33,820 --> 00:33:39,620
If you don't see this, you can open this view by pressing this plus button here.

445
00:33:39,620 --> 00:33:48,140
Okay. So, I will open a new one and immediately I will rename it. So, right-clicking here

446
00:33:48,140 --> 00:33:51,260
and rename. I will call it demo.

447
00:33:51,260 --> 00:33:57,500
Yeah. That's always a good practice. Although I have a lot of untitled documents as well.

448
00:33:57,500 --> 00:34:04,100
Yeah. So, it will automatically – oh, it's showing like it didn't save it. Okay. Well,

449
00:34:04,100 --> 00:34:09,420
I mean that blue dot – that dot in my mind means it didn't save it, but maybe it's because

450
00:34:09,420 --> 00:34:19,660
it's empty. Okay so we have this notebook and what we can do here we can write Python code and run it

451
00:34:19,660 --> 00:34:27,980
and it will show the output immediately or we can use markdown to write a narrative so you can

452
00:34:28,780 --> 00:34:35,020
essentially you can make this a document where you write some description and then you write the code

453
00:34:35,020 --> 00:34:40,220
code, and then you write some more description and then some more code and so on.

454
00:34:40,220 --> 00:34:45,420
So that makes it nicer for sharing your code or sharing your workflow with other people.

455
00:34:45,420 --> 00:34:52,540
They can immediately see what you've done and see the code actually in the document.

456
00:34:52,540 --> 00:34:55,100
So it says code here.

457
00:34:55,100 --> 00:34:59,140
It refers to this one, well, they could have multiple cells here.

458
00:34:59,140 --> 00:35:02,640
It's a plus button, so now you have multiple cells.

459
00:35:02,640 --> 00:35:07,360
So this code refers to this particular cell that I have selected.

460
00:35:07,360 --> 00:35:10,240
I will change it into Markdown.

461
00:35:10,240 --> 00:35:16,680
Markdown is the language that we use in the collaborative document, in the notes.

462
00:35:16,680 --> 00:35:20,880
So it should look relatively straightforward.

463
00:35:20,880 --> 00:35:23,400
If it doesn't, that's fine.

464
00:35:23,400 --> 00:35:30,320
The point is not to learn Markdown, but you can do formatting in addition to text with

465
00:35:30,320 --> 00:35:31,320
Markdown.

466
00:35:31,320 --> 00:35:40,280
this one hash means title this is like the biggest title available so this is a title

467
00:35:41,400 --> 00:35:47,400
and make sure that it's the same markdown that we are using for the notes document yeah and you

468
00:35:47,400 --> 00:35:53,720
don't have to be great at it to to use it i mean i think you can just learn a few syntaxes and

469
00:35:53,720 --> 00:35:59,720
that's okay so this is some text i'll just write that and maybe i'll do like we do the questions

470
00:35:59,720 --> 00:36:02,920
so a bullet point.

471
00:36:06,840 --> 00:36:10,840
So it actually does some, just like the notes, it does some

472
00:36:10,840 --> 00:36:14,680
syntax highlighting here so that you see there's a title and the bullets

473
00:36:14,680 --> 00:36:18,120
they're different. But now if I press play here it will

474
00:36:18,120 --> 00:36:21,000
actually run this markdown code which means

475
00:36:21,000 --> 00:36:26,600
generate a formatted text area here.

476
00:36:26,600 --> 00:36:32,600
Okay, now I can also do Python code. So this is just markdown, code, or raw text. Code in this

477
00:36:32,600 --> 00:36:37,720
case means Python code because this was a Python notebook. So let's just do a simple one, one plus

478
00:36:37,720 --> 00:36:43,560
one. Run that. And if you install a different kernel, let's say you work with Julia instead,

479
00:36:44,280 --> 00:36:52,760
then the kernel is going to interpret what they said that you are marking as code will

480
00:36:52,760 --> 00:37:00,680
be interpreted by the kernel that you have chosen. Yeah, actually I will steal this

481
00:37:01,560 --> 00:37:10,680
notes from here for a while. Okay, so what else should we try? So just a quick intro to Python,

482
00:37:10,680 --> 00:37:19,480
I suppose. So we can do a for loop and if we do for loop for starting from the value of i

483
00:37:19,480 --> 00:37:25,720
starts from 0 and goes up to 2, we use the range function and actually write the number 3. So it's

484
00:37:25,720 --> 00:37:33,720
0, 1, 2. That's three different numbers. So that's kind of the logic. And let's just print

485
00:37:35,000 --> 00:37:41,320
the number and run this cell. So I should print the numbers 0, 1, and 2.

486
00:37:41,320 --> 00:37:52,080
Or you can do sum of range from 0 to 5.

487
00:37:52,080 --> 00:37:57,960
So now I'm not using print, but it will still print the last thing that happens, the output

488
00:37:57,960 --> 00:37:59,440
of the last line.

489
00:37:59,440 --> 00:38:04,160
So just like here in 1 plus 1 it printed 2, it prints 10 here.

490
00:38:04,160 --> 00:38:10,720
Okay, so this is essentially most of Jupyter.

491
00:38:10,720 --> 00:38:15,360
Let's quickly also show a magic function.

492
00:38:15,360 --> 00:38:21,240
So there are a few commands that don't exist in Python, but are very useful in Jupyter.

493
00:38:21,240 --> 00:38:24,120
And they start with a percentage.

494
00:38:24,120 --> 00:38:28,000
So we can print the directory we are at.

495
00:38:28,000 --> 00:38:30,120
So this stands for print working directory.

496
00:38:30,120 --> 00:38:39,960
And if you use a Unix terminal in Linux or in Mac OS, this will be a familiar command.

497
00:38:39,960 --> 00:38:43,880
So this is where we are right now in my file system.

498
00:38:43,880 --> 00:38:45,880
But not all Unix commands exist here.

499
00:38:45,880 --> 00:38:52,440
So there's another command called bash, which will run.

500
00:38:52,440 --> 00:38:55,440
So bash is essentially a terminal.

501
00:38:55,440 --> 00:38:57,960
So you can run any terminal command here

502
00:38:57,960 --> 00:39:00,160
to host name, for example.

503
00:39:00,160 --> 00:39:02,040
So this will print the name of my computer,

504
00:39:02,040 --> 00:39:06,120
which is some string of numbers and characters.

505
00:39:06,120 --> 00:39:10,600
But I guess the thing I want to demonstrate

506
00:39:10,600 --> 00:39:14,760
is that even though this doesn't exist as a magic command,

507
00:39:14,760 --> 00:39:16,740
so this is what an error looks like,

508
00:39:16,740 --> 00:39:21,740
it does exist inside this bash command.

509
00:39:24,620 --> 00:39:28,440
Also, everything now in this cell is this magic command

510
00:39:28,440 --> 00:39:32,280
because it starts with two percentage signs.

511
00:39:33,140 --> 00:39:36,060
So that changes how the cell works in general.

512
00:39:36,120 --> 00:39:45,960
Yeah, exactly. So for one line, it's one percentage for the whole cell, you should use two percentages

513
00:39:45,960 --> 00:39:51,320
followed by the magic. And maybe I could add that, I mean, using this magic commands is

514
00:39:51,320 --> 00:39:59,240
a great way of integrating Bash and running other programs that you have compiled within

515
00:39:59,240 --> 00:40:04,800
your Jupyter notebook. So you could integrate, for example, R or C or Fortran and run it

516
00:40:04,800 --> 00:40:10,960
from the cell. But you just need to make sure that you do have the correct environment when

517
00:40:10,960 --> 00:40:20,160
you're trying to do that. But yeah. One command which I think is very nice as well is the ls

518
00:40:20,160 --> 00:40:26,560
magic one. If you could show it. And that will print all the magic commands that are available.

519
00:40:26,560 --> 00:40:28,880
Oh, is it just one word?

520
00:40:28,880 --> 00:40:34,080
ls magic one word. It's always one word for the command. And then you may have options

521
00:40:34,080 --> 00:40:41,680
following. And then if you, yes, expand, then you can see everything that is available as

522
00:40:41,680 --> 00:40:49,040
line magic or cell magic. I think that line magic is with one percentage sign and cell magic is for

523
00:40:49,040 --> 00:40:56,320
two. Exactly. Yeah. And this may not be so instructive, but you could use, for example,

524
00:40:56,320 --> 00:41:05,280
magic or quick breath one word to know more about them or you can just Google for them

525
00:41:05,280 --> 00:41:14,240
or check in there. Yes, exactly. In the documentation. So that's that's okay. It's like find it quite

526
00:41:14,240 --> 00:41:25,880
but very long cheat sheet. But was there a magic command called pip? Let's see. So I

527
00:41:25,880 --> 00:41:31,280
I mean, sometimes it is very useful to be able to also install packages from, so yeah,

528
00:41:31,280 --> 00:41:32,280
there is.

529
00:41:32,280 --> 00:41:33,280
There is.

530
00:41:33,280 --> 00:41:39,320
And there is Conda as well, as a magical.

531
00:41:39,320 --> 00:41:41,640
Okay.

532
00:41:41,640 --> 00:41:49,000
Should we demonstrate the sort of the biggest problem that people were running to or should

533
00:41:49,000 --> 00:41:52,040
we just go to the exercises first?

534
00:41:52,040 --> 00:41:53,040
We have one minute.

535
00:41:53,040 --> 00:41:54,040
Okay.

536
00:41:54,040 --> 00:42:00,920
Okay, well, let's just show one thing that might, this is something you might run into that might

537
00:42:00,920 --> 00:42:07,960
be a problem. So we have here, we have run a for loop that sets a value for the variable i.

538
00:42:08,840 --> 00:42:16,600
So here I can run an i equals 2. Okay, what if I add a cell here

539
00:42:16,600 --> 00:42:24,420
here and run this. What do you think should happen? What do you think will happen? Well,

540
00:42:24,420 --> 00:42:31,300
the way Jupyter works is that it just runs the cells in the order that you run them in.

541
00:42:31,300 --> 00:42:37,980
It doesn't care about what order they're written in. So this will still be equal to 2, this

542
00:42:37,980 --> 00:42:45,220
i here. What did I do? Okay. So that might be a problem if somebody else now gets your

543
00:42:45,220 --> 00:42:51,540
notebook. If you take your notebook and send it to someone else and they try to run it so

544
00:42:51,540 --> 00:42:57,700
there is this very convenient button here that will run all the restart the kernel just forget

545
00:42:57,700 --> 00:43:04,100
everything and run all the cells from the beginning. So this is basically what will

546
00:43:04,100 --> 00:43:08,260
happen when you give your notebook to someone else. They will run it every cell from the beginning.

547
00:43:08,260 --> 00:43:17,060
So, now it ran this cell correctly, but this cell I doesn't mean anything, so it just failed

548
00:43:17,060 --> 00:43:19,420
and gave an error.

549
00:43:19,420 --> 00:43:20,420
It's a very useful error.

550
00:43:20,420 --> 00:43:24,860
Name i is not defined, so you know what's happening.

551
00:43:24,860 --> 00:43:29,460
So I will just delete this cell, because this is a problem.

552
00:43:29,460 --> 00:43:32,580
It shouldn't be there, it should be here.

553
00:43:32,580 --> 00:43:33,580
And let's try again.

554
00:43:33,580 --> 00:43:38,140
So it's always useful to do this restart kernel

555
00:43:38,140 --> 00:43:42,060
and rerun all the cells in order before sending your notebook

556
00:43:42,060 --> 00:43:44,100
to anyone.

557
00:43:44,100 --> 00:43:46,500
Oh, host name not found.

558
00:43:46,500 --> 00:43:47,340
That's interesting.

559
00:43:47,340 --> 00:43:48,860
OK, right, because that was it.

560
00:43:48,860 --> 00:43:51,300
Actually, I was showing you that it doesn't exist.

561
00:43:51,300 --> 00:43:55,300
OK, let's remove that error as well.

562
00:43:55,300 --> 00:43:57,580
OK, now everything worked.

563
00:43:57,580 --> 00:44:00,380
All the cells worked correctly.

564
00:44:00,380 --> 00:44:03,180
OK, so I guess we'll go to the exercises

565
00:44:03,180 --> 00:44:15,980
then. So let's do exercise one is almost at the top. So starting

566
00:44:15,980 --> 00:44:23,940
and exploring Jupyter. And if you are new to Jupyter, it's

567
00:44:24,500 --> 00:44:29,260
very much enough to just do that. There are some I mean,

568
00:44:29,260 --> 00:44:32,620
it's good if you get to this first one, which is run some

569
00:44:32,620 --> 00:44:41,820
code in Jupyter. The rest are some a bit more slightly more complicated exercises and if you

570
00:44:41,820 --> 00:44:45,500
get all the way to the end, I mean I don't really expect you to get all the way to the end

571
00:44:45,500 --> 00:44:54,300
necessarily, if you do then go on to exercise three. It's an optional discussion exercise so

572
00:44:54,300 --> 00:45:00,540
you can write things into the notes or you can discuss with people close to you if they are also

573
00:45:00,540 --> 00:45:12,940
done with all the exercises. So we'll give you 15 minutes and then we'll do a quick wrap-up. So go ahead.

574
00:45:17,980 --> 00:45:22,140
Should we write some information in the notes about the exercise time?

575
00:45:22,140 --> 00:45:23,100
Yes, I just...

576
00:45:30,540 --> 00:45:32,600
you

577
00:46:00,540 --> 00:46:02,600
you

578
00:46:30,540 --> 00:46:32,600
you

579
00:47:00,540 --> 00:47:02,600
you

580
00:47:30,540 --> 00:47:32,600
you

581
00:48:00,540 --> 00:48:02,600
you

582
00:48:30,540 --> 00:48:32,600
you

583
00:49:00,540 --> 00:49:02,600
you

584
00:49:30,540 --> 00:49:32,600
you

585
00:50:00,540 --> 00:50:02,600
you

586
00:50:30,540 --> 00:50:32,600
you

587
00:51:00,540 --> 00:51:02,600
you

588
00:51:30,540 --> 00:51:32,600
you

589
00:52:00,540 --> 00:52:02,600
you

590
00:52:30,540 --> 00:52:32,600
you

591
00:53:00,540 --> 00:53:02,600
you

592
00:53:30,540 --> 00:53:32,600
you

593
00:54:00,540 --> 00:54:02,600
you

594
00:54:30,540 --> 00:54:32,600
you

595
00:55:00,540 --> 00:55:02,600
you

596
00:55:30,540 --> 00:55:32,600
you

597
00:56:00,540 --> 00:56:02,600
you

598
00:56:30,540 --> 00:56:32,600
you

599
00:57:00,540 --> 00:57:02,600
you

600
00:57:30,540 --> 00:57:32,600
you

601
00:58:00,540 --> 00:58:02,600
you

602
00:58:30,540 --> 00:58:32,600
you

603
00:59:00,540 --> 00:59:02,600
you

604
00:59:30,540 --> 00:59:41,100
Okay, welcome back. I hope you had a good time with the exercises and got Jupyter running.

605
00:59:41,100 --> 00:59:50,620
So we had a couple of questions and I think the biggest issue is that bash indeed doesn't

606
00:59:50,620 --> 00:59:59,900
work on Windows. It's an operating system specific thing. So there is a magic command,

607
00:59:59,900 --> 01:00:05,580
how was the percentage sign there called CMD that should work on Windows

608
01:00:07,020 --> 01:00:12,780
so you can use that one instead it will not work on my system so

609
01:00:14,300 --> 01:00:22,540
you can try running it but yeah it does not exist. Yeah but sorry yes we missed that so

610
01:00:22,540 --> 01:00:32,060
but bash equivalent in windows should be cmd so whatever we tried in the bash magic

611
01:00:33,340 --> 01:00:36,060
in the bash cell then you could try that with cmd

612
01:00:38,300 --> 01:00:44,140
okay so that's everything about jupyter for now we will be using it for the

613
01:00:44,700 --> 01:00:47,180
a lot of the course so you will get used to it

614
01:00:47,180 --> 01:01:01,180
it. Is there any other notable questions to bring up? There's a lot of questions and a

615
01:01:01,180 --> 01:01:11,660
lot of answers which is great. Yes I think most of them are answered so maybe we can

616
01:01:11,660 --> 01:01:17,420
just wrap up with when to use Jupyter and when is it not so great.

617
01:01:19,980 --> 01:01:22,060
Yeah, so do you use Jupyter a lot?

618
01:01:23,420 --> 01:01:28,780
It's actually mostly for teaching and for visualizing plots.

619
01:01:29,900 --> 01:01:36,300
Yeah, it's really useful for visualizing because you can, it can display the plots or any images

620
01:01:36,300 --> 01:01:44,620
inside the notebook. So, it's kind of inlining it. So, that's useful. It's good for quickly

621
01:01:44,620 --> 01:01:50,460
changing a single cell. You don't have to rerun the whole thing. So, if you have a really – if

622
01:01:50,460 --> 01:01:57,500
you have a processor that takes a few minutes to run and you want to work on the very last

623
01:01:57,500 --> 01:02:02,780
10 seconds of it, you may not want to run the whole thing every time you're testing it. So,

624
01:02:02,780 --> 01:02:08,060
just run the last couple of cells. And why should you not use Jupyter?

625
01:02:11,340 --> 01:02:16,140
There's a few actually, a few good reasons to not use Jupyter as well.

626
01:02:18,460 --> 01:02:23,500
I think the main most important one is the top most one here, so they don't promote modularity.

627
01:02:24,060 --> 01:02:30,300
So yeah, writing functions in Jupyter notebooks or moving things into

628
01:02:30,300 --> 01:02:38,860
to importable files is, I mean, it doesn't happen automatically. It's something you need

629
01:02:38,860 --> 01:02:44,540
to think about when you're writing the notebooks.

630
01:02:44,540 --> 01:02:55,260
Yes. And one thing I would mention here, it's also written in the material is that the nbdime

631
01:02:55,260 --> 01:03:01,980
extension. That's really great if you are versioning and controlling your notebooks

632
01:03:01,980 --> 01:03:09,580
and you should do that. So that will allow you to see differences between different notebooks,

633
01:03:09,580 --> 01:03:18,660
which is not straightforward. Or rather, version controls the tool.

634
01:03:19,460 --> 01:03:25,780
Okay and yeah there's some other things written down here but so you can read on your own time.

635
01:03:26,420 --> 01:03:35,380
Now it's time for a break so do take a break you can come back to the exercises or any part of this

636
01:03:36,980 --> 01:03:44,580
later but it is it's actually very useful for or very important for learning that you also

637
01:03:44,580 --> 01:03:55,780
take breaks if you were really working on this one then take some time off to take your hands

638
01:03:55,780 --> 01:04:01,620
off your keyboard and walk around and then come back. So we'll take nine minutes and then we'll

639
01:04:01,620 --> 01:04:11,300
come back at the short. Let's come back two minutes past. And we'll continue with NumPy.

640
01:04:14,580 --> 01:04:18,560
Alright, so see you after the break. Bye

641
01:04:44,580 --> 01:04:46,640
you

642
01:05:14,580 --> 01:05:16,640
you

643
01:05:44,580 --> 01:05:46,640
you

644
01:06:14,580 --> 01:06:16,640
you

645
01:06:44,580 --> 01:06:46,640
you

646
01:07:14,580 --> 01:07:16,640
you

647
01:07:44,580 --> 01:07:46,640
you

648
01:08:14,580 --> 01:08:16,640
you

649
01:08:44,580 --> 01:08:46,640
you

650
01:09:14,580 --> 01:09:16,640
you

651
01:09:44,580 --> 01:09:46,640
you

652
01:10:14,580 --> 01:10:16,640
you

653
01:10:44,580 --> 01:10:46,640
you

654
01:11:14,580 --> 01:11:16,640
you

655
01:11:44,580 --> 01:11:46,640
you

656
01:12:14,580 --> 01:12:16,640
you

657
01:12:44,580 --> 01:12:46,640
you

658
01:13:14,580 --> 01:13:16,640
you

659
01:13:44,580 --> 01:13:46,640
you

660
01:14:14,580 --> 01:14:38,580
So, welcome back, everyone, after the break.

661
01:14:38,580 --> 01:14:44,580
Hello, should we say something about ourselves?

662
01:14:44,580 --> 01:14:52,220
Yes, we should. So my name is [name]. I work at the PDC Center for High Performance

663
01:14:52,220 --> 01:14:57,900
Computing in Stockholm. And with me here is [name].

664
01:14:57,900 --> 01:15:04,020
Hi, I'm [name]. I'm a staff scientist at Aalto and I work with [name] and others at Aalto

665
01:15:04,020 --> 01:15:09,540
scientific computing and I'm sure you will receive some emails from me regarding links

666
01:15:09,540 --> 01:15:16,420
and other details for the course. So, nice to see so many of you here. So, [name], numpy.

667
01:15:17,140 --> 01:15:27,380
Yes. So, as you can see here, we have opened here a Jupyter notebook. So, we will continue

668
01:15:27,380 --> 01:15:34,820
this tool that you were introduced to in the previous lesson. And we see that you have

669
01:15:34,820 --> 01:15:43,940
been posting, continue to post questions in the HackMD, and we will answer them continuously.

670
01:15:43,940 --> 01:15:53,420
So [name], why would we need something, we do have support of lists and various data

671
01:15:53,420 --> 01:15:57,420
types in regular Python from the beginning.

672
01:15:57,420 --> 01:16:02,140
So why would we need a library like NumPy?

673
01:16:02,140 --> 01:16:06,220
Yeah, I think that the issue with Python list,

674
01:16:06,220 --> 01:16:10,220
with the kind of basic supported Python list,

675
01:16:10,220 --> 01:16:13,940
is that they, as you can see here in this example,

676
01:16:13,940 --> 01:16:18,260
there is one, 2.5, some string, some Boolean.

677
01:16:18,260 --> 01:16:23,160
So it's a bit of a mixed bag of different types.

678
01:16:23,160 --> 01:16:28,680
you can guess already that maybe this is not the most efficient way to deal with data,

679
01:16:29,240 --> 01:16:35,960
especially if you need to do fast computation with it. So I think that the NumPy,

680
01:16:36,520 --> 01:16:39,880
is it a NumPy? I think that it stands for numerical Python, isn't it?

681
01:16:39,880 --> 01:16:48,600
Yes, indeed. And NumPy is a library used for scientific computing and it's something that

682
01:16:48,600 --> 01:16:56,240
that we will use a lot here now in the course, and often it's so that even if you don't explicitly

683
01:16:56,240 --> 01:17:01,200
work with NumPy, you might have it under the hood. So it will, for instance, come in under

684
01:17:01,200 --> 01:17:07,520
the hood when we look on the Matplotlib visualization tomorrow.

685
01:17:07,520 --> 01:17:16,320
So one of the core objects in NumPy are the arrays, which is a construction that can work

686
01:17:16,320 --> 01:17:23,600
with a regular set of values. You can call them a grid. And all of the elements have

687
01:17:23,600 --> 01:17:33,480
the same data type. This data type have indices, which are non-negative numbers. And these

688
01:17:33,480 --> 01:17:41,600
indices can be in one or more dimension that is natively supported. If you look on the

689
01:17:41,600 --> 01:17:49,240
The properties that the array elements have, or the arrays have, they have a dtype, and

690
01:17:49,240 --> 01:17:53,400
an intrinsic property they have is that they have a shape. So, for instance, you can have

691
01:17:53,400 --> 01:18:00,160
a two-dimensional array, three times two. You can have a three-dimensional array, three

692
01:18:00,160 --> 01:18:07,600
times two, type 500. There's also the corner case of having a zero-dimensional array indexed

693
01:18:07,600 --> 01:18:11,360
here by square brackets.

694
01:18:11,360 --> 01:18:13,480
An important aspect is that we have

695
01:18:13,480 --> 01:18:17,280
the data stored as raw memory, and it

696
01:18:17,280 --> 01:18:20,440
can be passed to C and Fortran code

697
01:18:20,440 --> 01:18:23,960
for efficient calculations.

698
01:18:23,960 --> 01:18:26,680
So is it, [name], can you, do you

699
01:18:26,680 --> 01:18:32,040
have some examples of when you combine C and Python?

700
01:18:32,040 --> 01:18:36,200
Well, I mean, this is, NumPy is maybe the greatest example

701
01:18:36,200 --> 01:18:41,200
of having so much sea power under the hood.

702
01:18:42,020 --> 01:18:43,180
But what do you think,

703
01:18:43,180 --> 01:18:46,620
should we show the power of NumPy?

704
01:18:46,620 --> 01:18:47,460
Yes, yes.

705
01:18:49,700 --> 01:18:54,500
So I'm gonna type so that also you,

706
01:18:54,500 --> 01:18:56,980
whoever wants to type can do the same.

707
01:18:56,980 --> 01:18:59,380
So basically we are creating a list

708
01:18:59,380 --> 01:19:02,380
and this is range and it's 10,000.

709
01:19:02,380 --> 01:19:13,940
All right. And that's the first list. And then we have another list. It's called B.

710
01:19:13,940 --> 01:19:19,780
And this is now in regular Pythons. This is still not NumPy.

711
01:19:19,780 --> 01:19:25,340
Yep. All right.

712
01:19:25,340 --> 01:19:36,420
Yes. So let's see here what happens if you take the elements of the list A and you square

713
01:19:36,420 --> 01:19:42,220
them and assign the value to B. It's a long list.

714
01:19:42,220 --> 01:19:48,380
Yeah, it's a long list. So in this small example here, we basically

715
01:19:48,380 --> 01:19:53,860
need to build a for loop, right? So that it will go through each of the elements of A

716
01:19:53,860 --> 01:20:02,340
and assign them to b and then we use this magic time it which is very useful for basically

717
01:20:02,340 --> 01:20:08,500
telling us the performance of the piece of code in the cell that we see here so we said

718
01:20:08,500 --> 01:20:17,220
that we do a for loop in the range of the length of the list a and then we want to

719
01:20:17,220 --> 01:20:28,820
do that the ith element of b is equal to the ith element of a square i think it's correct right

720
01:20:28,820 --> 01:20:37,860
should we check that that was correct so what's the timing for this so it's saying 2.68 milliseconds

721
01:20:39,060 --> 01:20:45,620
per loop so well one could think that it's even you know relatively fast 2.8 millisecond

722
01:20:45,620 --> 01:20:48,620
Now, should we try the NumPy version?

723
01:20:48,620 --> 01:20:49,620
Yes.

724
01:20:49,620 --> 01:20:55,620
So there's now a new command that we have not used yet, which is import.

725
01:20:55,620 --> 01:21:01,620
This is practically saying to Python that now I'm importing a library.

726
01:21:01,620 --> 01:21:10,620
And often we even nickname that instead of using `numpy`, often it is nicknamed as `np` for brevity.

727
01:21:10,620 --> 01:21:14,620
So you can save typing time.

728
01:21:14,620 --> 01:21:26,620
and now we basically redo what we did earlier but this time we use this function so np.arange

729
01:21:27,900 --> 01:21:35,500
with 10 000 and for the b we initialize it to zeros

730
01:21:37,740 --> 01:21:43,580
and again 10 000 so basically we have recreated what we were doing earlier

731
01:21:43,580 --> 01:21:51,340
with this but now they're not lists anymore now they are NumPy arrays and

732
01:21:51,340 --> 01:21:58,300
now we can do you can already see how compact is the NumPy version of it so

733
01:21:58,300 --> 01:22:05,940
we want to time it again and then we want to make sure that the array B will

734
01:22:05,940 --> 01:22:12,780
contain the square the element y square of array A and let's see how long it

735
01:22:12,780 --> 01:22:22,660
it takes. Okay, this was 3.42 microns [microseconds]. So I'm not good with math, but we are talking

736
01:22:22,660 --> 01:22:26,420
at order of magnitude, three order of magnitudes of difference. So it's...

737
01:22:26,420 --> 01:22:30,220
Yeah, yeah. This is quite a bit faster.

738
01:22:30,220 --> 01:22:40,340
It's quite a bit different. So we showed some functions like this np.arange and np.zeros.

739
01:22:40,340 --> 01:22:44,200
or are these related to this creating arrays, [name]?

740
01:22:44,200 --> 01:22:46,040
Yes, exactly.

741
01:22:46,040 --> 01:22:51,040
So there are a few different ways that one can create arrays.

742
01:22:51,400 --> 01:22:56,400
So the arange, here we had as an argument 10,000

743
01:22:58,520 --> 01:23:01,120
and so perhaps we can look at `a`.

744
01:23:01,120 --> 01:23:02,080
So what does it start with?

745
01:23:02,080 --> 01:23:05,040
Does it start with one or does it start with zero?

746
01:23:06,400 --> 01:23:07,960
In this `a` here?

747
01:23:07,960 --> 01:23:08,800
Yeah.

748
01:23:08,800 --> 01:23:16,200
So, it starts with zero.

749
01:23:16,200 --> 01:23:18,440
It starts with zero, yeah.

750
01:23:18,440 --> 01:23:22,120
And also, I mean, the first element also has the index of zero.

751
01:23:22,120 --> 01:23:23,120
Yeah.

752
01:23:23,120 --> 01:23:32,840
So, this is then compatible with C, but it's then another convention than what is used

753
01:23:32,840 --> 01:23:37,000
in, for instance, in Fortran.

754
01:23:37,000 --> 01:23:46,240
So we could also have that we assign a distinct set of elements. So perhaps if you would like

755
01:23:46,240 --> 01:23:58,440
to have just numbering up to six, but have it in a three-dimensional array, in a two-dimensional

756
01:23:58,440 --> 01:23:59,440
array.

757
01:23:59,440 --> 01:24:00,440
Yeah.

758
01:24:00,440 --> 01:24:04,800
I think you have an example there for `b`.

759
01:24:04,800 --> 01:24:16,400
So yep, so mparray and now I'm passing like in this example here I'm actually passing

760
01:24:16,400 --> 01:24:24,120
a matrix basically row one and row two so I need many square brackets now this is the

761
01:24:24,120 --> 01:24:33,560
first row and then there's a comma and then there's the second row four five and six all

762
01:24:33,560 --> 01:24:36,420
All right, let's have a look at `b also.

763
01:24:36,420 --> 01:24:39,700
All right, yeah, this is now like a square matrix

764
01:24:39,700 --> 01:24:41,860
or not square, but two-dimensional.

765
01:24:41,860 --> 01:24:43,740
Rectangular, yeah.

766
01:24:43,740 --> 01:24:44,780
Now we have these attributes

767
01:24:44,780 --> 01:24:47,260
that we can inspect the array with.

768
01:24:47,260 --> 01:24:50,700
So yeah, b.shape, okay.

769
01:24:50,700 --> 01:24:52,420
Pings back then that the shape of the object

770
01:24:52,420 --> 01:24:56,880
is two rows and three columns.

771
01:24:58,100 --> 01:25:00,700
And the size will give us the number of elements.

772
01:25:01,620 --> 01:25:02,460
I see.

773
01:25:02,460 --> 01:25:12,940
So, there are many alternatives to how to create arrays. So, we have here, for instance,

774
01:25:12,940 --> 01:25:20,660
you can create all zeros. You can create all ones. Or assign all elements to some arbitrary

775
01:25:20,660 --> 01:25:29,580
amounts. For instance, this np.full, 2, 2, and then 7, which then will assign all elements

776
01:25:29,580 --> 01:25:44,020
to 7. You will see here soon in the exercises that you can manipulate the elements. So we

777
01:25:44,020 --> 01:25:50,740
can yeah perhaps you can first show that how one can save and then read in again

778
01:25:50,740 --> 01:26:00,100
yeah so let's see if we have something stored maybe a can be this

779
01:26:00,100 --> 01:26:27,060
Yes, now we want to save it and be don't say I call it a.npy just because so that's the

780
01:26:27,060 --> 01:26:35,220
a native format. Let's give it file.npy and the variable a this is actually like I'm coming

781
01:26:35,220 --> 01:26:41,540
from a MATLAB past this is very similar to the save MATLAB where you have the name of

782
01:26:41,540 --> 01:26:46,500
the file and then the variable and then of course I guess we can load things back. So

783
01:26:46,500 --> 01:26:52,900
now I'm loading to a different variables called x and p dot load and the name of the

784
01:26:52,900 --> 01:26:57,900
the file, which was file.mpy and let's see if it works.

785
01:26:59,180 --> 01:27:01,660
Yeah, no, the same way.

786
01:27:05,020 --> 01:27:09,480
So we would, should we already go to the,

787
01:27:09,480 --> 01:27:11,140
or do we need, do you want to mention something

788
01:27:11,140 --> 01:27:13,060
about this data type?

789
01:27:13,060 --> 01:27:18,060
Yes, so one can change the data type.

790
01:27:18,060 --> 01:27:26,600
change the data type. So, the data types here are dynamic. So, if you assign an element

791
01:27:26,600 --> 01:27:34,680
or elements to be integers, then the array will be an array of integers. But you can

792
01:27:34,680 --> 01:27:39,240
cast it into something else.

793
01:27:39,240 --> 01:27:50,680
So, I'm making now an array of booleans just for the fun and let's see if it looks okay.

794
01:27:50,680 --> 01:27:56,840
Yeah, so this is basically true and now we want to cast this. So, casting meaning that

795
01:27:56,840 --> 01:28:04,680
we don't want to treat this as booleans anymore but we want to see them as integers. Let's

796
01:28:04,680 --> 01:28:12,320
see if this works. Yes, so now there are 1s. Of course, we didn't actually modify D because

797
01:28:12,320 --> 01:28:21,680
we didn't. So, D still has the, you know, we didn't store the output of D.

798
01:28:21,680 --> 01:28:29,160
Yeah, exactly. Okay. So, now it's time for you to start exploring this on your own. So,

799
01:28:29,160 --> 01:28:37,120
We are coming here to exercise one, where you get four tasks and you will explore how

800
01:28:37,120 --> 01:28:47,460
to create with arrays and also how to create arrays that fill random numbers, how arrays

801
01:28:47,460 --> 01:28:54,320
can be reshaped and also how arrays can be written to file and read from file.

802
01:28:54,320 --> 01:29:03,600
And for this exercise, we will give you 15 minutes to work on it.

803
01:29:03,600 --> 01:29:10,240
So that means that they will reconvene at 31 past the hour.

804
01:29:10,240 --> 01:29:12,640
Okay.

805
01:29:12,640 --> 01:29:18,640
And feel free, of course, to write on the notes document if you have any blockers.

806
01:29:18,640 --> 01:29:23,920
And for those who want more advanced things, you can already jump to the next exercises

807
01:29:23,920 --> 01:29:27,120
if this is too simple for you.

808
01:29:27,120 --> 01:29:31,760
OK, I'll see you all in 15 minutes.

809
01:29:53,920 --> 01:29:55,980
you

810
01:30:23,920 --> 01:30:25,980
you

811
01:30:53,920 --> 01:30:55,980
you

812
01:31:23,920 --> 01:31:25,980
you

813
01:31:53,920 --> 01:31:55,980
you

814
01:32:23,920 --> 01:32:25,980
you

815
01:32:53,920 --> 01:32:55,980
you

816
01:33:23,920 --> 01:33:25,980
you

817
01:33:53,920 --> 01:33:55,980
you

818
01:34:23,920 --> 01:34:25,980
you

819
01:34:53,920 --> 01:34:55,980
you

820
01:35:23,920 --> 01:35:25,980
you

821
01:35:53,920 --> 01:35:55,980
you

822
01:36:23,920 --> 01:36:25,980
you

823
01:36:53,920 --> 01:36:55,980
you

824
01:37:23,920 --> 01:37:25,980
you

825
01:37:53,920 --> 01:37:55,980
you

826
01:38:23,920 --> 01:38:25,980
you

827
01:38:53,920 --> 01:38:55,980
you

828
01:39:23,920 --> 01:39:25,980
you

829
01:39:53,920 --> 01:39:55,980
you

830
01:40:23,920 --> 01:40:25,980
you

831
01:40:53,920 --> 01:40:55,980
you

832
01:41:23,920 --> 01:41:25,980
you

833
01:41:53,920 --> 01:41:55,980
you

834
01:42:23,920 --> 01:42:25,980
you

835
01:42:53,920 --> 01:42:55,980
you

836
01:43:23,920 --> 01:43:25,980
you

837
01:43:53,920 --> 01:43:55,980
you

838
01:44:23,920 --> 01:44:46,080
Hello, welcome back, hopefully you had enough time to do these exercises.

839
01:44:46,080 --> 01:44:51,600
You must have noticed already that there's a solution box there so that, you know, if

840
01:44:51,600 --> 01:44:56,960
you are not sure if you are, it's good to learn also from the answer so you can click

841
01:44:56,960 --> 01:45:01,780
the box and it will expand. I'll just briefly comment on one exercise because at least looking

842
01:45:01,780 --> 01:45:09,800
at the notes document maybe it wasn't clear that the output of np.arange is a little bit

843
01:45:09,800 --> 01:45:15,720
different than the output of np.linspace and the difference as you might have noticed is

844
01:45:15,720 --> 01:45:25,240
on the type so in practice one can set you know like we did earlier here with this casting

845
01:45:25,240 --> 01:45:35,040
or if you look at the linspace function there's also a way to pass the type into as a argument

846
01:45:35,040 --> 01:45:40,560
for the linspace so we will not cover all the exercises because hopefully the solutions

847
01:45:40,560 --> 01:45:48,080
are good for you. So, should we talk about array maths and vectorization, [name]?

848
01:45:48,080 --> 01:45:59,680
Yes, indeed. And first we can point out is that NumPy is fast as the backend of it is

849
01:45:59,680 --> 01:46:08,200
done in C or in Fortran. That it has in common with other high level languages such as R

850
01:46:08,200 --> 01:46:20,660
and MATLAB. So one important notion is that by default basic arithmetic such as plus minus

851
01:46:20,660 --> 01:46:28,740
multiply and division is element by element. So this is something that we already saw this

852
01:46:28,740 --> 01:46:37,320
when we calculated the square of a and assigned it to the variable b. So the default is that

853
01:46:37,320 --> 01:46:41,620
it will perform the operation for each element in the array

854
01:46:41,620 --> 01:46:44,720
and you don't need to explicitly write a loop.

855
01:46:47,520 --> 01:46:52,520
And if you have run other languages such as MATLAB,

856
01:46:53,420 --> 01:46:57,400
you might then notice that in MATLAB,

857
01:46:57,400 --> 01:47:00,840
if you have the star for multiplication symbol,

858
01:47:00,840 --> 01:47:02,940
that means matrix multiplication.

859
01:47:03,940 --> 01:47:05,680
So this is then different in NumPy

860
01:47:05,680 --> 01:47:10,680
because the star then means that you do it element-wise.

861
01:47:11,680 --> 01:47:15,400
So NumPy, instead we are using the at symbol

862
01:47:15,400 --> 01:47:17,600
to perform multiplication.

863
01:47:17,600 --> 01:47:19,680
So perhaps we can have a look on some examples.

864
01:47:19,680 --> 01:47:23,560
So if you create two arrays, A and B.

865
01:47:23,560 --> 01:47:27,220
So the first array is a square matrix.

866
01:47:28,760 --> 01:47:29,800
First row.

867
01:47:32,000 --> 01:47:33,800
And then the second row.

868
01:47:35,680 --> 01:47:43,080
and then I close the row and let's sure that it's like it should be okay then we

869
01:47:43,080 --> 01:47:53,800
do or be five and six seven and eight

870
01:47:56,240 --> 01:48:04,080
okay so now we can for example sum the two arrays just with a plus oh yes no

871
01:48:04,080 --> 01:48:13,440
need to write any for loop a plus b and let's have a look at the output yes that

872
01:48:13,440 --> 01:48:18,980
seems to be as intended yes so each element in the respective position has

873
01:48:18,980 --> 01:48:23,660
been added to each other so is there some other way you can write this

874
01:48:23,660 --> 01:48:32,680
instead of using the plus operator yeah there is this add function in practice

875
01:48:32,680 --> 01:48:39,080
it's kind of the same but the advantage of having a function is that there will be more

876
01:48:39,080 --> 01:48:46,040
parameters and more options but yes now we store it in the output D and we can have a

877
01:48:46,040 --> 01:48:51,240
look at D and yes it's the same.

878
01:48:51,240 --> 01:48:59,160
So how then if you want to perform the matrix multiplication of A and B?

879
01:48:59,160 --> 01:49:02,240
So we said that it's this at,

880
01:49:02,240 --> 01:49:05,160
or maybe I used the function notation,

881
01:49:05,160 --> 01:49:08,640
at B dot dot, A and B.

882
01:49:08,640 --> 01:49:11,040
And now it will store in E.

883
01:49:12,040 --> 01:49:14,480
And it's been a few years,

884
01:49:14,480 --> 01:49:16,640
I haven't done matrix multiplication,

885
01:49:16,640 --> 01:49:20,080
but this looks like one, two, five and seven.

886
01:49:20,080 --> 01:49:23,920
Yes, it is five plus 14, so 19.

887
01:49:23,920 --> 01:49:25,120
Yeah, that's correct.

888
01:49:25,120 --> 01:49:33,240
Good, so here you can see there's an exercise tool here, but we will, for now, we will move

889
01:49:33,240 --> 01:49:42,600
on and look on indices and slicing. So this is core functionality when working with arrays.

890
01:49:42,600 --> 01:49:49,120
So there are a few modalities how you can extract values. So you can extract single

891
01:49:49,120 --> 01:50:00,120
elements that you then put in brackets. You can select rows or columns, or you could actually

892
01:50:00,120 --> 01:50:06,200
take subvolumes of the array. So, for instance, if you have a two-dimensional array, you can

893
01:50:06,200 --> 01:50:14,480
take out a rectangle that is within the full two-dimensional data range. So, I think we

894
01:50:14,480 --> 01:50:21,480
can see how this goes in practice. So, I already started typing.

895
01:50:21,480 --> 01:50:22,480
Yes, exactly.

896
01:50:22,480 --> 01:50:31,040
I couldn't wait. So, with this np.arange. So, this will create an array with 16 elements.

897
01:50:31,040 --> 01:50:36,000
And now we append the other function reshape. So, that instead of having, you know, kind

898
01:50:36,000 --> 01:50:43,000
of a one dimensional 16 elements array, it will be a matrix. And so, and yes, it's a

899
01:50:43,000 --> 01:50:50,200
times 4 matrix and now we can slice it we can take out whatever we need so the very first element

900
01:50:51,480 --> 01:51:00,120
will be the first row because it works for wise which is also something that is a bit different

901
01:51:00,120 --> 01:51:05,800
than matlab matlab prefers column wise so at least for me something that i had to remember

902
01:51:05,800 --> 01:51:14,840
at the beginning but of course we can also get the first column yes and let's see if we get it

903
01:51:16,120 --> 01:51:17,720
yes it's the first column

904
01:51:20,920 --> 01:51:28,200
then there's another example here that we want to take kind of the middle two times two array

905
01:51:28,200 --> 01:51:36,960
yeah so let me type it without errors from 1 to 3 in the rows and from 1 to 3

906
01:51:36,960 --> 01:51:44,040
in the columns and then here how many element did we extract here so you had

907
01:51:44,040 --> 01:51:52,080
the in this specified 1:3 and we see here that what we for the row and

908
01:51:52,080 --> 01:51:57,080
And for the columns, we were picking out from index one,

909
01:51:57,400 --> 01:51:59,360
but then up and until two.

910
01:52:00,760 --> 01:52:03,160
So three is in the upper range,

911
01:52:03,160 --> 01:52:06,780
but you don't include that in the selected elements.

912
01:52:06,780 --> 01:52:07,620
Yeah.

913
01:52:09,400 --> 01:52:11,200
Which again, I mentioned MATLAB again,

914
01:52:11,200 --> 01:52:13,560
because there were many people

915
01:52:13,560 --> 01:52:15,160
also in the registration asking.

916
01:52:15,160 --> 01:52:17,920
So it's different, very different behavior than in MATLAB,

917
01:52:17,920 --> 01:52:21,160
which instead it would have an indexes

918
01:52:21,160 --> 01:52:29,560
would be 1, 2 and 3. All right, what else do we have here? We also have Boolean indexing.

919
01:52:32,120 --> 01:52:38,120
So, what are these Boolean indexing? Let's see the first line and hopefully it will be clear.

920
01:52:38,680 --> 01:52:47,480
So, now I'm basically saying a larger than 0 and a actually has one element that is 0.

921
01:52:47,480 --> 01:52:58,000
Yeah, so then we can expect that this relation will come out as true, yes, for all of them

922
01:52:58,000 --> 01:53:02,860
apart from the first one, the first element, yeah.

923
01:53:02,860 --> 01:53:11,440
And now we can use this Boolean matrix as indexes, isn't it? So this is a good way

924
01:53:11,440 --> 01:53:21,440
of filtering based on a value. So, a of idx, yeah, now it doesn't have the first element

925
01:53:21,440 --> 01:53:22,440
anymore.

926
01:53:22,440 --> 01:53:25,200
Ah, yeah, yeah, this is very, this is very neat, yeah.

927
01:53:25,200 --> 01:53:35,080
So we basically filtered, maybe we could have, to make it clear, let's say a bigger than seven,

928
01:53:35,080 --> 01:53:44,080
right and now let's see what is this filter and you see we only have those elements that

929
01:53:44,080 --> 01:53:53,040
are bigger than seven so we are quite good with our timings is it now time for some more

930
01:53:53,040 --> 01:54:02,080
exercises yes indeed so the idea is now if you scroll up so we will do exercise number

931
01:54:02,080 --> 01:54:16,240
number 2 on matrix multiplication. And you will also do the exercise 3 which is on view

932
01:54:16,240 --> 01:54:29,940
versus copy. And for this we intend to have 10 minutes exercises and then we will cover

933
01:54:29,940 --> 01:54:35,060
the last sections of the lesson after this exercise.

934
01:54:35,060 --> 01:54:36,060
Yeah.

935
01:54:36,060 --> 01:54:40,780
Or should we give a bit more than 10 minutes if there's three exercises?

936
01:54:40,780 --> 01:54:44,460
I think we can do it in 10 minutes.

937
01:54:44,460 --> 01:54:45,460
Okay.

938
01:54:45,460 --> 01:54:46,460
Yeah.

939
01:54:46,460 --> 01:54:47,460
All right.

940
01:54:47,460 --> 01:54:54,260
So we will be back at 52 past the hour.

941
01:54:54,260 --> 01:54:57,820
Okay.

942
01:54:57,820 --> 01:55:02,780
So good luck with the exercises and see you in 10 minutes.

943
01:55:02,780 --> 01:55:03,540
Bye.

944
01:55:27,820 --> 01:55:29,880
you

945
01:55:57,820 --> 01:55:59,880
you

946
01:56:27,820 --> 01:56:29,880
you

947
01:56:57,820 --> 01:56:59,880
you

948
01:57:27,820 --> 01:57:29,880
you

949
01:57:57,820 --> 01:57:59,880
you

950
01:58:27,820 --> 01:58:29,880
you

951
01:58:57,820 --> 01:58:59,880
you

952
01:59:27,820 --> 01:59:29,880
you

953
01:59:57,820 --> 01:59:59,880
you

954
02:00:27,820 --> 02:00:29,880
you

955
02:00:57,820 --> 02:00:59,880
you

956
02:01:27,820 --> 02:01:29,880
you

957
02:01:57,820 --> 02:01:59,880
you

958
02:02:27,820 --> 02:02:29,880
you

959
02:02:57,820 --> 02:02:59,880
you

960
02:03:27,820 --> 02:03:29,880
you

961
02:03:57,820 --> 02:03:59,880
you

962
02:04:27,820 --> 02:04:45,980
Hello, nice to see that you had time to try the exercises.

963
02:04:45,980 --> 02:04:50,540
Something that was a bit puzzling, and I can totally understand if you come from other

964
02:04:50,540 --> 02:04:57,180
programming languages like Matlab or R, is this view versus copy.

965
02:04:57,180 --> 02:05:02,620
I will cover it a little bit later when I'll show you about other materials that we have

966
02:05:02,620 --> 02:05:09,540
that we will not cover it today but in practice you can think it that B is like a pointer to

967
02:05:09,540 --> 02:05:17,700
the memory allocated by A so hopefully I didn't use too much jargon in this maybe those familiar

968
02:05:17,700 --> 02:05:26,340
with C and C++ they can understand what I mean but in it is actually useful to only

969
02:05:26,340 --> 02:05:29,420
edit some elements of the same original array.

970
02:05:29,420 --> 02:05:31,700
Instead, when you need the full copy,

971
02:05:31,700 --> 02:05:34,900
there is actually a common call np.copy

972
02:05:34,900 --> 02:05:37,860
that would basically clone the array A

973
02:05:37,860 --> 02:05:41,700
into a new part of the memory to store a copy.

974
02:05:42,540 --> 02:05:45,740
But yes, we have a few minutes to wrap up everything

975
02:05:45,740 --> 02:05:49,980
and show you some future paths for you for self-learning.

976
02:05:51,660 --> 02:05:54,100
Maybe something that is important to talk about NumPy

977
02:05:54,100 --> 02:05:56,580
are the so-called universal functions.

978
02:05:56,580 --> 02:05:59,980
Fancy names to basically saying that these are functions,

979
02:05:59,980 --> 02:06:03,660
these are operations that can happen element-wise.

980
02:06:03,660 --> 02:06:07,300
And we already tested them when we were doing A plus B,

981
02:06:07,300 --> 02:06:10,020
you know, we didn't need to write a for loop

982
02:06:10,020 --> 02:06:13,620
like we would have done with standard Python lists

983
02:06:13,620 --> 02:06:16,140
because basically the function add

984
02:06:16,140 --> 02:06:17,820
was one of these universal function

985
02:06:17,820 --> 02:06:20,820
going through all the elements of the arrays.

986
02:06:20,820 --> 02:06:27,980
Another very interesting thing that maybe if you're, you know, I sometimes never think

987
02:06:27,980 --> 02:06:34,420
about this just because I'm a NumPy user without knowing, without really paying too much attention

988
02:06:34,420 --> 02:06:40,620
what's going on under the hood, but we have something called like broadcasting which becomes

989
02:06:40,620 --> 02:06:45,140
really practical when, for example, you need to sum things that are not exactly of the

990
02:06:45,140 --> 02:06:52,980
same shape so it's not just a simple element wise but numpy is clever enough for example you see

991
02:06:52,980 --> 02:07:03,220
in here that given the size of the array of b numpy understands that you want to kind of broadcast

992
02:07:03,220 --> 02:07:10,100
it so that you want that each of the row of the vector of the array a of the matrix a actually

993
02:07:10,100 --> 02:07:12,340
is summed with the matrix B.

994
02:07:14,020 --> 02:07:19,460
This is something I would say that this is by no way obvious that you will have this behavior.

995
02:07:20,260 --> 02:07:25,300
So before you feel confident in using it then I mean

996
02:07:27,380 --> 02:07:31,780
be very careful and verify that you actually get the intended behavior.

997
02:07:33,460 --> 02:07:38,100
Yeah this is maybe one good thing one positive thing about Jupyter notebooks is that

998
02:07:38,100 --> 02:07:42,380
that you can actually you know when you are building your code when you are when you are

999
02:07:42,380 --> 02:07:48,180
developing your method you can easily test that it's doing what you're expecting and

1000
02:07:48,180 --> 02:07:55,640
then maybe even write a test for what you are actually building.

1001
02:07:55,640 --> 02:08:03,160
So what else. Well we will leave exercise for you because our time is out for NumPy

1002
02:08:03,160 --> 02:08:12,120
today. In general, NumPy is under the hood on so many Python libraries, so that if your

1003
02:08:12,120 --> 02:08:17,840
needs are more into, you know, mathematics, signal processing, another thing, there are

1004
02:08:17,840 --> 02:08:24,880
lots of linear algebra functions already in NumPy, but another good library is SciPy,

1005
02:08:24,880 --> 02:08:31,080
which has all these type of functions for doing, you know, signal processing and other

1006
02:08:31,080 --> 02:08:39,160
more advanced numerical things in general for this last minutes that we have there's additional

1007
02:08:39,160 --> 02:08:45,240
exercises that if you have time of course and if you want to learn you could do them and if you

1008
02:08:45,240 --> 02:08:50,760
don't want to do them it's also interesting to just look at the solution and try to understand

1009
02:08:50,760 --> 02:08:58,520
what's going on and maybe get curious and try to run them try to run them yourself also last year

1010
02:08:58,520 --> 02:09:04,360
we cover this other lesson here that you see now where I'm here in the bottom and I click next

1011
02:09:05,960 --> 02:09:11,320
and so we have the recording from last year of this advanced NumPy for those who want to

1012
02:09:11,320 --> 02:09:17,640
understand for example like in this exercise 3 what is going on under the hood when we have a

1013
02:09:17,640 --> 02:09:25,640
view of the array A into something called B and actually here if you spend time going through this

1014
02:09:25,640 --> 02:09:31,640
lesson by yourself or watching the video from last year we are actually covering exactly this case of

1015
02:09:31,640 --> 02:09:39,000
the exercise 3 where let me find the picture yeah so you see that basically in the definition of

1016
02:09:39,000 --> 02:09:46,600
array A the memory a part of memory is allocated for A but in the moment where we take a view a

1017
02:09:46,600 --> 02:09:54,040
different view for another array B it was it's basically just a pointer to a subset of the

1018
02:09:54,040 --> 02:10:02,200
of the memory allocated by A. And this has the benefit then of being more efficient in two

1019
02:10:02,200 --> 02:10:10,520
regards so both that you're reusing actually memory so that's economic and also that you

1020
02:10:10,520 --> 02:10:19,080
don't need to in this case you don't need to make the copy. Yeah especially if you have a very big

1021
02:10:19,080 --> 02:10:26,120
matrix copy can be very very expensive even just the copy itself might take lots of seconds yeah

1022
02:10:26,120 --> 02:10:34,120
precisely so i think we cover everything and please keep on writing more questions or doubts

1023
02:10:34,120 --> 02:10:42,200
that you have in our share notes we could maybe start already the break right now and so we will

1024
02:10:42,200 --> 02:10:49,720
come back in about 10 minutes to continue with Bandas. So, thank you for listening.

1025
02:10:49,720 --> 02:10:52,800
Thank you, [name], for being here with me.

1026
02:10:52,800 --> 02:10:54,800
Yeah, thank you, [name].

1027
02:10:54,800 --> 02:10:59,200
And we will see you later. Bye.

1028
02:10:59,200 --> 02:11:00,000
Bye.

1029
02:11:12,200 --> 02:11:14,260
you

1030
02:11:42,200 --> 02:11:44,260
you

1031
02:12:12,200 --> 02:12:14,260
you

1032
02:12:42,200 --> 02:12:44,260
you

1033
02:13:12,200 --> 02:13:14,260
you

1034
02:13:42,200 --> 02:13:44,260
you

1035
02:14:12,200 --> 02:14:14,260
you

1036
02:14:42,200 --> 02:14:44,260
you

1037
02:15:12,200 --> 02:15:14,260
you

1038
02:15:42,200 --> 02:15:44,260
you

1039
02:16:12,200 --> 02:16:14,260
you

1040
02:16:42,200 --> 02:16:44,260
you

1041
02:17:12,200 --> 02:17:14,260
you

1042
02:17:42,200 --> 02:17:44,260
you

1043
02:18:12,200 --> 02:18:14,260
you

1044
02:18:42,200 --> 02:18:44,260
you

1045
02:19:12,200 --> 02:19:14,260
you

1046
02:19:42,200 --> 02:19:44,260
you

1047
02:20:12,200 --> 02:20:14,260
you

1048
02:20:42,200 --> 02:20:58,360
Wait, why is it not in gallery view?

1049
02:20:58,360 --> 02:21:01,680
Can one other instructor please join the Zoom room?

1050
02:21:01,680 --> 02:21:08,240
Because Zoom on this computer is acting weird.

1051
02:21:08,240 --> 02:21:31,360
Okay, hello. Welcome back. So, we will continue with pandas. So, yes, pandas. So, it's a Python

1052
02:21:31,360 --> 02:21:43,120
package that builds on NumPy and allows us to do many more fancy operations that are

1053
02:21:43,120 --> 02:21:55,280
basically involving tabular data. That'll involve tabular data. So we will see this

1054
02:21:55,280 --> 02:22:01,800
has lots of different built-in functions and things like that.

1055
02:22:01,800 --> 02:22:07,720
So Pandas is one of these things that, at least for me,

1056
02:22:07,720 --> 02:22:09,760
I know the basics of Pandas.

1057
02:22:09,760 --> 02:22:14,000
But for almost everything I do, I will do a web search

1058
02:22:14,000 --> 02:22:15,880
and then figure out, OK, how do I

1059
02:22:15,880 --> 02:22:24,040
do this particular thing to find the functions I need to do it?

1060
02:22:24,040 --> 02:22:26,520
And yeah, that's the same for me.

1061
02:22:26,520 --> 02:22:27,020
Yeah.

1062
02:22:27,020 --> 02:22:30,080
I'm sure there's some people that know it really well

1063
02:22:30,080 --> 02:22:32,200
and do things.

1064
02:22:32,200 --> 02:22:34,120
But yeah.

1065
02:22:34,120 --> 02:22:36,960
In fact, I wanted to add an exercise here,

1066
02:22:36,960 --> 02:22:39,120
which was specifically about doing this web

1067
02:22:39,120 --> 02:22:41,200
search to learn more.

1068
02:22:41,200 --> 02:22:42,120
So what's the point?

1069
02:22:42,120 --> 02:22:50,240
So the point is, be aware, this is the starting point

1070
02:22:50,240 --> 02:22:53,680
for this lesson.

1071
02:22:53,680 --> 02:22:55,840
So there's three exercises.

1072
02:22:55,840 --> 02:23:02,800
We do two exercises today, hopefully in about 20 minutes,

1073
02:23:02,800 --> 02:23:08,080
and then one tomorrow, where we'll continue.

1074
02:23:08,080 --> 02:23:11,800
So yes, let's get started.

1075
02:23:11,800 --> 02:23:16,840
Here you should see my screen, yes.

1076
02:23:16,840 --> 02:23:20,400
There's a lot of different getting started guides here.

1077
02:23:20,400 --> 02:23:23,280
And really, I'd say we have an overview,

1078
02:23:23,280 --> 02:23:27,000
But you're going to have to be reading these quick start

1079
02:23:27,000 --> 02:23:31,240
guides and so on things anyway.

1080
02:23:31,240 --> 02:23:34,000
Can someone add a pandas section to the notes?

1081
02:23:34,000 --> 02:23:37,960
I can't do that right now because I'm talking.

1082
02:23:37,960 --> 02:23:40,160
OK.

1083
02:23:40,160 --> 02:23:42,120
Yeah, so the pandas overview.

1084
02:23:42,120 --> 02:23:48,560
It's conventionally imported by `import pandas as pd`,

1085
02:23:48,560 --> 02:23:50,680
as a shorthand.

1086
02:23:50,680 --> 02:23:53,000
And then it provides lots of functions.

1087
02:23:53,000 --> 02:23:55,960
Like, for example, reading from CSV,

1088
02:23:55,960 --> 02:23:59,480
which I think NumPy also provides CSV reading.

1089
02:23:59,480 --> 02:24:06,440
But it actually does a lot more and provides lots of summary

1090
02:24:06,440 --> 02:24:08,800
information and things like this.

1091
02:24:08,800 --> 02:24:11,840
But now, [name] will be the one doing typing.

1092
02:24:11,840 --> 02:24:14,200
So let's switch to [name]'s screen.

1093
02:24:14,200 --> 02:24:15,600
Yeah.

1094
02:24:15,600 --> 02:24:19,600
So I guess the main difference between or in terms

1095
02:24:19,600 --> 02:24:27,120
a greeting CSV file. In NumPy, an array will always have all the data in the array will

1096
02:24:27,120 --> 02:24:31,240
be the same type. If there's one integer, it's all integers. If it's one floating-word

1097
02:24:31,240 --> 02:24:35,920
number, it's all floating-word numbers. And Pandas has different kinds of columns, so

1098
02:24:35,920 --> 02:24:44,400
it reads the column header and has a lot more information about different types of data.

1099
02:24:44,400 --> 02:24:45,400
So let's show this.

1100
02:24:45,400 --> 02:24:46,400
So we've got a...

1101
02:24:46,400 --> 02:24:48,200
I guess, yeah, first things first.

1102
02:24:48,200 --> 02:24:55,080
So I guess I'll start by importing it.

1103
02:24:55,080 --> 02:25:02,640
And we'll be going relatively fast here, so you can try to follow along, but at some point

1104
02:25:02,640 --> 02:25:05,440
we'll probably get ahead of you.

1105
02:25:05,440 --> 02:25:11,480
And then stop, watch what we're doing, and come back to it during the exercises.

1106
02:25:11,480 --> 02:25:21,800
Okay, so then there is this address in the notes, which I will mostly copy, although

1107
02:25:21,800 --> 02:25:26,320
I think I missed .csv.

1108
02:25:26,320 --> 02:25:33,440
So I'm just setting this string to a variable, and this contains a CSV file.

1109
02:25:33,440 --> 02:25:39,160
And then, again, I didn't create it, okay.

1110
02:25:39,160 --> 02:25:44,800
So this could be also a file on your computer just as well.

1111
02:25:44,800 --> 02:25:49,320
So what we're seeing here is loading the data directly

1112
02:25:49,320 --> 02:25:50,840
from the web.

1113
02:25:50,840 --> 02:25:52,200
Yeah.

1114
02:25:52,200 --> 02:25:54,720
So I will call the data frame Titanic

1115
02:25:54,720 --> 02:25:58,520
because it is about passengers on Titanic.

1116
02:25:58,520 --> 02:26:01,960
And let's just read CSV function to read it.

1117
02:26:01,960 --> 02:26:04,920
The mouse is hovering over the text.

1118
02:26:04,920 --> 02:26:05,720
OK.

1119
02:26:05,720 --> 02:26:10,920
And the URL is, I think, set here.

1120
02:26:10,920 --> 02:26:14,520
And I will also tell it to use an index column.

1121
02:26:17,480 --> 02:26:19,680
What is an index column?

1122
02:26:19,680 --> 02:26:24,120
So well, let's show the next line, the Titanic.head,

1123
02:26:24,120 --> 02:26:26,160
and we can see.

1124
02:26:26,160 --> 02:26:33,800
So every pandas array has columns and rows.

1125
02:26:33,800 --> 02:26:37,840
But notice the first row here is an index.

1126
02:26:37,840 --> 02:26:38,400
It's bold.

1127
02:26:38,400 --> 02:26:43,160
And the first column, this one's the name column here.

1128
02:26:43,160 --> 02:26:44,080
Yeah.

1129
02:26:44,080 --> 02:26:47,760
So basically, in NumPy, we'd access these rows

1130
02:26:47,760 --> 02:26:51,320
by rows 0, 1, 2, and so on.

1131
02:26:51,320 --> 02:26:55,200
In Pandas, we can also access it by these names

1132
02:26:55,200 --> 02:26:58,800
here, which we will see a little bit later.

1133
02:26:58,800 --> 02:26:59,480
Yeah, OK.

1134
02:26:59,480 --> 02:27:00,520
Let's do another one.

1135
02:27:00,520 --> 02:27:03,760
So another very useful function to start with

1136
02:27:03,760 --> 02:27:13,840
is describe with describe yes that's spelled correctly yeah okay so we see there's summary

1137
02:27:13,840 --> 02:27:31,040
statistics here so how much data actually exists and um i guess the um yeah these are the um

1138
02:27:33,760 --> 02:27:37,600
Percentile, 25%, 50%, 75%.

1139
02:27:37,600 --> 02:27:39,560
They're not that useful for passenger ID,

1140
02:27:39,560 --> 02:27:42,440
but let's say if you look at age, for example,

1141
02:27:42,440 --> 02:27:44,440
then it makes some sense.

1142
02:27:44,440 --> 02:27:45,360
Yeah.

1143
02:27:45,360 --> 02:27:47,320
So let's go on.

1144
02:27:47,320 --> 02:27:49,000
There's two more things here.

1145
02:27:49,000 --> 02:27:52,600
We will show them, but not explain what they do.

1146
02:27:52,600 --> 02:27:56,840
So these two commands show how you can

1147
02:27:56,840 --> 02:27:59,600
do some pretty fancy things.

1148
02:27:59,600 --> 02:28:05,160
So the group by means if they survived or not.

1149
02:28:05,160 --> 02:28:08,020
We separate them to two groups and then

1150
02:28:08,020 --> 02:28:10,520
take the age of those groups.

1151
02:28:10,520 --> 02:28:15,200
And then we find the average age of these people.

1152
02:28:15,200 --> 02:28:21,920
OK, so group by survived, take the age,

1153
02:28:21,920 --> 02:28:24,400
and take the mean of the age.

1154
02:28:24,400 --> 02:28:24,960
There we go.

1155
02:28:24,960 --> 02:28:30,240
OK, so we see the average ages for survived 1

1156
02:28:30,240 --> 02:28:34,120
and didn't survive 0 is pretty similar.

1157
02:28:34,120 --> 02:28:35,400
And let's do the next one.

1158
02:28:35,400 --> 02:28:38,240
So this histogram.

1159
02:28:38,240 --> 02:28:40,080
OK, that's slightly so titanic.

1160
02:28:40,080 --> 02:28:45,840
Which I think basically probably needs to be.

1161
02:28:45,840 --> 02:28:46,920
OK, yeah.

1162
02:28:46,920 --> 02:28:48,280
So age column.

1163
02:28:48,280 --> 02:28:54,480
So this is going to make a histogram of the ages.

1164
02:28:54,480 --> 02:28:58,160
And there'll be two groups, the passengers who survived

1165
02:28:58,160 --> 02:29:01,200
and didn't survive, and then some other parameters,

1166
02:29:01,200 --> 02:29:03,800
like the number of bins, the layout, and so on.

1167
02:29:03,800 --> 02:29:05,460
I wonder how important these parameters

1168
02:29:05,460 --> 02:29:06,920
are for this example.

1169
02:29:06,920 --> 02:29:08,520
I'll just copy.

1170
02:29:08,520 --> 02:29:11,040
Yeah, I would say just copy.

1171
02:29:11,040 --> 02:29:19,640
So figure size, layout, some ordering, shared x-axis.

1172
02:29:19,640 --> 02:29:21,720
Let's just go on.

1173
02:29:21,720 --> 02:29:24,920
At this point, we aren't knowing what these things mean.

1174
02:29:30,120 --> 02:29:32,760
OK, so positional argument follows keyword argument.

1175
02:29:32,760 --> 02:29:35,840
There's by equals survived there.

1176
02:29:35,840 --> 02:29:38,000
Oh, this needs to have an equal sign.

1177
02:29:38,000 --> 02:29:40,960
OK, yes, OK.

1178
02:29:40,960 --> 02:29:43,000
And we see these two figures.

1179
02:29:43,000 --> 02:29:47,000
So 0 didn't survive, and 1 did survive.

1180
02:29:47,000 --> 02:29:51,160
And this is showing the histogram of age.

1181
02:29:51,160 --> 02:29:54,640
So we're not going into the details here now,

1182
02:29:54,640 --> 02:29:56,720
because this is just a preview.

1183
02:29:56,720 --> 02:30:01,600
But now let's go to the actual details of what just happened.

1184
02:30:01,600 --> 02:30:02,600
OK.

1185
02:30:02,600 --> 02:30:06,720
So what's in the data frame?

1186
02:30:06,720 --> 02:30:10,840
Maybe start with the info function, I guess.

1187
02:30:10,840 --> 02:30:16,560
Can you go to the screen or the lesson again?

1188
02:30:16,560 --> 02:30:18,200
Yes.

1189
02:30:18,200 --> 02:30:20,480
There's a picture there.

1190
02:30:20,480 --> 02:30:24,920
Yeah, OK, yeah, so this is what a data frame looks like.

1191
02:30:24,920 --> 02:30:30,200
So we see it consists of rows and columns with column names

1192
02:30:30,200 --> 02:30:32,760
instead of just numbers at the top

1193
02:30:32,760 --> 02:30:39,720
and an index column on the left side.

1194
02:30:39,720 --> 02:30:41,960
So each of these columns themselves

1195
02:30:41,960 --> 02:30:45,320
is a pandas.series object.

1196
02:30:45,320 --> 02:30:49,480
And the data itself inside of these series objects

1197
02:30:49,480 --> 02:30:53,840
is stored as NumPy arrays.

1198
02:30:53,840 --> 02:30:54,560
OK.

1199
02:30:54,560 --> 02:30:58,840
So should we go back to the Jupyter

1200
02:30:58,840 --> 02:31:02,960
and let's run Titanic.info?

1201
02:31:02,960 --> 02:31:06,720
The head looks a lot like the picture,

1202
02:31:06,720 --> 02:31:08,720
although a little bit different.

1203
02:31:08,720 --> 02:31:09,220
Yes.

1204
02:31:09,220 --> 02:31:11,080
It's also the info function, which

1205
02:31:11,080 --> 02:31:17,240
tells you what columns exist and what types those are.

1206
02:31:17,240 --> 02:31:22,000
So these are the series that exist in this data frame.

1207
02:31:22,000 --> 02:31:25,080
And these data types are, in fact,

1208
02:31:25,080 --> 02:31:30,720
the NumPy data types there, at least in 64 and Float64.

1209
02:31:30,720 --> 02:31:32,880
So once we have this, we can do things,

1210
02:31:32,880 --> 02:31:36,000
like we can extract out single columns.

1211
02:31:36,000 --> 02:31:40,440
For example, we can do Titanic and then slice the age.

1212
02:31:40,440 --> 02:31:43,320
And then take the age.

1213
02:31:43,320 --> 02:31:47,200
And we can index it now by the name, the column name.

1214
02:31:47,200 --> 02:31:47,700
Yes.

1215
02:31:47,700 --> 02:31:49,960
Yeah, the column name, age.

1216
02:31:49,960 --> 02:31:51,800
Age is useful.

1217
02:31:51,800 --> 02:31:54,800
And we see, so notice it's pulled out

1218
02:31:54,800 --> 02:31:59,440
both the names and the ages, because this index got

1219
02:31:59,440 --> 02:32:03,560
preserved in the series itself.

1220
02:32:03,560 --> 02:32:06,000
And then we can, there's another shorthand here,

1221
02:32:06,000 --> 02:32:10,200
titanic.age with the column name.

1222
02:32:10,200 --> 02:32:13,320
So this doesn't work when age is also

1223
02:32:13,320 --> 02:32:16,560
an attribute of the data frame, but it's

1224
02:32:16,560 --> 02:32:19,560
convenient for shorthands.

1225
02:32:19,560 --> 02:32:22,000
So this is the same thing, basically?

1226
02:32:22,000 --> 02:32:23,320
Yeah.

1227
02:32:23,320 --> 02:32:24,640
OK.

1228
02:32:24,640 --> 02:32:27,560
We can list all the columns with titanic.columns.

1229
02:32:30,560 --> 02:32:31,320
OK.

1230
02:32:31,320 --> 02:32:32,720
So now it returns a list.

1231
02:32:32,720 --> 02:32:34,480
Otherwise, this is the same information

1232
02:32:34,480 --> 02:32:38,000
as in the .info function.

1233
02:32:38,000 --> 02:32:41,560
But it's a list, so you can, for example,

1234
02:32:41,560 --> 02:32:43,680
do a for loop over it.

1235
02:32:43,680 --> 02:32:45,240
Yeah.

1236
02:32:45,240 --> 02:32:48,880
I guess it doesn't contain the index.

1237
02:32:48,880 --> 02:32:54,200
So we have the name as an index, so you can also

1238
02:32:54,200 --> 02:32:56,520
take the index.

1239
02:32:56,520 --> 02:32:57,020
Yes.

1240
02:32:57,020 --> 02:32:59,360
Although this will now be a list of the names.

1241
02:32:59,360 --> 02:33:00,280
Yeah.

1242
02:33:00,280 --> 02:33:03,240
The name of the index column is name.

1243
02:33:03,240 --> 02:33:07,000
This is, in fact, a NumPy array inside of it also.

1244
02:33:07,000 --> 02:33:07,600
Yeah.

1245
02:33:07,600 --> 02:33:11,280
So we can get a single individual values

1246
02:33:11,280 --> 02:33:12,760
different ways.

1247
02:33:12,760 --> 02:33:16,320
So for example, this .loc method,

1248
02:33:16,320 --> 02:33:23,240
titanic.loc, we can give it a position by the index

1249
02:33:23,240 --> 02:33:24,920
and then column name.

1250
02:33:24,920 --> 02:33:28,560
So now I'm, so the index is the name again,

1251
02:33:28,560 --> 02:33:30,240
so I'm typing a name in.

1252
02:33:30,240 --> 02:33:32,040
And then column name is age.

1253
02:33:32,040 --> 02:33:33,800
It's easy to make a spelling mistake here,

1254
02:33:33,800 --> 02:33:37,200
so it might actually be good to, OK, key error.

1255
02:33:37,200 --> 02:33:40,600
I think lamb is capitalized.

1256
02:33:40,600 --> 02:33:41,800
Yeah.

1257
02:33:41,800 --> 02:33:42,640
OK.

1258
02:33:42,640 --> 02:33:43,140
None.

1259
02:33:43,140 --> 02:33:43,640
OK.

1260
02:33:43,640 --> 02:33:49,720
Well, that was the age is not recorded in the data frame.

1261
02:33:49,720 --> 02:33:53,200
So there is a little bit more here.

1262
02:33:53,200 --> 02:33:57,680
I think we don't have time to go into all these details.

1263
02:33:57,680 --> 02:34:03,720
But we can do things like using at.

1264
02:34:03,720 --> 02:34:11,720
we can set a value so okay let's do that yes

1265
02:34:15,800 --> 02:34:20,920
um okay well i'm not going to use the index method here so i'll just copy the name

1266
02:34:22,360 --> 02:34:28,440
yes should we set the age of age it says set age to 42

1267
02:34:33,720 --> 02:34:40,200
Well, I mean, I said it's 40 instead of 42, but that's fine.

1268
02:34:40,200 --> 02:34:44,760
We don't actually know the age.

1269
02:34:44,760 --> 02:34:51,280
So one thing that's taken me some time to get used to is you can use this loc and add

1270
02:34:51,280 --> 02:34:58,340
method to get values based on the names in the indexes.

1271
02:34:58,340 --> 02:35:01,660
But you can use the iloc and iat functions

1272
02:35:01,660 --> 02:35:06,500
to get values based on first row, second row, first column,

1273
02:35:06,500 --> 02:35:08,980
second column, and so on.

1274
02:35:08,980 --> 02:35:12,500
And these both have different uses in different cases.

1275
02:35:12,500 --> 02:35:15,340
For example, if there's a big time series,

1276
02:35:15,340 --> 02:35:22,460
then it makes sense to extract what happened on this day.

1277
02:35:22,460 --> 02:35:24,260
But if you're iterating through, maybe it

1278
02:35:24,260 --> 02:35:27,300
makes sense to get the first row, then second row,

1279
02:35:27,300 --> 02:35:34,900
and so on okay so basically it depends on if you're doing something for all the columns

1280
02:35:34,900 --> 02:35:39,780
then or splitting it in some way by numbers then just use the numbers otherwise it's more

1281
02:35:39,780 --> 02:35:50,180
readable to use the names usually yeah okay um we can do the boolean indexing just like numpy

1282
02:35:50,180 --> 02:35:57,940
raised. So for example, let's get the... So I guess I'll do it in a couple of steps.

1283
02:35:57,940 --> 02:36:04,500
So did you want to get any something other than this age thing? Let's go. So let's extract the

1284
02:36:04,500 --> 02:36:11,780
passengers that are older than age 70. So this returns a boolean thing, which is mostly false.

1285
02:36:11,780 --> 02:36:21,220
most people are not over 70 years old. But I can use that as an index for the array and just take

1286
02:36:23,060 --> 02:36:27,940
the passengers who are older than 70 years old. Yes, five of them.

1287
02:36:29,220 --> 02:36:34,020
So this is just now all passengers older than 70.

1288
02:36:34,020 --> 02:36:45,700
Okay, and this looks a lot like the NumPy syntax because it's designed around that.

1289
02:36:45,700 --> 02:36:52,340
Yeah, it's good that things work in a similar way.

1290
02:36:52,340 --> 02:36:57,140
So there's a lot more things to demonstrate here.

1291
02:36:57,140 --> 02:37:00,380
For example, we can get all the NA values.

1292
02:37:00,380 --> 02:37:03,580
We can remove the NA values.

1293
02:37:03,580 --> 02:37:07,980
we can replace the missing data with other things.

1294
02:37:07,980 --> 02:37:11,620
Which one would you like to demonstrate?

1295
02:37:11,620 --> 02:37:12,620
Maybe let's.

1296
02:37:15,660 --> 02:37:18,460
So, OK, what you would mostly need to do

1297
02:37:18,460 --> 02:37:24,780
is often you just need to drop the none values.

1298
02:37:24,780 --> 02:37:27,060
This doesn't create a new data frame.

1299
02:37:27,060 --> 02:37:30,060
This does not override the data frame.

1300
02:37:30,060 --> 02:37:32,800
It creates a new one and returns that.

1301
02:37:32,800 --> 02:37:36,600
So we don't actually change this Titanic data frame now.

1302
02:37:36,600 --> 02:37:37,840
Yeah.

1303
02:37:37,840 --> 02:37:41,080
But it's often useful to get the data frame that

1304
02:37:41,080 --> 02:37:45,200
only contains non-defined values.

1305
02:37:45,200 --> 02:37:47,000
Of course, you can also, you might

1306
02:37:47,000 --> 02:37:49,000
want to first take a set of columns

1307
02:37:49,000 --> 02:37:51,280
and then drop the values, or drop the rows

1308
02:37:51,280 --> 02:37:53,400
where those columns are not defined.

1309
02:37:53,400 --> 02:37:55,880
Because this is dropping everything

1310
02:37:55,880 --> 02:37:59,400
where even any value in any column is none.

1311
02:37:59,400 --> 02:38:00,160
This is dropping it.

1312
02:38:02,800 --> 02:38:12,000
Okay, so we are going a little bit fast here, but that's by design to give you more time

1313
02:38:12,000 --> 02:38:13,000
for exercises.

1314
02:38:13,000 --> 02:38:17,840
So again, we're just summarizing the biggest high level things.

1315
02:38:17,840 --> 02:38:26,400
Okay, the next section, so now there's exercises, but instead we're going to cover the next

1316
02:38:26,400 --> 02:38:33,760
little section, well not so little, but then have you do two exercises at once.

1317
02:38:33,760 --> 02:38:43,120
So now there's tidy data. So this is not purely panda stuff itself, but also

1318
02:38:44,400 --> 02:38:53,360
it's about how you arrange the data itself. So in tidy data the idea is that every column

1319
02:38:53,360 --> 02:38:58,560
is a variable and each variable has its own column and each observation is a row.

1320
02:39:00,000 --> 02:39:11,040
So for example down here we're making a sample thing about runners and if [name] creates that.

1321
02:39:11,760 --> 02:39:17,760
Yes let's go back to demonstrating. So I will again just copy this data in

1322
02:39:17,760 --> 02:39:25,760
But it contains three runners and some values for, I guess, run times.

1323
02:39:25,760 --> 02:39:31,760
And now runners is a data frame.

1324
02:39:31,760 --> 02:39:38,040
Okay, so distances and times for those distances run.

1325
02:39:38,040 --> 02:39:41,760
So is this tidy data?

1326
02:39:41,760 --> 02:39:44,280
No.

1327
02:39:44,280 --> 02:39:49,040
So there's multiple measurements per row here.

1328
02:39:49,040 --> 02:39:56,760
It's measuring run times for four different, possibly different runs, but at least in four

1329
02:39:56,760 --> 02:40:01,080
different places in the same run, possibly.

1330
02:40:01,080 --> 02:40:04,280
But in any case, four different measurements.

1331
02:40:04,280 --> 02:40:10,400
So basically, yes, every row contains the results from four different races.

1332
02:40:10,400 --> 02:40:11,600
So what's next?

1333
02:40:11,600 --> 02:40:14,200
this melt function.

1334
02:40:14,200 --> 02:40:18,880
OK, so maybe it's better to comment while I write it.

1335
02:40:18,880 --> 02:40:23,720
So we'll replace the runners data frame.

1336
02:40:23,720 --> 02:40:26,120
pandas.melt is the function.

1337
02:40:26,120 --> 02:40:30,640
And we put the current runners data frame in.

1338
02:40:30,640 --> 02:40:40,160
And then we have to define a set of variables that, well,

1339
02:40:40,160 --> 02:40:42,840
I mean, these are kept in the rows, in every row.

1340
02:40:42,840 --> 02:40:48,440
So this is something that identifies the runner

1341
02:40:48,440 --> 02:40:54,200
or the experiment or the subject,

1342
02:40:54,200 --> 02:40:58,440
experimental subject, something you want to keep.

1343
02:40:58,440 --> 02:41:00,000
And this is not a measure.

1344
02:41:00,000 --> 02:41:01,960
This is not something you measure.

1345
02:41:01,960 --> 02:41:05,240
This is something that identifies the measurement.

1346
02:41:05,240 --> 02:41:09,240
So the name of the runner is not something you measure.

1347
02:41:09,240 --> 02:41:17,080
it's something that identifies the measurement and then I guess value variables and those

1348
02:41:17,080 --> 02:41:29,480
are then the numbers so these are the columns that contain actual measured values

1349
02:41:32,120 --> 02:41:36,040
so these we want to split into separate rows and these we do not

1350
02:41:39,240 --> 02:41:42,120
I guess then we need a name for this new variable.

1351
02:41:45,240 --> 02:41:49,960
So we split this into multiple rows so that creates a new column.

1352
02:41:49,960 --> 02:41:51,240
We want a name for that column.

1353
02:41:51,240 --> 02:41:54,120
So what is the name for these numbers?

1354
02:41:54,120 --> 02:41:56,680
I guess distance run.

1355
02:42:03,560 --> 02:42:08,600
And what is the name for the thing that we're measuring here?

1356
02:42:08,600 --> 02:42:09,320
That's time.

1357
02:42:15,320 --> 02:42:17,640
Okay, hopefully, oh, not quite right.

1358
02:42:22,680 --> 02:42:24,120
It's not present.

1359
02:42:25,960 --> 02:42:28,040
These variables are not present in the data frame.

1360
02:42:28,600 --> 02:42:31,000
400, 800, okay, maybe they are strings.

1361
02:42:32,760 --> 02:42:33,260
Maybe.

1362
02:42:38,600 --> 02:42:50,200
Can you so I'll give you coffee from the lesson.

1363
02:42:50,200 --> 02:42:51,200
Let's see.

1364
02:42:51,200 --> 02:42:52,200
Yeah.

1365
02:42:52,200 --> 02:42:53,200
Let's see.

1366
02:42:53,200 --> 02:43:03,240
I think we should try to go well, it did work now.

1367
02:43:03,240 --> 02:43:04,240
Yeah.

1368
02:43:04,240 --> 02:43:15,880
Okay. So it was some spelling error somewhere. Okay. So what did it do? It took all of these

1369
02:43:15,880 --> 02:43:24,120
numbers and made a row for each of them. And then we have identifying information. So this

1370
02:43:24,120 --> 02:43:28,200
run a name, and this column title

1371
02:43:28,200 --> 02:43:31,200
go here as identifying information

1372
02:43:31,200 --> 02:43:32,520
for that measurement.

1373
02:43:35,240 --> 02:43:36,120
Yeah.

1374
02:43:36,120 --> 02:43:38,600
OK.

1375
02:43:38,600 --> 02:43:40,480
And this is now tidy data.

1376
02:43:40,480 --> 02:43:45,200
And the reason is that each row is only one observation.

1377
02:43:45,200 --> 02:43:50,480
An observation is the amount of time it took on a race.

1378
02:43:50,480 --> 02:43:54,280
And this lets us do things like the group by we saw before.

1379
02:43:54,280 --> 02:43:58,280
So basically, by using the other operations,

1380
02:43:58,280 --> 02:44:01,640
we can do cool stuff on this.

1381
02:44:01,640 --> 02:44:06,680
But we need to carry on now.

1382
02:44:06,680 --> 02:44:10,920
So again, this is a thing that there's a linked article

1383
02:44:10,920 --> 02:44:14,640
that you should probably read.

1384
02:44:14,640 --> 02:44:16,920
It has a lot more and really convinced me

1385
02:44:16,920 --> 02:44:20,320
why this is a good idea.

1386
02:44:20,320 --> 02:44:26,800
Okay, working with data frames. So there's a lot of other stuff we can do with them.

1387
02:44:27,360 --> 02:44:33,920
And I propose that you all can read this as well as we can say it right here.

1388
02:44:35,520 --> 02:44:41,040
Um, is there anything to comment on? Um, there's

1389
02:44:41,040 --> 02:44:47,340
is, yeah, there's an example of making a data frame that

1390
02:44:47,340 --> 02:44:54,180
has a date range index where all the index values are

1391
02:44:54,180 --> 02:44:56,100
a certain date.

1392
02:44:56,100 --> 02:45:00,540
And then ones with other things, and shows

1393
02:45:00,540 --> 02:45:06,120
how we can combine them, merge them, and so on.

1394
02:45:06,120 --> 02:45:08,760
Yeah, I propose we go to the exercises now

1395
02:45:08,760 --> 02:45:12,440
and leave the 20 minutes for them.

1396
02:45:12,440 --> 02:45:14,520
So we'll come back at 52.

1397
02:45:17,240 --> 02:45:23,240
And we can go into more details about things tomorrow

1398
02:45:24,040 --> 02:45:25,400
and after we get back.

1399
02:45:26,760 --> 02:45:27,640
Does that sound good?

1400
02:45:30,680 --> 02:45:31,720
Yeah, that sounds good.

1401
02:45:32,440 --> 02:45:33,400
Okay, great.

1402
02:45:33,400 --> 02:45:45,400
Alright, so let's go to the exercises, until 52, and see you then.

1403
02:45:45,400 --> 02:45:46,920
Okay, bye.

1404
02:46:03,400 --> 02:46:05,460
you

1405
02:46:33,400 --> 02:46:35,460
you

1406
02:47:03,400 --> 02:47:05,460
you

1407
02:47:33,400 --> 02:47:35,460
you

1408
02:48:03,400 --> 02:48:05,460
you

1409
02:48:33,400 --> 02:48:35,460
you

1410
02:49:03,400 --> 02:49:05,460
you

1411
02:49:33,400 --> 02:49:35,460
you

1412
02:50:03,400 --> 02:50:05,460
you

1413
02:50:33,400 --> 02:50:35,460
you

1414
02:51:03,400 --> 02:51:05,460
you

1415
02:51:33,400 --> 02:51:35,460
you

1416
02:52:03,400 --> 02:52:05,460
you

1417
02:52:33,400 --> 02:52:35,460
you

1418
02:53:03,400 --> 02:53:05,460
you

1419
02:53:33,400 --> 02:53:35,460
you

1420
02:54:03,400 --> 02:54:05,460
you

1421
02:54:33,400 --> 02:54:35,460
you

1422
02:55:03,400 --> 02:55:05,460
you

1423
02:55:33,400 --> 02:55:35,460
you

1424
02:56:03,400 --> 02:56:05,460
you

1425
02:56:33,400 --> 02:56:35,460
you

1426
02:57:03,400 --> 02:57:05,460
you

1427
02:57:33,400 --> 02:57:35,460
you

1428
02:58:03,400 --> 02:58:05,460
you

1429
02:58:33,400 --> 02:58:35,460
you

1430
02:59:03,400 --> 02:59:05,460
you

1431
02:59:33,400 --> 02:59:35,460
you

1432
03:00:03,400 --> 03:00:05,460
you

1433
03:00:33,400 --> 03:00:35,460
you

1434
03:01:03,400 --> 03:01:05,460
you

1435
03:01:33,400 --> 03:01:35,460
you

1436
03:02:03,400 --> 03:02:05,460
you

1437
03:02:33,400 --> 03:02:35,460
you

1438
03:03:03,400 --> 03:03:05,460
you

1439
03:03:33,400 --> 03:03:35,460
you

1440
03:04:03,400 --> 03:04:05,460
you

1441
03:04:33,400 --> 03:04:52,080
Hello, we are back.

1442
03:04:53,840 --> 03:04:58,200
We have a little bit of wrap-up for the day,

1443
03:04:58,200 --> 03:05:03,040
and we know this was a rather rough lesson,

1444
03:05:03,040 --> 03:05:07,200
So, like I tried to motivate when we started,

1445
03:05:07,200 --> 03:05:11,960
pandas is the kind of thing that even we are always going through

1446
03:05:11,960 --> 03:05:17,400
and reading about it to figure out how to do things.

1447
03:05:17,400 --> 03:05:23,360
So this is sort of an impossible lesson to teach.

1448
03:05:23,360 --> 03:05:28,280
So we can either go so slow that we don't show anything interesting,

1449
03:05:28,280 --> 03:05:32,240
or show some cool stuff,

1450
03:05:32,240 --> 03:05:35,680
But you need to go back and read to figure out how it works

1451
03:05:36,440 --> 03:05:38,440
yourself later and

1452
03:05:38,960 --> 03:05:43,440
we tried to have a little mix in here and

1453
03:05:44,560 --> 03:05:46,720
Well, it didn't work that well

1454
03:05:47,720 --> 03:05:49,720
That's um

1455
03:05:50,360 --> 03:05:57,260
Well, it's unfortunate, but we'll try to do better next time but it's sort of how it is

1456
03:05:57,260 --> 03:06:11,380
So, by the way, at the bottom of the notes here, you have a place you can vote about

1457
03:06:11,380 --> 03:06:12,780
what you thought of the lesson.

1458
03:06:12,780 --> 03:06:19,660
So use this poll to say what you thought of it, and please give us comments.

1459
03:06:19,660 --> 03:06:21,660
And we'll go look at those quickly.

1460
03:06:21,660 --> 03:06:28,380
So, any comments from the exercises or what we can do?

1461
03:06:28,380 --> 03:06:37,260
Let's take a look.

1462
03:06:37,260 --> 03:06:51,900
So this thing here, so the problem with this we see, and the solution here.

1463
03:06:51,900 --> 03:06:54,800
So the difference is these are in parentheses here.

1464
03:06:54,800 --> 03:07:01,820
So basically Python gets this order of operations wrong, where it would try to do the ampersand

1465
03:07:01,820 --> 03:07:04,660
first and then the comparison.

1466
03:07:04,660 --> 03:07:09,740
I know this has tripped me a lot, many times in the past.

1467
03:07:09,740 --> 03:07:16,020
It's so much in fact that I just, nowadays if I type a number and I also type the parenthesis

1468
03:07:16,020 --> 03:07:22,060
around both sides, just automatically, because otherwise it will usually fail.

1469
03:07:22,060 --> 03:07:22,560
Yeah.

1470
03:07:22,560 --> 03:07:23,060
Yeah.

1471
03:07:25,340 --> 03:07:25,840
OK.

1472
03:07:29,340 --> 03:07:33,180
And yeah, so there's this convention in Python

1473
03:07:33,180 --> 03:07:37,700
that when you're slicing things, the first index is included,

1474
03:07:37,700 --> 03:07:42,420
and the second one is not included.

1475
03:07:42,420 --> 03:07:47,500
And that's, well, Python or Pandas

1476
03:07:47,500 --> 03:07:49,740
follows the Python convention.

1477
03:07:49,740 --> 03:07:56,220
And you can read there the debate on which one is better or worse.

1478
03:07:58,700 --> 03:08:04,060
Well, it's an interesting question, and let's not get into that.

1479
03:08:04,060 --> 03:08:05,180
We can write by chat.

1480
03:08:06,380 --> 03:08:14,620
Are there any other questions or comments here?

1481
03:08:14,620 --> 03:08:17,100
So [name], what's your overall summary of Pandas?

1482
03:08:17,100 --> 03:08:22,220
what should someone have gotten from this lesson?

1483
03:08:23,580 --> 03:08:27,660
Well one thing is just that it exists that the

1484
03:08:27,660 --> 03:08:32,540
how the data frames work also there is a python library that's really good at

1485
03:08:32,540 --> 03:08:37,980
this sort of table like data and you can do kind of magical things

1486
03:08:37,980 --> 03:08:40,380
with it.

1487
03:08:41,660 --> 03:08:46,060
Well I guess that last part of the sentence was the second one so

1488
03:08:46,060 --> 03:08:54,620
You don't need to remember how to do this, all of these things. It's mostly you will look through,

1489
03:08:57,580 --> 03:09:02,060
do a web search for what you want to do and look through the documentation.

1490
03:09:04,060 --> 03:09:11,900
But yeah, so it is, it can do kind of similar things to what a spreadsheet can do,

1491
03:09:11,900 --> 03:09:15,420
but a lot faster and you can save it as script.

1492
03:09:18,540 --> 03:09:24,540
Maybe my summary would be if you're making things that have a bunch of numpy arrays,

1493
03:09:24,540 --> 03:09:31,500
one for each effective column, or you have these deeply recursive dictionaries of list

1494
03:09:31,500 --> 03:09:38,460
or list of dictionaries or things like that, then maybe pandas with all this extra structure,

1495
03:09:38,460 --> 03:09:44,300
Like the indexes, the names, the way you can slice different things can do it better.

1496
03:09:45,580 --> 03:09:49,020
And we'll see another example of this tomorrow.

1497
03:09:50,300 --> 03:09:54,700
But as of now, we have this feedback of the day.

1498
03:09:54,700 --> 03:10:00,380
So please, please comment here.

1499
03:10:00,380 --> 03:10:02,860
It's the only way we have to improve things.

1500
03:10:02,860 --> 03:10:16,780
So, there will be videos produced for tomorrow, hopefully.

1501
03:10:16,780 --> 03:10:22,060
If you would like to help with that, please let us know.

1502
03:10:22,060 --> 03:10:29,900
There is, yeah, and if you can do the stuff of today, then tomorrow should be okay.

1503
03:10:29,900 --> 03:10:35,580
more important to have JupyterLab or similar because we do visualization and we need to show

1504
03:10:35,580 --> 03:10:40,300
these graphics in the notebooks. And if there are any problems with the software today,

1505
03:10:41,020 --> 03:10:44,060
you should make sure you install this for tomorrow.

1506
03:10:44,060 --> 03:11:02,060
Yes, not this. Any positive feedback kinds of things.

1507
03:11:02,060 --> 03:11:09,060
So yeah, I mean, this is, if you're completely new to Python now, like, you're still using the Python syntax a little bit.

1508
03:11:09,060 --> 03:11:19,060
today will have been really hard. But don't let that discourage you, because I mean this is a

1509
03:11:19,780 --> 03:11:28,020
medium, like an intermediate kind of course. But hopefully you can stop, take a step back,

1510
03:11:28,020 --> 03:11:35,060
and watch and see what we're doing, and use this as inspiration when you're learning on your own

1511
03:11:35,060 --> 03:11:37,060
later on.

1512
03:11:43,060 --> 03:11:45,060
Any other comments?

1513
03:11:45,060 --> 03:11:47,060
A lot of this is an overview of

1514
03:11:47,060 --> 03:11:49,060
a lot of stuff

1515
03:11:49,060 --> 03:11:51,060
that

1516
03:11:51,060 --> 03:11:53,060
will probably be

1517
03:11:53,060 --> 03:11:55,060
useful at some point in the future.

1518
03:11:55,060 --> 03:11:57,060
So there is one comment that there

1519
03:11:57,060 --> 03:11:59,060
is a lot of material and that

1520
03:11:59,060 --> 03:12:01,060
can stress

1521
03:12:01,060 --> 03:12:03,060
you out.

1522
03:12:03,060 --> 03:12:12,060
But the idea is not that we cover or that you learn all of the material. It's a selection. You can go for what you're interested in.

1523
03:12:12,060 --> 03:12:20,060
And yeah, not everything will be useful immediately. You will not learn everything immediately, but you can always come back.

1524
03:12:20,060 --> 03:12:36,700
Yeah, okay, so, um, well, it's time to stop, so let's go with that.

1525
03:12:36,700 --> 03:12:45,900
See you all tomorrow, same time, a little bit early for icebreakers and initial discussion,

1526
03:12:45,900 --> 03:12:48,900
And thank you for attending.

1527
03:12:48,900 --> 03:12:49,900
Bye.

1528
03:13:15,900 --> 03:13:17,960
you

1529
03:13:45,900 --> 03:13:47,960
you

1530
03:14:15,900 --> 03:14:17,960
you

1531
03:14:45,900 --> 03:14:47,960
you

1532
03:15:15,900 --> 03:15:17,960
you

1533
03:15:45,900 --> 03:15:47,960
you

1534
03:16:15,900 --> 03:16:17,960
you

1535
03:16:45,900 --> 03:16:47,960
you

1536
03:17:15,900 --> 03:17:17,960
you

