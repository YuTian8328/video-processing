1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:32,060
you

21
00:10:00,000 --> 00:10:02,060
you

22
00:10:30,000 --> 00:10:32,060
you

23
00:11:00,000 --> 00:11:29,800
Test 1, 2, can anyone out there

24
00:11:29,800 --> 00:11:36,880
Okay, I hear an echo.

25
00:11:36,880 --> 00:11:40,480
Where is my audio?

26
00:11:40,480 --> 00:11:42,520
I think it's better now.

27
00:11:42,520 --> 00:11:43,520
Okay.

28
00:11:43,520 --> 00:11:44,520
Hi.

29
00:11:44,520 --> 00:11:49,560
So, welcome to day two.

30
00:11:49,560 --> 00:11:53,920
We see the notes here, as usual.

31
00:11:53,920 --> 00:11:59,640
So, should we talk a little bit about yesterday?

32
00:11:59,640 --> 00:12:10,360
many people were here yesterday or not? How about we add a poll? I'm writing it now.

33
00:12:17,160 --> 00:12:27,400
So yeah, you see right here. If you were here, then add an oh yes or on the no part or partly

34
00:12:27,400 --> 00:12:35,140
and let's see. Are there any other cool questions we can ask for starting off?

35
00:12:35,140 --> 00:12:48,620
Yes, today's topic is Matplotlib and mainly that's the big one and the data formats,

36
00:12:48,620 --> 00:13:13,380
Good morning, are we already streaming?

37
00:13:13,380 --> 00:13:14,380
Yes we are live.

38
00:13:14,380 --> 00:13:15,380
Hello everyone.

39
00:13:15,380 --> 00:13:16,180
Good morning, everybody.

40
00:13:21,620 --> 00:13:22,120
Yes.

41
00:13:27,780 --> 00:13:28,280
OK.

42
00:13:34,660 --> 00:13:39,940
OK, so there I added a poll about how big of data use

43
00:13:39,940 --> 00:13:42,500
was Python, which relates to several things today.

44
00:13:45,380 --> 00:13:50,780
Yeah, so any other questions and follow-ups from yesterday?

45
00:13:50,780 --> 00:13:54,180
Let's see.

46
00:13:54,180 --> 00:13:57,460
Someone asked anything special to know from Tuesday.

47
00:13:57,460 --> 00:14:05,140
So if you ask me, the Tuesday session was a pretty, like it really was covering basic

48
00:14:05,140 --> 00:14:06,840
kind of things.

49
00:14:06,840 --> 00:14:12,740
So the first lessons were about Jupiter and NumPy, which was sort of setting everyone

50
00:14:12,740 --> 00:14:15,140
at the same starting level.

51
00:14:15,140 --> 00:14:26,920
If they're new to you, it's worth reviewing them, but if you use them a little bit, it's

52
00:14:26,920 --> 00:14:28,440
probably okay.

53
00:14:28,440 --> 00:14:34,040
And also, it's okayâ€”I mean, it's always worth learning more about numpy and pandas,

54
00:14:34,040 --> 00:14:40,880
but you're probably okay for the rest of the lesson.

55
00:14:40,880 --> 00:14:48,360
The last lesson from yesterday was pandas, and we continue with pandas in a few minutes

56
00:14:48,360 --> 00:14:50,520
now.

57
00:14:50,520 --> 00:15:02,640
So for that, we really had this high-level overview, because we had to talk both quickly

58
00:15:02,640 --> 00:15:12,360
and also rather it was a bad combination of speaking quickly

59
00:15:12,360 --> 00:15:16,360
and giving a high and low level overview at the same time.

60
00:15:16,360 --> 00:15:21,440
But that's because there is so much to talk about there.

61
00:15:21,440 --> 00:15:25,720
So all we hope to give was a starting point

62
00:15:25,720 --> 00:15:29,280
and then motivating you to read more yourself.

63
00:15:29,280 --> 00:15:32,280
And if Pandas seems like the kind of thing you need,

64
00:15:32,280 --> 00:15:40,640
I'd really recommend reading these tutorials, like 10 minutes to pandas and so on.

65
00:15:40,640 --> 00:15:46,880
So today we'll basically start from scratch and do something else, so it's not that necessary

66
00:15:46,880 --> 00:15:52,000
to look through yesterday if you want to see today's thing, because it is the first thing,

67
00:15:52,000 --> 00:15:54,900
so you have four minutes.

68
00:15:54,900 --> 00:15:59,760
It's fine.

69
00:15:59,760 --> 00:16:04,440
Did anyone notice the videos are published?

70
00:16:04,440 --> 00:16:09,120
So I've slightly refined the video making system.

71
00:16:09,120 --> 00:16:17,040
So it's a little bit quicker for us now, which is good.

72
00:16:17,040 --> 00:16:19,020
There's a good question here.

73
00:16:19,020 --> 00:16:26,380
In part of the course, so this is on the course page or the lesson page, Python is strongly

74
00:16:26,380 --> 00:16:28,220
and dynamically typed.

75
00:16:28,220 --> 00:16:32,940
means roughly it's not possible to circumvent the type system. Is there any language that

76
00:16:32,940 --> 00:16:37,180
behaves the opposite? Does anyone have any answers to that?

77
00:16:40,700 --> 00:16:41,340
Well, there's

78
00:16:44,460 --> 00:16:48,460
there's plenty of ways of circumventing the type system in C and C++

79
00:16:48,460 --> 00:16:52,700
because they're so low level. So I guess they are not as strongly typed.

80
00:16:52,700 --> 00:17:02,420
Yeah, so that means, like, reinterpret the memory as a different kind of pointer or something

81
00:17:02,420 --> 00:17:03,420
like that.

82
00:17:03,420 --> 00:17:04,420
Basically, yes.

83
00:17:04,420 --> 00:17:05,420
Okay.

84
00:17:05,420 --> 00:17:12,420
I'm casting to a different subclass of a class.

85
00:17:12,420 --> 00:17:14,420
Okay, okay.

86
00:17:14,420 --> 00:17:15,420
Yeah.

87
00:17:15,420 --> 00:17:16,420
Yeah.

88
00:17:16,420 --> 00:17:28,300
Really, I don't think there's anything that's weakly and statically typed, because that,

89
00:17:28,300 --> 00:17:29,300
I don't know.

90
00:17:29,300 --> 00:17:32,580
I mean, that never makes sense.

91
00:17:32,580 --> 00:17:38,260
But there are weakly typed languages where there just are no types, like JavaScript is

92
00:17:38,260 --> 00:17:40,380
rather weakly typed.

93
00:17:40,380 --> 00:17:47,580
And then there are statically tied, where you have to declare all the types, like C

94
00:17:47,580 --> 00:17:48,580
and C++.

95
00:17:48,580 --> 00:17:49,580
Yeah.

96
00:17:49,580 --> 00:18:00,420
Yeah, that's the kind of thing that I haven't really gone that much into the theory of different

97
00:18:00,420 --> 00:18:06,020
types of programming paradigms and so on.

98
00:18:06,020 --> 00:18:12,780
Anyway, any other questions we should discuss?

99
00:18:17,900 --> 00:18:19,900
No comments from the audience.

100
00:18:29,180 --> 00:18:30,820
Yeah, I don't see anything.

101
00:18:30,820 --> 00:18:32,140
It's also one minute, too.

102
00:18:36,020 --> 00:18:41,340
How's our volume level doing?

103
00:18:41,340 --> 00:18:43,700
Should we do our standard test?

104
00:18:43,700 --> 00:18:51,180
So one, one, two, two, three, three.

105
00:18:51,180 --> 00:18:52,900
Okay.

106
00:18:52,900 --> 00:18:55,900
What do you think?

107
00:18:55,900 --> 00:19:02,300
If there's no comments on audio, I guess.

108
00:19:02,300 --> 00:19:03,300
Okay.

109
00:19:03,300 --> 00:19:04,260
Audio levels are good.

110
00:19:07,340 --> 00:19:11,500
So yeah, so the big picture of today,

111
00:19:11,500 --> 00:19:15,500
first we start with a little bit more of Pandas.

112
00:19:15,500 --> 00:19:18,980
So we'll show about time series stuff

113
00:19:18,980 --> 00:19:23,140
and an overview of something from last time.

114
00:19:23,140 --> 00:19:27,300
And then we have a big, long lesson

115
00:19:27,300 --> 00:19:32,300
on matplotlib, which is the core plotting library.

116
00:19:32,300 --> 00:19:38,860
And that's sort of the basis of all the other plotting stuff.

117
00:19:38,860 --> 00:19:44,380
And then there is a quick summary of data formats,

118
00:19:44,380 --> 00:19:48,020
and then a slightly longer description of productivity

119
00:19:48,020 --> 00:19:55,580
tools for Python, things like linters and stuff like that.

120
00:19:55,580 --> 00:19:57,380
OK, but with that being said, let's start.

121
00:19:57,380 --> 00:19:59,980
So I will switch to Yarno's screen.

122
00:20:02,300 --> 00:20:19,220
Where's all my pointers. So, there we go. Okay. So, we are continuing with pandas. So,

123
00:20:19,220 --> 00:20:27,140
I'd recommend at the first, for now, you watch us as we type. And then, when it comes time

124
00:20:27,140 --> 00:20:30,020
to exercise your work, because we're going to be typing fast.

125
00:20:30,020 --> 00:20:33,420
And I don't think you can keep up

126
00:20:33,420 --> 00:20:37,620
where this is more a demo than a type log right now.

127
00:20:37,620 --> 00:20:40,140
So with that being said, where's our starting point?

128
00:20:40,140 --> 00:20:47,780
So we first wanted to demonstrate some extra data

129
00:20:47,780 --> 00:20:53,300
frame properties, which was the merging of data frames.

130
00:20:53,300 --> 00:20:54,660
Is that correct?

131
00:20:54,660 --> 00:20:55,980
Yeah.

132
00:20:55,980 --> 00:21:03,540
OK, so a merge, if you know the concept from SQL or things

133
00:21:03,540 --> 00:21:07,020
like that, it will make sense.

134
00:21:07,020 --> 00:21:09,060
But let's show what it is visually.

135
00:21:09,060 --> 00:21:11,140
So we're using the runner examples.

136
00:21:15,540 --> 00:21:19,300
So import pandas.

137
00:21:19,300 --> 00:21:23,140
So this is from yesterday just.

138
00:21:23,140 --> 00:21:29,660
And this is the runner ranking.

139
00:21:29,660 --> 00:21:30,540
Yes.

140
00:21:30,540 --> 00:21:33,620
And if we run this, what do we see?

141
00:21:33,620 --> 00:21:35,700
It's also printed.

142
00:21:35,700 --> 00:21:40,100
So we see runners with distance and time.

143
00:21:40,100 --> 00:21:42,260
So if we scroll down a little bit

144
00:21:42,260 --> 00:21:45,220
under the working with data frames,

145
00:21:45,220 --> 00:21:50,140
we see an age data frame, which has different.

146
00:21:50,140 --> 00:21:52,580
For each runner, it has the age.

147
00:21:52,580 --> 00:21:57,140
So notice the runner column is the same among both of them.

148
00:21:57,140 --> 00:22:00,540
So we want to match up these datas and connect.

149
00:22:00,540 --> 00:22:04,140
Aljarno, can you close the sidebar?

150
00:22:04,140 --> 00:22:05,900
Yes.

151
00:22:05,900 --> 00:22:06,780
OK, there we go.

152
00:22:10,100 --> 00:22:12,180
OK, so what happens when we merge them?

153
00:22:12,180 --> 00:22:15,060
So we take the parent data frame,

154
00:22:15,060 --> 00:22:18,420
and what we want to add to it is age.

155
00:22:18,420 --> 00:22:26,100
we say we connect age to it and the runner column is the thing that matches up and if we run this

156
00:22:26,100 --> 00:22:33,460
we see uh does it return it directly yes it does okay so this returns it directly it probably

157
00:22:33,460 --> 00:22:41,700
doesn't modify the original data frames but we see now age has been connected to the runners

158
00:22:44,020 --> 00:22:44,980
everywhere it should be

159
00:22:48,420 --> 00:22:54,100
And yeah, that's that's the idea of merge. And there's all kinds of these tools that you can

160
00:22:54,100 --> 00:22:58,980
find in pandas to do almost everything you can. I mean, it's the same kind of tools you'd find in

161
00:22:58,980 --> 00:23:05,860
other things like SQL and so on. But if you ever find yourself going in manually, doing this kind

162
00:23:05,860 --> 00:23:13,540
of data processing thing, connecting tabular or tidy data, then maybe take a step back and see

163
00:23:13,540 --> 00:23:17,580
see, should we be doing it with pandas instead.

164
00:23:17,580 --> 00:23:21,580
So our next demo is about time series.

165
00:23:21,580 --> 00:23:23,420
So what does this mean?

166
00:23:23,420 --> 00:23:25,820
So a time series is something where

167
00:23:25,820 --> 00:23:31,500
there is data which occurs periodically over time.

168
00:23:31,500 --> 00:23:38,140
And this is one of the original major use cases of pandas.

169
00:23:38,140 --> 00:23:42,180
So it has pretty good support there.

170
00:23:42,180 --> 00:23:48,540
So first, we will load this CSV file

171
00:23:48,540 --> 00:23:53,860
from the web, which has information on all the Nobel

172
00:23:53,860 --> 00:23:55,660
Prize winners.

173
00:23:55,660 --> 00:23:59,860
So when we run this, we can see something.

174
00:23:59,860 --> 00:24:04,100
And we see there's, well, like we expect, first name, names,

175
00:24:04,100 --> 00:24:07,860
born, died, born, country, all these kinds of things.

176
00:24:07,860 --> 00:24:12,860
So the thing is that these born and died columns,

177
00:24:13,740 --> 00:24:15,180
it looks like dates to us,

178
00:24:15,180 --> 00:24:17,940
but the computer doesn't interpret them as dates.

179
00:24:17,940 --> 00:24:22,940
So we can tell pandas this should be a date time column.

180
00:24:23,220 --> 00:24:25,880
So there's this next little bit here we can copy.

181
00:24:26,980 --> 00:24:28,060
There we go.

182
00:24:28,060 --> 00:24:33,060
And if we run this and then do a head of the Nobel Prize,

183
00:24:33,060 --> 00:24:42,420
Nobel Prize, again. So it looks pretty similar. But if we do an info now, nobel.info.

184
00:24:45,940 --> 00:24:53,860
So notice that born, died, and year, they're all now DateTime64 objects. Which means,

185
00:24:53,860 --> 00:25:00,740
so before they were object like the other ones. So that means Pandas knows that these are actually

186
00:25:00,740 --> 00:25:04,580
DateTime objects. And under the hood, these are actually NumPy types.

187
00:25:05,140 --> 00:25:11,380
So we can do some extra things now. So for example, if we do for each of these DateTime

188
00:25:11,380 --> 00:25:18,180
columns, there's a .dt attribute, which means interpret this as a Python DateTime.

189
00:25:18,180 --> 00:25:24,340
And we can do things like day. Let's see. And it tells us, oh,

190
00:25:24,340 --> 00:25:25,380
It's the day of the month.

191
00:25:25,380 --> 00:25:27,460
It's the integer of the day out of there.

192
00:25:27,460 --> 00:25:28,340
We can do year.

193
00:25:33,620 --> 00:25:35,700
Yeah, that looks OK.

194
00:25:35,700 --> 00:25:38,820
And even things like weekday, which

195
00:25:38,820 --> 00:25:44,260
this comes from the Python date time object.

196
00:25:44,260 --> 00:25:47,620
And I guess that will also define what it actually

197
00:25:47,620 --> 00:25:48,660
means in there.

198
00:25:48,660 --> 00:25:56,340
So it's like, it's Sunday, Monday, Tuesday, and so on.

199
00:25:56,340 --> 00:25:57,340
Yeah.

200
00:25:57,340 --> 00:25:59,700
But represented as a number.

201
00:25:59,700 --> 00:26:00,700
Yeah.

202
00:26:00,700 --> 00:26:04,460
So since these are date times, we can do things like arithmetic on them.

203
00:26:04,460 --> 00:26:09,700
So the next thing down here is how we can subtract them.

204
00:26:09,700 --> 00:26:17,220
So we're subtracting the born and died years, converting it to days, dividing that by 365

205
00:26:17,220 --> 00:26:22,860
to make years, and then rounding it by one.

206
00:26:22,860 --> 00:26:25,780
So I guess we want to run nopal.head or something

207
00:26:25,780 --> 00:26:26,660
like that.

208
00:26:26,660 --> 00:26:29,540
OK, yeah.

209
00:26:29,540 --> 00:26:31,540
Because this just added a lifespan column.

210
00:26:34,660 --> 00:26:37,060
And somewhere there, there's probably lifespan.

211
00:26:37,060 --> 00:26:38,620
It's the last one.

212
00:26:38,620 --> 00:26:43,500
That seems pretty reasonable looking.

213
00:26:43,500 --> 00:26:45,940
So what do we do with this lifespan now?

214
00:26:45,940 --> 00:26:48,340
So we have an integer lifespan.

215
00:26:48,340 --> 00:26:53,020
So we can do things like plot, like make plots out of it.

216
00:26:53,020 --> 00:26:55,420
So for example, let's make this histogram.

217
00:27:01,140 --> 00:27:06,940
So column lifespan, we specify some bin size and so on.

218
00:27:06,940 --> 00:27:12,620
And OK, yeah, looks like reasonable ages

219
00:27:12,620 --> 00:27:19,500
for relatively well-off people from the last century.

220
00:27:21,540 --> 00:27:25,140
Next off, let's do something else.

221
00:27:25,140 --> 00:27:27,260
Since we have a column that

222
00:27:27,260 --> 00:27:30,180
specifies what category or price they've got,

223
00:27:30,180 --> 00:27:33,340
there's all kinds of things built in like

224
00:27:33,340 --> 00:27:40,540
plotting the lifespan split up by category.

225
00:27:42,620 --> 00:27:46,620
So how does this look?

226
00:27:46,620 --> 00:27:53,620
Yeah, I mean, seems pretty reasonable.

227
00:27:53,620 --> 00:28:00,180
Yeah, the statistics are not that great, so I don't think you can actually draw inferences,

228
00:28:00,180 --> 00:28:05,620
but you see some interesting data.

229
00:28:05,620 --> 00:28:11,620
Okay, so we're about to go to exercises here, these exercises three.

230
00:28:11,620 --> 00:28:16,380
And what have we learned then?

231
00:28:16,380 --> 00:28:22,020
So basically, by using Pandas the way it's made, by converting things to the right data

232
00:28:22,020 --> 00:28:27,940
types and aligning all the columns and making them tidy, there's all these different powerful

233
00:28:27,940 --> 00:28:36,660
things we can take and use, which let us do things very quickly.

234
00:28:36,660 --> 00:28:40,420
But remember what I said back at the beginning.

235
00:28:40,420 --> 00:28:47,640
So almost every time I do something medium level in Pandas, I do a web search to figure

236
00:28:47,640 --> 00:28:49,380
out how I do it.

237
00:28:49,380 --> 00:28:51,780
Because I can't keep it all in my mind.

238
00:28:51,780 --> 00:28:55,660
I know the basics like slicing stuff and so on.

239
00:28:55,660 --> 00:28:58,420
So just keep that in mind.

240
00:28:58,420 --> 00:29:04,540
If it seems hard, just take the time, read about it, and the more you use it, the better

241
00:29:04,540 --> 00:29:17,660
you'll get at it. Okay. What do you think? Should we go straight there?

242
00:29:17,660 --> 00:29:23,100
Yeah. Let's just go to â€‘â€‘ I mean, I don't have anything special to add. It's the

243
00:29:23,100 --> 00:29:29,140
same for me. I'm always checking how to do things in pandas rather than remembering.

244
00:29:29,140 --> 00:29:34,300
And this goes for basically any library in Python. Usually you don't remember how to

245
00:29:34,300 --> 00:29:37,900
do any complicated operations, you check.

246
00:29:37,900 --> 00:29:44,620
There's so many things you can do with these libraries.

247
00:29:44,620 --> 00:29:46,780
OK, yeah.

248
00:29:46,780 --> 00:29:48,440
There's a good question coming up.

249
00:29:48,440 --> 00:29:50,740
Can we say something about the difference between pandas

250
00:29:50,740 --> 00:29:52,380
and R's tidyverse?

251
00:29:52,380 --> 00:29:58,860
So Jarno, do you know much about R's tidyverse?

252
00:29:58,860 --> 00:30:01,220
Not that much.

253
00:30:01,220 --> 00:30:03,660
I mean, it's a few more.

254
00:30:03,660 --> 00:30:09,180
I propose we go to the exercises. Maybe we can have someone comment a little bit more after the exercises.

255
00:30:09,180 --> 00:30:17,100
So, yeah. Okay, let's go. So how long were the exercises supposed to be? 20 minutes or 15 minutes?

256
00:30:17,100 --> 00:30:29,740
15 minutes. Okay. 25, and then we come back. Okay, I switch to the notes, and see you soon. Bye.

257
00:30:33,660 --> 00:30:35,720
you

258
00:31:03,660 --> 00:31:05,720
you

259
00:31:33,660 --> 00:31:35,720
you

260
00:32:03,660 --> 00:32:05,720
you

261
00:32:33,660 --> 00:32:35,720
you

262
00:33:03,660 --> 00:33:05,720
you

263
00:33:33,660 --> 00:33:35,720
you

264
00:34:03,660 --> 00:34:05,720
you

265
00:34:33,660 --> 00:34:35,720
you

266
00:35:03,660 --> 00:35:05,720
you

267
00:35:33,660 --> 00:35:35,720
you

268
00:36:03,660 --> 00:36:05,720
you

269
00:36:33,660 --> 00:36:35,720
you

270
00:37:03,660 --> 00:37:05,720
you

271
00:37:33,660 --> 00:37:35,720
you

272
00:38:03,660 --> 00:38:05,720
you

273
00:38:33,660 --> 00:38:35,720
you

274
00:39:03,660 --> 00:39:05,720
you

275
00:39:33,660 --> 00:39:35,720
you

276
00:40:03,660 --> 00:40:05,720
you

277
00:40:33,660 --> 00:40:35,720
you

278
00:41:03,660 --> 00:41:05,720
you

279
00:41:33,660 --> 00:41:35,720
you

280
00:42:03,660 --> 00:42:05,720
you

281
00:42:33,660 --> 00:42:35,720
you

282
00:43:03,660 --> 00:43:05,720
you

283
00:43:33,660 --> 00:43:35,720
you

284
00:44:03,660 --> 00:44:05,720
you

285
00:44:33,660 --> 00:44:47,260
Hello, we're back.

286
00:44:47,260 --> 00:44:55,900
So yes, if we look here, we see some good questions in the notes.

287
00:44:55,900 --> 00:45:01,900
There's this one about the difference between pandas and R's tidyverse.

288
00:45:01,900 --> 00:45:09,140
When us instructors talking, we thought a good metaphor is that pandas is like what

289
00:45:09,140 --> 00:45:19,600
R does itself, and tidyverse is a collection of many things around that, like a consistent

290
00:45:19,600 --> 00:45:27,440
ecosystem of stuff that works together, and that's sort of like SciPy in Python.

291
00:45:27,440 --> 00:45:34,480
But really, the philosophy is very similar of a bunch of stuff

292
00:45:34,480 --> 00:45:36,800
consistently trying to work together.

293
00:45:39,600 --> 00:45:41,720
There's some compatibility between them,

294
00:45:41,720 --> 00:45:45,480
like in the data formats, which we might talk

295
00:45:45,480 --> 00:45:48,760
about a little bit later today.

296
00:45:57,440 --> 00:46:05,080
Okay. There is various.

297
00:46:05,080 --> 00:46:13,440
So one thing maybe to raise is because there are these two functions for accessing columns

298
00:46:13,440 --> 00:46:22,120
and rows, lock and add, which we did mention yesterday really quickly, but lock gets you

299
00:46:22,120 --> 00:46:27,240
data but it doesn't allow you to set data and at allows you to set the data so that

300
00:46:31,080 --> 00:46:38,440
so if you try to say database.log and then equals something it will give you an error

301
00:46:39,640 --> 00:46:44,200
and then you should I guess the error message doesn't tell you to use at

302
00:46:44,200 --> 00:46:50,440
so you need to remember to use at just a little bit you know annoying it's something you need

303
00:46:50,440 --> 00:47:02,340
need to remember yeah okay so there is a little bit more in pandas down at the

304
00:47:02,340 --> 00:47:09,120
bottom beyond the basics it's probably not worth us trying to go into the

305
00:47:09,120 --> 00:47:17,020
details here but basically the idea is you can do a whole lot here there's

306
00:47:17,020 --> 00:47:21,020
Sometimes depending on what you want, you can either get more power, or you can get

307
00:47:21,020 --> 00:47:31,580
more optimized, like faster, and so on.

308
00:47:31,580 --> 00:47:36,940
And yeah, maybe that's all we've got.

309
00:47:36,940 --> 00:47:43,340
And remember, if this seems remotely useful to you, read the 10 minute introductions to

310
00:47:43,340 --> 00:47:49,820
pandas and get this perspective.

311
00:47:49,820 --> 00:47:55,980
Um, yes, okay. Should we call it good and go to

312
00:47:55,980 --> 00:47:58,860
the next part then?

313
00:48:01,260 --> 00:48:05,020
Yeah, let's move on.

314
00:48:05,580 --> 00:48:09,420
Okay, so here we've got our other instructors.

315
00:48:09,420 --> 00:48:16,940
There is [name] and [Name].

316
00:48:16,940 --> 00:48:23,580
And I guess Jarno and I will head out for a bit.

317
00:48:23,580 --> 00:48:24,900
See you.

318
00:48:24,900 --> 00:48:25,540
Thanks a lot.

319
00:48:25,540 --> 00:48:26,540
Bye.

320
00:48:26,540 --> 00:48:28,180
Thanks a lot.

321
00:48:28,180 --> 00:48:29,420
And good morning, everybody.

322
00:48:29,420 --> 00:48:31,540
Maybe we should, what I'm unsure about

323
00:48:31,540 --> 00:48:36,100
is whether my microphone volume level is all right.

324
00:48:36,100 --> 00:48:40,860
but so give us feedback somewhere on one of these chats.

325
00:48:41,900 --> 00:48:43,020
But let's start with an introduction.

326
00:48:43,020 --> 00:48:44,220
So my name is [name].

327
00:48:44,220 --> 00:48:47,340
I'm super excited that I will teach

328
00:48:47,340 --> 00:48:49,300
data visualization here with [Name].

329
00:48:49,300 --> 00:48:52,540
We will talk about data visualization and Map.lib,

330
00:48:52,540 --> 00:48:54,420
two topics I really like to talk about.

331
00:48:54,420 --> 00:48:57,380
I work in Norway, in Tromso.

332
00:48:58,300 --> 00:49:00,100
I do research software engineering

333
00:49:00,100 --> 00:49:03,680
and I like to help researchers with improving their code.

334
00:49:04,560 --> 00:49:08,320
And I like to teach Python and different things. And with me is [Name].

335
00:49:09,360 --> 00:49:14,800
Yeah, good morning, everyone. My name is [Name]. I work at the PDC Center for

336
00:49:14,800 --> 00:49:21,920
High Performance Computing in Stockholm. But right now I'm sitting here from Uppsala.

337
00:49:24,480 --> 00:49:28,720
And I realized that I should take the screen and arrange it. Let me do that.

338
00:49:28,720 --> 00:49:33,720
Just a sec, he, no, that's not right.

339
00:49:35,560 --> 00:49:37,100
Almost double range.

340
00:49:43,560 --> 00:49:45,400
And while I opened the sharing window,

341
00:49:45,400 --> 00:49:47,220
I will close my physical window.

342
00:49:49,080 --> 00:49:50,480
All right.

343
00:49:50,480 --> 00:49:51,320
Good.

344
00:49:53,680 --> 00:49:54,520
Good.

345
00:49:54,520 --> 00:49:57,360
We will talk about data visualization.

346
00:49:58,720 --> 00:50:03,720
And let me first tell you how the best way to participate.

347
00:50:05,720 --> 00:50:06,880
So what to expect.

348
00:50:07,920 --> 00:50:12,000
It's good if you have your JupyterLab open,

349
00:50:12,000 --> 00:50:13,480
and I understand you have that already

350
00:50:13,480 --> 00:50:15,000
if you were following the Pandas episode,

351
00:50:15,000 --> 00:50:16,900
but if you joined later,

352
00:50:16,900 --> 00:50:19,280
it's a good moment to open up your JupyterLab.

353
00:50:19,280 --> 00:50:20,120
We will be using it.

354
00:50:20,120 --> 00:50:23,940
So we will be doing data visualization inside Jupyter.

355
00:50:23,940 --> 00:50:26,600
And we will also explain why that is such a good fit.

356
00:50:26,600 --> 00:50:31,600
And we also, you can open up this episode,

357
00:50:35,100 --> 00:50:36,680
the data visualization with WebHotLib,

358
00:50:36,680 --> 00:50:40,400
which is also linked in our collaborative notes.

359
00:50:40,400 --> 00:50:42,880
And [Name] and me, we will look at these notes.

360
00:50:43,780 --> 00:50:46,840
So that's a good place to ask us questions.

361
00:50:46,840 --> 00:50:50,300
And in a different window on my screen, I have them open,

362
00:50:50,300 --> 00:50:53,160
and we will try to react to questions live.

363
00:50:53,160 --> 00:50:54,960
So please keep the questions coming.

364
00:50:55,920 --> 00:50:59,000
We plan to do a bit of introduction

365
00:50:59,000 --> 00:51:00,800
for the first 15 minutes.

366
00:51:01,800 --> 00:51:04,220
We will then do an exercise block.

367
00:51:04,220 --> 00:51:08,280
So you will get 20 minutes to try this on your own.

368
00:51:08,280 --> 00:51:09,520
We will then do a break.

369
00:51:11,800 --> 00:51:16,400
And after the break, we will do something,

370
00:51:16,400 --> 00:51:21,400
we will talk about how to make plots even prettier.

371
00:51:21,920 --> 00:51:24,120
And then we will have another exercise block.

372
00:51:24,960 --> 00:51:34,840
And now the question is, should you, should you, as we, as we show you how this works

373
00:51:34,840 --> 00:51:39,360
in a notebook, you can, you can either try that with us.

374
00:51:39,360 --> 00:51:43,180
So if I add something to the notebook, you can do it as well.

375
00:51:43,180 --> 00:51:48,800
If that is cognitively a bit too much to listen and also go into a different window and type

376
00:51:48,800 --> 00:51:55,240
something it's also totally fine to just watch what we do and you will have enough time in

377
00:51:55,240 --> 00:52:09,520
the exercise box to try it yourself good so let's first motivate why we do this and why

378
00:52:09,520 --> 00:52:15,800
we chose matplotlib and why we do that in a jupyter notebook let me just arrange the

379
00:52:15,800 --> 00:52:18,920
to Windows here on my side so that I can see your questions.

380
00:52:20,600 --> 00:52:22,280
Let me also zoom in here a bit.

381
00:52:25,760 --> 00:52:27,460
Data visualization with Matplotlib.

382
00:52:28,760 --> 00:52:30,880
So our goal is not becoming experts

383
00:52:30,880 --> 00:52:33,660
and knowing everything that can be done with Matplotlib,

384
00:52:33,660 --> 00:52:36,440
but we want to give you a really good overview

385
00:52:36,440 --> 00:52:40,440
of how to find help, how do we use it,

386
00:52:42,760 --> 00:52:45,560
and what are good starting points,

387
00:52:45,560 --> 00:52:48,960
and how does it connect to the previous episodes

388
00:52:48,960 --> 00:52:50,320
like pandas?

389
00:52:50,320 --> 00:52:51,320
So that's our goal.

390
00:52:52,800 --> 00:52:56,320
In total, we will spend one and a half hours on this topic.

391
00:53:00,280 --> 00:53:02,920
So not only being able to start,

392
00:53:02,920 --> 00:53:06,520
we also want to show you how can you tweak,

393
00:53:06,520 --> 00:53:09,960
how can you improve plots without remembering

394
00:53:09,960 --> 00:53:11,320
all the options and the commands

395
00:53:11,320 --> 00:53:13,320
because we don't remember them either.

396
00:53:13,320 --> 00:53:21,200
The application interface of Matplotlib is, is really big.

397
00:53:21,200 --> 00:53:28,600
And it's also so that, so Radaman, is Matplotlib the only Python packet for visualization or

398
00:53:28,600 --> 00:53:29,600
are there more?

399
00:53:29,600 --> 00:53:30,600
No.

400
00:53:30,600 --> 00:53:31,600
Opportunities?

401
00:53:31,600 --> 00:53:34,360
So there are many.

402
00:53:34,360 --> 00:53:38,160
Here are the ones that we know, that we know.

403
00:53:38,160 --> 00:53:41,800
So there are probably even more.

404
00:53:41,800 --> 00:53:48,080
I have tested most of them and I use them in different contexts.

405
00:53:48,080 --> 00:53:49,080
So there is Mapplotlib.

406
00:53:49,080 --> 00:53:51,640
This is the one that we will show you.

407
00:53:51,640 --> 00:53:59,840
There is also, and it is probably the most popular one, but there is Seaborn, which builds

408
00:53:59,840 --> 00:54:00,920
on top of Mapplotlib.

409
00:54:00,920 --> 00:54:08,240
There is Vega out there, Plotly, ggplot, and then there are different libraries for more

410
00:54:08,240 --> 00:54:10,800
special use cases.

411
00:54:10,800 --> 00:54:18,140
I would consider the top four here or the top five really general.

412
00:54:18,140 --> 00:54:24,060
So there are many libraries and also Python is not the only language that can do plotting.

413
00:54:24,060 --> 00:54:28,220
So why do, why do we do matplotlib?

414
00:54:28,220 --> 00:54:34,620
So I would say one, one very, very good thing with matplotlib is that, I mean, as Python

415
00:54:34,620 --> 00:54:39,140
is a completely free ecosystem, it is transferable.

416
00:54:39,140 --> 00:54:42,460
So if you write the plotting scripts in Map.lib,

417
00:54:42,460 --> 00:54:44,220
you can share them with your colleagues

418
00:54:44,220 --> 00:54:47,020
and also with the community at large.

419
00:54:48,060 --> 00:54:50,460
This can be done a little bit in contrast

420
00:54:50,460 --> 00:54:53,100
with some commercial packages for plotting

421
00:54:53,100 --> 00:54:54,860
where you might have a lock-in effect

422
00:54:54,860 --> 00:54:57,340
that you prepare your scripting and then you share it

423
00:54:57,340 --> 00:55:01,660
and others cannot, perhaps they can read the script file,

424
00:55:01,660 --> 00:55:03,180
but they cannot make use of it

425
00:55:03,180 --> 00:55:04,820
because they do not have the program.

426
00:55:04,820 --> 00:55:05,660
Yeah.

427
00:55:07,060 --> 00:55:09,740
And it may even be the same person or you

428
00:55:09,740 --> 00:55:11,020
in a different job in future.

429
00:55:11,020 --> 00:55:14,040
And so the fact that it is free,

430
00:55:14,040 --> 00:55:16,620
that both Python is free and open source

431
00:55:16,620 --> 00:55:18,460
and that MapleClip is free and open source

432
00:55:18,460 --> 00:55:20,380
is really important.

433
00:55:20,380 --> 00:55:22,780
And it's really important for reusability

434
00:55:22,780 --> 00:55:24,780
and reproducibility.

435
00:55:24,780 --> 00:55:29,780
And I like to, so when I talk about data visualization,

436
00:55:31,580 --> 00:55:33,020
I like to start with this quote,

437
00:55:33,020 --> 00:55:34,700
which I took from this fantastic book

438
00:55:34,700 --> 00:55:37,740
by Klaus Wilke, Fundamentals of Data Visualization,

439
00:55:37,740 --> 00:55:40,100
which you can browse, the book is online.

440
00:55:41,300 --> 00:55:42,420
And it is this quote here,

441
00:55:42,420 --> 00:55:45,660
that one thing I have learned over the years

442
00:55:45,660 --> 00:55:47,360
is that automation is our friend.

443
00:55:48,340 --> 00:55:50,500
I think figures should be auto-generated

444
00:55:50,500 --> 00:55:52,660
as part of a data analysis pipeline,

445
00:55:53,580 --> 00:55:55,140
and they should come out of the pipeline

446
00:55:55,140 --> 00:55:58,500
ready to be sent to the printer with,

447
00:55:58,500 --> 00:56:02,300
and here I paraphrase, with minimal post-processing needed.

448
00:56:02,300 --> 00:56:07,300
And this is because when we generate plots for posters

449
00:56:07,460 --> 00:56:12,300
or publications or theses, at least in my experience,

450
00:56:12,300 --> 00:56:14,520
I never do it only once.

451
00:56:14,520 --> 00:56:16,060
I do it at least twice.

452
00:56:16,060 --> 00:56:18,620
I do it once and then I do it again

453
00:56:18,620 --> 00:56:23,100
one day before the deadline because something changed.

454
00:56:23,100 --> 00:56:27,340
I want to modify the color or I get new data

455
00:56:27,340 --> 00:56:30,040
or I realized that there was a tiny mistake

456
00:56:30,040 --> 00:56:32,840
and I need to change the figure.

457
00:56:32,840 --> 00:56:36,140
And if this is not automated, it's hard.

458
00:56:38,800 --> 00:56:41,200
Might need different versions of your figures.

459
00:56:41,200 --> 00:56:45,400
So the precise size and shape of a figure

460
00:56:45,400 --> 00:56:48,240
that you have in a manuscript might be different

461
00:56:48,240 --> 00:56:50,640
from what you then need to go on a poster

462
00:56:50,640 --> 00:56:53,640
or on slides for presentation.

463
00:56:53,640 --> 00:56:55,160
Then if you have that in script form,

464
00:56:55,160 --> 00:56:58,000
you can then tune to the appropriate format

465
00:56:58,000 --> 00:56:59,940
and then reuse your work.

466
00:57:00,040 --> 00:57:03,480
Yeah. Or new data comes in and you want to update the figure.

467
00:57:03,480 --> 00:57:06,760
And we will see that if we use tools like Matplotlib

468
00:57:07,640 --> 00:57:14,040
in combination with tools like Jupyter Notebook, this becomes a really nice combination.

469
00:57:17,560 --> 00:57:25,400
So we will now focus on Matplotlib, but you can browse, of course, all the other ones as well.

470
00:57:25,400 --> 00:57:36,400
Well, at the end of the session, we might also have a look at one of the other libraries.

471
00:57:36,400 --> 00:57:40,820
Why did we start with Matlab? We motivated a little bit. It's also, so it is the most

472
00:57:40,820 --> 00:57:49,620
popular library. It is, if you come from Matlab, it will feel familiar because it, it takes

473
00:57:49,620 --> 00:57:54,420
a lot of inspiration from how plotting is in MATLAB.

474
00:57:54,420 --> 00:58:00,220
Even if you choose to not use Matplotlib, maybe you prefer Seaborn.

475
00:58:00,220 --> 00:58:02,420
Many of these libraries build on top of Matplotlib.

476
00:58:02,420 --> 00:58:07,300
And then if you want to tweak it, improve it, it helps to have an understanding of Matplotlib

477
00:58:07,300 --> 00:58:13,940
to be able to improve your plots.

478
00:58:13,940 --> 00:58:22,980
But it is relatively low level, low level in terms of we can really modify everything.

479
00:58:22,980 --> 00:58:31,260
So in terms of abstraction, it doesn't provide statistical functions.

480
00:58:31,260 --> 00:58:34,980
Some of the some of the other libraries do.

481
00:58:34,980 --> 00:58:40,220
But the advantage of my book is that you can adjust everything, you can really make things

482
00:58:40,220 --> 00:58:42,260
publication ready.

483
00:58:42,260 --> 00:58:43,960
and can be configured and modified.

484
00:58:46,060 --> 00:58:47,640
And speaking of statistics,

485
00:58:47,640 --> 00:58:49,460
which is not containing matplotlib,

486
00:58:49,460 --> 00:58:54,140
I mean, you can naturally combine the matplotlib scripting

487
00:58:54,140 --> 00:58:56,940
that you do with other Python packages,

488
00:58:56,940 --> 00:59:01,500
such as numpy, scipy, and then mostly pandas

489
00:59:01,500 --> 00:59:03,540
that we have been talking about earlier.

490
00:59:06,500 --> 00:59:09,420
And I'm having just a quick look on the questions.

491
00:59:09,420 --> 00:59:13,020
Thanks for coming, raising them.

492
00:59:13,020 --> 00:59:14,060
For instance, question nine,

493
00:59:14,060 --> 00:59:19,060
when should I use X and when should I use PLT?

494
00:59:19,060 --> 00:59:20,700
This is something that confused me a lot

495
00:59:20,700 --> 00:59:24,320
when learning and using maplotlib.

496
00:59:24,320 --> 00:59:25,460
And we will comment on that.

497
00:59:25,460 --> 00:59:26,700
So we will clarify that.

498
00:59:28,300 --> 00:59:30,860
This is something I realized maybe 10 years into using it,

499
00:59:30,860 --> 00:59:32,980
that there were these different interfaces.

500
00:59:32,980 --> 00:59:34,620
So we will comment on it.

501
00:59:34,620 --> 00:59:36,580
Also, another really good question is,

502
00:59:37,460 --> 00:59:42,460
how is matplotlib built on top, built using,

503
00:59:44,860 --> 00:59:46,860
so how does it connect to pandas?

504
00:59:46,860 --> 00:59:50,220
And also this is something we will discuss.

505
00:59:50,220 --> 00:59:55,220
Some of the plotting libraries interface with pandas

506
00:59:57,660 --> 01:00:00,740
in a more nice way or less,

507
01:00:00,740 --> 01:00:02,700
but also with matplotlib it is possible

508
01:00:02,700 --> 01:00:05,580
to use pandas data frames.

509
01:00:05,580 --> 01:00:06,820
we will come back to that.

510
01:00:08,940 --> 01:00:11,060
But I think we are ready to open up the notebook

511
01:00:11,060 --> 01:00:14,380
and start creating our first plot.

512
01:00:14,380 --> 01:00:18,700
At this moment, you can either do it as well

513
01:00:18,700 --> 01:00:19,820
if you have enough screen space

514
01:00:19,820 --> 01:00:22,940
and enough cognitive management,

515
01:00:22,940 --> 01:00:24,540
but you can also watch what we do.

516
01:00:24,540 --> 01:00:26,700
You will have the chance to test it out

517
01:00:26,700 --> 01:00:28,060
in the exercise block.

518
01:00:29,380 --> 01:00:31,260
I will open up a new notebook.

519
01:00:31,260 --> 01:00:33,300
So let's start with a new notebook.

520
01:00:33,300 --> 01:00:35,300
Let's not continue from one from before.

521
01:00:35,580 --> 01:00:42,980
I will open up a new one and also good first reflex is to rename it.

522
01:00:42,980 --> 01:00:47,580
I don't want to have my notebooks untitled, untitled 1, untitled 2.

523
01:00:47,580 --> 01:00:48,700
I want to give it a good name.

524
01:00:48,700 --> 01:00:49,860
I will rename it.

525
01:00:49,860 --> 01:00:51,140
Right click, rename notebook.

526
01:00:51,140 --> 01:00:57,620
Let's call it plotting.

527
01:00:57,620 --> 01:01:00,860
And back to the material.

528
01:01:00,860 --> 01:01:05,860
I will copy paste the code here from this block.

529
01:01:06,100 --> 01:01:07,220
I will run it in a notebook,

530
01:01:07,220 --> 01:01:09,520
but let's also explain then what is happening.

531
01:01:11,020 --> 01:01:11,860
Let me copy.

532
01:01:17,220 --> 01:01:18,220
So I copied the whole block.

533
01:01:18,220 --> 01:01:20,020
Let's see whether this works at all.

534
01:01:23,220 --> 01:01:26,420
Yeah, you're in the Python for SciComp

535
01:01:26,420 --> 01:01:28,460
Python environment, I guess.

536
01:01:28,460 --> 01:01:29,300
Yes.

537
01:01:30,860 --> 01:01:39,340
or anaconda environment yes yes so at this moment all we import is a library called matplotlib

538
01:01:41,660 --> 01:01:46,780
which is part of the python for scicomp it is also part of an anaconda base environment

539
01:01:49,100 --> 01:01:54,060
so if you get here an error that matplotlib not found then you are probably in a different

540
01:01:54,060 --> 01:02:04,860
environment. And I ran this code, I got a first plot, which shows some dots. I have

541
01:02:04,860 --> 01:02:12,500
an x axis, I have a y axis and a title, they are not very concrete yet. And now let's inspect

542
01:02:12,500 --> 01:02:18,740
the corresponding code. What did what did we do, we imported the functionality. I am

543
01:02:18,740 --> 01:02:27,220
I defined two lists of numbers x values y values

544
01:02:27,220 --> 01:02:34,420
and these values take they are part of the so-called arms come squatted which is a really

545
01:02:34,420 --> 01:02:37,940
important data set

546
01:02:37,940 --> 01:02:42,340
because it is used to motivate why we even do data visualization because it's it's for

547
01:02:42,340 --> 01:02:44,540
data sets which

548
01:02:44,540 --> 01:02:47,440
really look very different when we plot them.

549
01:02:47,440 --> 01:02:51,120
But when you look at the statistical values,

550
01:02:51,120 --> 01:02:54,960
like the mean, the sample variance, the correlation,

551
01:02:54,960 --> 01:02:59,640
the regression, the statistical values are the same.

552
01:02:59,640 --> 01:03:00,740
So if I didn't plot these,

553
01:03:00,740 --> 01:03:02,880
if I would only look at the numbers at the table,

554
01:03:02,880 --> 01:03:05,240
I would maybe have less insight.

555
01:03:07,320 --> 01:03:11,160
But back to the example, what else can we discuss here?

556
01:03:14,540 --> 01:03:23,580
This is the important part. These two lines, we, we set up a figure and we set up axes.

557
01:03:23,580 --> 01:03:32,540
These are objects, which we then can use to, for instance, do a scatter plot. And here

558
01:03:32,540 --> 01:03:38,460
I sent the data X into, I said, these are the X values. These are the Y values. And

559
01:03:38,460 --> 01:03:43,460
I define a color, which in a really weird format here,

560
01:03:44,580 --> 01:03:46,380
but I will later comment on why we do this.

561
01:03:46,380 --> 01:03:48,500
Instead, I could also use a named color.

562
01:03:48,500 --> 01:03:49,780
I could say red.

563
01:03:51,200 --> 01:03:53,780
And if I run that, then the dots will be red.

564
01:03:56,780 --> 01:03:58,480
And this is self-descriptive here.

565
01:04:01,180 --> 01:04:03,220
Just having a look at the questions.

566
01:04:03,220 --> 01:04:20,260
using just import matplotlib instead of matplotlib.pyplot.

567
01:04:20,260 --> 01:04:26,340
So why I do this here? Because there is more in matplotlib than the pyplot. Pyplot is one

568
01:04:26,340 --> 01:04:33,140
of the interfaces that Matplotlib provides.

569
01:04:33,140 --> 01:04:42,460
I could also import Matplotlib and then here I would have matplotlib.pyplot.plt.

570
01:04:42,460 --> 01:04:46,440
I could do that as well and it would also work.

571
01:04:46,440 --> 01:04:51,580
It wouldn't be on any noticeable penalty, maybe a little bit more typing.

572
01:04:51,580 --> 01:04:56,660
I chose this way because this is often what people do and this is often what you find

573
01:04:56,660 --> 01:05:11,060
when you look for examples on the internet or if you ask one of these AI chat solutions.

574
01:05:11,060 --> 01:05:16,780
Just looking at the other, so question 15, is it better to use this way of doing it rather

575
01:05:16,780 --> 01:05:17,780
than the PLT?

576
01:05:17,780 --> 01:05:18,780
We will comment on that.

577
01:05:18,780 --> 01:05:21,020
So we will come to this.

578
01:05:21,020 --> 01:05:26,820
recommend to do it this way. So we show you the more robust way and but we need

579
01:05:26,820 --> 01:05:32,940
to then also explain why this is possibly more robust. I think we will do

580
01:05:32,940 --> 01:05:35,860
that after the exercise.

581
01:05:42,780 --> 01:05:50,420
To go into the first exercise, so should we perhaps present it? Yes, so now you

582
01:05:50,420 --> 01:05:54,060
you have all the tools ready to do the first exercise block.

583
01:05:54,060 --> 01:05:56,540
Your goal, I mean, here it says 15 minutes,

584
01:05:56,540 --> 01:05:58,240
but we really want to give you 20

585
01:05:59,620 --> 01:06:01,540
until five minutes past the hour,

586
01:06:01,540 --> 01:06:04,180
but I need to explain also clearly.

587
01:06:04,180 --> 01:06:07,940
Your goal will be to do what we did here with [Name].

588
01:06:07,940 --> 01:06:11,220
Open a notebook, copy the block, get it to run.

589
01:06:13,140 --> 01:06:16,500
But once you get the image that we got here,

590
01:06:17,380 --> 01:06:23,460
you are asked to extend it, you should add a second data set

591
01:06:26,020 --> 01:06:36,580
and then yet another data set which is this one multiplied by two. And here we wanted to show you

592
01:06:36,580 --> 01:06:42,020
also that this is a way to multiply all numbers. This is one of the many ways in Python to multiply

593
01:06:42,020 --> 01:06:53,700
a list by a factor. Then you will get a plot that looks like this. And another thing that

594
01:06:53,700 --> 01:06:59,780
you can try to do is browse the documentation, find out, so you can have a look at the quick

595
01:06:59,780 --> 01:07:07,060
start guide and try to find out how can you get a label, sorry, a legend into the plot

596
01:07:07,060 --> 01:07:10,740
that we can then link to the data values.

597
01:07:10,740 --> 01:07:12,780
And at the end, it should look like this.

598
01:07:13,980 --> 01:07:17,180
You can also experiment changing, modifying the colors.

599
01:07:17,180 --> 01:07:21,060
And if you get stuck, there is a solution here.

600
01:07:21,060 --> 01:07:22,660
So if I would open this up,

601
01:07:22,660 --> 01:07:23,980
but I will do it only very quickly

602
01:07:23,980 --> 01:07:26,660
because we don't want to have a spoiler,

603
01:07:26,660 --> 01:07:28,860
but you find a solution for this exercise.

604
01:07:28,860 --> 01:07:32,900
And then we can come back five minutes after the hour.

605
01:07:32,900 --> 01:07:37,900
And after that, we will send you into a break.

606
01:07:41,700 --> 01:07:42,700
And if you are curious about

607
01:07:42,700 --> 01:07:44,860
why did we choose these particular colors,

608
01:07:44,860 --> 01:07:46,020
here is an explanation.

609
01:07:49,580 --> 01:07:52,940
Do we have everything we need for the exercise block?

610
01:07:52,940 --> 01:07:56,760
So your goal is this exercise number matplotlib one.

611
01:07:56,760 --> 01:07:59,620
And I will add instructions into the document

612
01:07:59,620 --> 01:08:03,580
And we will be back five minutes after the hour.

613
01:08:06,580 --> 01:08:08,680
All right, good luck and see you in a bit.

614
01:08:09,820 --> 01:08:10,660
Bye.

615
01:08:10,660 --> 01:08:11,480
Bye.

616
01:08:29,620 --> 01:08:53,340
So, do we do it until five past?

617
01:08:53,340 --> 01:08:57,380
Yeah, which is less than 20 minutes, but I think that's fine.

618
01:08:57,380 --> 01:08:58,380
Yeah, that's fine.

619
01:08:58,380 --> 01:09:01,880
Yes, ma'am.

620
01:09:01,880 --> 01:09:02,380
Great.

621
01:09:07,780 --> 01:09:15,420
So I'm thinking for the, when we do the customization thingy,

622
01:09:15,420 --> 01:09:17,060
I think I will do the.

623
01:09:17,060 --> 01:09:18,540
I had to step out.

624
01:09:18,540 --> 01:09:20,580
Are we off now?

625
01:09:20,580 --> 01:09:24,420
Yes, we are in, or hopefully, we are an exercise block.

626
01:09:28,380 --> 01:09:30,440
you

627
01:09:58,380 --> 01:10:00,440
you

628
01:10:28,380 --> 01:10:30,440
you

629
01:10:58,380 --> 01:11:00,440
you

630
01:11:28,380 --> 01:11:30,440
you

631
01:11:58,380 --> 01:12:00,440
you

632
01:12:28,380 --> 01:12:30,440
you

633
01:12:58,380 --> 01:13:00,440
you

634
01:13:28,380 --> 01:13:30,440
you

635
01:13:58,380 --> 01:14:00,440
you

636
01:14:28,380 --> 01:14:30,440
you

637
01:14:58,380 --> 01:15:00,440
you

638
01:15:28,380 --> 01:15:30,440
you

639
01:15:58,380 --> 01:16:00,440
you

640
01:16:28,380 --> 01:16:30,440
you

641
01:16:58,380 --> 01:17:00,440
you

642
01:17:28,380 --> 01:17:30,440
you

643
01:17:58,380 --> 01:18:00,440
you

644
01:18:28,380 --> 01:18:30,440
you

645
01:18:58,380 --> 01:19:00,440
you

646
01:19:28,380 --> 01:19:30,440
you

647
01:19:58,380 --> 01:20:00,440
you

648
01:20:28,380 --> 01:20:30,440
you

649
01:20:58,380 --> 01:21:00,440
you

650
01:21:28,380 --> 01:21:30,440
you

651
01:21:58,380 --> 01:22:00,440
you

652
01:22:28,380 --> 01:22:30,440
you

653
01:22:58,380 --> 01:23:00,440
you

654
01:23:28,380 --> 01:23:30,440
you

655
01:23:58,380 --> 01:24:25,340
And we are back from the exercise.

656
01:24:25,340 --> 01:24:27,300
So sorry that we were talking through the exercise.

657
01:24:27,300 --> 01:24:28,500
It took us a little bit to notice

658
01:24:28,500 --> 01:24:30,480
that we were still on air,

659
01:24:31,340 --> 01:24:33,920
but nothing bad happened, hopefully.

660
01:24:35,540 --> 01:24:36,580
Thanks for doing the exercise.

661
01:24:36,580 --> 01:24:37,580
Thanks for so many questions.

662
01:24:37,580 --> 01:24:39,700
We will be continuing answering them,

663
01:24:39,700 --> 01:24:40,660
but we want to give you a break.

664
01:24:40,660 --> 01:24:42,540
So please take 10 minutes break.

665
01:24:42,540 --> 01:24:45,060
We will meet again 15 minutes past the hour

666
01:24:45,060 --> 01:24:48,860
and I will continue answering the questions.

667
01:24:48,860 --> 01:24:51,300
So see you in 10 minutes, 15 past.

668
01:24:52,220 --> 01:24:53,060
All right, bye.

669
01:24:55,340 --> 01:24:57,400
you

670
01:25:25,340 --> 01:25:27,400
you

671
01:25:55,340 --> 01:25:57,400
you

672
01:26:25,340 --> 01:26:27,400
you

673
01:26:55,340 --> 01:26:57,400
you

674
01:27:25,340 --> 01:27:27,400
you

675
01:27:55,340 --> 01:27:57,400
you

676
01:28:25,340 --> 01:28:27,400
you

677
01:28:55,340 --> 01:28:57,400
you

678
01:29:25,340 --> 01:29:27,400
you

679
01:29:55,340 --> 01:29:57,400
you

680
01:30:25,340 --> 01:30:27,400
you

681
01:30:55,340 --> 01:30:57,400
you

682
01:31:25,340 --> 01:31:27,400
you

683
01:31:55,340 --> 01:31:57,400
you

684
01:32:25,340 --> 01:32:27,400
you

685
01:32:55,340 --> 01:32:57,400
you

686
01:33:25,340 --> 01:33:27,400
you

687
01:33:55,340 --> 01:33:57,400
you

688
01:34:25,340 --> 01:34:33,620
And welcome back from the break.

689
01:34:33,620 --> 01:34:38,100
We will continue with Matplotlib.

690
01:34:38,100 --> 01:34:41,980
I wanted to also show you the result of the exercise session.

691
01:34:41,980 --> 01:34:46,420
So hopefully you get the result that looks like this.

692
01:34:46,420 --> 01:34:52,140
You also find this in the solution.

693
01:34:52,140 --> 01:35:01,140
So here we have plotted three sets of X and Y values with different colors.

694
01:35:01,140 --> 01:35:04,380
I want to save the notebook.

695
01:35:04,380 --> 01:35:10,260
I just wanted to remind a really good practice that I find very useful is that before I save

696
01:35:10,260 --> 01:35:17,820
a notebook and before I share a notebook with other people, I like to run all cells from

697
01:35:17,820 --> 01:35:18,820
top to bottom.

698
01:35:18,820 --> 01:35:25,100
If the notebook is not too long, I would recommend to do the restart kernel.

699
01:35:25,100 --> 01:35:26,100
Yeah.

700
01:35:26,100 --> 01:35:31,580
This is even better because this will reset and run everything from top to bottom because

701
01:35:31,580 --> 01:35:34,080
this is exactly what the next person will do.

702
01:35:34,080 --> 01:35:37,920
Because the next person opening the notebook will not have anything in memory.

703
01:35:37,920 --> 01:35:38,920
It will...

704
01:35:38,920 --> 01:35:44,160
They will run the notebook from top to bottom and I want to make sure that it still produces

705
01:35:44,160 --> 01:35:48,600
the results that I want it.

706
01:35:48,600 --> 01:35:51,120
This will prevent me from having to run the notebook

707
01:35:51,120 --> 01:35:53,820
in a very particular order that nobody will remember.

708
01:35:53,820 --> 01:35:54,840
And now I can save.

709
01:35:56,980 --> 01:35:57,820
Super.

710
01:35:57,820 --> 01:36:00,800
And before I hand over to [Name],

711
01:36:00,800 --> 01:36:04,720
and before we talk about now, how can we improve a plot?

712
01:36:04,720 --> 01:36:06,520
How can we customize it?

713
01:36:06,520 --> 01:36:08,360
I wanted to comment on the question

714
01:36:08,360 --> 01:36:10,400
that we got a couple of times,

715
01:36:10,400 --> 01:36:15,400
which is which of the two possible ways

716
01:36:15,800 --> 01:36:17,900
that one can use Matplotlib should we use?

717
01:36:19,080 --> 01:36:25,320
and why. And I admit, sorry I need to zoom in here, I admit that although I was using

718
01:36:25,320 --> 01:36:29,640
Matplotlib for quite a while, it wasn't clear to me that there were actually two different interfaces.

719
01:36:30,440 --> 01:36:36,120
And I got really confused because every time I was asking the internet for how do I do something in

720
01:36:36,120 --> 01:36:41,560
Matplotlib, I saw an answer but it always looked different than what I remembered. And I was

721
01:36:41,560 --> 01:36:46,360
doubting myself for a long while until I learned that there are actually two ways to run Matplotlib.

722
01:36:46,360 --> 01:36:56,740
One way is the so-called object oriented way, or also called the explicit interface.

723
01:36:56,740 --> 01:37:00,880
And in this explicit interface, we create these objects.

724
01:37:00,880 --> 01:37:02,820
And then we use them.

725
01:37:02,820 --> 01:37:06,700
This is the method that we use in this lesson.

726
01:37:06,700 --> 01:37:10,780
This is also the method that we recommend.

727
01:37:10,780 --> 01:37:16,300
There is another method, which is the so-called pi plot way of doing things, or the so-called

728
01:37:16,300 --> 01:37:23,180
implicit interface, which looks shorter. So there is less to type. I don't have to create

729
01:37:23,180 --> 01:37:30,380
the figure object. I don't have to create the axis object. I can do this directly. So

730
01:37:30,380 --> 01:37:38,000
it looks easier. The downside is that now that we start customizing. So if I now change

731
01:37:38,000 --> 01:37:47,200
the the line width and the format and colors and settings. I will affect

732
01:37:47,200 --> 01:37:53,680
the settings for all my plots that come later in the notebook or in my Python code. And

733
01:37:53,680 --> 01:38:03,040
sometimes this is not what you want. So this will be more practical. If you

734
01:38:03,040 --> 01:38:12,820
Once you start putting this into a function, because then when you change settings, you

735
01:38:12,820 --> 01:38:17,620
change settings only for the for the function that you want and for the plots that you wanted

736
01:38:17,620 --> 01:38:22,300
instead of changing it implicitly for everything.

737
01:38:22,300 --> 01:38:28,220
So that's why we recommend this way, but we show you both ways because so that again,

738
01:38:28,220 --> 01:38:31,160
You know, if you then search Stack Overflow

739
01:38:32,280 --> 01:38:34,560
or you ask chat GPT for,

740
01:38:34,560 --> 01:38:36,520
how do I do something with my potlip?

741
01:38:36,520 --> 01:38:39,280
You might get, you might see this kind of an answer.

742
01:38:39,280 --> 01:38:41,840
And then you know why this is different

743
01:38:41,840 --> 01:38:43,400
than what we have just learned.

744
01:38:45,880 --> 01:38:49,320
Here's also an explanation why we even spent

745
01:38:49,320 --> 01:38:51,320
now a couple of minutes emphasizing this.

746
01:38:51,320 --> 01:39:03,820
And with this, [Name] will now take over and guide us through styling and customizing plots.

747
01:39:03,820 --> 01:39:08,160
And we continue watching the collaborative notes.

748
01:39:08,160 --> 01:39:11,440
And please continue asking questions, we really appreciate it.

749
01:39:11,440 --> 01:39:21,340
Yes, thank you, Ranaan. So, we will now touch upon the topic of styling and customization

750
01:39:21,340 --> 01:39:31,120
plots. And a starting notion here is this, that this is also an aspect of reproducibility.

751
01:39:31,120 --> 01:39:40,080
Because I used myself earlier in the days to often do plots with, yeah, often with MATLAB.

752
01:39:40,080 --> 01:39:47,400
And I would then get a certain feel and look of the figures, and perhaps do something which

753
01:39:47,400 --> 01:39:53,720
needed to be tuned a little bit, and I might then do it in a drawing program.

754
01:39:53,720 --> 01:39:59,400
That's fine if you do it once or twice, but if you need to do it for 10 figures, it's

755
01:39:59,400 --> 01:40:03,160
a lot of extra work.

756
01:40:03,160 --> 01:40:10,440
So matplotlib and other libraries, they allow to customize almost every aspect of a plot.

757
01:40:10,440 --> 01:40:14,720
And it's going to be good to know what are the different matplotlib parts of a figure

758
01:40:14,720 --> 01:40:27,960
so that we know what we can search for when to customize things. So we open up this. And

759
01:40:27,960 --> 01:40:30,880
This is here for a two-dimensional figure.

760
01:40:30,880 --> 01:40:36,720
So you can see here that in the object-oriented modality,

761
01:40:36,720 --> 01:40:40,680
we have all of these variables.

762
01:40:40,680 --> 01:40:44,160
So you have the axis set minor locator.

763
01:40:44,160 --> 01:40:47,400
You have a major tick label.

764
01:40:47,400 --> 01:40:51,120
You have the markers that you can change.

765
01:40:51,120 --> 01:40:53,880
And you have a legend.

766
01:40:53,880 --> 01:40:55,840
And one thing that can be very convenient,

767
01:40:55,840 --> 01:40:57,800
which you can show later in the notebook,

768
01:40:57,800 --> 01:41:02,800
is that in order to see what are the different properties

769
01:41:02,880 --> 01:41:05,280
that are available, you can use the help command.

770
01:41:06,680 --> 01:41:09,540
Yes, and it's also nice to know how is this even called?

771
01:41:09,540 --> 01:41:12,320
Like if I want to web search for something,

772
01:41:12,320 --> 01:41:14,080
I really like this figure because then I know

773
01:41:14,080 --> 01:41:16,800
that I need to search for something called

774
01:41:16,800 --> 01:41:19,120
Minotic or Legend.

775
01:41:21,040 --> 01:41:23,840
Yes, yeah, good point.

776
01:41:23,840 --> 01:41:27,940
There's also, yeah, below here on the same webpage,

777
01:41:27,940 --> 01:41:29,780
you also have an extensive listing

778
01:41:29,780 --> 01:41:32,520
on what are these properties in web format.

779
01:41:35,540 --> 01:41:39,860
So, from this paragraph here,

780
01:41:39,860 --> 01:41:41,940
we also have a resource here,

781
01:41:41,940 --> 01:41:44,100
which is, this is a Tor Github repository

782
01:41:44,100 --> 01:41:47,700
with Mac.lib cheat sheets.

783
01:41:47,700 --> 01:41:50,860
So this is something that you can explore later.

784
01:41:50,860 --> 01:41:59,940
There is also a number of predefined style sheets that you can activate with the use

785
01:41:59,940 --> 01:42:23,040
command. We can show some of these. So these are with the different collections of colors

786
01:42:23,040 --> 01:42:32,120
and marker styles and line styles that you then can choose from. And these are designed

787
01:42:32,120 --> 01:42:39,000
so that they have a good, good collection of colors, which is something that is very

788
01:42:39,000 --> 01:42:45,080
important because it is not uncommon that a reader or a viewer of your figures might

789
01:42:45,080 --> 01:42:56,640
have a limited capability to be colorblind, red, green colorblind, or other vision impairments.

790
01:42:56,640 --> 01:43:06,200
And then it's good to have a color palette that works also when you are working in a

791
01:43:06,200 --> 01:43:14,460
gray in gray scale so that you have light. You have that the color range ranges from

792
01:43:14,460 --> 01:43:25,320
lighter up until the darker yeah one like during my PhD one recommendation was always

793
01:43:25,320 --> 01:43:31,720
to print print your plot in black and white on a printer to see how it looks then if somebody

794
01:43:31,720 --> 01:43:36,120
later prints the paper on a black and white printer then later I thought well that doesn't

795
01:43:36,120 --> 01:43:39,640
make any sense anymore because I think nobody's reading papers anymore in paper, people read

796
01:43:39,640 --> 01:43:44,760
it on in a computer. But now again, I know that it does make sense because it can help

797
01:43:44,760 --> 01:43:56,080
us identify any sort of color problems for color vision deficiencies.

798
01:43:56,080 --> 01:44:04,480
So we will now have an hands on example of exercises and styling and I will do it as

799
01:44:04,480 --> 01:44:07,640
as a demo, you will also have time to do

800
01:44:07,640 --> 01:44:10,400
the UND exercise session.

801
01:44:10,400 --> 01:44:15,160
So what we'll do here is that we'll import a data set

802
01:44:15,160 --> 01:44:18,840
from using pandas.

803
01:44:20,840 --> 01:44:22,400
So the exercise is this one,

804
01:44:22,400 --> 01:44:25,800
customization one, log scale in map.lib.

805
01:44:28,360 --> 01:44:31,440
And I will now switch over to do it in the,

806
01:44:31,440 --> 01:44:44,400
in the notebook. So, I start with copying this text snippet here.

807
01:44:44,400 --> 01:44:50,120
And please remind me because I was so distracting answering something. Should we now all do

808
01:44:50,120 --> 01:44:53,800
the same thing as you or should we watch? You can watch.

809
01:44:53,800 --> 01:44:58,680
Okay. Yeah. So, this is now imported a data set. This

810
01:44:58,680 --> 01:45:10,080
is about the statistics of countries. It's the gapminder dataset. And we will then use

811
01:45:10,080 --> 01:45:17,840
a plot command that we go into the plot. It's, we can maybe reconnect to the previous lesson

812
01:45:17,840 --> 01:45:25,840
about pandas. So what people see here is that we load a CSV file from the internet, but then

813
01:45:25,840 --> 01:45:28,040
is this read CSV command,

814
01:45:28,040 --> 01:45:32,000
which we have seen in the previous episode.

815
01:45:32,000 --> 01:45:33,840
And at the same time, there is dot query.

816
01:45:33,840 --> 01:45:37,480
So we filter out and we are only interested

817
01:45:37,480 --> 01:45:40,180
in the data for the year 2007.

818
01:45:40,180 --> 01:45:42,640
And here we have four different countries.

819
01:45:42,640 --> 01:45:44,900
We have the life expectancy,

820
01:45:46,240 --> 01:45:49,600
and we are interested in GDP, the gross domestic product.

821
01:45:49,600 --> 01:45:54,280
So roughly how wealthy the country is.

822
01:45:55,840 --> 01:46:19,080
So, I now take this snippet here and I paste it in here and execute it and what we get

823
01:46:19,080 --> 01:46:29,680
here is that what we choose to work with here is the life expect. We will visualize life

824
01:46:29,680 --> 01:46:42,160
expectancy as a function of the GDP per capita in terms of perching parity. The PPP, what's

825
01:46:42,160 --> 01:46:53,240
Yeah, so it's some like inflation adjusted US dollars that are also adjusted to have

826
01:46:53,240 --> 01:47:00,480
a more fair comparison. So it's not US dollars, but for our purposes, we can think of like

827
01:47:00,480 --> 01:47:02,440
inflation adjusted US dollars.

828
01:47:02,440 --> 01:47:11,440
Yes. And what we note here is that the data is here and distributed so that it's seen here.

829
01:47:11,440 --> 01:47:24,560
a lot of it is along the vertical, along the vertical line here, and then around this horizontal

830
01:47:24,560 --> 01:47:29,680
line here, horizontal region here in uppermost in the plot. So the question is here, how

831
01:47:29,680 --> 01:47:38,320
can we make better use of the visualization to highlight the data here? So do you have

832
01:47:38,320 --> 01:47:40,840
When you suggest another one, what could be?

833
01:47:41,760 --> 01:47:43,440
Yeah, so one step that we can do

834
01:47:43,440 --> 01:47:47,400
is we can try a logarithmic axis, which will then,

835
01:47:47,400 --> 01:47:49,000
because we have such a big difference

836
01:47:49,000 --> 01:47:52,240
in orders of magnitude on the x-axis.

837
01:47:53,140 --> 01:47:56,120
So by switching to, from a linear to a log axis,

838
01:47:56,120 --> 01:48:00,320
it will, we will probably see the trend hopefully clear.

839
01:48:02,600 --> 01:48:07,600
Exactly, so we need then to set the axis scale

840
01:48:08,320 --> 01:48:24,120
to a logarithmic one. And this will do by setting this attribute, the setXScale to log.

841
01:48:24,120 --> 01:48:39,840
that line. And I go to the notebook. And add it there. Set X dot set scale underscore X

842
01:48:39,840 --> 01:48:54,000
scale log. Yes. And now we have the logarithmic scale on the X axis here. And yeah, what we

843
01:48:54,000 --> 01:49:04,000
have here is much more much more evenly distributed within the canvas. There's

844
01:49:04,000 --> 01:49:09,760
also here one attribute, the alpha attribute, that we can play around with

845
01:49:09,760 --> 01:49:17,120
here. So the alpha attribute is at first it's a half. You can see what happens if

846
01:49:17,120 --> 01:49:28,620
If you change it to 0.8, yeah, then you can see that this affects the, the, the transparency

847
01:49:28,620 --> 01:49:29,620
of points.

848
01:49:29,620 --> 01:49:42,180
So by using this higher value, we have a more dense visualization of all the thoughts.

849
01:49:42,180 --> 01:49:43,180
Great.

850
01:49:43,180 --> 01:49:44,180
And a question to both of us.

851
01:49:44,180 --> 01:49:50,540
So do, do you remember all of these things like how to set a log axis, how to, what,

852
01:49:50,540 --> 01:49:54,940
how to do the trust, how to set the transparency? Like I admit that I don't, so I almost never

853
01:49:54,940 --> 01:50:02,300
remember this. I always have to look it up. Yes, that's a good point. And one can then,

854
01:50:02,300 --> 01:50:06,220
so we have here, if you see here, what, what, what are the objects that they've created?

855
01:50:06,220 --> 01:50:12,860
They've created the handle fig and they've created the handle X and the logarithmic scale

856
01:50:12,860 --> 01:50:16,940
is something that is set by working with the axe object.

857
01:50:18,460 --> 01:50:25,980
And let's see what attributes do we have here for this object. So, we can type help and axe.

858
01:50:30,220 --> 01:50:40,300
And then we can see that we have a very lengthy listing. Here's a description of what the object

859
01:50:40,300 --> 01:50:46,500
these, what class it is. And then you can see that we have all of these listings. And

860
01:50:46,500 --> 01:50:53,980
among these listings here, we will have then the logarithmic scale. Or the opportunity

861
01:50:53,980 --> 01:50:56,020
to set a logarithmic scale.

862
01:50:58,860 --> 01:50:59,700
That's neat.

863
01:51:05,260 --> 01:51:06,100
Good.

864
01:51:07,820 --> 01:51:08,940
We will now have,

865
01:51:11,380 --> 01:51:12,220
we will,

866
01:51:14,900 --> 01:51:17,260
not now, so we'll let you go into the exercise session

867
01:51:17,260 --> 01:51:20,380
where you will play around with

868
01:51:20,380 --> 01:51:30,840
customization of figures. And yeah, should we perhaps introduce the exercises. Here it's

869
01:51:30,840 --> 01:51:40,420
working with the same datasets. Your task is that you will make the ticks marks and the

870
01:51:40,420 --> 01:51:49,060
axis labels fonts larger. And you need you can search on the web for what are these attributes

871
01:51:49,060 --> 01:51:59,980
that you need to work with. And the target that you're aiming for is to arrive to a figure

872
01:51:59,980 --> 01:52:06,380
which is looking like this. So this is one of the exercise that you can do. And the second

873
01:52:06,380 --> 01:52:13,100
exercise that you could, oh, we should hide the solution there. The third exercise that

874
01:52:13,100 --> 01:52:23,860
you can work with here is that you can adopt a gallery example. And here we have some links

875
01:52:23,860 --> 01:52:30,900
to some of the other resources that are, yeah, like Seaborn, which is based on Matlocklib.

876
01:52:30,900 --> 01:52:39,100
And then there's also Vega Altair, which is a standalone Python package for visualization.

877
01:52:39,100 --> 01:52:47,940
So people will choose exercise two or three.

878
01:52:47,940 --> 01:52:54,340
And the exercise three is really close to at least how I work in real life.

879
01:52:54,340 --> 01:52:56,780
So in real life, I don't remember all of these commands.

880
01:52:56,780 --> 01:53:04,220
I often look through the gallery examples for something that looks similar to what I

881
01:53:04,220 --> 01:53:06,980
have in mind.

882
01:53:06,980 --> 01:53:17,620
And here you will try to first, I often take the example and I'll try to run it on my computer.

883
01:53:17,620 --> 01:53:21,800
And then once I get it to work, then I try to change the data.

884
01:53:21,800 --> 01:53:26,280
And then I try to put in my data, and then I tweak.

885
01:53:26,280 --> 01:53:30,000
So that can that can be a really fun exploration, which is at least close to how I work.

886
01:53:30,000 --> 01:53:34,000
I don't know about you, Juan, but I can't remember on almost anything.

887
01:53:34,000 --> 01:53:36,800
I always start from something that already works

888
01:53:36,800 --> 01:53:38,000
that somebody else created.

889
01:53:38,000 --> 01:53:39,920
That's also how I do it.

890
01:53:39,920 --> 01:53:44,920
So looking at this galleries

891
01:53:45,920 --> 01:53:47,600
is a very good source of inspiration.

892
01:53:47,600 --> 01:53:50,280
And that's also where you then get exposed

893
01:53:50,280 --> 01:53:54,160
to what are the different functions and attributes

894
01:53:54,160 --> 01:53:55,520
that you can work with.

895
01:53:57,960 --> 01:54:01,320
So is there anything that we can bring up from the HackMD?

896
01:54:04,000 --> 01:54:06,960
For now, I'm looking.

897
01:54:12,480 --> 01:54:14,400
So most questions are answered

898
01:54:14,400 --> 01:54:15,800
and they are relatively detailed.

899
01:54:15,800 --> 01:54:17,520
One bigger picture question was

900
01:54:17,520 --> 01:54:20,500
whether we will talk about interactive plots.

901
01:54:20,500 --> 01:54:23,980
So plots where you can, you don't get just an image

902
01:54:23,980 --> 01:54:26,000
but you get something that you can interact with

903
01:54:26,000 --> 01:54:27,060
like with a slider.

904
01:54:28,080 --> 01:54:31,400
And I believe that we will not do it in this course

905
01:54:31,400 --> 01:54:35,620
but I will link to a lesson where this is demonstrated.

906
01:54:40,360 --> 01:54:42,720
But I think we are almost ready for exercise session.

907
01:54:42,720 --> 01:54:44,880
It will be customization two or three.

908
01:54:45,920 --> 01:54:48,600
Until what time, like when we will be back?

909
01:54:50,080 --> 01:54:55,080
We will take 20 minutes for this exercise.

910
01:54:57,280 --> 01:54:59,480
All right, so we'll be back at 55 past

911
01:54:59,480 --> 01:55:00,840
and then we will summarize,

912
01:55:00,840 --> 01:55:03,400
we will connect this a bit with pandas data frames

913
01:55:03,400 --> 01:55:05,580
and then hand over to the next episode.

914
01:55:07,600 --> 01:55:11,360
So exercise customization two or three starting now,

915
01:55:11,360 --> 01:55:13,040
see you again in 20 minutes.

916
01:55:14,480 --> 01:55:15,320
Bye.

917
01:55:15,320 --> 01:55:16,140
Bye.

918
01:55:30,840 --> 01:55:32,900
you

919
01:56:00,840 --> 01:56:02,900
you

920
01:56:30,840 --> 01:56:32,900
you

921
01:57:00,840 --> 01:57:02,900
you

922
01:57:30,840 --> 01:57:32,900
you

923
01:58:00,840 --> 01:58:02,900
you

924
01:58:30,840 --> 01:58:32,900
you

925
01:59:00,840 --> 01:59:02,900
you

926
01:59:30,840 --> 01:59:32,900
you

927
02:00:00,840 --> 02:00:02,900
you

928
02:00:30,840 --> 02:00:32,900
you

929
02:01:00,840 --> 02:01:02,900
you

930
02:01:30,840 --> 02:01:32,900
you

931
02:02:00,840 --> 02:02:02,900
you

932
02:02:30,840 --> 02:02:32,900
you

933
02:03:00,840 --> 02:03:02,900
you

934
02:03:30,840 --> 02:03:32,900
you

935
02:04:00,840 --> 02:04:02,900
you

936
02:04:30,840 --> 02:04:32,900
you

937
02:05:00,840 --> 02:05:02,900
you

938
02:05:30,840 --> 02:05:32,900
you

939
02:06:00,840 --> 02:06:02,900
you

940
02:06:30,840 --> 02:06:32,900
you

941
02:07:00,840 --> 02:07:02,900
you

942
02:07:30,840 --> 02:07:32,900
you

943
02:08:00,840 --> 02:08:02,900
you

944
02:08:30,840 --> 02:08:32,900
you

945
02:09:00,840 --> 02:09:02,900
you

946
02:09:30,840 --> 02:09:32,900
you

947
02:10:00,840 --> 02:10:02,900
you

948
02:10:30,840 --> 02:10:32,900
you

949
02:11:00,840 --> 02:11:02,900
you

950
02:11:30,840 --> 02:11:32,900
you

951
02:12:00,840 --> 02:12:02,900
you

952
02:12:30,840 --> 02:12:32,900
you

953
02:13:00,840 --> 02:13:02,900
you

954
02:13:30,840 --> 02:13:32,900
you

955
02:14:00,840 --> 02:14:30,480
All right, we are back.

956
02:14:30,480 --> 02:14:37,320
more minutes of matplotlib. So we want to wrap up the session and then we will go into

957
02:14:37,320 --> 02:14:42,720
a break and then we will go into something else. And we thought that in the five minutes

958
02:14:42,720 --> 02:14:50,520
we could try to do this exploration together on an example. And I also realized now during

959
02:14:50,520 --> 02:14:56,120
the exercise session that the solution that we have listed here doesn't match anymore

960
02:14:56,120 --> 02:15:03,640
perfectly the gallery of seaborne because they changed their examples anyway let's try this

961
02:15:03,640 --> 02:15:11,000
together i will now take seaborne which is something that builds on top of matplotlib

962
02:15:12,120 --> 02:15:18,600
and i will i will take that for a specific reason that i will come back to before the hour is over

963
02:15:19,800 --> 02:15:25,320
so this is often how i start i open up one of these libraries i go to the gallery and i look

964
02:15:25,320 --> 02:15:28,480
look for an example that looks close to what I have in mind.

965
02:15:30,380 --> 02:15:34,520
And here I will, I will take,

966
02:15:36,840 --> 02:15:40,620
I will try to be somehow close to the exercise.

967
02:15:40,620 --> 02:15:42,620
I will, I want to do a violin plot,

968
02:15:42,620 --> 02:15:47,040
which is a way to show distribution of points

969
02:15:47,040 --> 02:15:50,540
and a statistical spread.

970
02:15:52,340 --> 02:15:53,780
And so this is something,

971
02:15:53,780 --> 02:15:56,120
I want to have something like this.

972
02:15:56,120 --> 02:15:59,480
Here, this is what it looks, and there is an example code.

973
02:15:59,480 --> 02:16:03,120
And the way I start often is I take what they have

974
02:16:03,120 --> 02:16:06,080
and I try to run it on my computer first.

975
02:16:08,080 --> 02:16:09,080
Let's try that.

976
02:16:10,040 --> 02:16:13,920
Seaborn is a library that should be in your environment.

977
02:16:13,920 --> 02:16:15,720
It is in the Python for Sarcomp.

978
02:16:15,720 --> 02:16:19,360
It is also a part of Anaconda base environment.

979
02:16:19,360 --> 02:16:21,920
And now I'm crossing fingers and running the cell.

980
02:16:23,780 --> 02:16:26,740
and I get a plot that looks like what they have.

981
02:16:26,740 --> 02:16:28,780
So that's already a big success story.

982
02:16:31,860 --> 02:16:34,500
I don't fully understand what's going on here,

983
02:16:34,500 --> 02:16:37,180
but my next step often is to,

984
02:16:37,180 --> 02:16:40,220
I want to get an insight into the data

985
02:16:40,220 --> 02:16:42,540
because I want to replace it with my own data.

986
02:16:45,940 --> 02:16:48,140
And here I have a feeling that,

987
02:16:48,140 --> 02:16:50,740
so load the example tips data set.

988
02:16:50,740 --> 02:16:54,380
This is some data set about some bird.

989
02:16:54,380 --> 02:16:58,020
No, it's about some smoking and not smoking.

990
02:17:00,220 --> 02:17:03,120
But what I do, because I don't know this data set,

991
02:17:05,660 --> 02:17:10,340
I would often, I would actually split,

992
02:17:11,700 --> 02:17:13,260
split the cell into two.

993
02:17:16,620 --> 02:17:20,460
And here I would print, I can do either this,

994
02:17:20,740 --> 02:17:24,760
or if I'm in a notebook, I can do this directly tips.

995
02:17:25,900 --> 02:17:26,940
I want to see how it looks.

996
02:17:26,940 --> 02:17:28,320
Let's run all cells.

997
02:17:31,140 --> 02:17:33,740
And this turns out to be, we already recognize this.

998
02:17:33,740 --> 02:17:38,740
This is a pandas data frame with columns and rows.

999
02:17:43,940 --> 02:17:45,580
And I think this data set shows

1000
02:17:46,540 --> 02:17:50,220
the different tipping behavior of smokers and non-smokers.

1001
02:17:50,740 --> 02:17:59,660
And now I also maybe understand that what this library is able to do is that we load

1002
02:17:59,660 --> 02:18:06,260
the data set and then we can map X values to a certain column and we can map the Y values

1003
02:18:06,260 --> 02:18:15,020
to a different column and we can map the color to a yet different column.

1004
02:18:15,020 --> 02:18:20,560
And now I would go in and instead of using this data set, I would try to put in my own

1005
02:18:20,560 --> 02:18:29,560
pandas data frame and I will try to plot that and only then I would start tweaking and adjusting

1006
02:18:29,560 --> 02:18:36,840
and customizing and here I wanted to show you that Seaborn is a library that is able

1007
02:18:36,840 --> 02:18:48,160
to really use pandas data frames directly and map columns to visual channels x y color

1008
02:18:48,160 --> 02:18:51,440
Can we do the same thing in map.lib?

1009
02:18:51,440 --> 02:18:56,000
And back to our lesson.

1010
02:18:56,000 --> 02:19:01,880
And I learned very recently that you can do almost the same thing in map.lib.

1011
02:19:01,880 --> 02:19:11,480
So instead of what we were doing, that we were sending a slice, a column of data into

1012
02:19:11,480 --> 02:19:16,460
defined as X or as Y, we can use this instead.

1013
02:19:16,460 --> 02:19:19,820
I can say the data is a data frame.

1014
02:19:21,100 --> 02:19:26,100
And then I can map X values to particular column,

1015
02:19:26,180 --> 02:19:27,740
Y values to a different column.

1016
02:19:30,980 --> 02:19:31,820
So that's very nice.

1017
02:19:31,820 --> 02:19:33,260
If you then try to do a bit more,

1018
02:19:33,260 --> 02:19:36,260
like if you try to map color to continent,

1019
02:19:37,220 --> 02:19:39,540
then it becomes a little bit harder.

1020
02:19:39,540 --> 02:19:42,780
And these are, so we wanted you to know

1021
02:19:42,780 --> 02:19:45,180
that there are libraries in Python

1022
02:19:45,180 --> 02:19:53,420
that make this easier and this is also for those of you who come from R and ggplot2

1023
02:19:55,260 --> 02:19:59,820
you can do the same things in Python with in libraries like Seaborn, Altair, Vega

1024
02:20:02,140 --> 02:20:03,500
but I see now that we are out of time

1025
02:20:05,500 --> 02:20:10,620
we will continue answering the questions so please keep asking questions about plotting

1026
02:20:10,620 --> 02:20:14,620
about Matplotlib and we will continue answering but I don't want to eat into the future sessions

1027
02:20:15,180 --> 02:20:22,680
So, thanks from my side, [Name], any concluding words here?

1028
02:20:22,680 --> 02:20:23,680
You covered it all.

1029
02:20:23,680 --> 02:20:27,200
And as I said, we will continue to answer questions on the HackMD.

1030
02:20:27,200 --> 02:20:28,200
Yeah.

1031
02:20:28,200 --> 02:20:31,480
More details there, I will answer there.

1032
02:20:31,480 --> 02:20:32,880
Thanks so much, everybody, for listening.

1033
02:20:32,880 --> 02:20:36,160
Thanks to [Name] for co-teaching and looking forward to the next sessions.

1034
02:20:36,160 --> 02:20:40,920
And I think now we go into a break, into a 10-minute break, if I understand correctly.

1035
02:20:40,920 --> 02:20:44,000
Yeah, break to 11 past the hour.

1036
02:20:44,000 --> 02:20:45,000
Yep.

1037
02:20:45,000 --> 02:20:47,000
Bye.

1038
02:21:15,000 --> 02:21:17,060
you

1039
02:21:45,000 --> 02:21:47,060
you

1040
02:22:15,000 --> 02:22:17,060
you

1041
02:22:45,000 --> 02:22:47,060
you

1042
02:23:15,000 --> 02:23:17,060
you

1043
02:23:45,000 --> 02:23:47,060
you

1044
02:24:15,000 --> 02:24:17,060
you

1045
02:24:45,000 --> 02:24:47,060
you

1046
02:25:15,000 --> 02:25:17,060
you

1047
02:25:45,000 --> 02:25:47,060
you

1048
02:26:15,000 --> 02:26:17,060
you

1049
02:26:45,000 --> 02:26:47,060
you

1050
02:27:15,000 --> 02:27:17,060
you

1051
02:27:45,000 --> 02:27:47,060
you

1052
02:28:15,000 --> 02:28:17,060
you

1053
02:28:45,000 --> 02:28:47,060
you

1054
02:29:15,000 --> 02:29:17,060
you

1055
02:29:45,000 --> 02:30:11,000
Hello, we are back.

1056
02:30:11,000 --> 02:30:36,000
So yes, so now for the rest of the day, we have two lessons, one on data formats, which we're not actually going to much detail. We give this really high level summary that addresses some of the questions which people have been asking yesterday and today, and then we go on to productivity tools.

1057
02:30:36,000 --> 02:30:42,080
But we did teach this course, or this lesson, in full last year, and you can find it from

1058
02:30:42,080 --> 02:30:46,720
the playlist of the course last year, linked from the main page.

1059
02:30:46,720 --> 02:30:48,440
So [Name], where do we start with...

1060
02:30:48,440 --> 02:30:49,440
Yeah.

1061
02:30:49,440 --> 02:30:52,440
So maybe I'll introduce myself.

1062
02:30:52,440 --> 02:30:53,440
My name is [name].

1063
02:30:53,440 --> 02:30:58,680
I'm from Aalto Scientific Computing, and I've been working with Python for, well, 15 years

1064
02:30:58,680 --> 02:31:02,040
at this point or something, so a long time.

1065
02:31:02,040 --> 02:31:05,640
So in the chat, in the HackMD, there

1066
02:31:05,640 --> 02:31:09,840
were lots of good questions about NumPy and Pandas.

1067
02:31:09,840 --> 02:31:13,280
And what it means, like what are the columns in Pandas?

1068
02:31:13,280 --> 02:31:16,320
And there were questions about tidy format also,

1069
02:31:16,320 --> 02:31:19,760
which is popular in RxTidyBuzz.

1070
02:31:19,760 --> 02:31:22,800
And we'll quickly explain these concepts.

1071
02:31:22,800 --> 02:31:26,960
But like [Name] said, we had a longer dive on this last year.

1072
02:31:26,960 --> 02:31:30,240
So if you want to see that, you should check the video.

1073
02:31:30,240 --> 02:31:33,440
but let's teach the main concepts.

1074
02:31:33,440 --> 02:31:36,440
So when we're talking about data frames,

1075
02:31:36,440 --> 02:31:38,560
like data frames are like,

1076
02:31:38,560 --> 02:31:42,240
like I figure out this analog of like a hardware store.

1077
02:31:42,240 --> 02:31:43,720
So if you go to a hardware store,

1078
02:31:43,720 --> 02:31:46,160
you have like hammers in one aisle,

1079
02:31:46,160 --> 02:31:47,680
you have nails in one aisle,

1080
02:31:47,680 --> 02:31:50,040
you have nuts and bolts at one aisle

1081
02:31:50,040 --> 02:31:51,360
and wrenches in one aisle.

1082
02:31:51,360 --> 02:31:54,320
So you have different aisles of different things

1083
02:31:54,320 --> 02:31:55,920
and lawnmowers in like,

1084
02:31:55,920 --> 02:31:58,240
you can have completely different things in one aisle

1085
02:31:58,240 --> 02:32:01,320
and another aisle can have a completely different thing.

1086
02:32:02,160 --> 02:32:04,080
This is basically what a data frame is.

1087
02:32:04,080 --> 02:32:06,200
So data frame is organized in columns.

1088
02:32:06,200 --> 02:32:09,440
So each column has one type of a thing.

1089
02:32:09,440 --> 02:32:14,440
So it has integers or it has timestamps or it has strings.

1090
02:32:14,960 --> 02:32:19,600
So in the code example there, you don't have to write it.

1091
02:32:19,600 --> 02:32:22,200
We have an example data frame that has like strings

1092
02:32:22,200 --> 02:32:25,160
and timestamps and integers and floating point numbers.

1093
02:32:25,160 --> 02:32:26,520
And all of these can be like

1094
02:32:26,520 --> 02:32:31,320
some sort of a correspondence, of course, so you can have like temperature or pressure or something,

1095
02:32:31,320 --> 02:32:37,400
or you can, like if we go to the hardware store analogy, if you go down one aisle and you find

1096
02:32:37,400 --> 02:32:43,960
a certain kind of a nut and you know that, okay, I need a corresponding wrench to tighten this nut,

1097
02:32:43,960 --> 02:32:50,360
then you go to the wrench aisle and you go to that place. In pandas, you usually have the

1098
02:32:50,360 --> 02:32:56,680
corresponding things in the same place. So, in the same row, you would have the nuts that

1099
02:32:56,680 --> 02:33:02,520
correspond to a certain branch, and then you can easily find the things you're looking for.

1100
02:33:02,520 --> 02:33:07,480
And this is basically what a data frame is. So, you have multiple of these columns that

1101
02:33:07,480 --> 02:33:15,080
are collected together, and they are collected into this tidy data format. So, below in the

1102
02:33:15,080 --> 02:33:21,480
[Name]'s share, we have this view of this tidy data format. So, you have each column

1103
02:33:22,200 --> 02:33:27,880
is a variable. So, temperature, pressure, time, I don't know, like it can be whatever.

1104
02:33:28,760 --> 02:33:35,320
And in each row, you have an observation. So, at a certain time, the pressure and temperature was

1105
02:33:35,320 --> 02:33:43,000
this. And the idea behind this is that if you keep this format, it's easy to write tools

1106
02:33:43,000 --> 02:33:50,040
that you work with this format. So you can easily calculate an average. You don't usually

1107
02:33:50,600 --> 02:33:56,200
want to calculate average of time, pressure, and temperature. I mean, you don't want to calculate

1108
02:33:56,200 --> 02:34:01,480
because that doesn't make any sense. But you want to calculate an average of, let's say,

1109
02:34:01,480 --> 02:34:06,680
one column. You want to calculate temperature over time or something. You want to calculate

1110
02:34:06,680 --> 02:34:13,640
an average of that. So some operations are written for columns and some operations are

1111
02:34:13,640 --> 02:34:21,720
written for rows. And because everybody keeps the same format, it's very easy to manage these tools.

1112
02:34:21,720 --> 02:34:32,120
And this is why pandas and similar kinds of things like tidyverse are popular. And this is

1113
02:34:32,120 --> 02:34:37,720
important. Even though you might have a table where you just have a table and what does it

1114
02:34:37,720 --> 02:34:43,880
matter? Is it organized in what way? It's organized in a certain way because people

1115
02:34:44,680 --> 02:34:48,360
expect it to be in that way because all of the tools have been written that way. So, you should

1116
02:34:48,360 --> 02:34:54,760
just do it like the other people do. And this is basically how data frames are organized.

1117
02:34:54,760 --> 02:34:59,080
And NumPy arrays are a bit different. So, all of the columns are usually NumPy arrays.

1118
02:34:59,080 --> 02:35:05,000
NumPy arrays can be multidimensional. They're always one data type, so you might have one

1119
02:35:05,000 --> 02:35:11,240
dimensional array like a column, or you might have a two-dimensional array like a matrix

1120
02:35:11,240 --> 02:35:19,880
or just an array of numbers or multiple things. But usually you have, let's say, a temperature

1121
02:35:19,880 --> 02:35:24,280
in x and y directions or something like that. Or you might have a three-dimensional array

1122
02:35:24,280 --> 02:35:32,680
of like pressure at different altitudes and different places in the world.

1123
02:35:32,680 --> 02:35:39,440
So in NumPy, you have this one big blob of same kind of data, so organized in this one

1124
02:35:39,440 --> 02:35:42,360
blob.

1125
02:35:42,360 --> 02:35:47,320
And what does this mean is that, yeah, so [Name].

1126
02:35:47,320 --> 02:35:53,800
And like you would do the same kind of operations across every row, column, and rank, I guess.

1127
02:35:53,800 --> 02:35:59,400
Yes. So what you would usually do is like you would do, let's say you calculate, you

1128
02:35:59,400 --> 02:36:04,760
take a matrix or take an array and then you multiply it by some constant and then you

1129
02:36:04,760 --> 02:36:11,920
do it, apply for it, all of them, or you calculate the sum of certain rows or certain columns

1130
02:36:11,920 --> 02:36:18,200
or something like that. But, okay, so you have these two different formats and they

1131
02:36:18,200 --> 02:36:27,480
are different. They're fundamentally different, but in some sense they are the same, but they

1132
02:36:27,480 --> 02:36:36,760
are different. It's very hard to explain, maybe. But the main thing is that for all of these

1133
02:36:36,760 --> 02:36:45,560
different things... Sorry? Well, go ahead. Yeah. But for both of these things, they are tools

1134
02:36:45,560 --> 02:36:50,920
that are designed around these formats. So, for example, you don't do matrix multiplications in

1135
02:36:50,920 --> 02:36:58,200
Pandas. You do matrix multiplications from NumPy arrays because for tables, it doesn't make any

1136
02:36:58,200 --> 02:37:03,560
sense to do matrix multiplication. But for array, it makes sense. And there are tools for these,

1137
02:37:03,560 --> 02:37:10,680
and then there are ways of storing this data that are designed for these things.

1138
02:37:10,680 --> 02:37:16,280
And for pandas, there are many, many tools that are designed, many formats, like file formats,

1139
02:37:17,640 --> 02:37:25,560
that are designed for certain kind of data, and for NumPy as well. And usually,

1140
02:37:25,560 --> 02:37:32,600
the situation goes like this. You might have seen this XKCD comic, that they are competing

1141
02:37:32,600 --> 02:37:38,040
standards, and then somebody's like, okay, let's just write a new standard that fixes all of the

1142
02:37:38,040 --> 02:37:42,040
This is not perfect. Let's do something that does what both of these does.

1143
02:37:42,040 --> 02:37:46,840
Yeah. And then you have one more. And this is how it always goes. So, you have a huge

1144
02:37:46,840 --> 02:37:53,160
amount of competing standards. So, there were people asking about ARDA. If you want to move

1145
02:37:53,160 --> 02:37:59,000
data from ARDA to Python, either you can use CSV, for example, or you can use Parquet or Feather.

1146
02:37:59,000 --> 02:38:04,920
There's mentions in the article about these different formats. If you want to use Matlab,

1147
02:38:04,920 --> 02:38:11,160
you can use math files, which are like these HDF5 files. If you want to use Python and,

1148
02:38:11,160 --> 02:38:18,920
let's say, Fortran code, you might need to use HDF5 or use the Fortran file. There's a million

1149
02:38:18,920 --> 02:38:26,760
file formats. And, yeah, we don't want to give too long to talk about it. So, let's just say

1150
02:38:26,760 --> 02:38:32,280
that they are. And if you want to see more about these formats, there's a huge list here. And more

1151
02:38:32,280 --> 02:38:38,680
will be added here as well. And use the formats that your tools use, basically. Choose the file

1152
02:38:38,680 --> 02:38:46,280
formats that your tools use and your data is optimized for. Yeah. And I guess you could say,

1153
02:38:46,280 --> 02:38:53,960
I mean, talk to people. Like, I guess our main message here isn't use this or don't use that,

1154
02:38:53,960 --> 02:38:59,560
but actually do take a little bit of time to think about it before you go too deep into your work.

1155
02:38:59,560 --> 02:39:00,560
work.

1156
02:39:00,560 --> 02:39:01,560
Yeah.

1157
02:39:01,560 --> 02:39:02,560
Yeah, basically.

1158
02:39:02,560 --> 02:39:06,960
And do some searching, do some thinking.

1159
02:39:06,960 --> 02:39:12,720
The pandas and NumPy, they already have good interfaces for all of these different data

1160
02:39:12,720 --> 02:39:13,720
formats.

1161
02:39:13,720 --> 02:39:18,440
So, check the documentation, like in this page, there's mentions about it, but check

1162
02:39:18,440 --> 02:39:20,480
the documentation on pandas and NumPy.

1163
02:39:20,480 --> 02:39:26,240
Don't write your own data reader, because somebody has written it already.

1164
02:39:26,240 --> 02:39:28,120
Like somebody has written a CSV reader.

1165
02:39:28,120 --> 02:39:33,920
don't need to open a CSV file in Python yourself. You can use NumPy or Pandas to read it based

1166
02:39:33,920 --> 02:39:43,920
on what sort of data you have in the CSV file. There's also a question in the chat why Excel

1167
02:39:43,920 --> 02:39:50,920
isn't good human readable. Excel is a binary format. Have you opened it with an editor?

1168
02:39:50,920 --> 02:39:56,960
But it's a good point, like many of these arguments are complicated.

1169
02:39:56,960 --> 02:40:02,760
And what human-negatable means is, yeah, it's a complicated thing.

1170
02:40:02,760 --> 02:40:03,760
Yeah.

1171
02:40:03,760 --> 02:40:04,760
Yeah.

1172
02:40:04,760 --> 02:40:05,760
Okay.

1173
02:40:05,760 --> 02:40:13,520
So, maybe we can keep answering these questions by the text, and we can go on.

1174
02:40:13,520 --> 02:40:17,160
And if you want more, watch the video from last year.

1175
02:40:17,160 --> 02:40:27,240
someone could link it here. Yeah. Yeah. Okay. Yeah. We ask questions in the chat. We'll try

1176
02:40:27,240 --> 02:40:31,720
to answer as many of them. There's some really good questions there and we'll happily answer them.

1177
02:40:33,480 --> 02:40:41,880
So what's next? It's productivity tools. So I will open that.

1178
02:40:41,880 --> 02:40:48,600
So [Name], what do we mean by productivity tools? What kind of productivity?

1179
02:40:49,960 --> 02:40:57,240
Yeah, so throughout the day you have run many of the exercises already and examples

1180
02:40:57,240 --> 02:41:03,880
and you have encountered probably many errors and you have encountered many like when you

1181
02:41:03,880 --> 02:41:09,480
have a wrong code you get an error or something in your code and of course when we are talking

1182
02:41:09,480 --> 02:41:18,600
about, for example, exercises in this course, these are small programs that you run. But when

1183
02:41:18,600 --> 02:41:26,280
you start to write your own program, we'll talk about scripts tomorrow, so a bit more about how

1184
02:41:26,280 --> 02:41:32,600
do you write, and also about modules and libraries, how do you write bigger programs. And when it comes

1185
02:41:32,600 --> 02:41:42,360
to these, for writing these bigger programs, you usually have the situation where it's a big thing

1186
02:41:43,240 --> 02:41:49,480
and you can have errors in multiple places. And we are all humans, so we don't write perfect code.

1187
02:41:51,240 --> 02:41:58,760
Nobody writes perfect code and that's completely normal. And for that, programmers and people who

1188
02:41:58,760 --> 02:42:08,520
write programs, they have written things that help with the tool, help with dealing these

1189
02:42:09,400 --> 02:42:15,960
problems. And well, the most common is like if you have an editor that has syntax highlighting,

1190
02:42:16,840 --> 02:42:19,960
like Jupyter has. So if you have...

1191
02:42:19,960 --> 02:42:25,400
So it's basically, it's tools that make your human effort more effective.

1192
02:42:25,400 --> 02:42:36,040
Yes, so let's say you have a VS code or something and it can give you auto-completion or something.

1193
02:42:36,040 --> 02:42:41,720
These are already productivity tools, they improve your productivity when you code.

1194
02:42:41,720 --> 02:42:46,960
But there's different colors of productivity tools or different types of productivity

1195
02:42:46,960 --> 02:42:49,840
tools and these are the most common ones, of course.

1196
02:42:49,840 --> 02:42:55,960
But then there's other tools that are specifically designed to fix certain things about your

1197
02:42:55,960 --> 02:43:00,680
programs, or help you fix certain things about your programs.

1198
02:43:00,680 --> 02:43:06,400
So for example, let's think about what the Python language is.

1199
02:43:06,400 --> 02:43:13,960
So if you want to give a terminal, or Python terminal, and run the first example that

1200
02:43:13,960 --> 02:43:17,980
we have there in the code.

1201
02:43:17,980 --> 02:43:21,500
So if you try to run what we have in the...

1202
02:43:21,500 --> 02:43:24,700
A terminal or Jupyter Notebook?

1203
02:43:24,700 --> 02:43:27,700
You can take a notebook as well.

1204
02:43:27,700 --> 02:43:28,700
Okay.

1205
02:43:28,700 --> 02:43:29,700
Sure.

1206
02:43:29,700 --> 02:43:30,700
Yeah.

1207
02:43:30,700 --> 02:43:31,700
So...

1208
02:43:31,700 --> 02:43:34,700
I have to set a name.

1209
02:43:34,700 --> 02:43:37,700
This is a follow along.

1210
02:43:37,700 --> 02:43:40,620
You don't need to type in this, by the way.

1211
02:43:40,620 --> 02:43:43,020
So each language has a syntax.

1212
02:43:43,020 --> 02:43:47,340
So like program language has a syntax.

1213
02:43:47,340 --> 02:43:53,220
And sometimes you might do something that is not permitted in that language.

1214
02:43:53,220 --> 02:44:00,460
So for example, here you cannot assign true to be one because you're not allowed to change

1215
02:44:00,460 --> 02:44:01,980
the true value.

1216
02:44:01,980 --> 02:44:03,620
So you have to get a syntax error.

1217
02:44:03,620 --> 02:44:08,220
So you have a problem in the syntax of what you have been writing.

1218
02:44:08,220 --> 02:44:12,680
Like the programming language doesn't understand what they're doing.

1219
02:44:12,680 --> 02:44:16,620
Of course, in this case, it's like a trivial problem.

1220
02:44:16,620 --> 02:44:25,940
But if you have a big program and you forget to write one extra bracket or one extra comma

1221
02:44:25,940 --> 02:44:32,420
somewhere or something, you get the same syntax error, and it can be really tedious to find

1222
02:44:32,420 --> 02:44:37,580
out this, especially if it's at the end of your program.

1223
02:44:37,580 --> 02:44:43,540
I guess it's better to know right away rather than have to save it.

1224
02:44:43,540 --> 02:44:48,140
And for this reason, people have written these linters.

1225
02:44:48,140 --> 02:44:50,940
So they remove lint.

1226
02:44:50,940 --> 02:44:54,000
I think that's the name why they have been written.

1227
02:44:54,000 --> 02:44:58,820
So they remove extra stuff and bad stuff from the code.

1228
02:44:58,820 --> 02:45:01,500
And they can spot these syntax errors.

1229
02:45:01,500 --> 02:45:06,460
So some popular linters are this rough i-lint and flake-8.

1230
02:45:06,460 --> 02:45:12,940
But for this example, let's try with i-lint, which should be installed in the example.

1231
02:45:12,940 --> 02:45:14,540
For example, yeah.

1232
02:45:14,540 --> 02:45:17,580
OK, so I'll type.

1233
02:45:17,580 --> 02:45:22,300
So in order to open the script, so we'll

1234
02:45:22,300 --> 02:45:23,980
talk more about this tomorrow.

1235
02:45:27,260 --> 02:45:28,100
Here's what I can do.

1236
02:45:28,100 --> 02:45:31,100
I can right click and copy the link.

1237
02:45:31,100 --> 02:45:36,580
And in JupyterLab, go to File, open from URL,

1238
02:45:36,580 --> 02:45:38,580
and paste the link.

1239
02:45:38,580 --> 02:45:42,180
OK, I have to use Control-V. And click Open.

1240
02:45:42,940 --> 02:45:51,820
And here it is. So it's both saved the file and has opened it in the JupyterLab here.

1241
02:45:51,820 --> 02:45:58,380
Yeah. And this program, usually when you get programs on the internet, when you use code by

1242
02:45:58,380 --> 02:46:02,780
other people, or if you write the code, you might write it as a script. Like in this case, it's an

1243
02:46:02,780 --> 02:46:10,860
example script. And by quick glance, it looks like Python code. So what's the problem? But let's try

1244
02:46:10,860 --> 02:46:18,620
to use PyLint to check if there's any problems here. So, the examples here use the command line.

1245
02:46:19,580 --> 02:46:25,900
So, there is possibility of getting these linters working in JupyterLab, but unfortunately,

1246
02:46:25,900 --> 02:46:32,460
well, you need to install specific packages for that. And for this example, let's try with the

1247
02:46:33,020 --> 02:46:38,860
terminal. So, we're showing from the command line. We think we've made this where if you're using

1248
02:46:38,860 --> 02:46:43,220
the Anaconda that should work on all operating systems.

1249
02:46:43,220 --> 02:46:46,260
But if not, then take a step back, watch us,

1250
02:46:46,260 --> 02:46:47,340
and don't worry.

1251
02:46:47,340 --> 02:46:53,620
Yeah, you don't need to run these examples while we are.

1252
02:46:53,620 --> 02:46:57,340
So I've made a new terminal here.

1253
02:46:57,340 --> 02:47:00,540
And I can scoot this down here.

1254
02:47:00,540 --> 02:47:01,860
So it shows I'm in.

1255
02:47:01,860 --> 02:47:07,540
Oh, I wanted this to open in the terminal.

1256
02:47:07,540 --> 02:47:13,700
If I click plus here, OK, so opening it this way

1257
02:47:13,700 --> 02:47:17,060
has put me at the right place where my Python stuff is.

1258
02:47:19,500 --> 02:47:20,940
OK, so what do I do?

1259
02:47:20,940 --> 02:47:22,140
I try running the lint.

1260
02:47:22,140 --> 02:47:25,260
Yeah, let's try running pylint and run the example.

1261
02:47:28,940 --> 02:47:31,060
Pylint, lint example.

1262
02:47:31,060 --> 02:47:35,140
So I push tab, it filled out the name.

1263
02:47:35,140 --> 02:47:39,740
I push enter, and okay, error.

1264
02:47:39,740 --> 02:47:41,420
So now we get an error.

1265
02:47:41,420 --> 02:47:51,020
So we see that there's first the name of the file, lintExample.py, then we get a line number

1266
02:47:51,020 --> 02:47:55,420
4, and then we get a 31.

1267
02:47:55,420 --> 02:47:57,860
I'm not certain what the 31 actually is.

1268
02:47:57,860 --> 02:48:01,300
I think it's called column 31.

1269
02:48:01,300 --> 02:48:09,560
And then we get an error code, like E something, like an error, 0001, parsing failed, unmatched

1270
02:48:09,560 --> 02:48:16,620
bracket. So if we now look at line four of the code and scroll down, we notice that there's

1271
02:48:16,620 --> 02:48:23,200
an extra bracket there. Well, actually, the JupyterLab highlights it for us. It marks

1272
02:48:23,200 --> 02:48:30,240
it as read already, which is nice, and which probably would help you not make this error.

1273
02:48:30,240 --> 02:48:38,640
But it's easy to see that, okay, now that we see it, we can remove it.

1274
02:48:38,640 --> 02:48:40,520
So let's remove that and save the file.

1275
02:48:40,520 --> 02:48:41,520
I remove that.

1276
02:48:41,520 --> 02:48:42,520
I save.

1277
02:48:42,520 --> 02:48:45,520
How do I save here?

1278
02:48:45,520 --> 02:48:49,880
File, save all, I guess works.

1279
02:48:49,880 --> 02:48:51,640
And then we rerun the linter?

1280
02:48:51,640 --> 02:48:55,480
Yeah, let's rerun it and see what happens.

1281
02:48:55,480 --> 02:48:59,120
So here in this terminal, I can push the up arrow key instead

1282
02:48:59,120 --> 02:49:01,840
of typing the whole thing again.

1283
02:49:04,320 --> 02:49:05,520
Yeah.

1284
02:49:05,520 --> 02:49:10,600
So now it's running again.

1285
02:49:10,600 --> 02:49:11,960
Why is it so slow?

1286
02:49:11,960 --> 02:49:13,200
Yeah, I don't know.

1287
02:49:13,200 --> 02:49:15,920
And we got plenty of other errors.

1288
02:49:15,920 --> 02:49:19,120
And let's look at these one by one.

1289
02:49:19,120 --> 02:49:24,120
So maybe if you can close the tab on the left.

1290
02:49:24,120 --> 02:49:25,240
Yes, OK.

1291
02:49:25,240 --> 02:49:28,820
So at the top, we see that, okay, on the line one,

1292
02:49:28,820 --> 02:49:33,820
we get this C something, missing module doc string.

1293
02:49:33,820 --> 02:49:38,120
So, okay, now this is like a code style warning

1294
02:49:38,120 --> 02:49:40,340
that you should have in your module,

1295
02:49:40,340 --> 02:49:42,100
you should have a documentation string there,

1296
02:49:42,100 --> 02:49:45,540
but okay, this is not an error, it's just good practice.

1297
02:49:45,540 --> 02:49:48,300
So let's not look at that too much.

1298
02:49:48,300 --> 02:49:53,300
On line four, we see, and also on line four,

1299
02:49:53,300 --> 02:50:03,860
column 4, line 4, column 19, and line 5, column 4, which is undefined variable np.

1300
02:50:05,460 --> 02:50:11,060
So the linter doesn't understand what np is, it hasn't been defined yet.

1301
02:50:11,700 --> 02:50:18,820
And this is explained by the last line in the error message, which is that on line 1

1302
02:50:18,820 --> 02:50:27,860
we have an unused import NumPy. So we imported NumPy, just import NumPy instead of import

1303
02:50:27,860 --> 02:50:35,380
NumPy as NP. So that's why we got this error, but it was hard to spot because it was valid code.

1304
02:50:35,380 --> 02:50:42,420
Like it looked valid, but we had a mistake in the code because we did the import wrong.

1305
02:50:42,420 --> 02:50:44,580
Should I fix it?

1306
02:50:44,580 --> 02:50:52,740
Yes, let's fix it. If you look at also the end of the output for the PyLinter, you see that

1307
02:50:52,740 --> 02:50:57,700
it gave a code rating. And the code rating was zero because it knows that, okay, this code won't

1308
02:50:57,700 --> 02:51:04,740
run. So, let's give it a zero rating. Like, it's zero out of ten bad code. And now that we have

1309
02:51:04,740 --> 02:51:12,580
fixed it, let's try running the linter again. Okay. I save all and push up arrow key again.

1310
02:51:14,580 --> 02:51:28,460
So, now we see that it shows that it's still missing the module doc string, so it gives

1311
02:51:28,460 --> 02:51:36,460
a code warning on it, but the other problems have been solved, so now it grades it as 8.33

1312
02:51:36,460 --> 02:51:41,860
out of 10, and it shows the previous run, so what was the improvement.

1313
02:51:41,860 --> 02:51:48,540
And this is, to me, the most fun part of Linter, because it gamifies the coding, like how high

1314
02:51:48,540 --> 02:51:51,340
can your score go?

1315
02:51:51,340 --> 02:51:55,660
Can you get the 10 out of 10 for the Linter?

1316
02:51:55,660 --> 02:51:59,780
And basically, the idea behind the Linter is that it allows you to spot the errors and

1317
02:51:59,780 --> 02:52:06,340
fix this kind of coding style and coding problems that you might have in your code before you

1318
02:52:06,340 --> 02:52:08,380
even run the code.

1319
02:52:08,380 --> 02:52:16,700
So you get coding done faster and you get a better result out of it.

1320
02:52:16,700 --> 02:52:27,420
So should we go to the first exercise already maybe, or do we have any questions in there?

1321
02:52:27,420 --> 02:52:28,660
There's a good question.

1322
02:52:28,660 --> 02:52:32,420
Why can't the linter show all errors to begin with?

1323
02:52:32,420 --> 02:52:37,020
So why does it only show the syntax error first?

1324
02:52:37,020 --> 02:52:42,220
Yeah, so that's a good question. And I think that is related to,

1325
02:52:43,980 --> 02:52:50,540
like, yeah, that's a good question. That's probably how the linter has been designed

1326
02:52:50,540 --> 02:52:56,140
internally. There's different kinds of syntax errors. There's egregious ones, for example,

1327
02:52:56,140 --> 02:53:02,860
the true equals one, or the brackets. If it doesn't know how to parse the input.

1328
02:53:02,860 --> 02:53:07,660
Basically, in the first example, we had the extra bracket there.

1329
02:53:07,660 --> 02:53:14,620
So the linter didn't know that, okay, how should I pass this, even this text?

1330
02:53:14,620 --> 02:53:19,620
Because I don't understand what's happening here, because suddenly we get an extra bracket

1331
02:53:19,620 --> 02:53:26,060
and I don't understand, is this valid code?

1332
02:53:26,060 --> 02:53:27,060
It doesn't understand the input.

1333
02:53:27,060 --> 02:53:30,700
And in the second example, there's something wrong in the input.

1334
02:53:30,700 --> 02:53:37,060
So it's like there's a first kind of an error, which is like, okay, yeah, yeah, it doesn't

1335
02:53:37,060 --> 02:53:42,580
understand what, like in the context of the language, it doesn't understand that, okay,

1336
02:53:42,580 --> 02:53:43,580
what is NumPy?

1337
02:53:43,580 --> 02:53:47,200
Like this hasn't been said before to me.

1338
02:53:47,200 --> 02:53:52,460
But of course, like Linter doesn't capture all errors because like we said at the beginning

1339
02:53:52,460 --> 02:53:59,900
of the day, Python is strongly typed, but not like not enforced.

1340
02:53:59,900 --> 02:54:04,900
So you might modify the things when the program is running in a way that the linter doesn't

1341
02:54:04,900 --> 02:54:11,660
know about, and it might not spot those errors, but it will spot a lot of errors.

1342
02:54:11,660 --> 02:54:16,580
Like the most annoying ones, the trivial errors, the ones that you are like, okay, I should

1343
02:54:16,580 --> 02:54:20,740
have noticed this, it will spot those.

1344
02:54:20,740 --> 02:54:28,100
So for our time progress, so we've got 25 minutes left.

1345
02:54:28,100 --> 02:54:31,380
recombine two exercises together?

1346
02:54:31,380 --> 02:54:32,060
Or?

1347
02:54:32,060 --> 02:54:34,260
Yeah.

1348
02:54:34,260 --> 02:54:35,620
Yeah, maybe we can.

1349
02:54:35,620 --> 02:54:39,260
Or the second exercise is more of a demo, I would say,

1350
02:54:39,260 --> 02:54:39,900
anyways.

1351
02:54:39,900 --> 02:54:42,220
So maybe we should go to exercise one

1352
02:54:42,220 --> 02:54:45,220
and then go to the format.

1353
02:54:48,060 --> 02:54:50,100
OK.

1354
02:54:50,100 --> 02:54:52,780
So exercise one, and how long do we have?

1355
02:54:52,780 --> 02:54:59,940
So should we, yeah, should we take 10 minutes?

1356
02:54:59,940 --> 02:55:01,900
It's not that long of a nexus.

1357
02:55:01,900 --> 02:55:02,900
45.

1358
02:55:02,900 --> 02:55:03,900
Okay.

1359
02:55:03,900 --> 02:55:04,900
Yeah.

1360
02:55:04,900 --> 02:55:05,900
Great.

1361
02:55:05,900 --> 02:55:07,900
So see you in 10 minutes.

1362
02:55:07,900 --> 02:55:08,900
Okay.

1363
02:55:08,900 --> 02:55:09,400
Bye.

1364
02:55:22,780 --> 02:55:24,840
you

1365
02:55:52,780 --> 02:55:54,840
you

1366
02:56:22,780 --> 02:56:24,840
you

1367
02:56:52,780 --> 02:56:54,840
you

1368
02:57:22,780 --> 02:57:24,840
you

1369
02:57:52,780 --> 02:57:54,840
you

1370
02:58:22,780 --> 02:58:24,840
you

1371
02:58:52,780 --> 02:58:54,840
you

1372
02:59:22,780 --> 02:59:24,840
you

1373
02:59:52,780 --> 02:59:54,840
you

1374
03:00:22,780 --> 03:00:24,840
you

1375
03:00:52,780 --> 03:00:54,840
you

1376
03:01:22,780 --> 03:01:24,840
you

1377
03:01:52,780 --> 03:01:54,840
you

1378
03:02:22,780 --> 03:02:24,840
you

1379
03:02:52,780 --> 03:02:54,840
you

1380
03:03:22,780 --> 03:03:24,840
you

1381
03:04:22,780 --> 03:04:29,780
.

1382
03:04:29,780 --> 03:04:36,780
.

1383
03:04:36,780 --> 03:04:43,780
.

1384
03:04:43,780 --> 03:04:50,780
.

1385
03:04:50,780 --> 03:04:59,000
if you show the exercise code. This is, by design, an example of an error that the linter

1386
03:04:59,000 --> 03:05:05,960
doesn't spot. If you look at the code here, it's fairly normal code, but it's so complex

1387
03:05:05,960 --> 03:05:10,200
that it's hard to say where the errors are. But the error that the linter doesn't spot

1388
03:05:10,200 --> 03:05:17,280
is in the axe scatter, where you have one T instead of two Ts in that line. The reason

1389
03:05:17,280 --> 03:05:24,400
why the linter doesn't spot this error is that the linter doesn't actually import anything

1390
03:05:24,400 --> 03:05:29,680
when it runs. Like, when it runs, it just checks the code. It doesn't actually, like,

1391
03:05:29,680 --> 03:05:35,120
import pandas. It doesn't import matplotlib or anything like that. So, it doesn't spot

1392
03:05:35,120 --> 03:05:39,320
that, okay, there's this object that has this attribute that is wrongly named.

1393
03:05:39,320 --> 03:05:41,640
So, it's, yeah.

1394
03:05:41,640 --> 03:05:44,640
It doesn't import anything or doesn't go fully deep?

1395
03:05:44,640 --> 03:05:56,320
Well, yeah. It usually checks like module level stuff. But usually it doesn't go that deep. So,

1396
03:05:56,320 --> 03:06:01,040
of course, there's other linters that might spot this, but there are various tools that you can use.

1397
03:06:03,600 --> 03:06:09,920
But this is like an example. Linters are no means perfect, but the thing is that they spot

1398
03:06:09,920 --> 03:06:18,760
spot a vast majority of the kind of things that humans might not spot, like these kind

1399
03:06:18,760 --> 03:06:20,160
of like KVL things.

1400
03:06:20,160 --> 03:06:22,160
I guess it's just...

1401
03:06:22,160 --> 03:06:23,160
Yeah.

1402
03:06:23,160 --> 03:06:24,160
Go ahead.

1403
03:06:24,160 --> 03:06:32,040
I was going to say, it's like, it's, it works well with a human.

1404
03:06:32,040 --> 03:06:35,040
Like you spot some things easily, but not others.

1405
03:06:35,040 --> 03:06:37,960
And the computer spots some things that you don't see well.

1406
03:06:37,960 --> 03:06:38,960
Yeah.

1407
03:06:38,960 --> 03:06:43,280
And it's a tool. It's a tool that you can use or not use. If you don't like linters,

1408
03:06:43,280 --> 03:06:46,240
you don't have to, but then you might encounter errors a bit more.

1409
03:06:46,240 --> 03:06:47,680
Yeah.

1410
03:06:47,680 --> 03:06:52,320
Okay. But let's move forward to another kind of productivity tool that you can use.

1411
03:06:53,040 --> 03:06:59,520
And this is about style enforcement. So Python is very flexible when it comes to

1412
03:06:59,520 --> 03:07:03,920
what sort of programming styles should you use? What sort of naming should you use? So

1413
03:07:03,920 --> 03:07:10,480
Here's a few examples. You can use different variable naming styles. These are all valid

1414
03:07:10,480 --> 03:07:19,280
Python, but they are for the reason that it's flexible. It doesn't enforce it,

1415
03:07:19,280 --> 03:07:24,720
but at the same time, it recommends certain standards, Python developers, because then it

1416
03:07:24,720 --> 03:07:31,840
makes coding easier to read for other people as well. These major standards are these Python

1417
03:07:31,840 --> 03:07:35,440
Enhancement protocols. I don't know what these are called. These PEP.

1418
03:07:35,440 --> 03:07:38,880
**JASON LENGSTORF** Yeah, I think it's Enhancement protocols.

1419
03:07:38,880 --> 03:07:42,160
**JASON LENGSTORF** Yeah, they're like recommendations for the community.

1420
03:07:43,040 --> 03:07:48,240
And the PEP 8 is one of the most popular ones, which is like set standards of how,

1421
03:07:48,240 --> 03:07:53,600
like, okay, your code should look like this. And then there's a docstring standard of how

1422
03:07:53,600 --> 03:07:57,920
the documentation strings should be written. And different people have different standards.

1423
03:07:57,920 --> 03:08:01,120
For example, for the documentation strings, NumPy has its own standard.

1424
03:08:01,840 --> 03:08:06,480
and Google has its own standard and different places have their own standards. But what is

1425
03:08:06,480 --> 03:08:13,280
usually nice is that you can use these different kinds of formatters and linters to enforce a

1426
03:08:13,280 --> 03:08:20,720
certain standard for your code. So I personally, I don't have that many opinions on my code.

1427
03:08:20,720 --> 03:08:29,200
I would rather my code be readable than something like, there's this joke about why don't people,

1428
03:08:29,200 --> 03:08:41,640
people, if they are in a courtroom and they are asked to tell in your own words what happened

1429
03:08:41,640 --> 03:08:46,400
in the situation, nobody just invents their own words, they use the same words that everybody

1430
03:08:46,400 --> 03:08:47,400
else uses.

1431
03:08:47,400 --> 03:08:53,040
They don't just start gobbling up random words, they use the words that other people

1432
03:08:53,040 --> 03:08:54,040
use.

1433
03:08:54,040 --> 03:08:55,040
And it's the same thing.

1434
03:08:55,040 --> 03:09:00,560
standards that other people use, it makes other people easier to read your code and easier to

1435
03:09:00,560 --> 03:09:08,640
write your code. And it's much easier to let a formatter or linter determine the standard than

1436
03:09:11,680 --> 03:09:17,200
fix it yourself. So, in the example, let's do the example here. So, we'll use this.

1437
03:09:17,200 --> 03:09:20,400
Oh. So, do right here.

1438
03:09:20,400 --> 03:09:24,960
Yeah. So, if you download the code here. So, this code looks pretty awful, right?

1439
03:09:24,960 --> 03:09:32,680
it's by design, it's supposed to look awful. It works. It's completely working code, but

1440
03:09:32,680 --> 03:09:35,080
I don't like it. It doesn't look pretty to me.

1441
03:09:35,080 --> 03:09:36,080
It's spacing weird.

1442
03:09:36,080 --> 03:09:46,000
Yeah, there's weird spacing, weird variable names, and all sorts of things. It's not pretty.

1443
03:09:46,000 --> 03:09:47,000
So let's do it.

1444
03:09:47,000 --> 03:09:48,000
Yeah.

1445
03:09:48,000 --> 03:09:59,880
copy the link, go to file, open from URL, paste the link, and open. I'm going to move

1446
03:09:59,880 --> 03:10:02,200
this to the top here.

1447
03:10:02,200 --> 03:10:09,440
Yeah. So, yeah, it works and it calculates this pi estimate using this target method,

1448
03:10:09,440 --> 03:10:10,440
but it's...

1449
03:10:10,440 --> 03:10:11,440
Yeah.

1450
03:10:11,440 --> 03:10:15,280
And it gives like examples there, but it looks pretty awful.

1451
03:10:15,280 --> 03:10:17,880
Should I try to run it?

1452
03:10:17,880 --> 03:10:21,880
Yeah, you can try to run it. Maybe try it from the command line.

1453
03:10:24,880 --> 03:10:26,880
Yeah, so here's Flake.

1454
03:10:26,880 --> 03:10:31,880
We'll see more how these scripts work tomorrow, so if this doesn't make sense, don't worry.

1455
03:10:31,880 --> 03:10:35,880
Yeah, but the main thing is how can we make it better?

1456
03:10:35,880 --> 03:10:38,880
So let's try first running PyLint on it.

1457
03:10:38,880 --> 03:10:41,880
Sorry, Flake 8 on it.

1458
03:10:41,880 --> 03:10:49,200
Flake 8 is this kind of like linter and code syntax, like checker.

1459
03:10:49,200 --> 03:10:56,160
And if you look at what sort of things it gives, it gives various of these, like, okay,

1460
03:10:56,160 --> 03:10:59,880
you should fix this and yeah.

1461
03:10:59,880 --> 03:11:05,880
And what we can do, of course, is we can manually fix these and it makes the code better.

1462
03:11:05,880 --> 03:11:07,960
But we can also use a formatter.

1463
03:11:07,960 --> 03:11:13,720
So one of the most common formatters is this black by Python Software Foundation, which

1464
03:11:13,720 --> 03:11:16,200
is like this opinionated formatter.

1465
03:11:16,200 --> 03:11:19,480
So it has its own style and it wants to enforce that style.

1466
03:11:19,480 --> 03:11:24,720
So it's a play on the Henry Ford's, like, you can have the Model T, the car.

1467
03:11:24,720 --> 03:11:26,800
Oh, that's where the name comes from.

1468
03:11:26,800 --> 03:11:31,960
In any color, as long as it's black, like that famous quote.

1469
03:11:31,960 --> 03:11:34,560
So it tries to enforce its own style.

1470
03:11:34,560 --> 03:11:37,560
So let's try to run black on this code example.

1471
03:11:37,560 --> 03:11:50,000
Okay, so, and I have been black, but it's in the, in the environment, in the, it's in

1472
03:11:50,000 --> 03:11:51,000
the code environment.

1473
03:11:51,000 --> 03:11:55,600
If you have, if you have installed them, yeah, okay.

1474
03:11:55,600 --> 03:11:56,600
Yeah.

1475
03:11:56,600 --> 03:11:59,320
Oh, so now it's reformatted it.

1476
03:11:59,320 --> 03:12:00,320
Yeah.

1477
03:12:00,320 --> 03:12:05,920
So you probably need to open the file again or reload it or.

1478
03:12:05,920 --> 03:12:09,520
Is there a reload Python file from disk?

1479
03:12:09,520 --> 03:12:12,640
So now we see that things happened.

1480
03:12:12,640 --> 03:12:18,880
So if we compare what's at the bottom and what's here, suddenly, for example, between

1481
03:12:18,880 --> 03:12:25,160
the brackets, all of the extra spacing is gone.

1482
03:12:25,160 --> 03:12:32,280
Some of the spacings are gone and things have been organized in a bit better way.

1483
03:12:32,280 --> 03:12:39,920
If you now run the Flake 8 again, Hoyt, let's ask it what it says about this.

1484
03:12:39,920 --> 03:12:44,360
So, I just pushed the up arrow key twice there.

1485
03:12:44,360 --> 03:12:45,360
Okay.

1486
03:12:45,360 --> 03:12:46,360
So, one line too long.

1487
03:12:46,360 --> 03:12:47,360
Yeah.

1488
03:12:47,360 --> 03:12:48,360
So, it.

1489
03:12:48,360 --> 03:12:49,360
Line.

1490
03:12:49,360 --> 03:12:50,360
Yeah.

1491
03:12:50,360 --> 03:12:51,360
Line five.

1492
03:12:51,360 --> 03:12:55,960
So, it says that, okay, usually there's this character limit of 80 characters so that it

1493
03:12:55,960 --> 03:13:09,640
can fit into a terminal. You don't have to enforce any standard, but that's common. In

1494
03:13:09,640 --> 03:13:14,200
your environment, you probably don't have this pep8 naming package that is in the example

1495
03:13:14,200 --> 03:13:21,560
and in the example environments, but it doesn't really matter. But it would give, if you scroll

1496
03:13:21,560 --> 03:13:23,560
a bit up.

1497
03:13:23,560 --> 03:13:24,560
It's up.

1498
03:13:24,560 --> 03:13:34,720
like, there. It would give those warnings. So, the name of the package is a bit above.

1499
03:13:34,720 --> 03:13:39,360
But those are warnings. It would give those warnings. So, you can install into Flake 8

1500
03:13:39,360 --> 03:13:45,000
these additional style guides. There's a huge amount of these extensions. And one of these

1501
03:13:45,000 --> 03:13:51,680
extensions gives warnings about variable names that don't abide by the pet8 convention. So,

1502
03:13:51,680 --> 03:13:57,360
example, it would say that the function name should be lowercase and the variable should

1503
03:13:57,360 --> 03:14:03,200
be lowercase. So those PI numbers there, because those are basically the standards.

1504
03:14:04,160 --> 03:14:12,240
But it doesn't really matter. You can go by the standards that you want to. All of these tools

1505
03:14:12,240 --> 03:14:18,480
are meant for you to enforce what you think is good code. But of course, they're also to

1506
03:14:18,480 --> 03:14:24,800
to, like, help others read your code, but you don't have to use any of these tools.

1507
03:14:24,800 --> 03:14:30,640
But usually, like, at least for me, it, like, gives me a peace of mind that, like, I haven't

1508
03:14:30,640 --> 03:14:37,440
written, like, code that looks bad for other people to read, because, like, then it makes

1509
03:14:37,440 --> 03:14:41,840
harder for them to use the code that I've written, because it's a collaborative effort,

1510
03:14:41,840 --> 03:14:46,480
and that's why people use these formatters and linters.

1511
03:14:46,480 --> 03:14:52,480
So here, well, do we have more or should I ask a philosophical question?

1512
03:14:52,480 --> 03:14:54,480
Shoot.

1513
03:14:54,480 --> 03:15:04,480
So my problem with things like code formatters, so for example this 4.11 here.

1514
03:15:04,480 --> 03:15:08,480
To me, how it is now with these spaces.

1515
03:15:08,480 --> 03:15:16,480
I would, if I was writing this myself, to me this is clearly easier to read.

1516
03:15:16,480 --> 03:15:17,480
Yes.

1517
03:15:17,480 --> 03:15:20,480
And, like, the way that things...

1518
03:15:20,480 --> 03:15:26,480
So, like, I like the idea, but the implementation...

1519
03:15:26,480 --> 03:15:35,480
If I'm running Black on my own code, it's usually making it easier to read in places I don't care about and harder to read other places.

1520
03:15:35,480 --> 03:15:40,400
So what I think, and I tend to use this white space a lot

1521
03:15:40,400 --> 03:15:43,520
to group things so I can mentally

1522
03:15:43,520 --> 03:15:46,840
understand what's going on or align things vertically.

1523
03:15:46,840 --> 03:15:49,880
But my proposed solution to this dilemma

1524
03:15:49,880 --> 03:15:53,120
is if it's a small issue of my own project,

1525
03:15:53,120 --> 03:15:56,960
I know I'm formatting it well myself anyway.

1526
03:15:56,960 --> 03:15:59,840
But whenever it's someone else's project,

1527
03:15:59,840 --> 03:16:04,000
or if it's a big project, a random contribution coming in

1528
03:16:04,000 --> 03:16:08,240
is probably worse than I would want.

1529
03:16:08,240 --> 03:16:10,640
So there it's better to make it uniform,

1530
03:16:10,640 --> 03:16:16,240
even if the uniform is not exactly what I would want.

1531
03:16:16,240 --> 03:16:18,000
Do you have any thoughts on this?

1532
03:16:18,000 --> 03:16:19,840
Yeah, yeah, I completely agree.

1533
03:16:19,840 --> 03:16:23,360
And I will also mention that there's like,

1534
03:16:23,360 --> 03:16:27,120
like what I usually myself do is that I usually pick

1535
03:16:27,120 --> 03:16:28,320
the tools I want to use,

1536
03:16:28,320 --> 03:16:30,720
like the linters or formaters I want to use.

1537
03:16:30,720 --> 03:16:32,960
And then you can, all of these tools,

1538
03:16:32,960 --> 03:16:40,160
you can specify different things that they want to do. There's different flags and configuration

1539
03:16:40,160 --> 03:16:50,560
parameters. And usually they're like black RC or some configuration file that you can specify that,

1540
03:16:50,560 --> 03:16:57,360
okay, don't care about these things. I want you to worry about these things and not these things.

1541
03:16:57,360 --> 03:17:05,040
And then you can enforce throughout the project a consistent style, but leaving your own things

1542
03:17:05,040 --> 03:17:10,320
there. There's also alternative linters that, for example, fix... Google has its own linter that

1543
03:17:10,320 --> 03:17:19,280
fixes these multiplication things. But I agree. The code, the formatters, it's the same with

1544
03:17:19,280 --> 03:17:25,200
ChatGPT or something like that. The ChatGPT has seen code and it writes code, but of course,

1545
03:17:25,200 --> 03:17:32,160
it doesn't understand code in the sense that humans do. So for us, we might have a different

1546
03:17:32,160 --> 03:17:38,000
kind of perception of the code and see some code to be better than the other one,

1547
03:17:39,520 --> 03:17:43,920
and more visually pleasing or something. The pattern looks nicer or something.

1548
03:17:45,600 --> 03:17:49,440
I don't know how much more time we have, but there's a really good question, number 71,

1549
03:17:49,440 --> 03:17:55,920
do linter spot type mismatches. Should we go to the notes now? Are we done with the lesson?

1550
03:17:55,920 --> 03:18:02,160
Yeah, I think we're done with the lesson. This is just a quick demo. In the lesson,

1551
03:18:02,160 --> 03:18:08,240
there's also mentioned about how you can automatically integrate into this to Git

1552
03:18:08,240 --> 03:18:14,160
so that whenever you run a commit, it will automatically run these linters and it will

1553
03:18:14,160 --> 03:18:19,200
say to you that, okay, like you have a problem in your commit or something. But, yeah, let's go to

1554
03:18:19,200 --> 03:18:28,080
the we can go to the, like, the cool down of that. But the idea behind this, there's huge

1555
03:18:28,080 --> 03:18:33,680
amount of these linters and huge amount of these productivity tools. But they are these tools. Like,

1556
03:18:33,680 --> 03:18:40,080
that's the most important things. And, like, if you don't know if you feel unsure about your code

1557
03:18:40,080 --> 03:18:43,760
And if you don't know how you should write your code and that sort of things,

1558
03:18:44,400 --> 03:18:55,680
the formatters and linters can make you write better code because they can help you with

1559
03:18:56,720 --> 03:19:07,920
the hard decisions of how should I write my code. And you don't have to worry about the code style

1560
03:19:07,920 --> 03:19:11,920
that you're using. You just follow what the linter says. And I personally do that a lot,

1561
03:19:11,920 --> 03:19:17,200
because I don't want to think about... I don't have that many opinions, so I would rather...

1562
03:19:17,200 --> 03:19:22,720
Like, somebody else has decided the thing already, so it's better to follow their lead.

1563
03:19:22,720 --> 03:19:28,960
They probably have good reasons for it. I usually follow that sort of paradigm.

1564
03:19:30,320 --> 03:19:37,360
Yeah. Okay. Sorry, I was looking at other things and adding the feedback to the notes.

1565
03:19:37,920 --> 03:19:44,080
Did we already answer that do linters detect type mismatches?

1566
03:19:44,080 --> 03:19:50,800
Yes. I'll mention that. So, like Python, for example, it's not strongly typed. So,

1567
03:19:50,800 --> 03:19:55,840
the types can change throughout the code runtime. But they are like type hints that you can put

1568
03:19:55,840 --> 03:20:01,440
into your code. And various programs, for example, or various libraries like NumPy and

1569
03:20:01,440 --> 03:20:09,360
Matplotlib and everything, they do this in the code. So then you can, if you write your type

1570
03:20:09,360 --> 03:20:16,960
into your code, you can run the static code checkers that basically go through your code,

1571
03:20:16,960 --> 03:20:23,840
they run the code, and then they check if the type suddenly changes or if they're incompatible

1572
03:20:23,840 --> 03:20:30,640
types or whatever. There are tools for this, and it just depends on how production code you want

1573
03:20:30,640 --> 03:20:36,400
to write. Normally, when we write scientific code, it's not necessarily like

1574
03:20:39,040 --> 03:20:43,360
you don't have to worry about types that much. But if you write a core library,

1575
03:20:43,360 --> 03:20:46,560
if you want to write a library that other people are using, then it might be a good

1576
03:20:46,560 --> 03:20:56,720
idea to add a type in. It becomes more easy for other people to use that.

1577
03:20:56,720 --> 03:21:02,760
But yeah, like on a normal small program, I don't know if it's necessary to use the type

1578
03:21:02,760 --> 03:21:03,760
hints.

1579
03:21:03,760 --> 03:21:04,760
Yeah.

1580
03:21:04,760 --> 03:21:08,040
It depends on the size of the program and the amount of collaborators as well.

1581
03:21:08,040 --> 03:21:11,920
Like if you have thousands, like I think somewhere in Black's website, they said that

1582
03:21:11,920 --> 03:21:14,800
there's 20 million lines of code formatted with Black.

1583
03:21:14,800 --> 03:21:15,800
20 million?

1584
03:21:15,800 --> 03:21:16,800
Yeah.

1585
03:21:16,800 --> 03:21:17,800
Formatted?

1586
03:21:17,800 --> 03:21:18,800
Formatted, yeah.

1587
03:21:18,800 --> 03:21:19,800
In the form?

1588
03:21:19,800 --> 03:21:20,800
Yeah.

1589
03:21:20,800 --> 03:21:26,560
So there are so many big projects that are using it, like no human would want to do that

1590
03:21:26,560 --> 03:21:29,920
code formatting for that job, basically.

1591
03:21:29,920 --> 03:21:31,320
I wouldn't want to do it.

1592
03:21:31,320 --> 03:21:34,960
I wouldn't want to be a type checker in a big company

1593
03:21:34,960 --> 03:21:38,080
checking, is the code looking good?

1594
03:21:38,080 --> 03:21:39,880
But there's tools for that.

1595
03:21:43,800 --> 03:21:45,640
OK.

1596
03:21:45,640 --> 03:21:49,320
Any other comments or things to discuss here?

1597
03:21:56,560 --> 03:22:03,280
So, this question 73, I think you can configure many of the linters for own preferences, like

1598
03:22:03,280 --> 03:22:05,720
what to ignore, and so on.

1599
03:22:05,720 --> 03:22:12,480
Also, [Name], I think you hinted at this, can black be configured to not do certain formats?

1600
03:22:12,480 --> 03:22:14,680
Or is it only one?

1601
03:22:14,680 --> 03:22:25,520
I think all of them have a huge amount of flags, so usually what you do is you start

1602
03:22:25,520 --> 03:22:28,720
But start from the basic configuration

1603
03:22:28,720 --> 03:22:31,880
and then you drop out certain things.

1604
03:22:31,880 --> 03:22:41,640
So yeah, it's usually like you can skip various things.

1605
03:22:45,760 --> 03:22:47,000
OK.

1606
03:22:47,000 --> 03:22:51,720
And this question 74, is it possible to use x with tool y?

1607
03:22:51,720 --> 03:22:54,880
The answer is usually yes.

1608
03:22:54,880 --> 03:22:59,520
but the person you ask usually won't know because there's so many combinations.

1609
03:22:59,520 --> 03:23:04,080
So do your own web searches and probably you can figure out how to.

1610
03:23:04,720 --> 03:23:09,360
But if you're using any of the popular things like in the question list PyCharm,

1611
03:23:09,360 --> 03:23:16,080
but if you're using VS Code, Veeam or whatever, there's like a million extensions that combine,

1612
03:23:16,080 --> 03:23:21,280
like [Name] said, tool X with tool Y. And usually you get like a button that

1613
03:23:21,280 --> 03:23:28,020
But like, if you press this button, it will run this linter or whatever for your code.

1614
03:23:28,020 --> 03:23:33,140
And usually many IDEs, they already come with some of these tools.

1615
03:23:33,140 --> 03:23:37,640
Like they will automatically flag you syntax errors and that sort of thing.

1616
03:23:37,640 --> 03:23:42,580
But it's important to know that like these tools exist and you can utilize them.

1617
03:23:42,580 --> 03:23:45,820
And it's not like cheating, like who cares?

1618
03:23:45,820 --> 03:23:51,740
Not like, yeah, it isn't like you did it the hard way.

1619
03:23:51,740 --> 03:23:53,900
OK, now you won a medal.

1620
03:23:53,900 --> 03:23:57,660
Like coding isn't like a competitive video game

1621
03:23:57,660 --> 03:23:58,140
or something.

1622
03:23:58,140 --> 03:24:05,460
Like it's like coding is, yeah, you can go the easy route.

1623
03:24:05,460 --> 03:24:07,980
Your main work isn't a homework assignment

1624
03:24:07,980 --> 03:24:10,940
where if you don't do it yourself, it's plagiarism.

1625
03:24:10,940 --> 03:24:14,900
your real work is.

1626
03:24:14,900 --> 03:24:16,020
Yeah.

1627
03:24:16,020 --> 03:24:21,860
Like, for example, one would think that, for example, like.

1628
03:24:21,860 --> 03:24:23,720
We're past the time now.

1629
03:24:23,720 --> 03:24:27,700
So if we are done with everything for today,

1630
03:24:27,700 --> 03:24:30,260
we might still hang out talking for a little bit.

1631
03:24:30,260 --> 03:24:32,700
But thank you for coming.

1632
03:24:32,700 --> 03:24:36,540
And if you have more, please fill out

1633
03:24:36,540 --> 03:24:37,980
this feedback for today.

1634
03:24:37,980 --> 03:24:43,740
it is very important and we always look at it before preparing the next year.

1635
03:24:46,540 --> 03:24:52,540
Okay, so what were you saying before? Yeah, I was just saying that if you think about,

1636
03:24:54,540 --> 03:25:00,460
the fresco on Sistine Chapel or something, Michelangelo didn't paint the whole thing.

1637
03:25:00,460 --> 03:25:08,620
he had a huge amount of helpers planning and doing that painting. Or like David, he had people

1638
03:25:09,580 --> 03:25:18,780
helping with the initial steps of the work, like applying a low-layer paint and that sort of

1639
03:25:18,780 --> 03:25:25,420
stuff. So coding is a similar kind of thing. The hard things are what you really want to do with

1640
03:25:25,420 --> 03:25:29,620
with the code, the easier things of, okay, how do I write this?

1641
03:25:29,900 --> 03:25:35,100
You can use chat GPT or whatever, like linters and formatters to help you with

1642
03:25:35,100 --> 03:25:41,740
that, getting the idea across and the, you can, you can get the art out of the

1643
03:25:41,780 --> 03:25:48,180
marble block, but like, yeah, it's not cheating to use like helper tools.

1644
03:25:48,180 --> 03:25:51,060
It's, it's just a way of improving the productivity.

1645
03:25:51,860 --> 03:25:52,140
Yeah.

1646
03:25:54,220 --> 03:25:54,500
Okay.

1647
03:25:54,500 --> 03:25:55,500
Hello, [name].

1648
03:25:55,500 --> 03:25:59,860
Any comments on today before we hang up?

1649
03:25:59,860 --> 03:26:02,620
I really like this productivity tool session.

1650
03:26:02,620 --> 03:26:04,380
It was good to edit.

1651
03:26:04,380 --> 03:26:05,900
So I learned new things.

1652
03:26:05,900 --> 03:26:09,060
And these are tools I use.

1653
03:26:09,060 --> 03:26:12,420
Yeah, the only thing I would want to, like next year,

1654
03:26:12,420 --> 03:26:16,180
we have to figure out how do we add it into the Jupyter.

1655
03:26:16,180 --> 03:26:20,220
Because, yeah, like just we maybe

1656
03:26:20,220 --> 03:26:22,940
need to make the environment so it's already there

1657
03:26:22,940 --> 03:26:29,260
something because it's possible to add these into Jupyter as well. So the exercise will be easier to

1658
03:26:29,260 --> 03:26:37,580
run without scripts. Yeah, but it's also a good preview for tomorrow since tomorrow we need to do

1659
03:26:37,580 --> 03:26:45,020
the script stuff. Yeah, tomorrow we'll have a lot of talk about like scripts and also libraries and

1660
03:26:45,020 --> 03:26:51,660
that sort of stuff. And also there was mentioned about software architecture in the chat. So we'll

1661
03:26:51,660 --> 03:26:56,620
be talking about that as well. And these productivity tools are, yeah, like [Name] said,

1662
03:26:56,620 --> 03:27:07,100
tied to that. But yeah, so should we close out the day? Great. Let's close up. See you tomorrow.

1663
03:27:07,100 --> 03:27:13,420
So remember to prepare for day three. There's some news here, which you probably already read.

1664
03:27:15,660 --> 03:27:20,460
Remember to give feedback. This session, for example, was a new session, so it would be nice

1665
03:27:20,460 --> 03:27:26,140
to hear what can we improve and what would you like to hear more in the upcoming years.

1666
03:27:27,340 --> 03:27:40,460
Yeah. Okay. Thanks a lot. See you tomorrow. Same time. Bye.

1667
03:27:50,460 --> 03:27:52,520
you

1668
03:28:20,460 --> 03:28:22,520
you

1669
03:28:50,460 --> 03:28:52,520
you

1670
03:29:20,460 --> 03:29:22,520
you

1671
03:29:50,460 --> 03:29:52,520
you

