1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:32,060
you

21
00:10:00,000 --> 00:10:02,060
you

22
00:10:30,000 --> 00:10:32,060
you

23
00:11:00,000 --> 00:11:02,060
you

24
00:11:30,000 --> 00:11:32,060
you

25
00:12:00,000 --> 00:12:02,060
you

26
00:12:30,000 --> 00:12:32,060
you

27
00:13:00,000 --> 00:13:02,060
you

28
00:13:30,000 --> 00:13:32,060
you

29
00:14:00,000 --> 00:14:02,060
you

30
00:14:30,000 --> 00:14:32,060
you

31
00:15:00,000 --> 00:15:02,060
you

32
00:15:30,000 --> 00:15:32,060
you

33
00:16:00,000 --> 00:16:02,060
you

34
00:16:30,000 --> 00:16:42,280
Test, can anyone out there hear us?

35
00:16:42,280 --> 00:16:43,880
Yes, Test.

36
00:16:43,880 --> 00:16:45,600
Good morning.

37
00:16:45,600 --> 00:16:49,400
Good morning, everyone.

38
00:16:49,400 --> 00:16:54,040
So someone says audio is good.

39
00:16:54,040 --> 00:16:57,000
Should we do the standard audio check?

40
00:16:57,000 --> 00:16:58,000
Let's do it.

41
00:16:58,000 --> 00:17:00,000
Me, [name], and [name].

42
00:17:00,000 --> 00:17:01,000
One.

43
00:17:01,000 --> 00:17:02,000
One.

44
00:17:02,000 --> 00:17:03,000
One.

45
00:17:03,000 --> 00:17:04,000
Two.

46
00:17:04,000 --> 00:17:05,000
Two.

47
00:17:05,000 --> 00:17:06,000
Two.

48
00:17:06,000 --> 00:17:07,000
Three.

49
00:17:07,000 --> 00:17:08,000
Three.

50
00:17:08,000 --> 00:17:09,000
Three.

51
00:17:09,000 --> 00:17:12,000
Okay, let's see what they say.

52
00:17:12,000 --> 00:17:17,000
Anyway, good morning, and welcome to week two.

53
00:17:17,000 --> 00:17:20,000
Good morning, good morning.

54
00:17:20,000 --> 00:17:39,120
I'm less loud than the other two, but it's always, I don't remember who said that people

55
00:17:39,120 --> 00:17:46,920
always start with, so, so, let's get this started.

56
00:17:46,920 --> 00:17:47,920
Exactly.

57
00:17:47,920 --> 00:17:54,040
I'm sharing this collaborative notes document

58
00:17:54,040 --> 00:17:57,800
that most likely you are familiar with.

59
00:17:57,800 --> 00:18:00,200
And there you will find a couple of icebreakers.

60
00:18:04,360 --> 00:18:10,000
Should I start asking [name] about the first icebreaker?

61
00:18:10,000 --> 00:18:12,840
Works on my computer.

62
00:18:12,840 --> 00:18:15,080
Like, I guess you heard this sentence.

63
00:18:15,080 --> 00:18:17,680
You know, what does it mean in practice that you

64
00:18:17,680 --> 00:18:23,040
trying to, I guess the context here is that you're not able to get something work on your computer

65
00:18:23,040 --> 00:18:28,800
and you ask me and I'd say, well, it works on my computer. Has this happened to you or?

66
00:18:28,800 --> 00:18:36,720
Oh yes, it has happened. And we have solved it in many different ways. Sometimes we just say,

67
00:18:36,720 --> 00:18:41,440
okay, I don't need to run it. You can run it. It works on your computer. Please do the work now.

68
00:18:41,440 --> 00:18:51,520
In other cases, restarting, like it says here also, has also helped to solve the magic of

69
00:18:51,520 --> 00:18:59,440
these computer problems and more recently, like in, let's say, in recent years after

70
00:18:59,440 --> 00:19:07,000
visiting the CodeRefinery workshop many years ago, also stuff like containers have helped

71
00:19:07,000 --> 00:19:10,000
and I guess we're going to discuss that today.

72
00:19:10,000 --> 00:19:11,000
How about you?

73
00:19:11,000 --> 00:19:15,960
Yeah, no, I was just thinking that in general, this is such a common problem that, you know,

74
00:19:15,960 --> 00:19:21,500
you might be trying to help your grandparents with their phone and you look at their phone

75
00:19:21,500 --> 00:19:25,360
and it behaves in a different way than, you know, even though you have the same model

76
00:19:25,360 --> 00:19:31,840
and same everything, it's, it's, it's quite amazing that, you know, that technology in

77
00:19:31,840 --> 00:19:41,760
general tends to not be that, how can I say, reproducible or, you know, stable, robust.

78
00:19:41,760 --> 00:19:48,560
But usually, yeah, restarting it or when it comes to software, reinstalling it sometimes

79
00:19:48,560 --> 00:19:49,960
fixes magically.

80
00:19:49,960 --> 00:19:57,640
I mean, isn't it actually pretty amazing when something does work across other computers?

81
00:19:57,640 --> 00:20:05,900
I mean, like, just imagine if I write something and it works on three different operating

82
00:20:05,900 --> 00:20:12,900
systems of computers and three different operating systems of phones, or two phones, and who

83
00:20:12,900 --> 00:20:14,900
knows however many other things.

84
00:20:14,900 --> 00:20:15,900
Yeah.

85
00:20:15,900 --> 00:20:18,080
That's a big deal.

86
00:20:18,080 --> 00:20:23,360
It's certainly still a feeling of magic when that actually works, like, first try.

87
00:20:23,360 --> 00:20:29,160
And you send some code or try to run it on a different computer, and it just works.

88
00:20:29,160 --> 00:20:33,000
And you're like, wow, I tried it.

89
00:20:33,000 --> 00:20:37,920
So what are the reasons why something usually doesn't work then?

90
00:20:37,920 --> 00:20:40,960
Good question.

91
00:20:40,960 --> 00:20:45,160
Exactly, there's so many reasons.

92
00:20:45,160 --> 00:20:52,240
Like even this part, this thing of the restarting, you know, I was trying to explain to my child

93
00:20:52,240 --> 00:21:00,120
that your phone went to a state that it's not the usual anymore, so you need to restart

94
00:21:00,120 --> 00:21:01,120
it too.

95
00:21:01,120 --> 00:21:02,120
Yeah.

96
00:21:02,120 --> 00:21:08,720
So wait, what's a good metaphor, a non-technological metaphor, where you have to restart it?

97
00:21:08,720 --> 00:21:14,880
Yeah, that's a very difficult one.

98
00:21:14,880 --> 00:21:19,520
I'm thinking of cooking, because cooking is our usual one.

99
00:21:19,520 --> 00:21:25,280
I guess that you know that if you messed it up, yeah, you have to restart in a sense that

100
00:21:25,280 --> 00:21:31,840
you have to throw away everything and re-remake your, I don't know, or...

101
00:21:31,840 --> 00:21:35,800
What about one of these forever stews where there's a pod and you keep adding stuff to

102
00:21:35,800 --> 00:21:42,480
it and taking it away, and it keeps going for, well, days or weeks, but sometime it

103
00:21:42,480 --> 00:21:49,200
gets messed up and it's too spicy or too whatever.

104
00:21:49,200 --> 00:21:55,440
or poisoned or something, and you have to throw it all out and start from the beginning.

105
00:21:55,440 --> 00:22:04,840
Because many other things, I mean, when you're cooking, normal cooking, you restart on every

106
00:22:04,840 --> 00:22:08,000
new recipe.

107
00:22:08,000 --> 00:22:16,880
Of course you can get the master chef who is able to fix if it's too spicy or too bland.

108
00:22:16,880 --> 00:22:22,200
But we still have a couple of minutes and the second icebreaker is about what do you

109
00:22:22,200 --> 00:22:27,440
know now about programming and scripting and software, which you wish somebody told you

110
00:22:27,440 --> 00:22:29,040
when you started?

111
00:22:29,040 --> 00:22:32,840
This is the kind of question that we have always been asking each other and always been

112
00:22:32,840 --> 00:22:36,680
asking to whoever comes across that.

113
00:22:36,680 --> 00:22:43,200
It's not truly or strictly related to this day, but in general, you know, some kind of

114
00:22:43,200 --> 00:22:47,440
advice for your younger self or future self?

115
00:22:50,560 --> 00:22:57,440
For me, what it says there, how to organize folders and code is definitely one big one,

116
00:22:57,440 --> 00:23:04,080
and how much it matters. Because maybe you have heard about that before and you're like,

117
00:23:04,080 --> 00:23:09,280
ah, yeah, but I'm just trying something out now. I don't have to worry about this. And then

118
00:23:09,280 --> 00:23:15,360
it grows and grows and it's more messy and messy and at some point someone asks you hey can you

119
00:23:15,360 --> 00:23:20,000
share this and then you have to like either put some order in your mess or write like

120
00:23:20,800 --> 00:23:25,200
super long documentation where to find the different files and where to find the different

121
00:23:25,200 --> 00:23:32,320
data so how much also this organization actually matters for your future self and how much time it

122
00:23:32,320 --> 00:23:38,120
it can save you would also be my answer here about you.

123
00:23:39,120 --> 00:23:43,960
Yeah, I mean, I feel in a way related to this kind of about the physical

124
00:23:43,960 --> 00:23:48,360
geography of the systems we use, because I feel that sometimes,

125
00:23:48,840 --> 00:23:53,800
especially the the new generation might be growing with iPads or other devices.

126
00:23:53,840 --> 00:23:58,520
They don't know the kind of, you know, geography of the file system,

127
00:23:58,520 --> 00:24:00,800
that there are folders, that there are processes.

128
00:24:00,800 --> 00:24:08,160
And so, and then when people start working with, you know, super computers or HPC clusters,

129
00:24:08,160 --> 00:24:13,600
then suddenly, is it now on my computer, am I, you know, where am I in the network of

130
00:24:13,600 --> 00:24:14,600
computers?

131
00:24:14,600 --> 00:24:20,800
So, this actually helped me a lot, understanding where am I, what is connected to the place

132
00:24:20,800 --> 00:24:27,280
where I am now, to kind of, you know, then understand, okay, I can't do this, what I

133
00:24:27,280 --> 00:24:29,840
would normally do in my laptop, because I'm not on my laptop

134
00:24:29,840 --> 00:24:30,340
anymore.

135
00:24:30,340 --> 00:24:36,160
I'm somewhere else on the internet.

136
00:24:36,160 --> 00:24:42,000
But it's 10 o'clock, so will we have a small jingle?

137
00:24:42,000 --> 00:24:43,720
I guess we can.

138
00:24:43,720 --> 00:25:02,360
Okay, we're back.

139
00:25:02,360 --> 00:25:12,000
So hello everyone, welcome to week number two, day one of week two or day four of the

140
00:25:12,000 --> 00:25:15,440
Code Refinery Workshop Spring 2024.

141
00:25:15,440 --> 00:25:16,280
I'm [Name].

142
00:25:16,280 --> 00:25:19,200
I'm a staff scientist at Aalto University.

143
00:25:19,200 --> 00:25:21,480
And with me today is [Name].

144
00:25:21,480 --> 00:25:24,960
Do you wanna say something about yourself, [name]?

145
00:25:24,960 --> 00:25:26,080
Yeah, hi, I'm [name].

146
00:25:26,080 --> 00:25:29,640
I'm an application specialist at CSC in Finland.

147
00:25:31,760 --> 00:25:36,480
So we continue from last week part.

148
00:25:36,480 --> 00:25:39,720
And for those who were joining us last week,

149
00:25:39,720 --> 00:25:43,240
You should already be familiar with this collaborative document

150
00:25:43,240 --> 00:25:45,320
that we've been using.

151
00:25:45,320 --> 00:25:48,360
We can use this document.

152
00:25:48,360 --> 00:25:50,960
Basically, you can use it to interact with us,

153
00:25:50,960 --> 00:25:55,140
to ask any sort of question, or write comments, or share links.

154
00:25:55,140 --> 00:25:57,280
For those who are just joining today,

155
00:25:57,280 --> 00:26:01,400
basically, after registration, you get access to this document.

156
00:26:01,400 --> 00:26:05,960
And then by clicking the pencil here on the top bar,

157
00:26:05,960 --> 00:26:10,480
it switches to this kind of code markdown mode.

158
00:26:10,480 --> 00:26:13,200
And there you are, as you can see,

159
00:26:13,200 --> 00:26:17,320
people are answering to the icebreakers.

160
00:26:17,320 --> 00:26:21,360
And at the bottom, you can add new questions.

161
00:26:21,360 --> 00:26:22,880
And when you don't need to edit anymore,

162
00:26:22,880 --> 00:26:25,400
you can click back on this eye,

163
00:26:25,400 --> 00:26:28,840
so that it feels less sluggy

164
00:26:28,840 --> 00:26:31,600
and it's more efficient to read it.

165
00:26:31,600 --> 00:26:39,520
So, the material for the lessons of today, they're linked here in this collaborative

166
00:26:39,520 --> 00:26:40,520
document.

167
00:26:40,520 --> 00:26:47,520
But, however, if you start from the workshop page, you can scroll to day number four.

168
00:26:47,520 --> 00:26:51,780
And the first part, the first two hours is going to be [name] and I covering this topic

169
00:26:51,780 --> 00:26:54,680
of reproducible research.

170
00:26:54,680 --> 00:27:01,000
So if you click on the link, you end up on this page, I can briefly talk about the learning

171
00:27:01,000 --> 00:27:08,320
outcomes for this page. So the idea and what we will cover on this first two hours kind

172
00:27:08,320 --> 00:27:16,360
of builds up from where we started with the first week. Ideally by the end of this lesson

173
00:27:16,360 --> 00:27:23,400
you should be able to follow good practices, good enough practices to keep your directories

174
00:27:23,400 --> 00:27:30,200
and your projects well organized. It's important that you understand that code and software

175
00:27:30,200 --> 00:27:33,200
in general, have basically dependencies

176
00:27:33,200 --> 00:27:35,800
that can be related to the system, where you are,

177
00:27:35,800 --> 00:27:39,240
or to other libraries and other piece of codes

178
00:27:39,240 --> 00:27:41,560
that are written by others.

179
00:27:41,560 --> 00:27:45,680
And so it's important to also document this.

180
00:27:45,680 --> 00:27:48,520
Then, hopefully, you will be able to document

181
00:27:48,520 --> 00:27:51,840
the computational steps and have an idea when this

182
00:27:51,840 --> 00:27:54,960
can be helpful and useful.

183
00:27:54,960 --> 00:27:57,560
And then we will briefly introduce you

184
00:27:57,560 --> 00:27:59,760
to the world of containers.

185
00:27:59,760 --> 00:28:02,160
we will just, you know, scratch the surface there.

186
00:28:02,160 --> 00:28:04,480
We will not go deeper into that,

187
00:28:04,480 --> 00:28:08,800
but it's an important topic to basically consider.

188
00:28:10,000 --> 00:28:13,680
And [name], do you wanna say something else

189
00:28:13,680 --> 00:28:17,120
here related to the learning outcomes or?

190
00:28:17,120 --> 00:28:18,760
No, but maybe let's talk a little bit

191
00:28:18,760 --> 00:28:23,760
about how it all connects in the next page.

192
00:28:24,800 --> 00:28:28,080
So for those of you that have joined already last week,

193
00:28:28,080 --> 00:28:32,520
you might be familiar with this wonderful little image here

194
00:28:32,520 --> 00:28:34,240
by [name].

195
00:28:34,240 --> 00:28:36,400
And this time it looks a little bit different

196
00:28:37,520 --> 00:28:39,560
in a sense that we have added

197
00:28:39,560 --> 00:28:43,920
all the Code Refinery lesson titles to this figure

198
00:28:43,920 --> 00:28:47,160
because the Code Refinery workshop itself

199
00:28:47,160 --> 00:28:49,100
could also be called like a workshop

200
00:28:49,100 --> 00:28:50,560
on reproducible research.

201
00:28:50,560 --> 00:28:52,360
Like everything that we do here

202
00:28:52,360 --> 00:28:55,440
like leads to you being better prepared

203
00:28:55,440 --> 00:29:00,080
for doing reproducible research with your code.

204
00:29:01,100 --> 00:29:05,480
And we have these six helpful steps here.

205
00:29:05,480 --> 00:29:09,320
And for example, the get your files and folders in order

206
00:29:09,320 --> 00:29:11,840
is already, will be covered today

207
00:29:11,840 --> 00:29:13,980
in the reproducible research session.

208
00:29:15,420 --> 00:29:19,160
Then we have the good file names for,

209
00:29:19,160 --> 00:29:23,040
on folder names, which is covered in tomorrow's lesson

210
00:29:23,040 --> 00:29:26,260
about documentation, and then on day six,

211
00:29:26,260 --> 00:29:27,700
modular code development.

212
00:29:27,700 --> 00:29:31,340
We talk a little bit about like how already naming

213
00:29:31,340 --> 00:29:35,240
can help you in starting your documentation, for example.

214
00:29:35,240 --> 00:29:37,840
Then in general, documenting code,

215
00:29:37,840 --> 00:29:41,080
writing read-me's, code comments,

216
00:29:41,080 --> 00:29:43,560
and how that can help you help others

217
00:29:43,560 --> 00:29:47,560
and you understand your code later better.

218
00:29:47,560 --> 00:29:50,320
Then we had the version control,

219
00:29:50,320 --> 00:29:53,160
basically whole last week, or not just basically,

220
00:29:53,160 --> 00:29:55,920
the whole last week was all about version control,

221
00:29:55,920 --> 00:29:57,360
introduction to version control,

222
00:29:57,360 --> 00:30:00,640
and then also collaborative distributed version control.

223
00:30:00,640 --> 00:30:02,040
If you have missed that,

224
00:30:02,040 --> 00:30:05,480
you can always go back and watch the videos

225
00:30:05,480 --> 00:30:08,220
to learn about that there.

226
00:30:09,080 --> 00:30:13,400
And then this week, we talk basically on every day,

227
00:30:13,400 --> 00:30:16,160
something about destabilizing your computing environment

228
00:30:16,160 --> 00:30:17,960
and the software we will start today

229
00:30:17,960 --> 00:30:25,380
with, for example, the containers idea, then Jupyter Notebooks tomorrow, automated testing

230
00:30:25,380 --> 00:30:31,820
on day six, and also modular code development, we'll talk about how you can do this stabilization.

231
00:30:31,820 --> 00:30:37,820
And then in the end, you will probably want to publish your research outputs, which means

232
00:30:37,820 --> 00:30:43,640
your code, your data, your documents, and topics related to that will be discussed today

233
00:30:43,640 --> 00:30:50,520
afternoon in the social coding and open software lesson. And that's basically how it all connects

234
00:30:50,520 --> 00:30:57,160
and these two hours that we have now here on reproducible research are like a small glimpse

235
00:30:57,160 --> 00:31:04,200
into the world of the tools and the concepts that can help you with making your research code more

236
00:31:04,200 --> 00:31:13,160
reproducible. So do you want to continue [name] with the motivation for this lesson?

237
00:31:13,640 --> 00:31:14,880
We can go to the motivation.

238
00:31:14,880 --> 00:31:20,240
I like to what when you were explaining this to me,

239
00:31:20,240 --> 00:31:23,080
when we were discussing, that one

240
00:31:23,080 --> 00:31:26,080
can look at this in the sense of timescales

241
00:31:26,080 --> 00:31:29,760
that the Git version control are basically

242
00:31:29,760 --> 00:31:34,480
focusing on your day-to-day work or the weekly timescale.

243
00:31:34,480 --> 00:31:36,960
But then sometimes you don't need to control

244
00:31:36,960 --> 00:31:39,040
or you don't need to version control anymore.

245
00:31:39,040 --> 00:31:40,640
The daily changes, you want to start

246
00:31:40,640 --> 00:31:44,080
version in the whole project, which might last for months.

247
00:31:44,080 --> 00:31:45,680
And so what we will cover here is

248
00:31:45,680 --> 00:31:48,400
like moving away from the day-to-day timescale

249
00:31:48,400 --> 00:31:50,920
to the controlling at the project level,

250
00:31:50,920 --> 00:31:53,200
so at the month or year level.

251
00:31:53,200 --> 00:31:54,560
Or it can even be bigger.

252
00:31:54,560 --> 00:31:57,360
As you heard in week number one that we were time

253
00:31:57,360 --> 00:32:01,200
traveling through Git, here we will do even more time

254
00:32:01,200 --> 00:32:04,680
traveling, meaning going back to very old versions of operating

255
00:32:04,680 --> 00:32:12,040
systems and and things like that so that you know the future the future selves and the future

256
00:32:12,040 --> 00:32:17,720
other people who want to rework with what we did are able to to travel back in time

257
00:32:19,880 --> 00:32:26,520
so it's good to start with some motivation let me briefly check if there's anything on the

258
00:32:26,520 --> 00:32:32,280
HackMD that is worth mentioning all right there's nothing specific so

259
00:32:34,680 --> 00:32:40,520
Basically, the motivation when it comes to this episode on reproducible research, one

260
00:32:40,520 --> 00:32:46,320
could even argue that the whole Code Refinery workshop should be called reproducible computational

261
00:32:46,320 --> 00:32:53,040
research workshop, because as you just heard from what [name] has described, everything

262
00:32:53,040 --> 00:32:59,600
is kind of connected together with the goal of having a project in the specific case,

263
00:32:59,600 --> 00:33:06,400
a research project that is able to be run many times over and over and with the goal

264
00:33:06,400 --> 00:33:12,780
that you know that the same output is when you have the same input and the same code

265
00:33:12,780 --> 00:33:19,080
you are able to reobtain the same output. So in this funny cartoon here this is funny

266
00:33:19,080 --> 00:33:24,680
I don't know if it's that funny because it's actually a trouble not funny at all thing

267
00:33:24,680 --> 00:33:31,700
for the doctoral researcher who is in this situation, and maybe many of you, if you've

268
00:33:31,700 --> 00:33:36,820
been to this type of situation, please let us know in the collaborative notes. But here

269
00:33:36,820 --> 00:33:41,540
you see the senior professor saying, don't worry, you know, you don't have to start your

270
00:33:41,540 --> 00:33:47,220
code from scratch, because maybe some postdoc has written all the pipeline for the lab,

271
00:33:47,220 --> 00:33:53,260
but the postdoc most likely has left to another lab. And the professor continues, you can

272
00:33:53,260 --> 00:33:58,620
reuse the software that the previous person on the project wrote several years ago.

273
00:33:58,620 --> 00:34:04,700
And then the doctor researches like, are there instructions for how to use it? I doubt it.

274
00:34:04,700 --> 00:34:11,620
Is the code commented? Not likely. Where are the files? Who knows? But this is going to

275
00:34:11,620 --> 00:34:17,700
be painful, isn't it? It's just a scratch. So I don't know about you, [name], but at

276
00:34:17,700 --> 00:34:24,540
At least I have experienced this at the very beginning of when I started with the research

277
00:34:24,540 --> 00:34:25,540
work.

278
00:34:25,540 --> 00:34:29,940
And of course, here the context of course is academic research, scientific research,

279
00:34:29,940 --> 00:34:33,380
but the same issue could also be applied in companies.

280
00:34:33,380 --> 00:34:40,260
You wouldn't like to deliver a tool, a software tool, where one day you are able to make it

281
00:34:40,260 --> 00:34:46,420
work and another day it's just giving completely different results.

282
00:34:46,420 --> 00:34:54,000
So here are some more scary, funny, but not funny anecdotes in this box here.

283
00:34:54,000 --> 00:34:58,040
So for example, a group of researchers obtain great results and submit their work to high

284
00:34:58,040 --> 00:34:59,600
profile journals.

285
00:34:59,600 --> 00:35:05,320
And then usually after six months, if not even more, depending on the field, the reviewers

286
00:35:05,320 --> 00:35:10,680
finally tell you what's wrong and they ask for tiny changes to the figures or another

287
00:35:10,680 --> 00:35:12,880
analysis.

288
00:35:12,880 --> 00:35:18,800
And then when the people start working on the revisions, they sometimes realize they're

289
00:35:18,800 --> 00:35:26,600
not even able to regenerate the same figures of the submitted version of the paper or then

290
00:35:26,600 --> 00:35:32,600
maybe some data got lost, some code they used to work suddenly doesn't work anymore and

291
00:35:32,600 --> 00:35:39,440
no one can figure out which part of the system stopped working. Why aren't we able to rerun,

292
00:35:39,440 --> 00:35:45,760
know the same code that we did before submitting this paper and this of course lost everything

293
00:35:45,760 --> 00:35:51,440
and in some cases even you know the manuscript actually stays there in the in the file drawer

294
00:35:52,080 --> 00:35:56,640
as this ever happened to you [name] that in this kind of situation

295
00:36:00,320 --> 00:36:06,880
oh yes especially when the when the reviewing process is very long and you basically already

296
00:36:06,880 --> 00:36:14,080
forgot what you what you did like half a year a year ago and then you should fix just a tiny little

297
00:36:14,080 --> 00:36:18,880
thing that the reviewer didn't like or that you maybe noticed even after submission and

298
00:36:19,680 --> 00:36:26,160
can be very painful but it's a hard way of learning also. And you pointed out really well that

299
00:36:26,960 --> 00:36:31,600
it's something that you did which is something that also came out in the first week that

300
00:36:31,600 --> 00:36:39,680
the main collaborator that you have is yourself, and specifically yourself in the future.

301
00:36:39,680 --> 00:36:44,880
So you know that if you document well the software pipeline, if you really write down today

302
00:36:45,440 --> 00:36:51,040
how you created that figure in six months or in one year, your future self most likely will be very

303
00:36:51,040 --> 00:36:57,440
happy that you wrote down these notes, that you made your research reproducible, because this is

304
00:36:57,440 --> 00:37:02,960
is what we're talking about here. And so that, you know, you will not have to restart from

305
00:37:02,960 --> 00:37:11,720
scratch like in this, like in this cartoon here. So most likely you heard about reproducible

306
00:37:11,720 --> 00:37:17,420
research and again, I highly encourage to use our notes, shared notes document where

307
00:37:17,420 --> 00:37:24,360
you can write your experiences on reproducibility in research. And even if you, there's many

308
00:37:24,360 --> 00:37:29,920
nice talks and papers, so if you have a favourite talk or a favourite paper on the topic, please

309
00:37:29,920 --> 00:37:33,280
link it in the collaborative notes.

310
00:37:33,280 --> 00:37:40,480
But in general, kind of this so-called reproducibility crisis started maybe sometimes in 2010.

311
00:37:40,480 --> 00:37:45,080
It kind of started with the field of experimental psychology, where they clearly noticed that

312
00:37:45,080 --> 00:37:52,000
biases, which can be intentional biases or unconscious biases in the research process,

313
00:37:52,000 --> 00:38:00,320
they were making the findings highly, how can I say, variable, basically irreproducible.

314
00:38:00,320 --> 00:38:07,960
So then what you see here in this figure without going deeply into the details is from a survey

315
00:38:07,960 --> 00:38:15,120
that the Nature Journal did in 2016. And so here they asked various scientists in various

316
00:38:15,120 --> 00:38:21,200
fields, how they felt, you know, if they feel that they were struggling in reproducing an

317
00:38:21,200 --> 00:38:27,080
experiment, could be their own experiment, could be some experiment that you read from

318
00:38:27,080 --> 00:38:33,080
a study that you try to reproduce locally. And the sentiment in general across all fields

319
00:38:33,080 --> 00:38:39,440
is that, you know, more than half of the respondents, they were saying that, yes, there is a crisis.

320
00:38:39,440 --> 00:38:44,440
It's impossible to reproduce the top papers in my field. I'm struggling to reproduce

321
00:38:44,440 --> 00:38:55,720
what I did six months ago and so on. So these levels of reproducibility this is something

322
00:38:55,720 --> 00:39:00,920
that is important to understand because often in science what we see is just the tip of

323
00:39:00,920 --> 00:39:06,300
this pyramid. What we see sometimes is just the article and within the article there might

324
00:39:06,300 --> 00:39:11,400
be a description of methods and they might be mentioning although it's very rare if they

325
00:39:11,400 --> 00:39:14,120
they use certain libraries or certain software tools.

326
00:39:15,400 --> 00:39:18,240
But often the kind of this methodological details

327
00:39:18,240 --> 00:39:20,840
down to the kind of to the code or to the computation

328
00:39:20,840 --> 00:39:25,840
they're kind of left to the reader as an exercise.

329
00:39:26,720 --> 00:39:29,600
And unfortunately, that's what makes it really difficult

330
00:39:29,600 --> 00:39:31,680
that sometimes just by reading an article

331
00:39:31,680 --> 00:39:36,680
it's just impossible to replicate what these people did.

332
00:39:36,680 --> 00:39:44,080
So, hopefully an article comes with some documentation, meaning that, you know, the method section

333
00:39:44,080 --> 00:39:49,800
in the article sometimes needs to be expanded so that it can start adding details on which

334
00:39:49,800 --> 00:39:56,720
methods were used, what type of computational, I don't know, solutions were adopted, and

335
00:39:56,720 --> 00:40:00,720
maybe a description, you know, if they are not able to share the data, they could at

336
00:40:00,720 --> 00:40:05,280
least describe how they collected the data, how they measured the phenomena.

337
00:40:05,280 --> 00:40:09,480
But you can already understand that sometimes without code and without data, it's still

338
00:40:09,480 --> 00:40:14,480
impossible to reproduce the article that you're reading.

339
00:40:14,480 --> 00:40:19,440
Some articles, it's a minority, but it's getting more and more popular.

340
00:40:19,440 --> 00:40:22,340
They actually come with code and with the data.

341
00:40:22,340 --> 00:40:28,760
In general, recently in the publication process, many journals are asking for this data availability

342
00:40:28,760 --> 00:40:34,080
statement and code software availability statement exactly for this reason.

343
00:40:34,080 --> 00:40:40,640
if there is a chance that the data can be reused and if it's possible to, you know,

344
00:40:40,640 --> 00:40:46,480
look at the code that was used for the paper. This gives a great, you know, chances that

345
00:40:46,480 --> 00:40:52,880
the whole, that the main results from the article actually reproducible because running

346
00:40:52,880 --> 00:41:00,640
the same data with the same code should hopefully produce the same results. In practice, however,

347
00:41:00,640 --> 00:41:07,800
It's not as simple as that because code on its own tends to depend on multiple libraries,

348
00:41:07,800 --> 00:41:12,400
multiple versions of softwares that one might be using.

349
00:41:12,400 --> 00:41:15,980
And then we have this layer of the environment.

350
00:41:15,980 --> 00:41:22,840
So with the environment here, we don't mean our nature and nurture, but we mean kind of

351
00:41:22,840 --> 00:41:28,480
the computational environment where the code is running, where the data are stored.

352
00:41:28,480 --> 00:41:34,080
So that if one could truly reproduce the same computational environment, bring the same code

353
00:41:34,080 --> 00:41:43,860
and the same data, most likely, if not very often, you are able to obtain the same results.

354
00:41:43,860 --> 00:41:53,080
So this kind of gives the context of the reproducibility and why it's really important in research.

355
00:41:53,080 --> 00:41:58,520
we have a little bit of a discussion item for our collaborative document and so

356
00:42:00,520 --> 00:42:04,040
yeah it is already there and people are already answering so

357
00:42:04,040 --> 00:42:06,600
you can show it a little bit yeah maybe i switch to

358
00:42:17,320 --> 00:42:17,820
so

359
00:42:23,080 --> 00:42:29,040
What are your experiences with re-running or adjusting a script or a figure you created

360
00:42:29,040 --> 00:42:34,280
a few months ago? I really like the figure because I don't know about you [name] but

361
00:42:34,280 --> 00:42:40,000
for me at the beginning at least like I was kind of I'm not saying that I was editing

362
00:42:40,000 --> 00:42:45,760
my figures with Photoshop but for example the arrows they look so I didn't like the

363
00:42:45,760 --> 00:42:51,440
arrows of whatever program I was using in those days and so I was always manually fixing

364
00:42:51,440 --> 00:42:58,880
some arrows or the fonts in the arrows. Have you ever done that? Have you committed this?

365
00:43:00,080 --> 00:43:08,240
This crime, yes. I've also done that. Because also when you're new to using

366
00:43:08,240 --> 00:43:12,480
things like matplotlib in Python or something like this and you don't quite

367
00:43:12,480 --> 00:43:17,600
easily know how to do it, but in some other software it is really just a few clicks to

368
00:43:17,600 --> 00:43:28,240
add an arrow to highlight something, it's a natural step to go. But then it will come to

369
00:43:28,240 --> 00:43:35,040
haunt you at some point, very unlikely. Yeah, I mean, there's not even anything

370
00:43:35,040 --> 00:43:42,800
wrong per se. The issue is that often people don't write down that, after I generated the figure with

371
00:43:42,800 --> 00:43:48,580
with Marble Plate, I open it with Inkscape and I change all the fonts to whatever fancy

372
00:43:48,580 --> 00:43:53,480
font I wanted to use. If people would already document this, then there would already be

373
00:43:53,480 --> 00:43:59,280
a one layer of reproducibility added in this process of the figure. But of course, in general,

374
00:43:59,280 --> 00:44:05,440
I mean, it's clear that if one could create the figure all with the script, then you don't

375
00:44:05,440 --> 00:44:11,980
need to write down whatever manual steps you need to do with Photoshop or Inkscape.

376
00:44:11,980 --> 00:44:16,540
And it's super easy to forget those steps, these manual steps afterwards, because running

377
00:44:16,540 --> 00:44:21,340
the script is easy, but then opening it again in another software is like one more thing

378
00:44:21,340 --> 00:44:24,460
to think about always.

379
00:44:24,460 --> 00:44:29,540
That's in general a big issue with this graphical user interface tools, that of course you can

380
00:44:29,540 --> 00:44:36,540
document all the clicks and buttons that you need to do for re-obtaining the same output,

381
00:44:36,540 --> 00:44:38,500
the same outcome.

382
00:44:38,500 --> 00:44:42,940
sometimes it's difficult and then the interface changes and suddenly you can't, the buttons

383
00:44:42,940 --> 00:44:48,780
are not there where they used to be and you can't do that anymore.

384
00:44:48,780 --> 00:44:54,300
So here people are still writing. Have you continued working from a previous students?

385
00:44:54,300 --> 00:44:58,540
I guess yeah this at least I found it quite common not just in my experience but with

386
00:44:58,540 --> 00:45:05,100
the people that I help in my in my daily work.

387
00:45:05,100 --> 00:45:10,100
It's nice that someone is talking about preregistrations and register report.

388
00:45:10,100 --> 00:45:19,660
I'm one of the strong, strong supporter of this, of this way of doing science.

389
00:45:19,660 --> 00:45:25,680
But maybe the clock is ticking and it's 1021 in Finland.

390
00:45:25,680 --> 00:45:33,280
So if there's nothing else specifically to be mentioning here we could continue with

391
00:45:33,280 --> 00:45:36,640
the next.

392
00:45:36,640 --> 00:45:43,120
So organizing your projects.

393
00:45:43,120 --> 00:45:50,640
Basically this is something that everyone came across that you start your it can be

394
00:45:50,640 --> 00:45:55,640
your doctoral studies, master's thesis, or it can even be that you just joined a new

395
00:45:55,640 --> 00:46:03,920
company and you're working on some software. It all starts with the project organization.

396
00:46:03,920 --> 00:46:09,360
And so of course complex projects might have very complex structures and dependencies and

397
00:46:09,360 --> 00:46:15,760
multiple locations with data and code. But most likely you are starting with your own

398
00:46:15,760 --> 00:46:22,800
project where you are the project manager and the main responsible on the organization

399
00:46:22,800 --> 00:46:31,360
of the project. There's of course hundreds of ways of storing data and organizing your

400
00:46:31,360 --> 00:46:39,640
file system but here in this page we try to kind of give you the basics that are useful

401
00:46:39,640 --> 00:46:46,400
for organizing your project so what you see here this is like a so-called tree view of

402
00:46:46,400 --> 00:46:53,480
a file system where you would have a folder called project name and then inside that folder

403
00:46:53,480 --> 00:47:01,720
there are some subfolders data process data manuscript result and this as SRC which is

404
00:47:01,720 --> 00:47:08,460
like source, source for the code and doc for the documentation.

405
00:47:08,460 --> 00:47:14,980
So of course this is not the only way to structure a project but you understand that let's say

406
00:47:14,980 --> 00:47:20,980
that you win the lottery and you then decide to stop doing research work and you move to

407
00:47:20,980 --> 00:47:27,140
a nice island in the Pacific Ocean and live there happily.

408
00:47:27,140 --> 00:47:32,060
least the next person who will need to you know resume your project kind of gets a clear

409
00:47:32,060 --> 00:47:38,580
idea if already sees the same structure that we see here it's a structure that is familiar

410
00:47:38,580 --> 00:47:44,140
to the new person and then most likely you know there are some notes written on this

411
00:47:44,140 --> 00:47:49,860
readme document that would explain what's in different folders and what is the status

412
00:47:49,860 --> 00:47:55,780
of things and then it's easier for your collaborator basically to continue where the project was

413
00:47:55,780 --> 00:48:02,540
left very different from the situation that we saw in that PhD comic where the poor doctoral

414
00:48:02,540 --> 00:48:08,900
researcher had no idea about even where the files were stored.

415
00:48:08,900 --> 00:48:16,660
So in general, this tracking that we've been covering in the first week, the tracking of

416
00:48:16,660 --> 00:48:22,540
the changes of the code, it starts to now scale in this time scale that we said earlier

417
00:48:22,540 --> 00:48:25,740
is now becoming also tracking of the data,

418
00:48:25,740 --> 00:48:30,040
tracking of the results that, you know,

419
00:48:30,040 --> 00:48:32,160
you might be producing.

420
00:48:33,100 --> 00:48:38,100
And so, basically, I mean, this all fits into the kind of,

421
00:48:39,180 --> 00:48:41,100
into what we were mentioning earlier

422
00:48:41,100 --> 00:48:44,380
that it's not just about the tiny changes,

423
00:48:44,380 --> 00:48:48,180
documenting the tiny changes with the Git version control,

424
00:48:48,180 --> 00:48:49,820
tiny changes to the code,

425
00:48:49,820 --> 00:48:51,860
but also depending on the project,

426
00:48:51,860 --> 00:48:57,540
might also need to version control the data and there are tools for that or version control the

427
00:48:57,540 --> 00:49:02,340
results because you would have more iterations of the same figure and then in the end you want to

428
00:49:02,340 --> 00:49:13,540
keep whatever is the final version of the figure and so on. So when it comes to tools and templates

429
00:49:13,540 --> 00:49:18,980
but maybe before talking about tools and templates we could also ask these couple of questions to

430
00:49:18,980 --> 00:49:20,680
to the people who are watching us.

431
00:49:21,820 --> 00:49:22,940
So how do you collaborate?

432
00:49:22,940 --> 00:49:25,780
They're already being answered.

433
00:49:25,780 --> 00:49:27,140
Okay, that's excellent.

434
00:49:27,140 --> 00:49:30,700
You are so efficient this morning, everyone.

435
00:49:30,700 --> 00:49:32,500
And so the first question that we wrote

436
00:49:32,500 --> 00:49:34,260
in the collaborative notes is,

437
00:49:34,260 --> 00:49:37,480
are you using virtual control for academic papers?

438
00:49:37,480 --> 00:49:38,660
And this is of course very interesting

439
00:49:38,660 --> 00:49:42,100
because now it's not about tracking the changes in the code.

440
00:49:42,100 --> 00:49:43,820
One is actually about tracking, you know,

441
00:49:43,820 --> 00:49:46,500
about changes in the manuscript.

442
00:49:46,500 --> 00:49:54,500
And then the second question is how do you handle collaborative issues, for example conflicting changes.

443
00:49:54,500 --> 00:50:10,500
Maybe before switching to the collaborative notes, I'm going to ask [name], are you using or have you been using some sort of version control for academic papers with your supervisor?

444
00:50:10,500 --> 00:50:17,500
Yeah, like many others also already wrote here, we are currently using mainly Overleaf

445
00:50:17,500 --> 00:50:23,500
for collaboration on academic papers. It's nice because it has the integration with Git

446
00:50:23,500 --> 00:50:30,840
and you can look back in history and all these kind of things. And how we are fixing these

447
00:50:30,840 --> 00:50:36,980
collaborative issues there, like conflicting changes is that, well, everyone sees at all

448
00:50:36,980 --> 00:50:43,460
times like what the others are already working on so there is never that situation that some

449
00:50:43,460 --> 00:50:49,940
change comes out of nowhere but then we also try to first comment like I would like to add this

450
00:50:49,940 --> 00:50:56,260
here and then we all say okay and then we let that person work on on a section for example.

451
00:50:57,460 --> 00:51:04,580
How about you? Yeah I mean I've been working with seniors in my in my in my previous research I

452
00:51:04,580 --> 00:51:09,380
I was doing lots of basically neuroscience and some of the seniors I've been working with that

453
00:51:09,380 --> 00:51:13,940
might not be at the level of technology that they could use, you know, get virtual control

454
00:51:13,940 --> 00:51:19,220
or a system like Overleaf. However, even tools like Microsoft Word or Google Docs,

455
00:51:19,220 --> 00:51:26,580
they also have embedded so-called version tracking or virtual control. So even with graphical tools

456
00:51:26,580 --> 00:51:32,020
like Microsoft Word, you know, it's not the best tool for doing virtual control,

457
00:51:32,020 --> 00:51:35,820
but it's still possible to travel back in time,

458
00:51:35,820 --> 00:51:37,900
see what has changed in the document

459
00:51:37,900 --> 00:51:39,980
and comment on each other

460
00:51:39,980 --> 00:51:43,420
and then work with this type of conflicting changes.

461
00:51:44,260 --> 00:51:47,820
But it's nice that people here are writing their experiences

462
00:51:47,820 --> 00:51:50,140
and also maybe this is a trend that I've noticed

463
00:51:50,140 --> 00:51:54,300
with the new generation of younger PIs and supervisors

464
00:51:54,300 --> 00:51:57,440
that they're more moving towards this type of overleaf

465
00:51:57,440 --> 00:52:00,480
or distributed documents,

466
00:52:00,480 --> 00:52:03,680
distributed tools for for collaborative writing.

467
00:52:07,960 --> 00:52:15,480
So we still a few minutes and there are some very nice links

468
00:52:15,480 --> 00:52:18,840
here that [name] added to this page.

469
00:52:19,840 --> 00:52:22,680
This is something nice that came out last week because last week

470
00:52:22,680 --> 00:52:27,760
we talked about how you can have a repository that is a template

471
00:52:27,760 --> 00:52:36,080
So, that by cloning or forking the template, you can basically work on the folder structure

472
00:52:36,080 --> 00:52:39,000
or existing structure from the template.

473
00:52:39,000 --> 00:52:45,400
And so, here there's a nice collection of templates that by basically by forking them

474
00:52:45,400 --> 00:52:49,840
or by creating a new repository from the template, you are able to get a folder structure that

475
00:52:49,840 --> 00:52:51,520
is similar to the one here.

476
00:52:51,520 --> 00:52:56,280
So, this is good practice that if you're starting a new project, you can actually immediately

477
00:52:56,280 --> 00:53:03,960
start it as a repository as a git repository and for example we can have briefly a look at the

478
00:53:03,960 --> 00:53:12,280
touring way template where you see this type of similar structure there's more subfolders but

479
00:53:12,280 --> 00:53:18,440
you know it doesn't really matter it we clearly see that it's a similar to the structure that

480
00:53:18,440 --> 00:53:19,620
that we were proposing.

481
00:53:21,560 --> 00:53:23,960
More recently, there's also this type

482
00:53:23,960 --> 00:53:26,640
of reproducible publications.

483
00:53:26,640 --> 00:53:29,560
And so Overleaf, the tool that [name] already mentioned,

484
00:53:29,560 --> 00:53:32,520
is an important one, but it's not the only one.

485
00:53:32,520 --> 00:53:34,400
And in general, this is also something

486
00:53:34,400 --> 00:53:36,500
that journals are kind of catching up,

487
00:53:36,500 --> 00:53:38,300
trying to also publish something

488
00:53:38,300 --> 00:53:40,840
that is a little bit more dynamic,

489
00:53:40,840 --> 00:53:43,680
in a sense that now there are publishing platforms

490
00:53:43,680 --> 00:53:46,400
that allow basically to run the code

491
00:53:46,400 --> 00:53:51,320
while you are reading the manuscript.

492
00:53:51,320 --> 00:53:54,280
And so, for example, Jupyter is now

493
00:53:54,280 --> 00:53:57,920
able to be in some publication platform.

494
00:53:57,920 --> 00:53:59,400
They're using it.

495
00:53:59,400 --> 00:54:01,200
I can mention a couple in the neuroscience,

496
00:54:01,200 --> 00:54:04,800
at least in the notes document.

497
00:54:04,800 --> 00:54:09,360
However, it's 10.29, which is exactly one minute

498
00:54:09,360 --> 00:54:12,120
before our planned schedule.

499
00:54:12,120 --> 00:54:14,440
So [name], what are we going to do next?

500
00:54:16,400 --> 00:54:22,460
We actually had five minutes more for the collaborative document, but I think we looked

501
00:54:22,460 --> 00:54:28,540
at it already and there's at least no new questions that need to be answered.

502
00:54:28,540 --> 00:54:31,000
They have already some answer here.

503
00:54:31,000 --> 00:54:37,420
So I think we can go on and then after the next section, we will have a little bit longer

504
00:54:37,420 --> 00:54:42,380
break also to collect our thoughts.

505
00:54:42,380 --> 00:54:56,140
So I will take the screen share from you, built-in display, just move the Zoom stuff

506
00:54:56,140 --> 00:55:01,500
out of the way and show you the next section.

507
00:55:01,500 --> 00:55:07,660
So please continue answering in our collaborative documents the question that we already have

508
00:55:07,660 --> 00:55:08,660
there.

509
00:55:08,660 --> 00:55:14,900
collection to look through also after the workshop of what kind of experiences have

510
00:55:14,900 --> 00:55:21,460
different people made and how they solved it. Our next section will be about recording

511
00:55:21,460 --> 00:55:31,220
computational steps. So we probably all have been in that situation that we have some steps that

512
00:55:31,220 --> 00:55:37,780
we need to do in order to do our works. Like [name] mentioned before, the plotting can be

513
00:55:37,780 --> 00:55:44,500
one of these steps. Before that we probably need to process our data in some way that already makes

514
00:55:44,500 --> 00:55:53,860
two steps and there is probably many different ways of how we can record these kind of steps

515
00:55:53,860 --> 00:55:58,500
that we need to run one after another and in which order and how they are connected.

516
00:55:59,540 --> 00:56:07,460
And one way of doing this are workflow tools and that is what this next section will be about.

517
00:56:07,780 --> 00:56:15,780
And that is one way of how these steps can be recorded also in a reproducible manner.

518
00:56:15,780 --> 00:56:24,780
And for that section, just find my mouse, we will take a look at an example project

519
00:56:24,780 --> 00:56:29,780
that we have in our code refinery space. It's called WordCount.

520
00:56:29,780 --> 00:56:37,780
You can see here it has like a lightweight structure that [name] discussed before.

521
00:56:37,780 --> 00:56:43,780
Here also we have some code data, some other folders and then some more files.

522
00:56:43,780 --> 00:56:47,780
And we'll look into those a little bit more in a bit.

523
00:56:47,780 --> 00:56:54,780
So first this repository provides us with some code that takes in some data.

524
00:56:54,780 --> 00:56:58,780
And the data is also part of the repository, which are book texts.

525
00:56:58,780 --> 00:57:02,780
And then it provides us with some code.

526
00:57:02,780 --> 00:57:05,780
Maybe we can take a brief look here.

527
00:57:05,780 --> 00:57:14,780
So in the data section, we have four texts that contain the text of a book.

528
00:57:14,780 --> 00:57:22,780
And then when we go into the code section, we have two scripts.

529
00:57:22,780 --> 00:57:25,780
Those are small Python scripts.

530
00:57:25,780 --> 00:57:29,780
And no worries if you don't use Python in your work.

531
00:57:29,780 --> 00:57:32,580
You don't have to understand what's happening here.

532
00:57:32,580 --> 00:57:35,380
Basically, the name already tells a little bit

533
00:57:35,380 --> 00:57:36,900
about this story.

534
00:57:36,900 --> 00:57:42,540
So we have a count script, which counts

535
00:57:42,540 --> 00:57:47,740
the number of times each word appears in a file.

536
00:57:47,740 --> 00:57:49,420
And in this case, we want to know

537
00:57:49,420 --> 00:57:54,300
how many times each word appears in each of these books.

538
00:57:54,300 --> 00:57:58,620
And that gives us then the word and the count.

539
00:57:58,620 --> 00:58:01,660
And then the second step in this workflow

540
00:58:01,660 --> 00:58:04,140
that we'll be working with today is

541
00:58:04,140 --> 00:58:09,220
plotting this frequency of the 10 most used words

542
00:58:09,220 --> 00:58:11,020
in these books.

543
00:58:11,020 --> 00:58:12,780
So a pretty simple workflow.

544
00:58:12,780 --> 00:58:15,980
First, we analyze the data, then we plot the data.

545
00:58:15,980 --> 00:58:19,300
And there can be many more, of course,

546
00:58:19,300 --> 00:58:24,060
but this now just simplified to look at it.

547
00:58:24,060 --> 00:58:26,520
There is also mentioned in this readme here

548
00:58:26,520 --> 00:58:28,080
that there is dependencies,

549
00:58:28,080 --> 00:58:30,500
and this is something that we will look at

550
00:58:30,500 --> 00:58:32,300
a little bit later in this lesson.

551
00:58:33,580 --> 00:58:36,280
So for now, we can maybe ignore it

552
00:58:36,280 --> 00:58:38,840
because I will demo this now here.

553
00:58:38,840 --> 00:58:41,800
If you want to run this on your own computer later,

554
00:58:41,800 --> 00:58:44,420
then you can have a look at this environment file

555
00:58:44,420 --> 00:58:46,460
and see what to do with it.

556
00:58:46,460 --> 00:58:49,360
And you will learn that in the later lesson.

557
00:58:50,320 --> 00:58:55,320
And so in our case, we have kind of a given structure

558
00:58:56,400 --> 00:58:58,120
of how we run these things,

559
00:58:58,120 --> 00:59:01,060
because we first have to count the words

560
00:59:01,060 --> 00:59:02,560
and store that somehow.

561
00:59:02,560 --> 00:59:05,800
And then we need to use that data to plot

562
00:59:07,920 --> 00:59:09,680
the frequency of each words.

563
00:59:10,680 --> 00:59:15,240
And one way of how we can do that,

564
00:59:15,240 --> 00:59:17,760
and which is maybe the first thing that comes to our mind

565
00:59:17,760 --> 00:59:22,720
is to just run one Python code after another

566
00:59:22,720 --> 00:59:24,480
with the inputs and the outputs.

567
00:59:25,640 --> 00:59:26,880
So let's do that.

568
00:59:28,280 --> 00:59:30,440
I will move this aside.

569
00:59:30,440 --> 00:59:35,320
The link to this repository is in the collaborative document

570
00:59:35,320 --> 00:59:37,000
so you can follow there.

571
00:59:37,000 --> 00:59:41,520
I hope you now see my, yes, you see my command line.

572
00:59:43,440 --> 00:59:46,880
So I have my terminal here.

573
00:59:46,880 --> 00:59:51,400
I've cleaned it up a little bit and then I also have down here,

574
00:59:51,400 --> 00:59:54,080
for example, what if I type something here,

575
00:59:54,080 --> 00:59:57,320
you can see the command I typed in the bottom

576
00:59:57,320 --> 01:00:01,400
just so that you can follow along a little bit better.

577
01:00:01,400 --> 01:00:08,320
Let's now first do what we learned last week.

578
01:00:08,320 --> 01:00:15,920
First, we get the code to our computer by using git clone.

579
01:00:15,920 --> 01:00:21,920
I'll get the link from outside of your screen, I'm sorry.

580
01:00:21,920 --> 01:00:34,920
Hit clone, paste the link, okay, and then we go into the word count directory.

581
01:00:34,920 --> 01:00:39,920
Okay, so now we can take a look that all this information is really here.

582
01:00:39,920 --> 01:00:44,920
We have the code, the data directories, we have some other files.

583
01:00:44,920 --> 01:00:46,680
Everything is here.

584
01:00:46,680 --> 01:00:51,200
If we now want to run,

585
01:00:51,200 --> 01:00:56,400
for example, our Python code on one book,

586
01:00:56,400 --> 01:01:00,560
we can copy the line for

587
01:01:00,560 --> 01:01:04,560
the Python code from the readme file,

588
01:01:04,560 --> 01:01:06,560
which was something like this here.

589
01:01:06,560 --> 01:01:10,000
We call Python, we call the script that we have.

590
01:01:10,000 --> 01:01:14,120
We want to run it on the book called IELTS.txt,

591
01:01:14,120 --> 01:01:17,400
And we want to store that those results in the statistics

592
01:01:17,400 --> 01:01:20,160
out of the data.

593
01:01:20,160 --> 01:01:24,120
OK, that didn't take long.

594
01:01:24,120 --> 01:01:31,520
And now we can, for example, look with any kind of tool

595
01:01:31,520 --> 01:01:35,760
what we have in statistics out of the data.

596
01:01:35,760 --> 01:01:42,000
So there we now see the is 3,822 times in that book.

597
01:01:42,000 --> 01:01:45,520
then the next one is off, and so on.

598
01:01:45,520 --> 01:01:48,740
This will probably look quite similar for the different books,

599
01:01:48,740 --> 01:01:52,000
but we still want to get these names.

600
01:01:52,000 --> 01:01:59,080
What we can do now is we can also plot the whole thing in similar way.

601
01:01:59,080 --> 01:02:05,200
Luckily, the readme already provided us with these code lines,

602
01:02:05,200 --> 01:02:07,520
so we can copy them from there.

603
01:02:07,520 --> 01:02:10,140
Here, it looks a little bit different,

604
01:02:10,140 --> 01:02:13,720
So we call Python on the plot.py script.

605
01:02:13,720 --> 01:02:16,340
We have an input data file,

606
01:02:16,340 --> 01:02:19,340
which is our statistics.data,

607
01:02:19,340 --> 01:02:22,500
and then a plot file where we want to store the plot.

608
01:02:22,500 --> 01:02:24,480
So we can run that as well.

609
01:02:24,480 --> 01:02:25,600
Yep.

610
01:02:25,600 --> 01:02:29,060
And then we can take a look with this program,

611
01:02:29,060 --> 01:02:33,980
for example, to show the plot.

612
01:02:33,980 --> 01:02:36,960
And let me just check that you can see this.

613
01:02:36,960 --> 01:02:37,800
Yes.

614
01:02:37,800 --> 01:02:43,440
So this is one of the plots, what we want to have.

615
01:02:43,440 --> 01:02:46,320
In our case, we now have four books.

616
01:02:46,320 --> 01:02:48,920
So it seems easy enough that we just run

617
01:02:48,920 --> 01:02:56,120
these Python scripts one after another for these different books.

618
01:02:56,120 --> 01:02:59,120
Then we could make ourselves a note,

619
01:02:59,120 --> 01:03:01,360
we ran Python script 1, 2,

620
01:03:01,360 --> 01:03:03,160
3, or we can even write them down.

621
01:03:03,160 --> 01:03:09,440
We could even collect them in a bash script or some other kind of script.

622
01:03:09,440 --> 01:03:12,800
It could be a Python script or something else where we just

623
01:03:12,800 --> 01:03:17,520
record running one script after another.

624
01:03:17,520 --> 01:03:27,520
We also have that actually in this repository.

625
01:03:27,520 --> 01:03:31,400
It's called runall.sh.

626
01:03:31,400 --> 01:03:37,080
So there you can see now we have multiple rows of the same stuff.

627
01:03:37,080 --> 01:03:40,640
So we have Python, code count i,

628
01:03:40,640 --> 01:03:45,480
and then one book after another, we run through.

629
01:03:45,480 --> 01:03:49,680
Then the same for the plot lines,

630
01:03:49,680 --> 01:03:51,920
we plot one after another.

631
01:03:51,920 --> 01:03:58,440
So that would be one way of recording these computational steps.

632
01:03:58,440 --> 01:04:03,320
One shorter way, because you maybe are looking at this and you're saying,

633
01:04:03,320 --> 01:04:05,440
okay, we could also do this a little bit shorter.

634
01:04:05,440 --> 01:04:08,960
Yes, we can. We can, for example,

635
01:04:08,960 --> 01:04:14,360
loop through the different files that we have in our data directory,

636
01:04:14,360 --> 01:04:22,680
and then apply each script on each book file automatically.

637
01:04:22,680 --> 01:04:26,380
That would then look something like this, a little bit shorter.

638
01:04:26,380 --> 01:04:27,980
Don't worry about the bash.

639
01:04:27,980 --> 01:04:37,180
we just have here a for loop and we loop through all these four books and then we apply these

640
01:04:37,980 --> 01:04:45,580
count.py and then plot.py on our files. So [name] what do you say this is now more reproducible?

641
01:04:46,620 --> 01:04:53,820
Are we there? Can we stop here? I mean already this is quite an advanced project in a sense that

642
01:04:53,820 --> 01:05:00,900
that I can see from what you've been describing that we're trying to remove the human from

643
01:05:00,900 --> 01:05:05,740
running the script, from the interaction with the data, because often when I inherit some

644
01:05:05,740 --> 01:05:11,500
code from some project, and even me, myself, I'm responsible of that, instead of having

645
01:05:11,500 --> 01:05:18,580
a generic plot.py, I have been having plot underscore book1.py, and there inside I would

646
01:05:18,580 --> 01:05:23,100
have hardcoded the name of book1, and then it would be silly that I need to create many

647
01:05:23,100 --> 01:05:28,700
plot underscore book two plot underscore book three so this project is already excellent that

648
01:05:29,340 --> 01:05:35,340
this plot and count they're like functions modular that then depending on the input they can be they

649
01:05:35,340 --> 01:05:42,060
can be rerun but they should that maybe i would criticize on the reproducibility what if the books

650
01:05:42,060 --> 01:05:49,980
would be 1000 that you know sometimes these four loops with this bash terminal scripting you know

651
01:05:49,980 --> 01:05:57,260
maybe something dies with one of these 1000 books, is there a better way for, you know,

652
01:05:57,260 --> 01:06:05,740
scaling kind of in a more reproducible way? Yeah, good that you're asking. Of course,

653
01:06:05,740 --> 01:06:13,980
we also have a better way or a way that helps with some of the issues that you have mentioned here.

654
01:06:13,980 --> 01:06:24,120
and so now we are going from basically saying do this and then that so in this

655
01:06:24,120 --> 01:06:31,740
case we said first count the words how often they occur in the

656
01:06:31,740 --> 01:06:38,460
text and then plot it. We describe the dependencies between those plots because

657
01:06:38,460 --> 01:06:47,060
Here we can see that the second one requires the first one to be run because we need the

658
01:06:47,060 --> 01:06:59,660
output of the first script to be produced before we can even run the plot.py file.

659
01:06:59,660 --> 01:07:06,060
Workflow tools are one set of tools that can help with that so that you don't have to worry

660
01:07:06,060 --> 01:07:15,660
to make clear, run this and that, but you state, okay, this plot requires count to be run,

661
01:07:15,660 --> 01:07:21,420
so the workflow tool figures out how it can do that and how it can connect these different steps

662
01:07:21,420 --> 01:07:28,540
that you have in your workflow. And one example workflow tool that we will be looking at

663
01:07:28,540 --> 01:07:32,580
that today is SnakeMake.

664
01:07:32,580 --> 01:07:37,340
It's one of many tools to create

665
01:07:37,340 --> 01:07:44,140
this reproducible and scalable data analysis workflows.

666
01:07:44,140 --> 01:07:46,580
In the case of SnakeMake,

667
01:07:46,580 --> 01:07:52,500
we can already take a peek here in the repository.

668
01:07:52,500 --> 01:07:54,620
We scroll up.

669
01:07:54,620 --> 01:07:59,260
There's something called a snake file ready for us.

670
01:08:00,100 --> 01:08:09,500
It describes the workflow in a human readable way,

671
01:08:09,500 --> 01:08:11,900
but that also the machine can deal with.

672
01:08:11,900 --> 01:08:14,140
This is a Python-based language,

673
01:08:14,140 --> 01:08:16,780
but you can run all kinds of script with it.

674
01:08:16,780 --> 01:08:18,660
In our example, we run a Python script,

675
01:08:18,660 --> 01:08:21,060
but you can run also R scripts or

676
01:08:21,060 --> 01:08:24,940
any other language that you might be working with.

677
01:08:24,940 --> 01:08:28,740
One nice thing about this SnakeMake workflows is that they can

678
01:08:28,740 --> 01:08:33,860
scale rather seamlessly from your own laptop to

679
01:08:33,860 --> 01:08:39,140
high-performance computing cluster or the Cloud without the need

680
01:08:39,140 --> 01:08:44,620
to modify this SnakeMake file.

681
01:08:44,620 --> 01:08:48,820
While when you are running some other kind of script,

682
01:08:48,820 --> 01:08:55,660
you might have to modify things there to be able to run it like in a different environment.

683
01:08:56,220 --> 01:08:59,380
There was one question in the collaborative document,

684
01:08:59,380 --> 01:09:00,700
what's a script?

685
01:09:00,700 --> 01:09:03,460
The answer is pretty good.

686
01:09:03,460 --> 01:09:11,580
So we collect all the commands that we want to run

687
01:09:11,580 --> 01:09:17,100
into one file and have a series of instructions there,

688
01:09:17,100 --> 01:09:23,980
similar to like a cooking recipe, for example, where it's described like what you need to do

689
01:09:23,980 --> 01:09:34,300
and step by step. Okay, then the snake make file. So, you can see it here. Maybe I

690
01:09:34,860 --> 01:09:45,020
make it a little bit bigger still. So, we can find already some things that we have seen before.

691
01:09:45,020 --> 01:09:55,460
For example, we have our Python script mentioned here,

692
01:09:55,460 --> 01:09:58,360
the countered pi, the plot.pi,

693
01:09:58,360 --> 01:10:03,180
we have our data files mentioned here.

694
01:10:03,380 --> 01:10:05,860
The way this is set up,

695
01:10:05,860 --> 01:10:07,660
so this is already set up for us for

696
01:10:07,660 --> 01:10:11,900
the workflow that we just showed.

697
01:10:11,900 --> 01:10:17,820
The first thing here is that we define variable data with

698
01:10:17,820 --> 01:10:23,120
snakeMakeSpecific function that finds us all the book titles

699
01:10:23,120 --> 01:10:27,380
in our data directory that end with the extension text.

700
01:10:27,380 --> 01:10:33,160
Then we only want the title of that book in this data variable.

701
01:10:33,160 --> 01:10:38,240
Then we have a so-called rule-based system here.

702
01:10:38,240 --> 01:10:45,480
So in general, every rule within SnakeMake has an input,

703
01:10:45,480 --> 01:10:50,320
which is according to what we also were calling it.

704
01:10:50,320 --> 01:10:53,920
There's some questions about what is SnakeMake,

705
01:10:53,920 --> 01:10:56,000
like didn't understand that, and reasons

706
01:10:56,000 --> 01:10:57,160
for computational steps.

707
01:10:57,160 --> 01:11:00,560
So could you?

708
01:11:00,560 --> 01:11:02,960
Sorry.

709
01:11:02,960 --> 01:11:04,280
Oh, wait.

710
01:11:04,280 --> 01:11:07,200
It's like the last two questions.

711
01:11:07,200 --> 01:11:09,760
our SnakeMaker is used for.

712
01:11:09,760 --> 01:11:16,000
It's for recording the computational steps in a different manner.

713
01:11:16,000 --> 01:11:21,560
Maybe this becomes clear now when we go through it a little bit better.

714
01:11:22,800 --> 01:11:28,520
What is the main reason for recording computational steps?

715
01:11:28,520 --> 01:11:35,840
That we can reproduce our computational workflow also later.

716
01:11:35,840 --> 01:11:39,060
So if we would now just run.

717
01:11:39,060 --> 01:11:42,460
Let me just show this again if we or if we

718
01:11:42,540 --> 01:11:45,940
would just run our one Python script after another.

719
01:11:45,940 --> 01:11:48,140
Then we would.

720
01:11:48,140 --> 01:11:51,860
Maybe forget like what did we actually run and in

721
01:11:51,940 --> 01:11:54,060
what order did we run those?

722
01:11:54,060 --> 01:11:57,600
So we try to write it down somewhere and one

723
01:11:57,680 --> 01:12:01,180
way is to put those calls into a script that

724
01:12:01,260 --> 01:12:02,500
we then store.

725
01:12:02,500 --> 01:12:05,580
For example, alongside our data.

726
01:12:05,580 --> 01:12:07,420
or in our repository.

727
01:12:10,620 --> 01:12:13,260
I hope that answers.

728
01:12:13,260 --> 01:12:17,300
But at least the snake make what it's used for.

729
01:12:17,300 --> 01:12:19,980
I hope that will become clear during this section.

730
01:12:19,980 --> 01:12:23,180
If not, please move the question to the bottom again,

731
01:12:23,180 --> 01:12:26,100
and we'll try to explain it in more detail.

732
01:12:29,020 --> 01:12:32,820
So the snake file contains of rules.

733
01:12:32,820 --> 01:12:37,380
And every rule, as a minimum, needs an input.

734
01:12:37,380 --> 01:12:42,580
Or every rule has an input, an output, and a shell command,

735
01:12:42,580 --> 01:12:45,340
every normal rule.

736
01:12:45,340 --> 01:12:53,660
So we define what kind of things does this rule need to run.

737
01:12:53,660 --> 01:12:57,900
And in this case, we need this Python script.

738
01:12:57,900 --> 01:13:03,980
And then we need the book file defined.

739
01:13:03,980 --> 01:13:09,420
So now there's some questions like snake make

740
01:13:09,420 --> 01:13:12,220
versus a script that runs stuff in a loop.

741
01:13:15,820 --> 01:13:21,140
We will also get back to that a little bit after this demo.

742
01:13:21,140 --> 01:13:22,260
OK, yeah, so we'll see.

743
01:13:22,260 --> 01:13:23,820
Good.

744
01:13:23,820 --> 01:13:26,700
What are the differences?

745
01:13:26,700 --> 01:13:33,740
and it might also be like this is one example of a workflow tool and it might help you in some ways

746
01:13:33,740 --> 01:13:40,460
but it's not the solution to everything like if you only have a few steps in your workflow and

747
01:13:40,460 --> 01:13:47,100
little input files and are very sure that you will never have to like run it on many many more files

748
01:13:47,100 --> 01:13:53,180
for example then probably SnakeMake or any other workflow tool is overkill and like you can just

749
01:13:53,180 --> 01:14:01,180
run it by using a script instead of like kind of adding this another layer of complexity

750
01:14:01,180 --> 01:14:09,980
that you do with the workflow tool. Okay I'll get back to the other questions

751
01:14:10,860 --> 01:14:19,900
afterwards but yeah please keep them coming. So we have our rule that we call count words

752
01:14:19,900 --> 01:14:24,900
where we have our Python script for counting our input file.

753
01:14:25,220 --> 01:14:27,820
We define what is the output file.

754
01:14:27,820 --> 01:14:32,100
In this case, it's collected in this statistics folder

755
01:14:33,940 --> 01:14:38,300
with the same name as the input file and the data extension.

756
01:14:38,300 --> 01:14:41,920
And then here we define this very same call

757
01:14:41,920 --> 01:14:44,460
that we also had in our script before.

758
01:14:44,460 --> 01:14:49,120
And we use these wildcards for that.

759
01:14:49,120 --> 01:14:54,120
So we don't need to write out this here,

760
01:14:55,500 --> 01:14:57,900
but it will be filled in

761
01:14:57,900 --> 01:15:00,260
when SnakeMake is running automatically.

762
01:15:01,540 --> 01:15:05,260
And then we have a second rule here for making a plot,

763
01:15:06,380 --> 01:15:10,880
which takes in also the script again, a book.

764
01:15:10,880 --> 01:15:15,740
This time it is the output of the previous script here.

765
01:15:15,740 --> 01:15:21,180
This is the important part for Snake Make to figure out how to

766
01:15:21,180 --> 01:15:25,740
run these scripts and how to deal with the data that you give it.

767
01:15:25,820 --> 01:15:28,560
Then we have output file,

768
01:15:28,560 --> 01:15:30,940
which is the plot, and again,

769
01:15:30,940 --> 01:15:34,540
the Python call in this case.

770
01:15:34,540 --> 01:15:37,620
Here you can see that it's not like Python specific,

771
01:15:37,620 --> 01:15:43,420
but you could have any other shell commands here.

772
01:15:43,420 --> 01:15:50,600
Then we have this overarching rule here called all,

773
01:15:50,600 --> 01:15:53,920
which is basically that collects

774
01:15:53,920 --> 01:16:00,480
everything that is to be done in this workflow.

775
01:16:00,480 --> 01:16:05,560
It waits for inputs to be there that are the statistics,

776
01:16:05,560 --> 01:16:09,840
the data file, this book.data file,

777
01:16:09,840 --> 01:16:18,080
and the plot figure.

778
01:16:20,360 --> 01:16:23,640
Let's get back to that in a moment.

779
01:16:23,640 --> 01:16:28,280
Let's first maybe run this once.

780
01:16:28,280 --> 01:16:33,000
SnakeMake can be run with the command SnakeMake,

781
01:16:33,000 --> 01:16:37,800
and then we have to give it how many cores to use for this run.

782
01:16:37,800 --> 01:16:44,180
Then right now, because I have already processed one of the files manually,

783
01:16:44,180 --> 01:16:50,040
we first delete all output.

784
01:16:51,800 --> 01:16:57,680
I have forgotten that I need to go into my Konda environment,

785
01:16:57,680 --> 01:17:03,000
and [name] will tell you what that is after the break.

786
01:17:03,000 --> 01:17:05,480
I have to first Konda activate

787
01:17:05,480 --> 01:17:11,680
Code Refinery environment to make my SnakeMake available.

788
01:17:12,400 --> 01:17:18,240
Now I can run the delete all outputs command.

789
01:17:18,240 --> 01:17:22,060
It tells me something about building DAG of jobs.

790
01:17:22,060 --> 01:17:24,100
We'll get to that in a moment.

791
01:17:24,100 --> 01:17:27,300
Then it deletes all the outputs of

792
01:17:27,300 --> 01:17:30,240
previous runs that are also part of the repository.

793
01:17:30,240 --> 01:17:37,400
So we want to now see what SnakeMake does when we run it.

794
01:17:37,400 --> 01:17:41,680
So we have this snake file in the base repository.

795
01:17:41,680 --> 01:17:45,280
So we can run SnakeMake like this.

796
01:17:45,280 --> 01:17:52,520
And then it tells us a lot of things.

797
01:17:52,520 --> 01:17:56,160
And for some reason, this is not updating.

798
01:17:56,160 --> 01:17:58,280
I'm sorry for that.

799
01:17:58,280 --> 01:18:03,460
I hope it's slow enough to follow along

800
01:18:03,460 --> 01:18:07,200
if you want to do that later.

801
01:18:07,200 --> 01:18:11,500
So I'm scrolling up to what SnakeMake actually told me.

802
01:18:11,500 --> 01:18:14,720
So here, it's, again, building this DAG of jobs.

803
01:18:14,720 --> 01:18:19,400
And that is how SnakeMake figures things out how to run.

804
01:18:19,400 --> 01:18:25,960
So it will first go and look at the all rule.

805
01:18:25,960 --> 01:18:30,960
what are the expected inputs for this very last rule.

806
01:18:31,380 --> 01:18:36,020
And then it will go further up or look at the other rules.

807
01:18:36,920 --> 01:18:39,660
Where do these files actually come from?

808
01:18:39,660 --> 01:18:42,580
Where is this plot produced?

809
01:18:42,580 --> 01:18:45,540
And then it will run, try to run that rule.

810
01:18:46,620 --> 01:18:49,980
And then it will notice that, okay, for creating the plot,

811
01:18:49,980 --> 01:18:52,020
we actually need the data first.

812
01:18:52,020 --> 01:18:56,220
So we need to have counted the frequencies of the word first.

813
01:18:56,220 --> 01:18:57,540
So then it will find the rule

814
01:18:57,540 --> 01:19:00,340
where that is the output and run that.

815
01:19:00,340 --> 01:19:04,060
And it summarizes this all here.

816
01:19:04,060 --> 01:19:06,780
So we have the name of the rules,

817
01:19:06,780 --> 01:19:10,820
all it found out that it needs to run it once

818
01:19:10,820 --> 01:19:12,880
to collect all the outputs.

819
01:19:12,880 --> 01:19:17,880
Then we have the count word rule,

820
01:19:22,020 --> 01:19:24,320
that it figured out because there is four books.

821
01:19:24,320 --> 01:19:26,160
It needs to run it four times

822
01:19:26,160 --> 01:19:28,600
and the same for the make plot.

823
01:19:29,480 --> 01:19:34,480
And then it tells us why it ran each step that it ran.

824
01:19:34,680 --> 01:19:39,560
So it figured out statistics IELTS.data

825
01:19:39,560 --> 01:19:42,960
is not existing at the moment.

826
01:19:42,960 --> 01:19:45,660
So it finds out what it needs to run

827
01:19:45,660 --> 01:19:49,280
to bring it into existence.

828
01:19:49,280 --> 01:20:00,280
And that is then step one out of nine, and then it checks further what to execute and goes on and on.

829
01:20:00,280 --> 01:20:11,280
And one thing to note here is that there is different job IDs that are not necessarily in order,

830
01:20:11,280 --> 01:20:20,280
So it will figure out that for each book it first needs to run the statistics file and then the plot file.

831
01:20:20,280 --> 01:20:28,280
But it does not necessarily run first the statistics file and then the plot file for each book.

832
01:20:28,280 --> 01:20:40,280
But it may mix it up a little bit so that it runs first two books, the statistics file and then one of these plots and then another of the statistics and another one of these plots.

833
01:20:40,280 --> 01:20:45,500
and that it all gets to know through this snake file.

834
01:20:45,500 --> 01:20:49,160
Now I see that I'm already very short on time,

835
01:20:49,160 --> 01:20:50,400
basically already over,

836
01:20:50,400 --> 01:21:00,680
so I will check what I wanted to show here still.

837
01:21:00,680 --> 01:21:06,360
We could now go and check that all the files are there.

838
01:21:06,360 --> 01:21:09,720
Maybe for right now you can trust me that it

839
01:21:09,720 --> 01:21:15,440
created all the plots and all the statistics files.

840
01:21:15,440 --> 01:21:19,880
And now the power of SnakeMake comes really from this

841
01:21:19,880 --> 01:21:24,440
that if we now had a script that would run all these steps,

842
01:21:24,440 --> 01:21:31,960
and we now added a new file, for example.

843
01:21:31,960 --> 01:21:34,680
Let's do this briefly.

844
01:21:34,680 --> 01:21:37,160
There's a question, the last one.

845
01:21:37,160 --> 01:21:38,920
Yeah.

846
01:21:38,920 --> 01:21:44,760
Maybe useful to go now I don't understand this code how come it runs for multiple books the files only run once

847
01:21:47,480 --> 01:21:49,480
Oh

848
01:21:52,440 --> 01:21:57,960
Um, which code is maybe like in the snake file

849
01:21:59,800 --> 01:22:06,840
I assume maybe it was talking about the snake file or something. Like how does the snake file run for all the separate codes?

850
01:22:06,840 --> 01:22:15,100
Okay, this is figured out in the snake file by using these wildcards.

851
01:22:15,100 --> 01:22:22,940
So in this step here, it figures out what all text files are available in this data

852
01:22:22,940 --> 01:22:24,380
directory.

853
01:22:24,380 --> 01:22:32,260
So it knows that there is four right now.

854
01:22:32,260 --> 01:22:43,140
And in the command line, it showed us, like, for each of the books that it ran it, like,

855
01:22:43,140 --> 01:22:49,200
for Sierra was one book, last something was some book.

856
01:22:49,200 --> 01:22:57,140
So we can see that it actually ran it for all the files.

857
01:22:57,140 --> 01:23:03,260
So if we now, this same thing we can do with a script.

858
01:23:03,260 --> 01:23:07,140
But if we now have a new data file, for example,

859
01:23:07,140 --> 01:23:08,940
this, don't worry about the editor.

860
01:23:08,940 --> 01:23:10,260
It is now just an editor.

861
01:23:10,260 --> 01:23:15,100
And there is some text in here, is some text in here,

862
01:23:15,100 --> 01:23:24,380
which I would like my script to count and plot.

863
01:23:24,380 --> 01:23:25,900
And I save that.

864
01:23:25,900 --> 01:23:31,020
In the script case, I now would need to run my script again,

865
01:23:31,020 --> 01:23:35,260
or I would need to run the steps separately again.

866
01:23:35,260 --> 01:23:42,380
In the SnakeMake case, if I now run SnakeMake again,

867
01:23:42,380 --> 01:23:45,100
you could maybe see it was very fast,

868
01:23:45,100 --> 01:23:49,460
that it now was a little bit faster.

869
01:23:49,460 --> 01:23:51,660
And we can see in the job statistics

870
01:23:51,660 --> 01:23:54,420
here that it figured out that it only

871
01:23:54,420 --> 01:23:58,740
need to run one file and that is,

872
01:23:58,740 --> 01:24:01,420
you can find it here probably,

873
01:24:01,420 --> 01:24:04,380
the new.txt, so it found there's

874
01:24:04,380 --> 01:24:08,260
one new file that it has not processed all the way,

875
01:24:08,540 --> 01:24:12,060
so it processed only the new file.

876
01:24:12,060 --> 01:24:15,300
The same thing happens also if there would now be,

877
01:24:15,300 --> 01:24:18,580
for example, a change in one of the scripts.

878
01:24:18,580 --> 01:24:20,860
Let's say in the plot script,

879
01:24:20,860 --> 01:24:24,340
We don't want to plot the script,

880
01:24:24,340 --> 01:24:26,100
the bars in blue,

881
01:24:26,100 --> 01:24:28,780
but want to put them in red, for example.

882
01:24:28,780 --> 01:24:31,820
We would go into the script and change it.

883
01:24:31,820 --> 01:24:36,080
If we then tell SnakeMake to run again,

884
01:24:36,080 --> 01:24:41,300
it will figure out which files are affected by this change.

885
01:24:41,300 --> 01:24:43,460
It will figure out that it will not have to run

886
01:24:43,460 --> 01:24:48,260
all the statistics again, but only the plotting.

887
01:24:48,260 --> 01:25:02,260
And that is, unfortunately, the time over for this topic.

888
01:25:02,260 --> 01:25:11,980
If you're interested in this, I would highly recommend to go on the lesson page.

889
01:25:11,980 --> 01:25:22,620
is also the example and some discussions around it and all the steps that I had planned to do now

890
01:25:22,620 --> 01:25:28,540
and that I didn't get through are mentioned also here and also some more explanations of each

891
01:25:28,540 --> 01:25:35,260
of the rules and then also take a look at the solution how to do it. You can also visualize

892
01:25:35,260 --> 01:25:47,340
this workflow, this DAG directed acyclic graph, what SnakeMake is using in the background.

893
01:25:47,340 --> 01:25:53,140
And we are using SnakeMake here because compared to many other workflow tools, it has a rather

894
01:25:53,140 --> 01:25:58,540
gentle learning curve. I understand that this was probably a little bit confusing. Sorry

895
01:25:58,540 --> 01:26:05,620
for that. But if you take a look and try to apply it yourself, I think you will better

896
01:26:05,620 --> 01:26:16,300
understand how things are connected and why this could be a benefit for also your workflow.

897
01:26:16,300 --> 01:26:21,820
You can use it on many different platforms. SnakeMake is also very smart in a way that

898
01:26:21,820 --> 01:26:28,220
it can figure out if there is independent steps that it can run those in parallel.

899
01:26:31,260 --> 01:26:38,300
You can also run it with the next two topics of this lesson, the isolated environments and

900
01:26:38,300 --> 01:26:45,260
also containers. It's very much used in bioinformatics, but as you can see, we can

901
01:26:45,260 --> 01:26:50,540
use it for counting words as well, so it's not specific to bioinformatics, so you can run all

902
01:26:50,540 --> 01:26:57,500
kinds of workflows with it and they have a super extensive documentation with lots of videos and

903
01:26:57,500 --> 01:27:03,580
lots of tutorials going on and there is lots of similar tools that you can also find here

904
01:27:04,780 --> 01:27:11,420
that you can use for that. So we can collect these computational steps in many many ways

905
01:27:12,140 --> 01:27:19,100
and workflow tools may be able to help with doing this and I will still go

906
01:27:19,100 --> 01:27:25,780
through the questions and look at it but I think now we should take a break, right?

907
01:27:25,780 --> 01:27:33,020
Yes, thanks [name]. I think now we can have a break, 10 minutes break, so we can be back

908
01:27:33,020 --> 01:27:52,380
on the stream at 11. What is that? Finnish time 11.14. And I can write this in the notes.

909
01:27:52,380 --> 01:27:55,380
Thank you.

910
01:28:03,020 --> 01:28:05,080
you

911
01:28:33,020 --> 01:28:35,080
you

912
01:29:03,020 --> 01:29:05,080
you

913
01:29:33,020 --> 01:29:35,080
you

914
01:30:03,020 --> 01:30:05,080
you

915
01:30:33,020 --> 01:30:35,080
you

916
01:31:03,020 --> 01:31:05,080
you

917
01:31:33,020 --> 01:31:35,080
you

918
01:32:03,020 --> 01:32:05,080
you

919
01:32:33,020 --> 01:32:35,080
you

920
01:33:03,020 --> 01:33:05,080
you

921
01:33:33,020 --> 01:33:35,080
you

922
01:34:03,020 --> 01:34:05,080
you

923
01:34:33,020 --> 01:34:35,080
you

924
01:35:03,020 --> 01:35:05,080
you

925
01:35:33,020 --> 01:35:35,080
you

926
01:36:03,020 --> 01:36:05,080
you

927
01:36:33,020 --> 01:36:35,080
you

928
01:37:03,020 --> 01:37:05,080
you

929
01:37:33,020 --> 01:37:35,080
you

930
01:38:03,020 --> 01:38:05,080
you

931
01:38:33,020 --> 01:38:35,020
You

932
01:39:03,020 --> 01:39:06,500
Hello, and welcome back.

933
01:39:06,500 --> 01:39:10,260
So hopefully you're all still well motivated

934
01:39:10,260 --> 01:39:14,980
to make your work more reproducible.

935
01:39:14,980 --> 01:39:19,860
So it's really nice that there's many questions on this topic

936
01:39:19,860 --> 01:39:23,460
that we've been covering so far.

937
01:39:23,460 --> 01:39:26,300
And compared to previous rounds of the Code Refinery Workshop,

938
01:39:26,300 --> 01:39:28,140
I think this is great that we decided

939
01:39:28,140 --> 01:39:32,580
to focus more on giving you demos and showing you the tools,

940
01:39:32,580 --> 01:39:39,460
because then the questions are actually more you know at the general level that rather than trying

941
01:39:39,460 --> 01:39:46,340
to you know rerun the same scripts that [name] was running for example and focusing on specific

942
01:39:46,340 --> 01:39:53,620
errors that are not related to this topic and in general we will have time to answer all these

943
01:39:53,620 --> 01:39:58,900
questions with more details during the longer break and all the answers of course will be

944
01:39:58,900 --> 01:40:05,860
archive so hopefully this is a great resource for your for your future learning goals.

945
01:40:07,860 --> 01:40:15,140
All right so we kind of if we go back to this time scales of tracking changes and making things that

946
01:40:15,140 --> 01:40:21,540
you can rerun what you did six months ago or a year ago after tracking the tiny changes

947
01:40:21,540 --> 01:40:27,540
with the version control from week one then we look at kind of recording the steps because

948
01:40:27,540 --> 01:40:32,380
Because in some cases, maybe, you know, there's just a single script that you need to run.

949
01:40:32,380 --> 01:40:35,700
There's just a single data file that you need to load.

950
01:40:35,700 --> 01:40:40,060
And maybe that is the single step of your research.

951
01:40:40,060 --> 01:40:45,500
But in many cases, one needs to, like we saw with the books, run through 1,000 books or

952
01:40:45,500 --> 01:40:54,320
1,000 parameters, hyperparameters, 1,000 whatever training input files in machine learning.

953
01:40:54,320 --> 01:40:59,080
So then the computational steps and all the steps

954
01:40:59,080 --> 01:41:02,480
that one needs to record, they start to scale up,

955
01:41:02,480 --> 01:41:06,640
that it starts to become impossible to manually remember

956
01:41:06,640 --> 01:41:13,080
that you still need to run whatever permutation, 1,555.

957
01:41:13,080 --> 01:41:17,960
But then in general, if we keep on increasing the time scale,

958
01:41:17,960 --> 01:41:21,040
so what we're trying to document and what

959
01:41:21,040 --> 01:41:27,440
are trying to record, then we go at the time scale of the system of the project. So in

960
01:41:27,440 --> 01:41:34,440
this funny XKCD figure here, this is not just about actually scientific research. This is

961
01:41:34,440 --> 01:41:40,840
in practice when it comes about any modern digital infrastructure can be popular social

962
01:41:40,840 --> 01:41:50,200
media that you use or, I don't know, your email service provider. So people, companies

963
01:41:50,200 --> 01:41:55,640
and scientists and researchers they build on top of other people's work and sometimes

964
01:41:55,640 --> 01:42:01,360
you know there might be a tiny little element that is literally keeping all the infrastructure

965
01:42:01,360 --> 01:42:09,080
together and when it comes to scientific research and scientific code of course you want to

966
01:42:09,080 --> 01:42:15,560
document if you truly depend on that little you know project that some random person in

967
01:42:15,560 --> 01:42:21,880
Nebraska has been maintaining since 2003. In the Internet, actually, there's one tool

968
01:42:21,880 --> 01:42:27,720
very useful in the Internet, which is called Curl. And for many years, the Curl command

969
01:42:27,720 --> 01:42:33,000
has been basically maintained by a single person for free, even though it's one of

970
01:42:33,000 --> 01:42:39,160
those core elements that is inside any software that uses the Internet, basically.

971
01:42:39,160 --> 01:42:47,220
So continue with kind of the kitchen analogy because we always like to talk about cooking.

972
01:42:47,220 --> 01:42:53,860
So this also came up in the collaborative notes that if the software, if the code is

973
01:42:53,860 --> 01:43:00,140
like the recipe, so they're like the steps that you need to run to cook whatever you're

974
01:43:00,140 --> 01:43:04,940
planning to cook and if the data are like the ingredients that you need to mix together

975
01:43:04,940 --> 01:43:12,540
to obtain what you want to cook then we have the so-called libraries or modules or whatever

976
01:43:12,540 --> 01:43:18,100
you want to call them that they're like the cooking books because most likely you don't

977
01:43:18,100 --> 01:43:22,020
want to write your own cooking book you don't want to write your recipe you want to reuse

978
01:43:22,020 --> 01:43:29,420
an existing recipe and libraries maybe many of you are familiar with the Python programming

979
01:43:29,420 --> 01:43:36,780
language most likely you're using libraries like NumPy or pandas or matplotlib so that you don't

980
01:43:36,780 --> 01:43:43,020
need to write in pure python you know how to take care of big matrices or how to work with

981
01:43:44,220 --> 01:43:51,020
tabular data but you can easily reuse existing libraries so that you can focus on the actual

982
01:43:51,020 --> 01:43:58,220
you know enjoyment of the final cook cooked product rather than you know focusing or rewriting

983
01:43:58,220 --> 01:44:06,380
something that already exists so with this specific page here with this

984
01:44:06,380 --> 01:44:10,460
specific lesson we're trying to understand that there needs to be a way

985
01:44:10,460 --> 01:44:15,660
when we want to document all our process all our steps there also needs to be a

986
01:44:15,660 --> 01:44:22,580
way to document how we depend on other libraries because maybe today there's a

987
01:44:22,580 --> 01:44:26,780
certain version of NumPy and it might be that in one year or in five years from

988
01:44:26,780 --> 01:44:33,180
now that version will have drastic changes to the current version that is right now and then

989
01:44:33,180 --> 01:44:39,020
your code will not be able to run anymore because it was depending on these external libraries.

990
01:44:40,300 --> 01:44:45,900
So to understand this in a more practical way and here I'm asking the help of [name]

991
01:44:46,620 --> 01:44:53,740
to do this exercise together. So let's consider this so-called WebRotier time capsule of

992
01:44:53,740 --> 01:45:02,500
of dependencies. So that could be that. All right. You inherit some code from the previous

993
01:45:02,500 --> 01:45:08,020
postdoc of the research lab that you're joining and all you see in the code that there's a

994
01:45:08,020 --> 01:45:14,300
couple of imports of some libraries. So that's it. You don't really know which libraries

995
01:45:14,300 --> 01:45:18,660
the codes need but you just see maybe like in the Python case would be you see some import

996
01:45:18,660 --> 01:45:24,780
NumPy. Then you have another a little better case maybe or is it better where with the

997
01:45:24,780 --> 01:45:30,780
code there's also a readme file which basically writes down you know you really need NumPy

998
01:45:30,780 --> 01:45:35,500
for this for this project. But it doesn't mention which NumPy do I need the NumPy from

999
01:45:35,500 --> 01:45:46,860
2011. Did it even exist or you know a NumPy from 2024. Then you might find you might be

1000
01:45:46,860 --> 01:45:51,740
more lucky and with the project that you inherit you might find that there's also some sort

1001
01:45:51,740 --> 01:46:00,020
of a structure file this specific file format is this is just a text file but it's called

1002
01:46:00,020 --> 01:46:08,060
YML yet another markup language and the YAML file is just a way to basically write in a

1003
01:46:08,060 --> 01:46:13,380
in a way that is machine readable something that also a human can understand and this specific

1004
01:46:13,380 --> 01:46:18,340
case we don't need I'm not going to tell you right now what this means but at least you see that

1005
01:46:19,220 --> 01:46:25,860
here we explicitly say that we have our code depends on having NumPy and

1006
01:46:27,300 --> 01:46:37,380
and SciPy and SumPy and other Python projects and here interesting actually they even have

1007
01:46:37,380 --> 01:46:43,780
references to some git projects. So in this case, [name], would this mean that

1008
01:46:45,060 --> 01:46:51,140
this dependency file is also referring to a specific branch in a specific project, isn't it?

1009
01:46:51,940 --> 01:46:58,340
Yeah, to the master branch in the GitHub repository of some user called some project.

1010
01:46:59,460 --> 01:47:05,220
Okay, so then if I inherit this file with all the other files of the project, then I would know that

1011
01:47:05,220 --> 01:47:11,860
i also need to figure out how to basically git clone this branch from this project and

1012
01:47:11,860 --> 01:47:20,660
make sure that it's visible with the rest of the libraries but we have more cases in this

1013
01:47:20,660 --> 01:47:28,260
challenge in this case this is a similar file than the one before but i see some differences

1014
01:47:28,260 --> 01:47:34,740
there's more added numbers so [name] do you think or at least i guess that these are the

1015
01:47:34,740 --> 01:47:38,580
numbers is more like trying to fix the version what I was saying earlier that maybe one really

1016
01:47:38,580 --> 01:47:47,540
needs to have version 1.16 but what about this this thing that you see at the end of the git url

1017
01:47:48,900 --> 01:47:54,180
yeah because if you don't have the versions then you usually get like the latest possible the

1018
01:47:54,180 --> 01:48:00,420
latest that is available and that of course might change between years or even already weeks and

1019
01:48:00,420 --> 01:48:05,940
And then for Git, now we are not referring to a branch anymore,

1020
01:48:05,940 --> 01:48:09,220
but we are referring to a specific commit.

1021
01:48:09,220 --> 01:48:12,500
And we have learned about commits and also tags

1022
01:48:12,500 --> 01:48:14,580
last week.

1023
01:48:14,580 --> 01:48:17,940
So it's way more specific than referring to, especially

1024
01:48:17,940 --> 01:48:20,060
the master branch, which also is something

1025
01:48:20,060 --> 01:48:22,460
like the tool might have developed over time.

1026
01:48:22,460 --> 01:48:24,220
So the master branch might not be the same

1027
01:48:24,220 --> 01:48:28,460
as it was a week ago, a month ago, a year ago.

1028
01:48:28,460 --> 01:48:32,860
But the commit stays or the tag stays.

1029
01:48:32,860 --> 01:48:34,620
So that basically we are literally

1030
01:48:34,620 --> 01:48:37,300
traveling to the exact time point

1031
01:48:37,300 --> 01:48:42,580
where the project, some project, had a specific tag

1032
01:48:42,580 --> 01:48:46,700
or specific time point.

1033
01:48:46,700 --> 01:48:51,620
And then the last case, if you see what I see,

1034
01:48:51,620 --> 01:48:55,380
that now this some project and this another project,

1035
01:48:55,380 --> 01:48:56,820
now they have their own version.

1036
01:48:56,820 --> 01:49:00,540
So most likely here, the person who

1037
01:49:00,540 --> 01:49:05,300
were working with this project, they also made a release

1038
01:49:05,300 --> 01:49:07,900
and they gave it a tag name that is, in this case,

1039
01:49:07,900 --> 01:49:09,780
the number of the release.

1040
01:49:09,780 --> 01:49:15,060
So that it can be made more clear in this dependency.

1041
01:49:15,060 --> 01:49:17,340
So now we have these five scenarios.

1042
01:49:17,340 --> 01:49:19,780
And in your opinion, [name], which version

1043
01:49:19,780 --> 01:49:22,820
do you expect would be the easiest to rerun and why?

1044
01:49:22,820 --> 01:49:35,140
I would choose version E, because there you have actually all packages, so also the things

1045
01:49:35,140 --> 01:49:44,660
that were in version D and the previous one were on GitHub only and linked to there, and

1046
01:49:44,660 --> 01:49:51,900
linking to some cryptic commit hash or something now have versions, so they have been packaged,

1047
01:49:51,900 --> 01:49:57,740
it's like a much nicer way of referring to them. But already D is very good, I think, in terms of

1048
01:49:57,740 --> 01:50:03,180
reproducibility because you have the version. So even if you run this one year from now,

1049
01:50:03,180 --> 01:50:08,220
that old version will hopefully still be available somewhere so you can still use it.

1050
01:50:09,180 --> 01:50:17,180
Whereas when you don't specify the version and rely on the latest and greatest, then that might

1051
01:50:17,180 --> 01:50:24,780
be have more features or have like good stuff coming with it as well but it might also have

1052
01:50:25,660 --> 01:50:31,180
deprecated so some functionality just doesn't exist anymore or has been replaced with a different

1053
01:50:31,180 --> 01:50:37,820
function call or something like this so there can be issues coming from that as well. How about you?

1054
01:50:38,620 --> 01:50:45,900
Yeah I mean I kind of naively thought that the C would be the way to go because I get the latest

1055
01:50:45,900 --> 01:50:53,900
of whatever the latest NumPy, the latest Python and the latest, you know, but if I, and I've

1056
01:50:53,900 --> 01:50:59,420
been working with this type of, you know, get the latest of everything, but then suddenly

1057
01:50:59,420 --> 01:51:03,820
things don't work when you get the latest of everything, then you need to go and track

1058
01:51:03,820 --> 01:51:09,780
in this some project that actually they clearly specify it stopped working after NumPy went

1059
01:51:09,780 --> 01:51:12,860
to whatever version.

1060
01:51:12,860 --> 01:51:19,420
So long story short what we're trying to motivate you here and I can tell you this is so important

1061
01:51:19,420 --> 01:51:23,840
if that's one of the things you need to remember from today and if you want to learn one thing

1062
01:51:23,840 --> 01:51:29,200
from today learn this. This is absolutely one of the most asked questions that we get

1063
01:51:29,200 --> 01:51:38,440
in our support work at Aalto and in anywhere and it's the versioning of the dependencies.

1064
01:51:38,440 --> 01:51:44,520
So there's one tool there's various tools for doing that and some tools are specific

1065
01:51:44,520 --> 01:51:50,320
of some programming language here for the purpose of focusing on a single one we will

1066
01:51:50,320 --> 01:51:51,320
talk about Conda.

1067
01:51:51,320 --> 01:51:58,840
And so Conda is this type of tool that can be used with Python but not only with Python

1068
01:51:58,840 --> 01:52:06,160
Conda can also be used with R for example it's one tool that is able to track this type

1069
01:52:06,160 --> 01:52:07,580
of dependencies.

1070
01:52:07,580 --> 01:52:10,060
So what you saw here in this YAML file,

1071
01:52:10,060 --> 01:52:13,660
these are actually machine-readable files

1072
01:52:13,660 --> 01:52:16,940
so that the Conda program is able to read these

1073
01:52:16,940 --> 01:52:21,220
and, for example, create a so-called Conda environment

1074
01:52:21,220 --> 01:52:23,740
with the specific version.

1075
01:52:23,740 --> 01:52:25,780
Now, what maybe some people struggle

1076
01:52:25,780 --> 01:52:27,380
at the beginning to understand what

1077
01:52:27,380 --> 01:52:31,100
are Conda environments or Python virtual environments,

1078
01:52:31,100 --> 01:52:34,420
I usually give this example that in one operating system,

1079
01:52:34,420 --> 01:52:37,060
you might have one installation of Python.

1080
01:52:37,060 --> 01:52:39,180
and that has a specific Python version

1081
01:52:39,180 --> 01:52:41,540
and it has some library with it.

1082
01:52:41,540 --> 01:52:43,660
By adding more environments,

1083
01:52:43,660 --> 01:52:46,460
it's like that you're reinstalling Python.

1084
01:52:46,460 --> 01:52:48,420
You are installing a new version of Python

1085
01:52:48,420 --> 01:52:50,460
without a set of libraries.

1086
01:52:50,460 --> 01:52:52,700
And with this type of virtual environments,

1087
01:52:52,700 --> 01:52:54,940
you can have multiple versions of Python,

1088
01:52:54,940 --> 01:52:57,460
for example, installed in your computer.

1089
01:52:57,460 --> 01:52:58,700
And it's actually a great thing.

1090
01:52:58,700 --> 01:53:02,940
One could argue that, is it that I'm wasting disk space?

1091
01:53:02,940 --> 01:53:05,740
Sure, maybe, you know, you are wasting some disk space,

1092
01:53:05,740 --> 01:53:09,280
but we're still talking about small files, small library.

1093
01:53:10,180 --> 01:53:12,180
The price of wasting some disk space

1094
01:53:12,180 --> 01:53:13,820
and having multiple versions of Python

1095
01:53:13,820 --> 01:53:16,960
storing your system is that actually you can have

1096
01:53:16,960 --> 01:53:19,060
for different project their own specific

1097
01:53:19,060 --> 01:53:22,860
Conda environment, their own specific Python installation.

1098
01:53:22,860 --> 01:53:27,180
And so you're sure that, you know, for that project

1099
01:53:27,180 --> 01:53:30,020
you can work with a specific Python version.

1100
01:53:30,020 --> 01:53:33,980
Here we see 3.10 and some specific, you know,

1101
01:53:33,980 --> 01:53:38,500
NumPy, or whatever libraries you need to use.

1102
01:53:38,500 --> 01:53:41,820
And the second advantage of using virtual environment

1103
01:53:41,820 --> 01:53:44,220
is also, of course, the portability,

1104
01:53:44,220 --> 01:53:47,380
because I might now start a new project today

1105
01:53:47,380 --> 01:53:49,340
with this type of dependency.

1106
01:53:49,340 --> 01:53:51,700
I don't really need to fix NumPy and Pandas,

1107
01:53:51,700 --> 01:53:54,460
because I'm happy with whatever I'm starting today,

1108
01:53:54,460 --> 01:53:57,420
the new project, so just give me the latest.

1109
01:53:57,420 --> 01:54:01,980
But then I might want to move this project to another system,

1110
01:54:01,980 --> 01:54:07,180
or I might want to share this project with a colleague.

1111
01:54:07,180 --> 01:54:08,900
And so it's possible to so-called

1112
01:54:08,900 --> 01:54:14,980
freeze the environment, meaning that with some commands

1113
01:54:14,980 --> 01:54:19,500
after activating the environment or after going

1114
01:54:19,500 --> 01:54:22,540
inside this other installation of Python,

1115
01:54:22,540 --> 01:54:25,540
then I can also tell, ask the program,

1116
01:54:25,540 --> 01:54:29,300
give me all the libraries that have been installed so far.

1117
01:54:29,300 --> 01:54:33,860
So how are we doing with the timings?

1118
01:54:33,860 --> 01:54:38,740
I guess, do we have time that I will give a quick demo of this?

1119
01:54:38,740 --> 01:54:40,260
Or?

1120
01:54:40,260 --> 01:54:41,740
Go ahead, a quick one.

1121
01:54:41,740 --> 01:54:42,580
OK.

1122
01:54:42,580 --> 01:54:47,220
So let me get the right windows.

1123
01:54:47,220 --> 01:54:51,940
So in this white window, you see where I'm going to type.

1124
01:54:51,940 --> 01:54:55,300
And in the bottom window, you see the comments

1125
01:54:55,300 --> 01:54:57,340
that I've been typing.

1126
01:54:57,340 --> 01:55:07,900
So here I have this file that you saw there, myenv.yaml, and now what I'm able to do is that

1127
01:55:07,900 --> 01:55:13,980
with the command that you see here I'm able to actually create this environment. Specifically

1128
01:55:13,980 --> 01:55:18,940
now instead of typing the same command that you see there, conda env create, so start a new

1129
01:55:18,940 --> 01:55:25,180
environment, I will actually use a program called Mamba and we listed it there. It's basically like

1130
01:55:25,180 --> 01:55:31,660
conda but it's again one of those tools that you should learn about it's a it's a conda that is

1131
01:55:31,660 --> 01:55:38,380
being rewritten in c so that it's much faster than the conda otherwise i timed it yesterday it

1132
01:55:38,380 --> 01:55:44,380
would take 20 minutes for conda to to resolve this environment with mamba it takes maybe less than a

1133
01:55:44,380 --> 01:55:56,780
a minute. So mambaenv create and then I specify this file. So now what happens is that it's

1134
01:55:57,340 --> 01:56:05,260
basically first seeing what type of request, what type of libraries I'm requesting. But of course

1135
01:56:05,260 --> 01:56:11,500
you understand that even though I'm requesting only Python and NumPy, Pandas and Seaborn, so very

1136
01:56:11,500 --> 01:56:18,940
basic stuff. These tools themselves, they might depend on other, many other libraries because,

1137
01:56:18,940 --> 01:56:24,780
I don't know, Seaborn needs to depend on Matplotlib plus some other opening some specific

1138
01:56:24,780 --> 01:56:30,460
file formats, figure formats or writing in different figure formats. So in the end, actually,

1139
01:56:30,460 --> 01:56:37,420
this Mamba is now installing 72 packages. So there's actually 72 libraries that are needed

1140
01:56:37,420 --> 01:56:43,900
for this specific environment for this specific project and now it's downloading and extracting

1141
01:56:43,900 --> 01:56:52,220
all the packages and now the environment is ready so right now i'm not in that specific

1142
01:56:52,220 --> 01:56:59,900
environment so as you see here at the end i need to activate the the environment so i activate it

1143
01:56:59,900 --> 01:57:06,980
And in the name of the environment, it's called myenv.

1144
01:57:06,980 --> 01:57:09,420
So now the prompt has changed.

1145
01:57:09,420 --> 01:57:14,180
If you have worked with Python and specifically from the terminal, you might be familiar with

1146
01:57:14,180 --> 01:57:19,740
this, but if you have not, this is something that is worth investing some time and learning

1147
01:57:19,740 --> 01:57:21,740
about the Conda environments.

1148
01:57:21,740 --> 01:57:27,780
And now it's like I connected to a new system with a new Python installation, and specifically

1149
01:57:27,780 --> 01:57:33,780
the new Python installation that I asked with all the dependencies and now here I'm able let's say

1150
01:57:33,780 --> 01:57:42,420
that I have to pass this environment to [name] so I'm able to type this command conda m export

1151
01:57:42,420 --> 01:57:48,500
and this will show all the files all these 72 packages that were installed and you see that

1152
01:57:48,500 --> 01:57:54,900
there's quite many of them and now it even has so-called resolved down to the tiny version

1153
01:57:54,900 --> 01:58:01,780
out even to, you know, to some specific hash of which version of CBOR am I going here. So with

1154
01:58:01,780 --> 01:58:08,740
the syntax that you see here in the learning materials conda m export and this greater than

1155
01:58:08,740 --> 01:58:16,260
it means dump the content that you see here on a file environment.yml. There's an easter egg here

1156
01:58:16,260 --> 01:58:24,740
that one can also one can also export from history and this is again important to look

1157
01:58:24,740 --> 01:58:37,580
at this so let me try running also this command

1158
01:58:37,580 --> 01:58:43,140
and now the difference from this command is that actually this kind of is able to give

1159
01:58:43,140 --> 01:58:50,500
me back the original environment that I used. So with conda-envexport I got a fine-grained

1160
01:58:50,500 --> 01:58:59,740
detailed version down to the tiny hashtag hashes of all the 72 packages. With conda-envexport

1161
01:58:59,740 --> 01:59:05,140
from history maybe this is useful for the next project that I can start. I hope this

1162
01:59:05,140 --> 01:59:12,300
This was, you know, motivational enough for people to get started using Conda, but this

1163
01:59:12,300 --> 01:59:16,620
is, again, I repeat, the most frequently asked question every day.

1164
01:59:16,620 --> 01:59:23,420
We even have a joke in our support room that how many days have been going on without Conda

1165
01:59:23,420 --> 01:59:27,380
being mentioned, and usually it's zero.

1166
01:59:27,380 --> 01:59:33,660
But if we scale down even more, so now we're trying to look at the dependencies of the code,

1167
01:59:33,660 --> 01:59:37,980
dependency of all the libraries. What if we scale even bigger, [name]?

1168
01:59:40,780 --> 01:59:45,660
I can keep the screen share if you just tell me when to scroll or do you want to take over?

1169
01:59:46,300 --> 01:59:52,460
No, you can keep it. You can scroll down a little bit. So yeah, so now we have been talking about

1170
01:59:52,460 --> 02:00:01,580
how to record the computational steps, how to record our dependencies of the tools that we are

1171
02:00:01,580 --> 02:00:03,820
already using in our workflow,

1172
02:00:03,820 --> 02:00:07,620
but what if it's still not enough?

1173
02:00:07,620 --> 02:00:11,700
What if we want everything in one file?

1174
02:00:11,700 --> 02:00:16,100
What if we want an entire operating system

1175
02:00:16,100 --> 02:00:20,020
together with the dependencies,

1176
02:00:20,020 --> 02:00:22,820
with the code, maybe even with the data?

1177
02:00:22,820 --> 02:00:25,860
That's where containers come in.

1178
02:00:25,860 --> 02:00:28,580
Now, we also get back to the icebreaker

1179
02:00:28,580 --> 02:00:32,440
before, like this topic of it works on my machine.

1180
02:00:32,440 --> 02:00:36,960
And these containers are like one of the answers to that.

1181
02:00:36,960 --> 02:00:40,560
And there's many different like tools

1182
02:00:40,560 --> 02:00:43,480
for building using containers.

1183
02:00:43,480 --> 02:00:44,480
One of them is Docker.

1184
02:00:44,480 --> 02:00:49,480
That's where this meme here comes from.

1185
02:00:49,800 --> 02:00:52,000
And if you scroll a little bit down,

1186
02:00:52,000 --> 02:00:56,520
we can again think back to our kitchen analogy

1187
02:00:56,520 --> 02:01:00,560
that we have our codes and scripts,

1188
02:01:00,560 --> 02:01:04,940
which are basically our cooking recipes.

1189
02:01:04,940 --> 02:01:11,080
They tell us what goes into our dish and how to prepare it.

1190
02:01:11,080 --> 02:01:16,160
Then we talk in the world of containers,

1191
02:01:16,160 --> 02:01:18,900
we talk about container definition files,

1192
02:01:18,900 --> 02:01:20,040
or in the Docker case,

1193
02:01:20,040 --> 02:01:22,160
it would be called a Docker file.

1194
02:01:22,160 --> 02:01:24,320
They are like a blueprint,

1195
02:01:24,320 --> 02:01:28,240
how to build a kitchen with everything in it,

1196
02:01:28,240 --> 02:01:34,520
that you have everything ready to prepare the dish that

1197
02:01:34,520 --> 02:01:41,640
is described that you have in your cooking recipe.

1198
02:01:41,640 --> 02:01:44,800
So the container definition file is the blueprint.

1199
02:01:44,800 --> 02:01:52,040
It shows us how to create this kitchen.

1200
02:01:52,040 --> 02:01:56,200
Then container images are

1201
02:01:56,200 --> 02:02:01,360
then example kitchens that are built from this blueprint.

1202
02:02:01,480 --> 02:02:05,360
Now you scrolled away from there, sorry.

1203
02:02:05,520 --> 02:02:09,760
Then we have the containers themselves,

1204
02:02:09,760 --> 02:02:14,040
which are built from the images,

1205
02:02:14,040 --> 02:02:17,000
from the example kitchens,

1206
02:02:17,280 --> 02:02:20,880
that are really the kitchens

1207
02:02:20,880 --> 02:02:23,440
where you can prepare these cooking recipes.

1208
02:02:23,440 --> 02:02:26,640
And you can go through here, these images

1209
02:02:26,640 --> 02:02:28,520
and have a guess which of the images

1210
02:02:28,520 --> 02:02:30,600
represents which operating system.

1211
02:02:31,800 --> 02:02:36,760
Containers can come to you in many different forms

1212
02:02:36,760 --> 02:02:38,440
and in many different occasions,

1213
02:02:38,440 --> 02:02:40,880
you may have come across them.

1214
02:02:40,880 --> 02:02:42,920
And that's why we also ask this question

1215
02:02:42,920 --> 02:02:45,980
in the very bottom of the collaborative document.

1216
02:02:45,980 --> 02:02:52,260
if you ever have been in contact with containers and how you came across them,

1217
02:02:52,260 --> 02:02:56,300
because that can be very different for people.

1218
02:02:56,300 --> 02:03:00,220
Please go and answer that question if you have come across containers,

1219
02:03:00,220 --> 02:03:04,380
because that might also help others to see where are

1220
02:03:04,380 --> 02:03:09,500
the use cases for this kind of systems.

1221
02:03:10,300 --> 02:03:14,060
The benefit is that you have really everything in one file,

1222
02:03:14,060 --> 02:03:16,300
not just the dependencies, but really,

1223
02:03:16,300 --> 02:03:18,960
like you can have a whole different operating system.

1224
02:03:18,960 --> 02:03:22,460
Like if your laptop is running on Windows, for example,

1225
02:03:22,460 --> 02:03:24,800
and you find a tool on the internet

1226
02:03:24,800 --> 02:03:27,720
where you only can find installation instructions

1227
02:03:27,720 --> 02:03:32,720
or prepared software for Linux system, for example,

1228
02:03:33,720 --> 02:03:36,240
that might be one case where then a container

1229
02:03:36,240 --> 02:03:41,160
can be very helpful to like have this operating system

1230
02:03:41,160 --> 02:03:43,480
that you need to then install your software

1231
02:03:43,480 --> 02:03:46,520
inside of there and run it via that.

1232
02:03:48,880 --> 02:03:53,080
These definition files that already mentioned what

1233
02:03:53,080 --> 02:03:56,160
we related to the blueprints,

1234
02:03:56,160 --> 02:03:58,200
they are usually text files,

1235
02:03:58,200 --> 02:03:59,480
and a little bit further down,

1236
02:03:59,480 --> 02:04:00,780
we have an example of that,

1237
02:04:00,780 --> 02:04:03,440
and [name] will show it also in a little bit.

1238
02:04:03,440 --> 02:04:09,380
They instruct you how to build this environment.

1239
02:04:09,380 --> 02:04:10,400
What do you need?

1240
02:04:10,400 --> 02:04:12,000
What kind of operating system do you use?

1241
02:04:12,000 --> 02:04:16,880
What kind of software do you want to have installed in that environment?

1242
02:04:16,880 --> 02:04:23,120
And then when you build an image from that definition file,

1243
02:04:23,120 --> 02:04:29,200
from this container recipe, that is then basically like a piece of paper

1244
02:04:29,200 --> 02:04:33,960
where you have the operating system and these base tools installed on it.

1245
02:04:33,960 --> 02:04:39,920
And then whatever you do then on your command line or on your computer

1246
02:04:39,920 --> 02:04:44,600
within that container,

1247
02:04:44,600 --> 02:04:48,400
then you're adding a layer of transparency.

1248
02:04:48,400 --> 02:04:50,640
Maybe you have seen it when you want to

1249
02:04:50,640 --> 02:04:52,840
update your house or something like this.

1250
02:04:52,840 --> 02:04:54,840
You have the blueprint of the house in the bottom,

1251
02:04:54,840 --> 02:04:57,120
and then you add a transparent layer where you draw

1252
02:04:57,120 --> 02:05:01,400
all your ideas that you want to add to your house,

1253
02:05:01,400 --> 02:05:05,200
that you want to add a staircase in the middle of

1254
02:05:05,200 --> 02:05:09,520
your living room just to try how it looks.

1255
02:05:09,520 --> 02:05:12,080
Then at some point, you're like,

1256
02:05:12,080 --> 02:05:13,440
oh no, that's not the idea.

1257
02:05:13,440 --> 02:05:14,880
I throw that away.

1258
02:05:14,880 --> 02:05:17,440
That is also then why the image,

1259
02:05:17,440 --> 02:05:19,640
the container image, it always stays the same.

1260
02:05:19,640 --> 02:05:22,960
These transparency layers, they are then thrown away after you

1261
02:05:22,960 --> 02:05:27,200
close the connection to that container that you're running.

1262
02:05:30,720 --> 02:05:38,120
Other use cases for containers are exactly this.

1263
02:05:38,120 --> 02:05:43,120
If you have your code and that runs in a certain environment

1264
02:05:43,120 --> 02:05:47,120
and you want to make sure that everyone is using the same environment,

1265
02:05:47,120 --> 02:05:53,120
you can provide them with an image of this container

1266
02:05:53,120 --> 02:05:58,120
or you can provide them with this definition file,

1267
02:05:58,120 --> 02:06:01,120
like the instructions on how to build that image

1268
02:06:01,120 --> 02:06:05,120
and how to run that in a container.

1269
02:06:05,120 --> 02:06:09,360
Here is now the example of a definition file.

1270
02:06:09,360 --> 02:06:11,960
This is now from Singularity.

1271
02:06:11,960 --> 02:06:14,160
I mentioned already Docker and then there's

1272
02:06:14,160 --> 02:06:17,280
also Obtainer and Portman and probably even more than that.

1273
02:06:17,280 --> 02:06:21,120
But these are, I think, the most famous ones maybe.

1274
02:06:21,720 --> 02:06:25,080
This you may come across also when you're

1275
02:06:25,080 --> 02:06:28,060
working on clusters, for example.

1276
02:06:28,060 --> 02:06:31,000
It's very much used there.

1277
02:06:31,000 --> 02:06:35,320
And here you can see that this definition file is a text file

1278
02:06:35,320 --> 02:06:37,880
similar to what we have seen with Conda.

1279
02:06:37,880 --> 02:06:42,880
We are defining like the operating system first.

1280
02:06:44,280 --> 02:06:47,280
Here we are using a Docker image

1281
02:06:47,280 --> 02:06:49,760
that is somewhere on the Docker hub.

1282
02:06:49,760 --> 02:06:52,280
I think it's called of Ubuntu,

1283
02:06:52,280 --> 02:06:54,460
which is a Linux operating system.

1284
02:06:55,320 --> 02:06:58,480
So if [name] would, for example, have a Windows laptop

1285
02:06:58,480 --> 02:07:02,480
and would want to run an Ubuntu on that laptop,

1286
02:07:02,480 --> 02:07:09,560
you could use this file to build a container to run Ubuntu in.

1287
02:07:09,560 --> 02:07:18,920
Then you can provide a few more things that you want to add there,

1288
02:07:18,920 --> 02:07:21,720
so you can define environment variables,

1289
02:07:21,720 --> 02:07:27,720
you can install stuff which is done here in this post section,

1290
02:07:27,720 --> 02:07:36,720
And then you can also add scripts that should be run when the container is executed.

1291
02:07:36,720 --> 02:07:42,720
And is that now maybe where we go into the demo?

1292
02:07:42,720 --> 02:07:49,720
Maybe we can come back to the pros and cons of containers when we start wrapping things up.

1293
02:07:49,720 --> 02:07:55,720
So I think that this demo is a funny one.

1294
02:07:55,720 --> 02:08:02,440
So, in this specific container recipe that you see here, basically the user wants to

1295
02:08:02,440 --> 02:08:09,760
run the command, the Linux command cow say, which is a funny command that it displays

1296
02:08:09,760 --> 02:08:17,040
some ASCII, ASCII art, ASCII cow that can say whatever you tell the cow to say.

1297
02:08:17,040 --> 02:08:22,200
However, if I would be working on my own computer, I would have all the rights to install this

1298
02:08:22,200 --> 02:08:27,960
specific Kause command and I wouldn't need to, you know, start containers, install containers,

1299
02:08:27,960 --> 02:08:34,440
create the containers. But often when I need to scale because my laptop is old and it doesn't

1300
02:08:34,440 --> 02:08:40,120
have enough RAM or enough CPUs, I'm most likely going to work on some remote machine.

1301
02:08:40,680 --> 02:08:46,360
It can be one HPC cluster, it can be the Lumi supercomputer, it can be various things.

1302
02:08:46,360 --> 02:08:59,360
So let's now go to this remote machine where I am right now. I could even call that deactivate.

1303
02:08:59,360 --> 02:09:12,360
OK. Let's see where I am. I have a subfolder called the pen sorry environments because now this is the stage where we're really recording the whole environment operating system.

1304
02:09:12,360 --> 02:09:17,160
So if I try to run the command, which is called Kausei,

1305
02:09:17,160 --> 02:09:20,360
hello world.

1306
02:09:20,360 --> 02:09:23,240
All right, the command is not installed in this remote

1307
02:09:23,240 --> 02:09:23,800
machine.

1308
02:09:23,800 --> 02:09:26,760
I could now open a ticket with the administrator

1309
02:09:26,760 --> 02:09:28,960
of this remote cluster and ask them,

1310
02:09:28,960 --> 02:09:31,760
can you please install Kausei?

1311
02:09:31,760 --> 02:09:33,280
Of course, maybe I feel a bit silly

1312
02:09:33,280 --> 02:09:34,480
because it's a silly command.

1313
02:09:34,480 --> 02:09:37,360
Maybe I don't want to ask the administrators to install

1314
02:09:37,360 --> 02:09:38,400
this type of thing.

1315
02:09:38,400 --> 02:09:40,720
But it could also well be that the administrator actually

1316
02:09:40,720 --> 02:09:45,520
not supporting installations because they get too many requests and what the administrator

1317
02:09:45,520 --> 02:09:50,480
could tell you, you know, create yourself a container so that you can run this command.

1318
02:09:51,200 --> 02:10:02,720
So given this recipe that I've written here in this kaose.dev, so this is the same recipe

1319
02:10:02,720 --> 02:10:06,880
that you see there and it's again another one of those machine readable format,

1320
02:10:06,880 --> 02:10:13,560
machine readable and also human readable that the human understand that we want to use Ubuntu

1321
02:10:13,560 --> 02:10:19,960
get and it's like really that I'm installing a new Linux machine and make sure that I run

1322
02:10:19,960 --> 02:10:27,920
this type of installation script. So let's build it. So the software that I'm going to

1323
02:10:27,920 --> 02:10:32,720
use now all the steps that I'm talking about the year they're listed in this exercise

1324
02:10:32,720 --> 02:10:42,000
two in the in the page. So the tool I'm going to use is called Obtainer. Let's see that I have it.

1325
02:10:43,600 --> 02:10:50,160
Yes, I have Obtainer 1.2. And so Obtainer is one of those tools that kind of emerged from

1326
02:10:50,160 --> 02:10:55,600
the Singularity project. Obtainer became more like the branch dedicated to scientific computing

1327
02:10:55,600 --> 02:11:00,600
while Singularity CE is more supporting enterprises.

1328
02:11:02,240 --> 02:11:04,580
I left this here because these are something

1329
02:11:04,580 --> 02:11:08,380
that often is problematic because Obtainer

1330
02:11:08,380 --> 02:11:10,300
to create the images and it's to download,

1331
02:11:10,300 --> 02:11:13,180
you really need to imagine that you are downloading

1332
02:11:13,180 --> 02:11:14,460
a full operating system.

1333
02:11:14,460 --> 02:11:16,880
So it can require lots of disk space,

1334
02:11:16,880 --> 02:11:19,060
but I already set this step here.

1335
02:11:19,060 --> 02:11:21,860
So I can look at the environment variables

1336
02:11:21,860 --> 02:11:31,860
in my in my and I already have set this temporary folder and and a cache folder and now I can

1337
02:11:31,860 --> 02:11:41,700
finally build. So now it's like I'm installing this new computer. So obtainer build the name

1338
02:11:41,700 --> 02:11:47,820
of the image that I'm going to create is this CIF and then the definition file is cow say

1339
02:11:47,820 --> 02:11:53,820
all right so now what is happening it's really like that i'm connecting to a

1340
02:11:53,820 --> 02:11:57,180
new laptop and i'm installing the operating system

1341
02:11:57,180 --> 02:12:01,820
so first it needs to download the image of the operating system

1342
02:12:01,820 --> 02:12:06,060
it's now installing everything that is needed for ubuntu

1343
02:12:06,060 --> 02:12:09,260
in this operating system it's installed it's really so fast

1344
02:12:09,260 --> 02:12:12,620
it's installing all the kaos and everything else

1345
02:12:12,620 --> 02:12:17,420
it's making sure that you know the file system of this computer of this virtual

1346
02:12:17,420 --> 02:12:24,140
virtual computer is you know has everything that is needed installing some other dependencies and

1347
02:12:24,140 --> 02:12:32,060
hopefully in the very next few seconds it will say that this is done and I can now basically

1348
02:12:32,060 --> 02:12:38,220
like connect to this computer it's funny that I'm still in the same computer so now it's actually

1349
02:12:38,220 --> 02:12:45,980
creating this this file so now this CIF file becomes like a new computer that I can log in

1350
02:12:45,980 --> 02:12:51,420
into. And when I'm inside this new computer, even though it's a virtual computer, it's not a physical

1351
02:12:51,420 --> 02:12:57,020
computer, I'm able to finally run the cowsay command. So I remind you that we are where I am

1352
02:12:57,020 --> 02:13:03,180
when I type cowsay, command not found, but now I can actually enter this computer, this virtual

1353
02:13:03,180 --> 02:13:10,460
machine, this container, obtainer shell, and the name of the image that I created.

1354
02:13:10,460 --> 02:13:16,440
it. And now I'm inside. You see the prompt change. It says obtainer. Now I'm in a new

1355
02:13:16,440 --> 02:13:25,140
computer and now I can test the command. Let's see if it works. Yes. And we got our cow that

1356
02:13:25,140 --> 02:13:35,240
can say whatever we want to say. So suddenly without any administrator rights without any

1357
02:13:35,240 --> 02:13:40,140
special permissions I was able to install a new program and run it. You can understand

1358
02:13:40,140 --> 02:13:43,140
and how powerful this is if you depend on specific,

1359
02:13:43,140 --> 02:13:44,320
especially in machine learning,

1360
02:13:44,320 --> 02:13:46,920
people need to work with some specific version

1361
02:13:46,920 --> 02:13:48,280
of libraries PyTorch,

1362
02:13:48,280 --> 02:13:50,280
which might depend on specific version

1363
02:13:50,280 --> 02:13:53,360
of so-called CUDA GPU card drivers.

1364
02:13:53,360 --> 02:13:54,400
And with this system,

1365
02:13:54,400 --> 02:13:58,080
you can specifically go down to the drivers,

1366
02:13:58,080 --> 02:14:02,760
down to the libraries for your research work.

1367
02:14:04,560 --> 02:14:06,520
So it's 11.49.

1368
02:14:06,520 --> 02:14:08,880
We still have good 10 minutes for wrapping up.

1369
02:14:08,880 --> 02:14:14,840
So [name], what about the pros and the cons of containers?

1370
02:14:14,840 --> 02:14:17,320
Yeah, one nice thing here is now also

1371
02:14:17,320 --> 02:14:22,240
that even if something goes wrong, because it still might,

1372
02:14:22,240 --> 02:14:26,720
there is so many levels where these things can go wrong.

1373
02:14:26,720 --> 02:14:29,160
Because everything is now in one file,

1374
02:14:29,160 --> 02:14:32,680
it is very easy to remove, rather than if you think about

1375
02:14:32,680 --> 02:14:35,160
if you install something on your computer,

1376
02:14:35,160 --> 02:14:37,120
you might have to go into different places

1377
02:14:37,120 --> 02:14:39,720
to find all the files that were actually

1378
02:14:39,720 --> 02:14:43,360
involved in the installations you're working on at the moment.

1379
02:14:43,360 --> 02:14:50,520
Then also, many of us are nowadays working with huge datasets,

1380
02:14:50,520 --> 02:14:54,320
and sometimes these datasets are getting too large to transfer.

1381
02:14:54,320 --> 02:14:56,640
So containers are also one way

1382
02:14:56,640 --> 02:15:00,040
of sending the computer to the data, so to say.

1383
02:15:00,040 --> 02:15:02,080
So we don't have to download the data,

1384
02:15:02,080 --> 02:15:05,220
but there's probably some Cloud service that is set up,

1385
02:15:05,220 --> 02:15:10,980
where you can then like run your container very close to the data and don't have to worry about

1386
02:15:10,980 --> 02:15:20,820
this transfer. And then if it's like if you have a lot of dependencies in your in your work

1387
02:15:22,020 --> 02:15:26,500
you can take away some of these challenges to deal with these dependencies because they might

1388
02:15:26,500 --> 02:15:31,940
be on different levels. It might not just be like within Python that you can solve with Conda but

1389
02:15:31,940 --> 02:15:37,060
already like on operating system level there might be some libraries that you need that you need to

1390
02:15:37,060 --> 02:15:43,220
install in some certain way to make it work. So this is also one way of like recording on how

1391
02:15:43,220 --> 02:15:49,300
this can be done and also then with the image you can actually provide a working machine so to say.

1392
02:15:50,820 --> 02:15:58,820
So it also can solve this works on my machine situation. And then [name] could now send this

1393
02:15:58,820 --> 02:16:04,460
this C file that he just created to me and I could probably run it here on my computer

1394
02:16:04,460 --> 02:16:13,460
and also like happily look at the cow saying different things even though I don't have

1395
02:16:13,460 --> 02:16:22,820
it installed on my computer. But then of course with this same thing you can also like solve

1396
02:16:22,820 --> 02:16:30,660
your installation problems by hiding them behind this kind of container solution,

1397
02:16:30,660 --> 02:16:34,420
which may discourage good software development practices.

1398
02:16:34,420 --> 02:16:35,700
Of course, we hope it doesn't,

1399
02:16:35,700 --> 02:16:39,420
but it may result in that.

1400
02:16:40,500 --> 02:16:43,420
It can, of course, then also change that.

1401
02:16:43,420 --> 02:16:46,620
Now, we don't have this works on my machine problem anymore,

1402
02:16:46,620 --> 02:16:48,140
but we have this,

1403
02:16:48,140 --> 02:16:50,140
okay, it works only in this container.

1404
02:16:50,140 --> 02:16:53,820
and then if you have a colleague who for some reason

1405
02:16:53,820 --> 02:16:55,980
cannot install this container software

1406
02:16:55,980 --> 02:16:58,140
on their laptop or something,

1407
02:16:58,140 --> 02:17:00,520
how do they then deal with this?

1408
02:17:02,060 --> 02:17:07,060
But it still helps with this works on my machine problem.

1409
02:17:08,580 --> 02:17:10,940
They can sometimes be difficult to modify.

1410
02:17:10,940 --> 02:17:13,260
So if you, for example, go on Docker Hub

1411
02:17:13,260 --> 02:17:18,260
and find some image that does almost what you wanna do,

1412
02:17:18,260 --> 02:17:24,500
do but not quite there's something missing it can be sometimes difficult to modify those

1413
02:17:26,500 --> 02:17:33,380
and there's many different ways on how you can go about this by for example just adding another

1414
02:17:33,380 --> 02:17:40,340
layer on top of that image that already exists if that works for your use case and then

1415
02:17:40,340 --> 02:17:48,580
In the similar as with Conda environments, also container images can become very large.

1416
02:17:48,580 --> 02:17:52,260
They may take up a lot of space on your laptop.

1417
02:17:52,260 --> 02:17:57,260
So it's always good with all these tools to, as one of the first things that you find out,

1418
02:17:57,260 --> 02:18:03,780
find out how to clean up unused images, unused containers, not running containers, things

1419
02:18:03,780 --> 02:18:11,260
that you don't need anymore, how to clean the cache so that you don't run out of disk

1420
02:18:11,260 --> 02:18:17,780
space because you need to try 10 different operating systems with your software.

1421
02:18:17,780 --> 02:18:23,780
And then good little red box, do you have anything to say about the danger, [name]?

1422
02:18:23,780 --> 02:18:30,600
Well, I mean, that in general, it's like when you install software, you might only want

1423
02:18:30,600 --> 02:18:34,640
to make sure that you're using official and trusted images,

1424
02:18:34,640 --> 02:18:37,680
that you never know what you might be installing

1425
02:18:37,680 --> 02:18:41,320
if you use an untrusted source for, let's say,

1426
02:18:41,320 --> 02:18:44,000
Ubuntu operating system.

1427
02:18:44,000 --> 02:18:50,280
So this is, as usual, it's good to trust those trusted images.

1428
02:18:50,280 --> 02:18:53,800
And if you are not sure, talk with your local helper

1429
02:18:53,800 --> 02:18:56,840
or colleague.

1430
02:18:56,840 --> 02:19:00,400
In the same page, there are also some other demos

1431
02:19:00,400 --> 02:19:02,480
that you can try yourself.

1432
02:19:02,480 --> 02:19:07,400
For example, if you install Docker on your machine,

1433
02:19:07,400 --> 02:19:08,840
here, there's a nice demo where you

1434
02:19:08,840 --> 02:19:12,520
can travel back in time to a specific version of RStudio.

1435
02:19:12,520 --> 02:19:14,920
And here, we've done a conda, with conda,

1436
02:19:14,920 --> 02:19:18,120
basically, that you can install a specific version.

1437
02:19:18,120 --> 02:19:21,120
But maybe it's time to wrap up.

1438
02:19:21,120 --> 02:19:22,960
So where do we go from here?

1439
02:19:22,960 --> 02:19:24,600
I checked the notes document.

1440
02:19:24,600 --> 02:19:27,240
I don't see there are many nice questions, interesting

1441
02:19:27,240 --> 02:19:29,980
questions, but we will answer them there.

1442
02:19:29,980 --> 02:19:32,980
I think it's now too important, though,

1443
02:19:32,980 --> 02:19:35,780
to understand that now we discover

1444
02:19:35,780 --> 02:19:38,780
and we uncovered all these timescales

1445
02:19:38,780 --> 02:19:41,620
of the documentation of the project

1446
02:19:41,620 --> 02:19:43,580
from the tiny changes of the Git

1447
02:19:43,580 --> 02:19:47,460
down to the large changes of operating system

1448
02:19:47,460 --> 02:19:49,420
and libraries that are in a specific version

1449
02:19:49,420 --> 02:19:51,620
of our OpenStreetMap system.

1450
02:19:51,620 --> 02:19:54,860
So in general, the take-home message for you

1451
02:19:54,860 --> 02:19:57,340
is that this is important for every project,

1452
02:19:57,340 --> 02:19:59,780
but the second important take-home message here

1453
02:19:59,780 --> 02:20:03,860
is that you don't need to feel anxious or stressful

1454
02:20:03,860 --> 02:20:06,360
or stressed about all this, you know,

1455
02:20:06,360 --> 02:20:09,320
knowledge and all these tools.

1456
02:20:09,320 --> 02:20:11,780
It might well be that some of the tools

1457
02:20:11,780 --> 02:20:13,480
that we show here today,

1458
02:20:13,480 --> 02:20:16,360
you don't see an immediate use right now.

1459
02:20:16,360 --> 02:20:18,280
It's more than it becomes you,

1460
02:20:18,280 --> 02:20:20,880
like it starts to become a personal choice

1461
02:20:20,880 --> 02:20:24,320
that maybe you understand that workflow tools are important

1462
02:20:24,320 --> 02:20:28,120
and you understand that there will be some learning curve,

1463
02:20:28,120 --> 02:20:30,960
some time that you need to spend to get it running,

1464
02:20:30,960 --> 02:20:34,560
but then this will make maybe benefit you in the future

1465
02:20:34,560 --> 02:20:36,440
if you know that you will be running,

1466
02:20:36,440 --> 02:20:39,560
you know, many workflows, many pipelines,

1467
02:20:39,560 --> 02:20:43,080
or you will be building pipelines in your future career.

1468
02:20:44,680 --> 02:20:48,800
But for sure, it's important to worry about dependencies.

1469
02:20:48,800 --> 02:20:52,600
Again, maybe you're just, you know, playing with code

1470
02:20:52,600 --> 02:20:55,760
and you're just happy with one local Python installation

1471
02:20:55,760 --> 02:20:59,080
and after a few months by installing random packages,

1472
02:20:59,080 --> 02:21:01,400
you see that it's all a mess

1473
02:21:01,400 --> 02:21:03,640
and then you will just reinstall everything

1474
02:21:03,640 --> 02:21:05,480
and start from scratch.

1475
02:21:05,480 --> 02:21:08,780
But sometimes when it's not about working alone anymore,

1476
02:21:08,780 --> 02:21:11,400
when you need especially to show to other people

1477
02:21:11,400 --> 02:21:14,240
your work that you've been doing, the dependencies,

1478
02:21:14,240 --> 02:21:16,240
so the conda environments,

1479
02:21:16,240 --> 02:21:18,080
and even writing down the steps,

1480
02:21:18,080 --> 02:21:21,680
it becomes kind of part of your work.

1481
02:21:21,680 --> 02:21:24,520
So at the end of the day, it's not just sharing your code

1482
02:21:24,520 --> 02:21:27,420
to show what you did in your research,

1483
02:21:27,420 --> 02:21:31,720
but also sharing kind of how for other people,

1484
02:21:31,720 --> 02:21:34,760
how other scientists can rerun your code.

1485
02:21:36,120 --> 02:21:39,600
And then last comment, when it comes to the containers,

1486
02:21:40,680 --> 02:21:45,680
again, you got a nice overview on the pros and cons.

1487
02:21:46,120 --> 02:21:49,040
You might wonder, do I have a use for them?

1488
02:21:49,040 --> 02:21:52,000
It might well be that right now you don't need

1489
02:21:52,000 --> 02:21:56,320
to learn Singularity, Obtainer, Docker, and so on.

1490
02:21:56,320 --> 02:21:58,200
But then you start facing the issue

1491
02:21:58,200 --> 02:22:00,640
that you need to use a remote supercomputer

1492
02:22:00,640 --> 02:22:04,500
and suddenly you can't install the tools that you need.

1493
02:22:04,500 --> 02:22:08,520
Or more in general, you did such, such an important work

1494
02:22:08,520 --> 02:22:10,120
that you really need to document it,

1495
02:22:10,120 --> 02:22:13,060
that this work, this result should really need

1496
02:22:13,060 --> 02:22:16,400
to be reproduced in 10 years from the future.

1497
02:22:16,400 --> 02:22:20,360
So again, with the higher requirements of your project,

1498
02:22:20,360 --> 02:22:26,040
you might start thinking, you know, maybe I really need to use containers for this case.

1499
02:22:27,720 --> 02:22:31,640
Hopefully the overview that we gave is kind of useful for everyone from the most

1500
02:22:32,200 --> 02:22:39,800
beginner to the most advanced users. Is there anything else to cover, [name]? Anything to

1501
02:22:40,920 --> 02:22:47,000
mention from the collaborative notes? No, there's very many questions and it's

1502
02:22:47,000 --> 02:22:53,240
Really really great thank you and we will still go through these and answer a bit more and also

1503
02:22:53,240 --> 02:22:59,800
please ask follow-up questions if the explanation you got there is not sufficient or doesn't solve

1504
02:22:59,800 --> 02:23:09,560
your question. Yeah I mean thank you for listening everyone as usual we wrote in the

1505
02:23:09,560 --> 02:23:14,920
collaborative notes this feedback part because we are continuously improving our

1506
02:23:14,920 --> 02:23:20,960
our lessons, workshop after workshop. And so if there's something that could have more

1507
02:23:20,960 --> 02:23:30,400
clarity or that would require more justifications, just write it there. All comments, all feedback

1508
02:23:30,400 --> 02:23:41,240
are welcome. So [name], will you now go and start using Singularity after this?

1509
02:23:41,240 --> 02:23:44,280
I did start actually using after a CodeRefiner workshop

1510
02:23:44,280 --> 02:23:45,360
many years ago.

1511
02:23:47,080 --> 02:23:50,960
And I hope, well, yeah, that everyone got an impression

1512
02:23:50,960 --> 02:23:54,000
what these tools can be useful for.

1513
02:23:54,000 --> 02:23:58,160
And as mentioned before, like the easiest way to get into it

1514
02:23:58,160 --> 02:24:02,680
to start using them and then ask from your local IT support

1515
02:24:04,160 --> 02:24:06,660
if you run into issues with them.

1516
02:24:06,660 --> 02:24:17,160
And I think now we have a one hour break before we go into the next lesson, which if I remember

1517
02:24:17,160 --> 02:24:22,340
correctly is social coding for the afternoon. Is that correct?

1518
02:24:22,340 --> 02:24:27,420
Yeah. Excellent. Thank you, [name], for being here with me again. It was nice to teach

1519
02:24:27,420 --> 02:24:33,920
together. It's 12 o'clock in Finland, 11 o'clock in Central Europe. So it's time for a lunch

1520
02:24:33,920 --> 02:24:41,120
or branch, depending on the taste. See you in one hour and thank you. Bye.

1521
02:25:03,920 --> 02:25:05,980
you

1522
02:25:33,920 --> 02:25:35,980
you

1523
02:26:03,920 --> 02:26:05,980
you

1524
02:26:33,920 --> 02:26:35,980
you

1525
02:27:03,920 --> 02:27:05,980
you

1526
02:27:33,920 --> 02:27:35,980
you

1527
02:28:03,920 --> 02:28:05,980
you

1528
02:28:33,920 --> 02:28:35,980
you

1529
02:29:03,920 --> 02:29:05,980
you

1530
02:29:33,920 --> 02:29:35,980
you

1531
02:30:03,920 --> 02:30:05,980
you

1532
02:30:33,920 --> 02:30:35,980
you

1533
02:31:03,920 --> 02:31:05,980
you

1534
02:31:33,920 --> 02:31:35,980
you

1535
02:32:03,920 --> 02:32:05,980
you

1536
02:32:33,920 --> 02:32:35,980
you

1537
02:33:03,920 --> 02:33:05,980
you

1538
02:33:33,920 --> 02:33:35,980
you

1539
02:34:03,920 --> 02:34:05,980
you

1540
02:34:33,920 --> 02:34:35,980
you

1541
02:35:03,920 --> 02:35:05,980
you

1542
02:35:33,920 --> 02:35:35,980
you

1543
02:36:03,920 --> 02:36:05,980
you

1544
02:36:33,920 --> 02:36:35,980
you

1545
02:37:03,920 --> 02:37:05,980
you

1546
02:37:33,920 --> 02:37:35,980
you

1547
02:38:03,920 --> 02:38:05,980
you

1548
02:38:33,920 --> 02:38:35,980
you

1549
02:39:03,920 --> 02:39:05,980
you

1550
02:39:33,920 --> 02:39:35,980
you

1551
02:40:03,920 --> 02:40:05,980
you

1552
02:40:33,920 --> 02:40:35,980
you

1553
02:41:03,920 --> 02:41:05,980
you

1554
02:41:33,920 --> 02:41:35,980
you

1555
02:42:03,920 --> 02:42:05,980
you

1556
02:42:33,920 --> 02:42:35,980
you

1557
02:43:03,920 --> 02:43:05,980
you

1558
02:43:33,920 --> 02:43:35,980
you

1559
02:44:03,920 --> 02:44:05,980
you

1560
02:44:33,920 --> 02:44:35,980
you

1561
02:45:03,920 --> 02:45:05,980
you

1562
02:45:33,920 --> 02:45:35,980
you

1563
02:46:03,920 --> 02:46:05,980
you

1564
02:46:33,920 --> 02:46:35,980
you

1565
02:47:03,920 --> 02:47:05,980
you

1566
02:47:33,920 --> 02:47:35,980
you

1567
02:48:03,920 --> 02:48:05,980
you

1568
02:48:33,920 --> 02:48:35,980
you

1569
02:49:03,920 --> 02:49:05,980
you

1570
02:49:33,920 --> 02:49:35,980
you

1571
02:50:03,920 --> 02:50:05,980
you

1572
02:50:33,920 --> 02:50:35,980
you

1573
02:51:03,920 --> 02:51:05,980
you

1574
02:51:33,920 --> 02:51:35,980
you

1575
02:52:03,920 --> 02:52:05,980
you

1576
02:52:33,920 --> 02:52:35,980
you

1577
02:53:03,920 --> 02:53:05,980
you

1578
02:53:33,920 --> 02:53:35,980
you

1579
02:54:03,920 --> 02:54:05,980
you

1580
02:54:33,920 --> 02:54:35,980
you

1581
02:55:03,920 --> 02:55:05,980
you

1582
02:55:33,920 --> 02:55:35,980
you

1583
02:56:03,920 --> 02:56:05,980
you

1584
02:56:33,920 --> 02:56:35,980
you

1585
02:57:03,920 --> 02:57:05,980
you

1586
02:57:33,920 --> 02:57:35,980
you

1587
02:58:03,920 --> 02:58:05,980
you

1588
02:58:33,920 --> 02:58:35,980
you

1589
02:59:03,920 --> 02:59:05,980
you

1590
02:59:33,920 --> 02:59:35,980
you

1591
03:00:03,920 --> 03:00:05,980
you

1592
03:00:33,920 --> 03:00:35,980
you

1593
03:01:03,920 --> 03:01:05,980
you

1594
03:01:33,920 --> 03:01:35,980
you

1595
03:02:03,920 --> 03:02:05,980
you

1596
03:02:33,920 --> 03:02:35,980
you

1597
03:03:03,920 --> 03:03:05,980
you

1598
03:03:33,920 --> 03:03:35,980
you

1599
03:04:03,920 --> 03:04:05,980
you

1600
03:04:33,920 --> 03:04:35,980
you

1601
03:05:03,920 --> 03:05:05,980
you

1602
03:05:33,920 --> 03:05:35,980
you

1603
03:06:03,920 --> 03:06:05,980
you

1604
03:06:33,920 --> 03:06:35,980
you

1605
03:07:03,920 --> 03:07:05,980
you

1606
03:07:33,920 --> 03:07:35,980
you

1607
03:08:03,920 --> 03:08:05,980
you

1608
03:08:33,920 --> 03:08:35,980
you

1609
03:09:03,920 --> 03:09:05,980
you

1610
03:09:33,920 --> 03:09:35,980
you

1611
03:10:03,920 --> 03:10:05,980
you

1612
03:10:33,920 --> 03:10:35,980
you

1613
03:11:03,920 --> 03:11:05,980
you

1614
03:11:33,920 --> 03:11:35,980
you

1615
03:12:03,920 --> 03:12:05,980
you

1616
03:12:33,920 --> 03:12:35,980
you

1617
03:13:03,920 --> 03:13:05,980
you

1618
03:13:33,920 --> 03:13:35,980
you

1619
03:14:03,920 --> 03:14:05,980
you

1620
03:14:33,920 --> 03:14:35,980
you

1621
03:15:03,920 --> 03:15:05,980
you

1622
03:15:33,920 --> 03:15:35,980
you

1623
03:16:03,920 --> 03:16:05,980
you

1624
03:16:33,920 --> 03:16:35,980
you

1625
03:17:03,920 --> 03:17:05,980
you

1626
03:17:33,920 --> 03:17:35,980
you

1627
03:18:03,920 --> 03:18:05,980
you

1628
03:18:33,920 --> 03:18:35,980
you

1629
03:19:03,920 --> 03:19:05,980
you

1630
03:19:33,920 --> 03:19:35,980
you

1631
03:20:03,920 --> 03:20:05,980
you

1632
03:20:33,920 --> 03:20:35,980
you

1633
03:21:03,920 --> 03:21:05,980
you

1634
03:21:33,920 --> 03:21:35,980
you

1635
03:22:03,920 --> 03:22:05,980
you

1636
03:22:33,920 --> 03:22:35,980
you

1637
03:23:03,920 --> 03:23:05,980
you

1638
03:23:33,920 --> 03:23:35,980
you

1639
03:24:03,920 --> 03:24:23,480
Hello, and welcome back.

1640
03:24:23,480 --> 03:24:26,880
You hopefully can hear us now.

1641
03:24:26,880 --> 03:24:32,440
Let's see, I'm adjusting something here.

1642
03:24:32,440 --> 03:24:41,880
So, yeah, hopefully you had a good lunch break.

1643
03:24:41,880 --> 03:24:43,440
So what do we have now?

1644
03:24:43,440 --> 03:24:50,400
Well, first off, we should tell you if the things from the previous lesson were a bit

1645
03:24:50,400 --> 03:24:53,060
difficult.

1646
03:24:53,060 --> 03:24:58,120
We have these things called bring your own code sessions, where you can basically bring

1647
03:24:58,120 --> 03:25:02,200
your work and we can look at it and provide a little bit more

1648
03:25:02,200 --> 03:25:07,120
hands-on support in using these tools for your own work.

1649
03:25:07,120 --> 03:25:10,080
So there's not much we can do.

1650
03:25:10,080 --> 03:25:14,400
We can't help everyone, but we can at least get you started.

1651
03:25:14,400 --> 03:25:18,400
If you do have more questions and you have collaborators

1652
03:25:18,400 --> 03:25:23,320
or support people locally, try talking to them.

1653
03:25:23,320 --> 03:25:26,000
And you can show them the Code Refinery lesson saying,

1654
03:25:26,000 --> 03:25:29,840
Oh, I saw this, I would like to use it, can you help me?

1655
03:25:29,840 --> 03:25:33,800
And they can probably help quite a bit.

1656
03:25:33,800 --> 03:25:40,160
So what we have next, the lesson, is called Social Coding and Software Licensing.

1657
03:25:40,160 --> 03:25:46,400
This used to be called Software Licensing and was about, well, the permissions of reusing

1658
03:25:46,400 --> 03:25:47,400
software.

1659
03:25:47,400 --> 03:25:51,400
But it's been changed so it's much more broad now.

1660
03:25:51,400 --> 03:25:56,280
So in the previous lesson, we talked about ways to make it where your code could be used

1661
03:25:56,280 --> 03:25:57,940
by other people.

1662
03:25:57,940 --> 03:26:00,080
But do they have permission?

1663
03:26:00,080 --> 03:26:04,940
And do they have permission to contribute back to your code and make this whole cycle

1664
03:26:04,940 --> 03:26:09,240
of all the different things going together?

1665
03:26:09,240 --> 03:26:17,040
Yeah, so, is there any other introduction or should I send it straight to you all?

1666
03:26:17,040 --> 03:26:27,440
You can send it to us, we should maybe say briefly who we are and give it over to you.

1667
03:26:27,440 --> 03:26:31,240
So yeah, who are our instructors for this lesson?

1668
03:26:31,240 --> 03:26:35,640
We have [name], who I think is new here.

1669
03:26:35,640 --> 03:26:36,640
Yeah.

1670
03:26:36,640 --> 03:26:45,200
Hello, I'm [name], I work at Aalto University as a research software engineer and well,

1671
03:26:45,200 --> 03:26:46,200
I suppose that's enough.

1672
03:26:46,200 --> 03:26:47,200
Yeah.

1673
03:26:47,200 --> 03:26:51,880
And [name], I think you know from last week.

1674
03:26:51,880 --> 03:26:58,480
Yes, University of Tromso, Norway, research software engineering and support for computing

1675
03:26:58,480 --> 03:27:02,080
software development, high performance computing.

1676
03:27:02,080 --> 03:27:03,960
And I'm really looking forward to this lesson.

1677
03:27:03,960 --> 03:27:06,240
It's a really important topic.

1678
03:27:06,240 --> 03:27:08,480
It's something that we all need to think about.

1679
03:27:08,480 --> 03:27:12,600
And I like how it nicely connects to the earlier session from today.

1680
03:27:12,600 --> 03:27:16,040
is about, it's again about reuse,

1681
03:27:16,040 --> 03:27:21,040
but less on the technical level, more on the social level.

1682
03:27:21,240 --> 03:27:23,080
And what I will try to do is I will be here,

1683
03:27:23,080 --> 03:27:24,840
be Yano's sidekick.

1684
03:27:24,840 --> 03:27:27,640
I will be watching the notes

1685
03:27:28,560 --> 03:27:30,000
and hopefully we get lots of questions.

1686
03:27:30,000 --> 03:27:32,520
I will try to keep a really lively discussion.

1687
03:27:33,640 --> 03:27:35,720
So for everybody, the best way to participate

1688
03:27:35,720 --> 03:27:40,720
is that you watch and listen what we do.

1689
03:27:40,720 --> 03:27:47,120
there will there will not be any exercises here we will have some we will try to involve you through

1690
03:27:47,120 --> 03:27:50,800
the document we will ask you some questions through the document we hope to get many answers

1691
03:27:51,840 --> 03:27:55,760
and i will try to lift some questions also here into the discussion

1692
03:27:58,080 --> 03:28:05,280
so this is more of a discussion session than a um well than an exercise or a demonstration

1693
03:28:05,280 --> 03:28:11,280
but we'll still try to spend a good amount of time in actual discussion.

1694
03:28:11,280 --> 03:28:17,280
Should we get to it?

1695
03:28:17,280 --> 03:28:22,280
I will also have questions for [name], because he's actually the expert here.

1696
03:28:22,280 --> 03:28:25,280
But I'll also try to keep this on track.

1697
03:28:25,280 --> 03:28:29,280
Yeah, I'm not sure about the expert part, but I'm also sure that I will have questions to you too.

1698
03:28:29,280 --> 03:28:31,280
So let's keep it really...

1699
03:28:31,280 --> 03:28:32,280
We'll see.

1700
03:28:32,280 --> 03:28:33,280
Let's see.

1701
03:28:33,280 --> 03:28:37,040
Yeah. So yeah, social coding and open software. So

1702
03:28:38,320 --> 03:28:43,520
yeah, this is a relatively broad section. It's about how you

1703
03:28:46,080 --> 03:28:50,640
some things you need to think about when publishing your software and how to get credit

1704
03:28:50,640 --> 03:28:57,280
and allow people to reuse it and in general how to interact with people around your published code.

1705
03:28:57,280 --> 03:29:04,280
So let's get down to it.

1706
03:29:04,280 --> 03:29:12,280
This is the plan for the course, for this section.

1707
03:29:12,280 --> 03:29:16,280
So we'll first talk about social coding, general topic.

1708
03:29:16,280 --> 03:29:23,280
Some about licensing and then how to get people to or how to enable people to cite your software.

1709
03:29:23,280 --> 03:29:26,280
And what to consider when sharing data.

1710
03:29:26,280 --> 03:29:32,440
data. So it's more about laying out things that you need to, or

1711
03:29:32,760 --> 03:29:36,640
that are good to think about when you are publishing your

1712
03:29:36,640 --> 03:29:44,960
work. And kind of prodding a bit at your brains and getting

1713
03:29:45,800 --> 03:29:49,080
getting some ideas out so that they come to mind when you are

1714
03:29:49,080 --> 03:29:55,720
actually working on this. So let's get directly to the

1715
03:29:55,720 --> 03:30:03,400
or actually i can click through here social coding section and here we have our first

1716
03:30:04,920 --> 03:30:10,120
exercise discussion topic so maybe i should copy this to the notes

1717
03:30:11,640 --> 03:30:20,040
yeah i'm working on it so i can i'm testing okay thanks it's it's in there now okay so yeah so

1718
03:30:20,040 --> 03:30:22,920
So there's a few things about,

1719
03:30:22,920 --> 03:30:25,560
initial thoughts about social coding.

1720
03:30:25,560 --> 03:30:28,600
So why would you want to share your code?

1721
03:30:30,920 --> 03:30:32,600
Of course, talked about this already.

1722
03:30:32,600 --> 03:30:36,360
Hopefully there's some ideas out there.

1723
03:30:40,760 --> 03:30:43,760
So can you click to the collaborative notes?

1724
03:30:43,760 --> 03:30:45,040
Yes.

1725
03:30:45,040 --> 03:30:46,360
So here, what we would like is,

1726
03:30:46,360 --> 03:30:49,400
we would like you all to add your votes.

1727
03:30:49,400 --> 03:30:53,080
you can vote by adding these little O's

1728
03:30:54,680 --> 03:30:57,160
and you can choose many in question one.

1729
03:30:59,400 --> 03:31:01,200
Yeah, so we'll get a little paragraph

1730
03:31:01,200 --> 03:31:02,440
and feel free to add something

1731
03:31:02,440 --> 03:31:06,120
if you see something missing.

1732
03:31:06,120 --> 03:31:08,120
Yeah, and here we want to hear from you.

1733
03:31:09,400 --> 03:31:12,040
Yeah, what are your motivations to share code?

1734
03:31:12,040 --> 03:31:14,200
What are your concerns?

1735
03:31:14,200 --> 03:31:16,520
So have a look at also the other questions,

1736
03:31:16,520 --> 03:31:18,240
question one, two, three, four,

1737
03:31:18,240 --> 03:31:21,240
And then together now with [name], as we discuss,

1738
03:31:21,240 --> 03:31:24,480
we will then return to your answers.

1739
03:31:24,480 --> 03:31:26,120
And we are really curious to see

1740
03:31:26,120 --> 03:31:30,600
which ones are the most motivating, most concerning.

1741
03:31:35,060 --> 03:31:38,400
So why would you not share your software, basically?

1742
03:31:38,400 --> 03:31:40,200
Well, why share your software?

1743
03:31:40,200 --> 03:31:41,240
Why would you not?

1744
03:31:43,400 --> 03:31:45,640
Yeah, how is software different from papers?

1745
03:31:45,640 --> 03:31:54,240
There's a lot to talk about there, we'll come back to.

1746
03:31:54,240 --> 03:32:02,440
So how about, how is it for you, [name], when, when question one, what are for you?

1747
03:32:02,440 --> 03:32:03,440
Why share them?

1748
03:32:03,440 --> 03:32:06,240
Out of these, which ones are the most, which one?

1749
03:32:06,240 --> 03:32:07,240
Yeah, I guess.

1750
03:32:07,240 --> 03:32:13,480
I mean, as a research software engineer, we mainly work for, with open software.

1751
03:32:13,480 --> 03:32:21,600
So it also comes from there, but just thinking of my own projects, which are not all research

1752
03:32:21,600 --> 03:32:23,320
projects.

1753
03:32:23,320 --> 03:32:27,680
One big thing is to just have it out there so that I don't lose it.

1754
03:32:27,680 --> 03:32:32,220
That's a really actually important motivation for sharing.

1755
03:32:32,220 --> 03:32:37,480
So you never lose access to it yourself.

1756
03:32:37,480 --> 03:32:38,480
That's a good one.

1757
03:32:38,480 --> 03:32:39,480
Also for me.

1758
03:32:39,480 --> 03:32:44,680
Jay, answer is important to me.

1759
03:32:44,680 --> 03:32:49,720
How about the good for your CV, is that important for you?

1760
03:32:49,720 --> 03:32:53,400
I mean, to an extent, I'm not looking for a job, or I'm not expecting to be looking

1761
03:32:53,400 --> 03:33:01,440
for a job very soon, but yeah, it is an important point, especially after working as a software

1762
03:33:01,440 --> 03:33:06,720
engineer for a while, if you don't have any code out there that people can see, that would

1763
03:33:06,720 --> 03:33:13,360
be a bit concerning, but as a researcher, yeah, as well.

1764
03:33:13,360 --> 03:33:19,440
And yeah, I mean, it is good to keep accumulating your portfolio as you go.

1765
03:33:19,440 --> 03:33:26,640
But yeah, I mean, actually one of the main reasons though is that I want feedback on

1766
03:33:26,640 --> 03:33:27,640
what I'm doing.

1767
03:33:27,640 --> 03:33:32,080
I want to see if people are actually interested, and if they're not, then I will work on something

1768
03:33:32,080 --> 03:33:33,160
else.

1769
03:33:33,160 --> 03:33:36,040
So yeah, that is the main thing.

1770
03:33:36,040 --> 03:33:45,040
I want people to actually see it, read it and I want to know if it's if other people

1771
03:33:45,040 --> 03:33:49,560
think it's interesting because if I'm doing some research that nobody cares about then

1772
03:33:49,560 --> 03:33:53,560
I should work on something else.

1773
03:33:53,560 --> 03:34:00,180
What's the most concerning thing for you when sharing or and maybe what what used to be

1774
03:34:00,180 --> 03:34:10,660
and what is it now? Yeah, like 10 years ago when starting my career, I was afraid that the code

1775
03:34:10,660 --> 03:34:19,140
looked bad and people would just think it looks bad basically. I don't know what the downside of

1776
03:34:19,140 --> 03:34:25,220
that actually would be, what would be the problem with people thinking my code looks ugly, but

1777
03:34:25,220 --> 03:34:29,660
But that was a real concern.

1778
03:34:29,660 --> 03:34:43,740
And right now, I think the main thing is,

1779
03:34:43,740 --> 03:34:46,780
there's a definite thing on my mind.

1780
03:34:46,780 --> 03:34:50,820
It's mainly that if something better already

1781
03:34:50,820 --> 03:35:04,820
if I haven't actually noticed it and I'm somehow taking some eyes off the better version of it.

1782
03:35:04,820 --> 03:35:23,900
How about you? What is your main reason for sharing and also for not?

1783
03:35:23,900 --> 03:35:31,880
It's the, so that ideally I can reuse it in future. So I share it with everybody else

1784
03:35:31,880 --> 03:35:34,440
but I also don't share it with my future self.

1785
03:35:34,440 --> 03:35:35,520
So the answer, J.

1786
03:35:35,520 --> 03:35:38,240
And the CV part is important,

1787
03:35:38,240 --> 03:35:41,080
and the job search doesn't have to be this year, next year,

1788
03:35:41,080 --> 03:35:43,600
but how about in five years, what, in 10 years?

1789
03:35:43,600 --> 03:35:46,640
I would like to be able to show what I worked on,

1790
03:35:47,880 --> 03:35:49,160
which means that if I have the choice

1791
03:35:49,160 --> 03:35:53,120
between working on a project that is open

1792
03:35:53,120 --> 03:35:56,000
and where my contribution will be visible

1793
03:35:56,000 --> 03:35:57,440
and one which is completely closed

1794
03:35:57,440 --> 03:35:58,720
and I cannot show it to anybody,

1795
03:35:58,720 --> 03:36:01,800
I will probably choose the more open one.

1796
03:36:01,800 --> 03:36:04,760
So it works also, it can also work the other way

1797
03:36:04,760 --> 03:36:07,300
in attracting collaborators.

1798
03:36:08,160 --> 03:36:10,680
So a project that is open will,

1799
03:36:10,680 --> 03:36:12,960
is more likely to attract me to work on it

1800
03:36:12,960 --> 03:36:15,680
because then I can show my work inside there.

1801
03:36:15,680 --> 03:36:17,480
And how about the worries?

1802
03:36:18,560 --> 03:36:20,800
Also, I used to think a lot about

1803
03:36:21,880 --> 03:36:24,160
that somebody will like go in and, I don't know,

1804
03:36:24,160 --> 03:36:25,200
steal the idea.

1805
03:36:26,200 --> 03:36:28,720
I'm not worried about it because,

1806
03:36:28,720 --> 03:36:30,560
I mean, I have a hard time understanding my own code.

1807
03:36:30,560 --> 03:36:33,600
I don't think anybody else will figure it out before I do.

1808
03:36:35,040 --> 03:36:37,560
And an ugly code.

1809
03:36:37,560 --> 03:36:39,480
And I think if we look at the answers,

1810
03:36:39,480 --> 03:36:44,000
so the answer B, it will expose my in quotes ugly code.

1811
03:36:44,000 --> 03:36:46,080
It's the answer that wins today.

1812
03:36:46,080 --> 03:36:48,640
And it's the answer that wins every single time.

1813
03:36:48,640 --> 03:36:51,680
And hopefully it is nice for all of us to see

1814
03:36:51,680 --> 03:36:54,720
that we all think that way.

1815
03:36:54,720 --> 03:36:56,680
And it actually doesn't matter and nobody will judge

1816
03:36:56,680 --> 03:37:00,200
and the code is never finished and it's okay.

1817
03:37:00,560 --> 03:37:09,560
And when you go and find somebody else's code and it's useful and it does what you want it to do, you are happy about it.

1818
03:37:09,560 --> 03:37:12,560
I mean, you don't think, well, this is ugly.

1819
03:37:12,560 --> 03:37:15,560
So I find it really comforting to see.

1820
03:37:15,560 --> 03:37:24,560
On the positive side, there is the more general, I mean, not just the CV, but the reputation you get.

1821
03:37:24,560 --> 03:37:31,680
it's a social reward you get for publishing something that is maybe more important than

1822
03:37:31,680 --> 03:37:40,080
the professional side of it. It is natural to think that if your code looks ugly then

1823
03:37:40,080 --> 03:37:43,600
maybe that would kind of go in the wrong direction, maybe people don't like it,

1824
03:37:44,320 --> 03:37:51,120
but in practice it's more important that there's something out there that kind of works and people

1825
03:37:51,120 --> 03:37:57,200
will always be happy to find anything and I mean of course if it if it's nice and if it's ready

1826
03:37:57,200 --> 03:38:03,680
and if it's usable that's good but it's still better to find something than nothing

1827
03:38:09,840 --> 03:38:12,800
okay should we look at the other questions

1828
03:38:15,360 --> 03:38:15,860
so

1829
03:38:15,860 --> 03:38:29,460
So software is different from papers, which is true.

1830
03:38:29,460 --> 03:38:38,140
So yeah, in my mind, the analogy is between software and papers.

1831
03:38:38,140 --> 03:38:42,900
Papers are often usually mainly about the results, about the scientific results.

1832
03:38:42,900 --> 03:38:50,900
A software publication is kind of like a publication that describes your methodology,

1833
03:38:50,900 --> 03:38:59,700
your experimental setup. So if you're running an experiment or especially if you're building

1834
03:38:59,700 --> 03:39:07,780
a device to run the experiment then it's also important to describe the entire process in

1835
03:39:07,780 --> 03:39:14,260
detail so that people can repeat your and reproduce your study. So yeah, publishing the

1836
03:39:14,260 --> 03:39:19,780
software is kind of analogous to publishing the blueprints for your experimental device or

1837
03:39:19,780 --> 03:39:29,060
publishing the entire methodology of your study. And here I can say that there are

1838
03:39:29,060 --> 03:39:35,060
journals that specialize on where you can publish, you can describe the software part.

1839
03:39:35,060 --> 03:39:44,500
But it's not so much about publishing the research results used with the software, but

1840
03:39:44,500 --> 03:39:46,700
where you can focus on the software part.

1841
03:39:46,700 --> 03:39:52,140
And hopefully, towards the end of this session, we will have time to mention those and discuss

1842
03:39:52,140 --> 03:39:53,140
those.

1843
03:39:53,140 --> 03:39:54,140
Yeah.

1844
03:39:54,140 --> 03:40:02,060
Question four is essentially, well, it's a large part of what we'll come back to.

1845
03:40:02,060 --> 03:40:06,060
I don't know actually if there's a huge difference in software for question 3.

1846
03:40:06,060 --> 03:40:14,060
There's about publishing rights, so I'm assuming who can publish what and what is considered plagiarism.

1847
03:40:14,060 --> 03:40:18,060
I don't know that there is a huge difference there.

1848
03:40:18,060 --> 03:40:28,060
Software licensing works differently because software is something you can run, you can use to do something.

1849
03:40:28,060 --> 03:40:31,980
a paper is mainly the it is the text that you just read

1850
03:40:31,980 --> 03:40:35,100
um so software can be used in different ways

1851
03:40:35,100 --> 03:40:41,900
in more different ways than papers but in general i i think the publication

1852
03:40:41,900 --> 03:40:47,180
rights work almost completely the same way

1853
03:40:47,340 --> 03:40:51,900
good point and i think we will return to that to that aspect also question four

1854
03:40:51,900 --> 03:40:57,180
here we wanted to hear from you but we will discuss that also in a little

1855
03:40:57,180 --> 03:41:04,780
moment, I believe, or should we go there now in question for,

1856
03:41:05,620 --> 03:41:08,020
um, well, I mean, we can do that.

1857
03:41:08,320 --> 03:41:08,880
I don't mind.

1858
03:41:09,660 --> 03:41:13,540
Um, so what do you look at?

1859
03:41:13,660 --> 03:41:16,560
Um, should we answer this ourselves first?

1860
03:41:16,560 --> 03:41:24,000
What's the first thing you look at when you find a, um, software written by

1861
03:41:24,000 --> 03:41:26,140
someone else that you could use in your project?

1862
03:41:27,180 --> 03:41:32,180
So this is about, you want to do something,

1863
03:41:33,380 --> 03:41:34,900
you search for it, has anybody done it?

1864
03:41:34,900 --> 03:41:38,580
And now you see that, aha, there is a repository on GitHub.

1865
03:41:38,580 --> 03:41:41,580
And it's very similar to what I wanted.

1866
03:41:41,580 --> 03:41:43,500
Can I just reuse it and change it?

1867
03:41:44,780 --> 03:41:49,780
And the things that I would look at is license.

1868
03:41:51,860 --> 03:41:52,700
Yeah.

1869
03:41:53,500 --> 03:41:55,320
So can I even change it?

1870
03:41:55,320 --> 03:41:58,320
and am I allowed to change it?

1871
03:41:58,320 --> 03:42:01,880
And especially, as we will see in a moment,

1872
03:42:01,880 --> 03:42:03,120
I can do almost anything

1873
03:42:03,120 --> 03:42:04,720
if I just keep it on my own computer.

1874
03:42:04,720 --> 03:42:09,000
But the important question is, am I allowed to change it

1875
03:42:09,000 --> 03:42:11,120
and then publish the result?

1876
03:42:11,120 --> 03:42:13,440
Because that's what I really want to do.

1877
03:42:13,440 --> 03:42:15,080
So can I change it and share it?

1878
03:42:16,060 --> 03:42:20,040
Because publishing and sharing is often related.

1879
03:42:20,040 --> 03:42:22,500
So that's one thing I would look at,

1880
03:42:22,500 --> 03:42:25,280
but there are many other good answers there.

1881
03:42:25,280 --> 03:42:33,040
Yes. So how is the project still alive? How recent are the most recent commits? Are there

1882
03:42:33,040 --> 03:42:42,000
open issues or pull requests? So yeah, is it being developed? And if it's old enough,

1883
03:42:42,000 --> 03:42:46,000
it might not run or you might need to do a lot of work to get it to work.

1884
03:42:48,160 --> 03:42:48,800
Yeah.

1885
03:42:48,800 --> 03:42:52,880
It's of course also nice if it stays up to date and people can use it later.

1886
03:42:52,880 --> 03:42:59,920
yeah and i do look at that when was the last change um will it be hard to install yeah but

1887
03:42:59,920 --> 03:43:05,440
then if you see a project that hasn't been touched in three years i think it's it's nice if we are

1888
03:43:05,440 --> 03:43:14,800
also uh it's i mean i also understand the other side i mean i have many projects that i started

1889
03:43:14,800 --> 03:43:20,640
i worked on them and then i stopped working on them because if i if i would support every

1890
03:43:20,640 --> 03:43:22,840
every single project that I ever started,

1891
03:43:22,840 --> 03:43:25,760
at some point, I would not be able to start anything new.

1892
03:43:25,760 --> 03:43:28,800
So it's a normal process that many projects,

1893
03:43:28,800 --> 03:43:30,500
most projects at some point stop.

1894
03:43:32,040 --> 03:43:35,760
And it's nice if we are constructive about it

1895
03:43:35,760 --> 03:43:36,600
and nice about it.

1896
03:43:36,600 --> 03:43:37,800
So you could also be the person

1897
03:43:37,800 --> 03:43:40,200
who then finds a project that has stopped

1898
03:43:40,200 --> 03:43:42,120
and takes it up and revives it.

1899
03:43:45,320 --> 03:43:47,280
So sometimes I feel bad when I get,

1900
03:43:47,280 --> 03:43:48,640
I see comments on my own projects,

1901
03:43:48,640 --> 03:43:54,960
this is this this is a dead project nobody has the issues are not followed up the pull requests

1902
03:43:54,960 --> 03:44:02,480
are not merged yeah well uh yeah maybe somebody else can do that this is open source and at some

1903
03:44:02,480 --> 03:44:07,280
point i need to move on to other projects yeah it's always better to have it out there than

1904
03:44:08,320 --> 03:44:14,160
not so even if you cannot actually continually develop it you just need it for your current

1905
03:44:14,160 --> 03:44:17,360
thing and then it's done it's still better to have it out there

1906
03:44:21,840 --> 03:44:26,000
of course it is also good to communicate clearly that you are no longer developing it so that

1907
03:44:28,400 --> 03:44:35,440
other people feel free to pick it up and yeah continue working on great question on

1908
03:44:36,240 --> 03:44:40,400
line 247 so what exactly is software if i write a python code

1909
03:44:40,400 --> 03:44:45,400
a script that does an analysis to get the result of a paper.

1910
03:44:46,880 --> 03:44:49,960
So is that part of software?

1911
03:44:49,960 --> 03:44:51,120
Is this what we're talking about here?

1912
03:44:51,120 --> 03:44:53,720
Should we then, do we need to think about licenses?

1913
03:44:55,920 --> 03:44:57,120
And it's a rhetorical question.

1914
03:44:57,120 --> 03:44:58,880
So yes, yes, it is software.

1915
03:44:58,880 --> 03:45:01,000
It can even be, it can be a short script.

1916
03:45:01,880 --> 03:45:03,560
And then we don't have to do much.

1917
03:45:03,560 --> 03:45:06,720
We can add a license file or on top of the script,

1918
03:45:06,720 --> 03:45:09,220
we can write that this script is shared under the,

1919
03:45:10,400 --> 03:45:15,160
MIT license or GPL, and we will see what they mean

1920
03:45:16,240 --> 03:45:19,800
in a moment, so it can be, that can be enough.

1921
03:45:20,960 --> 03:45:24,840
But basically anything to reproduce the results,

1922
03:45:24,840 --> 03:45:28,960
data, software, we need to think about license.

1923
03:45:33,080 --> 03:45:34,840
Because I made a little script that

1924
03:45:36,080 --> 03:45:38,120
maybe it takes me 20 minutes to write.

1925
03:45:38,120 --> 03:45:40,140
Maybe it will save somebody else days.

1926
03:45:40,400 --> 03:45:43,680
somebody else will be really grateful if they don't have to write it and can reuse it.

1927
03:45:44,400 --> 03:45:47,600
Yeah, or even if it takes 20 minutes that's still time saved.

1928
03:45:49,840 --> 03:45:54,720
So especially it is important if this is actually something you've used to

1929
03:45:54,720 --> 03:46:01,120
produce a figure or a result in your paper to actually publish it in such a way that it can

1930
03:46:01,120 --> 03:46:06,880
actually someone else can use it to reproduce the results in your paper and then go from there to

1931
03:46:06,880 --> 03:46:15,520
add on to it. Yeah, it is important to publish that. And it is software, so it needs a software

1932
03:46:15,520 --> 03:46:21,360
license and all of that.

1933
03:46:21,360 --> 03:46:25,400
So I'm watching as questions will go on, and I might trace them, but maybe, yeah, maybe

1934
03:46:25,400 --> 03:46:27,200
you can move on and follow up.

1935
03:46:27,200 --> 03:46:36,040
Yes, let's go on to. Yeah, so, well, comparing, sharing papers and sharing code is exactly

1936
03:46:36,040 --> 03:46:43,240
what we were just talking about.

1937
03:46:43,240 --> 03:46:50,280
Something we didn't really go into is academic credit, which all researchers roughly know

1938
03:46:50,280 --> 03:46:51,880
how it works.

1939
03:46:51,880 --> 03:46:57,600
You use an idea from another paper, you're not directly using any text from the paper,

1940
03:46:57,600 --> 03:47:02,200
you just read the paper and then you are continuing to work.

1941
03:47:02,200 --> 03:47:10,120
you cite the paper in your own publications. And that is kind of the currency of academia in a way

1942
03:47:12,680 --> 03:47:15,640
that shows that people are actually interested in your work and

1943
03:47:16,520 --> 03:47:21,720
you are building or you are adding something important to a field of science.

1944
03:47:24,920 --> 03:47:31,880
So yeah, the thing you want to do as a scientist is put papers out there, have people cite them

1945
03:47:31,880 --> 03:47:35,000
and you never want to put any restrictions on them or anything like that

1946
03:47:36,360 --> 03:47:42,520
yeah good point and often there are restrictions but they come from maybe from the journalists but

1947
03:47:43,400 --> 03:47:47,480
not from the researchers you want maximum visibility for your papers

1948
03:47:48,600 --> 03:47:53,720
yeah of course I mean yeah if you publish in a journal then it might not be openly available

1949
03:47:55,160 --> 03:47:57,320
hopefully there is an openly available version somewhere

1950
03:47:57,320 --> 03:48:12,600
Okay, so software or code can or works a bit differently, so you can kind of mix and match

1951
03:48:12,600 --> 03:48:17,560
and well, I mean, you can mix and match research trials in a way you create some understanding

1952
03:48:17,560 --> 03:48:19,520
of a topic and then you cite them.

1953
03:48:19,520 --> 03:48:24,560
But here you can actually take blocks off or copies of lines of code from something

1954
03:48:24,560 --> 03:48:30,080
or you can use a library that someone else has written. So you can mix and match in a more

1955
03:48:30,080 --> 03:48:40,720
complicated way and build on top of other people's work. So one quick question is,

1956
03:48:40,720 --> 03:48:46,560
should you cite software that you use? When should you cite it? Should you cite

1957
03:48:47,360 --> 03:48:53,280
the Linux operating system? How far do you go? I guess we will come back to that.

1958
03:48:55,120 --> 03:49:02,160
that question at some point. But yeah, with software the situation gets more complicated.

1959
03:49:02,160 --> 03:49:09,360
So there's the dependencies on which you build your software and then there is

1960
03:49:09,920 --> 03:49:15,040
the algorithms, the scientific methodology that is kind of implied by the software.

1961
03:49:15,600 --> 03:49:18,560
So there's a lot more considerations there.

1962
03:49:18,560 --> 03:49:32,500
Okay, so I mean a lot of journals require you to share that share your code much should

1963
03:49:32,500 --> 03:49:38,400
we go in there we spend a good amount of time looking at the questions but this didn't actually

1964
03:49:38,400 --> 03:49:39,400
come up

1965
03:49:39,400 --> 03:49:46,760
We can just summarize that yeah today we and in future we might not have the choice whether

1966
03:49:46,760 --> 03:49:50,520
we like want to share it or don't want to share it and it's a good thing I think there

1967
03:49:50,520 --> 03:49:55,720
is a yeah so it seems that in future we will be required to personally I find it a good

1968
03:49:55,720 --> 03:50:01,960
development but it also means for us now that we we have to start thinking about it so whatever

1969
03:50:01,960 --> 03:50:07,400
I use now I have to be ready so that if I then share it in five years when the project

1970
03:50:07,400 --> 03:50:16,360
is done and we are publishing then I need to be able to share it yeah yeah so when from

1971
03:50:16,360 --> 03:50:21,520
From the start, you need to think about this licensing and these sorts of things so that

1972
03:50:21,520 --> 03:50:24,040
you can actually share the code when the time comes.

1973
03:50:24,040 --> 03:50:25,040
Yeah.

1974
03:50:25,040 --> 03:50:26,040
Okay.

1975
03:50:26,040 --> 03:50:32,480
We got a couple of great questions, so maybe we have time, I just want to raise them.

1976
03:50:32,480 --> 03:50:39,040
So what was the biggest thing that raised your awareness of this, like the biggest event

1977
03:50:39,040 --> 03:50:42,240
and led you to adopt better practices?

1978
03:50:42,240 --> 03:50:44,720
Was it seeing other people using these practices?

1979
03:50:44,720 --> 03:51:03,360
Is it that conferences I think in my original field where I was most of my work most of

1980
03:51:03,360 --> 03:51:09,920
my time as a researcher where I was developing the code there wasn't really a tradition of

1981
03:51:09,920 --> 03:51:17,200
sharing or publishing openly, anything. It took quite a while. I think I was actually

1982
03:51:17,200 --> 03:51:22,640
a research software engineer by the time I properly started sharing my own research codes.

1983
03:51:25,360 --> 03:51:31,280
I think the main thing was actually seeing it done in other fields, but also I was often

1984
03:51:31,280 --> 03:51:42,520
frustrated when two groups came up with different results for what is essentially the same question

1985
03:51:42,520 --> 03:51:50,580
and there was no clear way of checking, even checking that their code produces that result

1986
03:51:50,580 --> 03:51:53,280
because you didn't have access to their code.

1987
03:51:53,280 --> 03:51:59,900
So yeah, that was quite frustrating and of course then you see people just publishing

1988
03:51:59,900 --> 03:52:06,700
their code that is the obvious solution to the problem of course it's still good to have both

1989
03:52:06,700 --> 03:52:11,340
codes that produce those different results so that you can actually figure out what's going on but

1990
03:52:12,140 --> 03:52:17,340
yeah not publishing it is the original problem there is one more question that but it's more

1991
03:52:17,340 --> 03:52:21,500
general i wonder do we have time now for one more question or should i postpone it it's not

1992
03:52:21,500 --> 03:52:27,260
it can also wait well i think we should have time the questions that are now on the screen

1993
03:52:27,260 --> 03:52:29,500
are actually something we already talked about.

1994
03:52:30,620 --> 03:52:34,460
Yeah, one thing that I wanted to discuss a little bit

1995
03:52:34,460 --> 03:52:36,540
is this, whether we can give examples

1996
03:52:36,540 --> 03:52:39,340
of repositories we've worked on.

1997
03:52:39,340 --> 03:52:40,620
And I'm paraphrasing here.

1998
03:52:40,620 --> 03:52:41,980
So the person says that,

1999
03:52:43,020 --> 03:52:46,460
I'm working on one project over many years.

2000
03:52:47,740 --> 03:52:48,940
And is the project too big

2001
03:52:48,940 --> 03:52:50,380
or am I just really inefficient?

2002
03:52:50,380 --> 03:52:52,700
And I just wanted to say, no, I mean, probably not.

2003
03:52:52,700 --> 03:52:53,340
It's normal.

2004
03:52:53,340 --> 03:52:54,540
I would say that's the normal thing

2005
03:52:54,540 --> 03:52:57,900
that I think many researchers will work years,

2006
03:52:57,900 --> 03:53:00,500
maybe even decades on one coding project.

2007
03:53:00,500 --> 03:53:02,220
And there's nothing wrong with it.

2008
03:53:02,220 --> 03:53:04,340
Because then you really know it well.

2009
03:53:04,340 --> 03:53:07,140
You know all the ins and outs, you know what it can do.

2010
03:53:07,140 --> 03:53:09,020
You can implement new ideas in it quickly

2011
03:53:09,020 --> 03:53:10,780
because you know it so well.

2012
03:53:11,900 --> 03:53:14,500
We as research software engineers

2013
03:53:14,500 --> 03:53:15,900
would typically help researchers.

2014
03:53:15,900 --> 03:53:19,740
So we often jump from project to project

2015
03:53:19,740 --> 03:53:21,700
because at least in my case,

2016
03:53:21,700 --> 03:53:24,300
I'm now often, I'm not driving the project.

2017
03:53:24,300 --> 03:53:30,140
is somebody else and I help out. So then I do more jumping from project to project. But

2018
03:53:30,700 --> 03:53:33,420
I just wanted to say that there's nothing wrong with it. I think that's the normal

2019
03:53:33,420 --> 03:53:43,340
situation. I think it's a good sign if you end up spending a lot of time on a single

2020
03:53:43,340 --> 03:53:50,380
coding project. I have some that were kind of one and done, wrote down an algorithm and

2021
03:53:50,380 --> 03:53:52,420
and publish the paper on it.

2022
03:53:52,420 --> 03:53:55,900
And then I have a few where the project evolved

2023
03:53:55,900 --> 03:53:57,660
for years and years and years

2024
03:53:57,660 --> 03:53:59,980
and someone else is now working on it.

2025
03:53:59,980 --> 03:54:02,180
And those second ones are of course the ones

2026
03:54:02,180 --> 03:54:04,860
where other people are actually interested in the results.

2027
03:54:04,860 --> 03:54:05,980
The first ones are the ones

2028
03:54:05,980 --> 03:54:08,700
where the paper didn't really get cited

2029
03:54:08,700 --> 03:54:10,500
and I moved on to something else.

2030
03:54:11,380 --> 03:54:14,580
That is why I didn't continue developing them.

2031
03:54:16,540 --> 03:54:18,180
Yeah, great.

2032
03:54:18,180 --> 03:54:20,100
Okay, let's move on to licenses.

2033
03:54:20,100 --> 03:54:22,860
Should we talk about licenses the next episode?

2034
03:54:22,860 --> 03:54:27,380
Yes, we did we talk about reusability yet?

2035
03:54:27,380 --> 03:54:30,820
Well, that is actually something we will talk about

2036
03:54:30,820 --> 03:54:32,220
in the next section as well.

2037
03:54:34,380 --> 03:54:39,380
What from here do we need to bring up before we go on?

2038
03:54:40,100 --> 03:54:41,980
The thing that I would bring up here

2039
03:54:41,980 --> 03:54:46,220
is also contribution guide.

2040
03:54:46,220 --> 03:54:49,460
It can be nice to see in a project how to contribute.

2041
03:54:49,460 --> 03:54:50,300
Yeah.

2042
03:54:50,300 --> 03:54:51,120
How to get started?

2043
03:54:51,120 --> 03:54:52,460
What is the decision process?

2044
03:54:54,580 --> 03:54:56,660
Especially in a bigger project,

2045
03:54:56,660 --> 03:55:01,300
it can be a bit daunting to just see a huge bunch of files

2046
03:55:01,300 --> 03:55:03,540
where you have no idea how everything interacts

2047
03:55:03,540 --> 03:55:04,780
with everything else.

2048
03:55:04,780 --> 03:55:06,700
It is important to have a good style guide

2049
03:55:06,700 --> 03:55:10,220
and contribution guide so that you know how to get started.

2050
03:55:10,220 --> 03:55:15,220
And yeah, mostly everything else we have already talked about.

2051
03:55:20,420 --> 03:55:21,780
So let's move on

2052
03:55:24,340 --> 03:55:33,220
and talk about licenses. Okay so this is obviously a very important topic when it comes to publishing

2053
03:55:33,220 --> 03:55:38,820
your code without a license no one can really do much with your code you're just kind of putting it

2054
03:55:38,820 --> 03:55:47,380
out there for people to read but with the license you state what people can actually do

2055
03:55:47,380 --> 03:55:54,260
with with the code that you publish so we'll need to talk about derivative work

2056
03:55:54,260 --> 03:56:01,220
what actually is derivative work so when you take someone else's project or actually well

2057
03:56:01,220 --> 03:56:07,060
I'll just finish the sentence so when you take somebody else's project and make some changes to

2058
03:56:07,060 --> 03:56:12,580
it when does it count as derivative work and when not when can you just share it and when do you need

2059
03:56:12,580 --> 03:56:18,660
to follow the license and I guess the answer to that the way I just said it is kind of obvious

2060
03:56:18,660 --> 03:56:23,940
because if you're actually working on someone else's code that is the route to work but it

2061
03:56:23,940 --> 03:56:31,380
can be even more than that. And then we'll talk about available licenses and what do they mean

2062
03:56:32,180 --> 03:56:38,660
and give some practical advice. So what you should take away from here is basically

2063
03:56:38,660 --> 03:56:46,420
when do you need to think about licenses and where to go and check what my license means what.

2064
03:56:47,860 --> 03:56:52,020
And we will try to keep it really practical so we will not go through all the different licenses and

2065
03:56:52,980 --> 03:56:56,420
discuss the pros and cons but we want to give you practical advice of where to start,

2066
03:56:56,420 --> 03:57:05,380
where to look for, how to compare and what to do in your repository to be ready for this.

2067
03:57:05,380 --> 03:57:09,380
So there's a few things around this general concept of copyright.

2068
03:57:09,380 --> 03:57:16,380
We'll mainly talk about copyright specifically, but there's trademarks.

2069
03:57:16,380 --> 03:57:19,380
So the trademark is a name for something.

2070
03:57:19,380 --> 03:57:22,380
It could be, of course, the name of your software,

2071
03:57:22,380 --> 03:57:26,380
but in general, it's just a name that is public,

2072
03:57:26,380 --> 03:57:32,380
the sort of public face of a product or a thing.

2073
03:57:32,380 --> 03:57:41,580
A patent is a technical invention, that's novel and non-obvious, but the basic idea

2074
03:57:41,580 --> 03:57:47,360
is that it is a technical invention rather than a product or a thing you can just kind

2075
03:57:47,360 --> 03:57:53,380
of look at or it's not an object, it's not a file.

2076
03:57:53,380 --> 03:57:56,480
And then copyright applies to almost everything else.

2077
03:57:56,480 --> 03:58:08,920
So it applies to creative expressions, something you spend time on creating.

2078
03:58:08,920 --> 03:58:20,380
So it could be software, writing, graphics, photos, books, movies, and yeah, copyright.

2079
03:58:20,380 --> 03:58:26,980
you have right to the things that you create for basically forever from your point of view.

2080
03:58:26,980 --> 03:58:32,340
So lifetime of the author plus 70 years. I don't know what jurisdiction that is but it's

2081
03:58:32,340 --> 03:58:40,300
roughly correct in almost any jurisdiction. Yeah, of course, try to reproduce it and 70

2082
03:58:40,300 --> 03:58:46,260
years later. So let's see what is the running but the yeah. So the important takeaway is

2083
03:58:46,260 --> 03:58:52,580
we we create creative work so we are creative people when we write code and scripts it falls

2084
03:58:52,580 --> 03:58:58,660
under copyright and then [name] you mentioned that you have copyright so the question is who is you

2085
03:58:58,660 --> 03:59:04,020
it could be the person it could be your employer so that sometimes it depends

2086
03:59:05,300 --> 03:59:09,780
it depends on the country depends on the employer yeah depends on your contract

2087
03:59:09,780 --> 03:59:15,460
so this is also something to think about and practically speaking that can be complicated

2088
03:59:15,460 --> 03:59:22,660
even if like people try to make it sometimes as clear as possible so maybe it's that the

2089
03:59:23,540 --> 03:59:29,060
company always owns everything or maybe it's the idea is that you or the person who writes it the

2090
03:59:29,060 --> 03:59:32,820
employer owns like if you're working in a university you might own the copyright to

2091
03:59:32,820 --> 03:59:39,700
everything but it can still get complicated so it is just easier to make sure you handle the

2092
03:59:39,700 --> 03:59:46,020
copyright situation immediately so that it doesn't get into so that you don't get into

2093
03:59:46,020 --> 03:59:52,100
a complicated situation which means deciding on a license and publishing under a license

2094
03:59:54,980 --> 04:00:03,700
and a great question on on the notes is that now that we have generative AI and we have AI

2095
04:00:03,700 --> 04:00:10,180
artificial intelligence assisted coding. Yeah. It opens a whole new set of questions

2096
04:00:10,180 --> 04:00:16,820
about licenses, about copyright, about ethics of it.

2097
04:00:16,820 --> 04:00:23,360
And we, I guess we may have a section on it, but most of these services, all of these services

2098
04:00:23,360 --> 04:00:30,340
as far as I know right now, they do give the user the copyright, they give it away or you

2099
04:00:30,340 --> 04:00:38,020
buy it from them. But even if they do that, you only have copyright if it's not derivative

2100
04:00:38,020 --> 04:00:44,500
work or if it's not a direct copy of something that already exists, which is something you

2101
04:00:44,500 --> 04:00:49,820
just have to check yourself. You cannot trust that the system will take care of that for

2102
04:00:49,820 --> 04:00:50,820
you.

2103
04:00:50,820 --> 04:00:54,860
Yeah, but it's also hard to check. It's hard to know where this code comes from. And a

2104
04:00:54,860 --> 04:00:55,940
completely different question,

2105
04:00:55,940 --> 04:00:58,420
which is really hard to answer is,

2106
04:00:58,420 --> 04:01:02,540
the original creators, do they get credit?

2107
04:01:02,540 --> 04:01:03,540
Are they credited?

2108
04:01:03,540 --> 04:01:05,780
Are they, did they agree to it?

2109
04:01:05,780 --> 04:01:08,500
And was their license respected?

2110
04:01:08,500 --> 04:01:10,860
So that's a completely different set of questions.

2111
04:01:10,860 --> 04:01:11,700
Yeah.

2112
04:01:13,420 --> 04:01:17,220
Yeah, there, if you are thinking

2113
04:01:17,220 --> 04:01:18,860
that there might be an original author,

2114
04:01:18,860 --> 04:01:21,740
then the simplest case would be that,

2115
04:01:21,740 --> 04:01:24,660
oh, the best way out of it would be

2116
04:01:24,660 --> 04:01:28,280
to just assume that they have copyright and respect it

2117
04:01:28,280 --> 04:01:30,680
because then you will not get in trouble.

2118
04:01:30,680 --> 04:01:32,020
Yeah.

2119
04:01:32,020 --> 04:01:33,760
So [name], what is derivative work

2120
04:01:33,760 --> 04:01:36,040
and why is it so important for us

2121
04:01:36,040 --> 04:01:39,100
when we write and change software?

2122
04:01:40,520 --> 04:01:41,360
Yeah.

2123
04:01:41,360 --> 04:01:43,280
So derivative works, the name says,

2124
04:01:43,280 --> 04:01:45,840
basically means you have taken something

2125
04:01:45,840 --> 04:01:47,500
and made changes to it.

2126
04:01:48,840 --> 04:01:51,800
It may be even completely re-implemented it,

2127
04:01:51,800 --> 04:01:54,920
but it is somehow derived from someone else's

2128
04:01:54,920 --> 04:01:56,420
copyrighted work.

2129
04:01:56,420 --> 04:01:57,960
So it's derived from something

2130
04:01:57,960 --> 04:01:59,600
where someone else has copyright.

2131
04:02:01,000 --> 04:02:02,720
And it could be sampling.

2132
04:02:02,720 --> 04:02:06,520
We have some nice images of historical images

2133
04:02:06,520 --> 04:02:08,920
of actual resampling going on.

2134
04:02:08,920 --> 04:02:09,760
Yes.

2135
04:02:09,760 --> 04:02:10,720
It works on many levels there.

2136
04:02:10,720 --> 04:02:11,960
I think we have a clip for people.

2137
04:02:11,960 --> 04:02:13,360
I will copy it to the notes.

2138
04:02:13,360 --> 04:02:15,800
You can, you can,

2139
04:02:15,800 --> 04:02:16,640
Yeah.

2140
04:02:16,640 --> 04:02:17,800
You can vote on it.

2141
04:02:17,800 --> 04:02:19,120
Yeah.

2142
04:02:19,120 --> 04:02:21,560
So there's some examples

2143
04:02:21,560 --> 04:02:24,200
and the question is if they are derivative work or not.

2144
04:02:24,200 --> 04:02:25,580
So I don't know if I should,

2145
04:02:25,580 --> 04:02:29,320
well, I'll give the quick guide to how to answer it.

2146
04:02:29,320 --> 04:02:32,300
But when you are,

2147
04:02:33,140 --> 04:02:35,180
yeah, like I said, when you're taking something

2148
04:02:35,180 --> 04:02:39,140
and changing it, that's kind of clearly derivative work,

2149
04:02:39,140 --> 04:02:41,060
but often it's also derivative work

2150
04:02:41,060 --> 04:02:44,220
if you are taking an idea from something,

2151
04:02:44,220 --> 04:02:48,100
but not like you're using someone else's code,

2152
04:02:48,100 --> 04:02:50,300
for example, to write it in a different language

2153
04:02:50,300 --> 04:02:57,580
just rewrite it, that might still be derivative work. As long as it's derived from a copyrighted

2154
04:02:57,580 --> 04:03:05,820
work, it is derivative work. It depends on the field. If you are taking ideas from a painting

2155
04:03:05,820 --> 04:03:09,340
and creating your own painting, usually we don't consider that derivative work.

2156
04:03:10,380 --> 04:03:15,820
If you are translating a Python library into R, even if you are completely rewriting it,

2157
04:03:15,820 --> 04:03:22,380
it's still considered derivative working well usually so I hope I didn't give out the answer

2158
04:03:22,380 --> 04:03:28,860
to a direct question maybe I did but that's kind of the general guideline so it can be quite expensive

2159
04:03:31,260 --> 04:03:37,420
and so we have to we have to think about it both when we if I find some code on the internet

2160
04:03:38,460 --> 04:03:45,260
then I change it I have to think about derivative work let's go and we have to think the other way

2161
04:03:45,260 --> 04:03:49,420
to think about derivative work is do you want to make it easy or difficult for other people to

2162
04:03:49,420 --> 04:03:55,340
change things and that you can also then steer a little bit with the choice of license

2163
04:03:59,900 --> 04:04:06,300
yeah so yeah the license can give you can give it people the right to create derivative work

2164
04:04:06,300 --> 04:04:15,100
as much as they want or it can restrict it a lot okay um should we start going through this

2165
04:04:15,260 --> 04:04:21,420
i guess so yeah so a couple of them are maybe not so surprising the thing that was surprising

2166
04:04:21,420 --> 04:04:28,940
to me many years ago is that when even changing the whole language nothing is left from the old

2167
04:04:28,940 --> 04:04:34,460
code not not a single character everything has completely changed i i was surprised that

2168
04:04:34,460 --> 04:04:42,700
that is that is derivative work yeah so nobody has voted for linking to libraries

2169
04:04:42,700 --> 04:04:49,980
But, in fact, if a library is published under the traditional, standard GNU public license,

2170
04:04:49,980 --> 04:04:56,540
for example, and you statically link to it, that can still be considered, that is still

2171
04:04:56,540 --> 04:04:59,500
considered derivative work.

2172
04:04:59,500 --> 04:05:03,860
So for some licenses, it depends how we link to it.

2173
04:05:03,860 --> 04:05:10,300
I think maybe that's a little bit technical, we will not go into too much details.

2174
04:05:10,300 --> 04:05:15,540
So for plugins and libraries, typically it's not derivative work, but it can be depending

2175
04:05:15,540 --> 04:05:19,620
how it is included, linked into your project.

2176
04:05:19,620 --> 04:05:23,660
And maybe it's a bit arcane because this is mainly talking about compiled languages and

2177
04:05:23,660 --> 04:05:29,640
like old engine stuff like C and C++, but I mean, people are actually still of course

2178
04:05:29,640 --> 04:05:30,640
using them.

2179
04:05:30,640 --> 04:05:35,860
And the reason I bring it up is because I was using this when I found out about this

2180
04:05:35,860 --> 04:05:39,780
and I was kind of surprised and had to change some things.

2181
04:05:39,780 --> 04:05:46,700
But answers, so questions H and I, they, so when we, when you, so H means clean room design,

2182
04:05:46,700 --> 04:05:53,380
it means that you don't see, you never see the code, but somebody explains you what the

2183
04:05:53,380 --> 04:05:59,300
code does, how it works, you can think of explains you the algorithm, and then you write

2184
04:05:59,300 --> 04:06:00,300
the code.

2185
04:06:00,300 --> 04:06:02,060
So that is typically not derivative work.

2186
04:06:02,060 --> 04:06:08,340
Also, if you read the paper, read the algorithm and write the code based on the algorithm,

2187
04:06:08,340 --> 04:06:13,060
typically not derivative work so an algorithm is typically not something that can be copyrighted

2188
04:06:15,460 --> 04:06:19,860
yeah yeah so if you're implementing an algorithm that's not derivative work

2189
04:06:20,820 --> 04:06:26,740
if somebody describes you what the code does um on a more detailed level and you just write down

2190
04:06:26,740 --> 04:06:30,580
what they're telling you telling to go to do then that actually probably is derivative work

2191
04:06:33,460 --> 04:06:37,860
so yeah i mean clean room design means you know the algorithm but you don't know the actual code

2192
04:06:38,340 --> 04:06:52,380
Okay. So containers. Okay. So yeah, recipes are like source code. Containers are like

2193
04:06:52,380 --> 04:06:59,860
a program. But we didn't actually talk about specifically the licenses yet. Okay. Let's

2194
04:06:59,860 --> 04:07:08,320
go there. Because this is an important topic. It's about choosing which license to use

2195
04:07:08,320 --> 04:07:15,720
use and also what it means when a code has been published under a specific license.

2196
04:07:15,720 --> 04:07:20,320
So there's, well, there's proprietary licenses, which generally mean you have sold a piece

2197
04:07:20,320 --> 04:07:25,960
of software and you have rather restrictive, you sell a rather restrictive license that

2198
04:07:25,960 --> 04:07:29,800
they can, only this person can use it for this purpose.

2199
04:07:29,800 --> 04:07:34,840
Yeah, that's because you're actually selling it and getting money from it.

2200
04:07:34,840 --> 04:07:38,220
But mainly talk about open source licenses.

2201
04:07:38,220 --> 04:07:47,380
So they range from strong copyleft, which means derivative work has to be published

2202
04:07:47,380 --> 04:07:51,000
also under a strong copyleft license.

2203
04:07:51,000 --> 04:07:58,860
You can think of it as the license kind of infects everything it touches.

2204
04:07:58,860 --> 04:08:07,100
So everything that uses a strongly copyleft piece of code also will be strongly copyleft

2205
04:08:07,100 --> 04:08:08,960
or at least copyleft.

2206
04:08:08,960 --> 04:08:11,780
So I guess that the main difference here

2207
04:08:11,780 --> 04:08:15,660
between strong copyleft and copyleft is that

2208
04:08:17,260 --> 04:08:20,660
copyleft is the less strong version is usually designed

2209
04:08:20,660 --> 04:08:23,580
so that you can actually link against it or use it,

2210
04:08:23,580 --> 04:08:26,160
use the products, use the library

2211
04:08:26,160 --> 04:08:29,300
without having to publish your code as copyleft.

2212
04:08:30,700 --> 04:08:32,540
Whereas strong copyleft is kind of,

2213
04:08:32,540 --> 04:08:35,220
it just tries to make everything copyleft

2214
04:08:35,220 --> 04:08:37,700
as much as possible.

2215
04:08:37,700 --> 04:08:42,800
And I think it's useful to not think in too much in terms of using because the using could

2216
04:08:42,800 --> 04:08:44,980
be linking plugin.

2217
04:08:44,980 --> 04:08:47,420
Maybe let's think in terms of remixing.

2218
04:08:47,420 --> 04:08:51,280
You take a couple of codes from different places and you remix them with your own work

2219
04:08:51,280 --> 04:08:53,020
and this is your code.

2220
04:08:53,020 --> 04:08:56,480
So remixing and then what is interesting are the little arrows.

2221
04:08:56,480 --> 04:09:02,980
So in the in the image that Tiano is sharing there are these fields and the arrows between

2222
04:09:02,980 --> 04:09:05,140
they actually show the compatibility.

2223
04:09:05,140 --> 04:09:08,200
What license can you combine with another license?

2224
04:09:09,980 --> 04:09:13,660
The one on top, so the so-called strong copy left,

2225
04:09:14,620 --> 04:09:16,160
the arrow goes only one way.

2226
04:09:18,020 --> 04:09:22,400
Then if we go a little bit lower towards the dark green,

2227
04:09:22,400 --> 04:09:24,460
we have the permissive licenses,

2228
04:09:24,460 --> 04:09:25,460
and they are called permissive

2229
04:09:25,460 --> 04:09:28,860
because they can be combined with almost anything,

2230
04:09:28,860 --> 04:09:31,340
even with proprietary licenses.

2231
04:09:31,340 --> 04:09:33,660
but you can see that the arrow there goes only one way.

2232
04:09:33,660 --> 04:09:38,060
So you can take a code that has been licensed MIT

2233
04:09:38,060 --> 04:09:39,880
and if you want, you can make it proprietary.

2234
04:09:39,880 --> 04:09:42,660
You can sell it, you can close it.

2235
04:09:42,660 --> 04:09:44,020
So all of this is possible.

2236
04:09:47,020 --> 04:09:47,860
Right.

2237
04:09:49,180 --> 04:09:50,600
Yeah, and yeah.

2238
04:09:50,600 --> 04:09:55,600
So a copy left software cannot be used in a,

2239
04:09:56,400 --> 04:10:02,400
software cannot be used in in a well yeah there's there's often a separate proprietary

2240
04:10:02,400 --> 04:10:07,360
license for a copyleft library but that license cannot be directly used in a proprietary thing

2241
04:10:10,000 --> 04:10:15,280
oh it cannot be it cannot be distributed together with a proprietary thing and um

2242
04:10:16,080 --> 04:10:21,600
which means that now now let's think in two different perspectives one is that

2243
04:10:21,600 --> 04:10:27,360
that I just want to use the code. That's one perspective. But the other perspective is

2244
04:10:27,360 --> 04:10:32,320
we develop the code. And now you can decide what do you want with your code to happen?

2245
04:10:32,320 --> 04:10:40,280
Do you want it to be used in as many places as possible, proprietary, not proprietary,

2246
04:10:40,280 --> 04:10:45,360
then you would prefer probably a permissive license. If you want to make it as easy as

2247
04:10:45,360 --> 04:10:50,680
possible for everybody else. On the other hand, if you want to make sure that your code

2248
04:10:50,680 --> 04:10:55,680
is not distributed with another proprietary code,

2249
04:10:57,080 --> 04:11:00,460
then you probably want to move up on that green pyramid

2250
04:11:00,460 --> 04:11:04,440
and choose a more so-called copyleft license.

2251
04:11:07,500 --> 04:11:11,320
Right, yes, this is mainly about distributing, not running.

2252
04:11:11,320 --> 04:11:13,040
If you're just running on your own machine

2253
04:11:13,040 --> 04:11:14,820
or even making changes on your own machine,

2254
04:11:14,820 --> 04:11:17,680
that's usually not something we think about.

2255
04:11:20,680 --> 04:11:26,120
So the license doesn't really restrict you from just running or even changing it on

2256
04:11:26,120 --> 04:11:30,440
like locally and never showing it to anyone. Although it's kind of hard to

2257
04:11:31,640 --> 04:11:35,800
never show something to anyone, but in principle that's allowed.

2258
04:11:37,240 --> 04:11:40,760
So it is mainly about distributing. Somebody's asking, what is the

2259
04:11:40,760 --> 04:11:46,360
difference between MIT and Creative Commons? Because here they are on the same image.

2260
04:11:46,360 --> 04:11:56,680
Yes. MIT and BSD are traditionally software licenses and Apache. The differences between

2261
04:11:56,680 --> 04:12:06,400
them are small. Creative Commons is traditionally more for data and for both artistic things

2262
04:12:06,400 --> 04:12:13,060
like books, like lecture materials, and not so much for software that's intended to run

2263
04:12:13,060 --> 04:12:19,180
and produce a result, for example. So there are differences in the way it's written. And

2264
04:12:19,180 --> 04:12:25,260
I would basically just use software licenses for software and creative commons for other

2265
04:12:25,260 --> 04:12:28,500
things. What if you have both earlier in the session,

2266
04:12:28,500 --> 04:12:35,420
we had on we had a repository example repository, there was data and there were scripts and

2267
04:12:35,420 --> 04:12:40,380
read me's and maybe a manuscript. So what can you do if you have data and code in the

2268
04:12:40,380 --> 04:12:47,160
same place. And I can answer it myself. You can, you can put, you can then put both licenses.

2269
04:12:47,160 --> 04:12:54,000
You can say that, well, all the data, all the slides are licensed creative commons attribution

2270
04:12:54,000 --> 04:13:00,120
and all the code is licensed MIT. And that's what we do in, in our code refinery lessons.

2271
04:13:00,120 --> 04:13:07,440
So that's how we license our material. Yeah. So yeah, nothing forces you to just use one

2272
04:13:07,440 --> 04:13:12,720
license for an entire repository, you can have different licenses per folder or per file.

2273
04:13:15,280 --> 04:13:20,080
The only thing to take into account there is that you have to then, well you have to look at those

2274
04:13:20,080 --> 04:13:26,880
arrows there, you are distributing them at the same time if they are in the same repository.

2275
04:13:28,480 --> 04:13:34,880
So there might be some compatibility issues. Also even there you can have the data be

2276
04:13:34,880 --> 04:13:41,360
creative commons and have a gpl strong copy left license for the software that will not be a

2277
04:13:41,360 --> 04:13:47,920
problem the software is not so directly linked with the data that that would be a problem

2278
04:13:49,600 --> 04:13:53,200
but still you you in that case you do need to take those arrows into account

2279
04:13:56,320 --> 04:14:03,840
okay um well well something we didn't really mention is this lowest level here which is

2280
04:14:04,880 --> 04:14:08,720
It's so permissive that there's not really even a license there.

2281
04:14:08,720 --> 04:14:18,360
It's just published as public domain and anyone can do anything they want with it.

2282
04:14:18,360 --> 04:14:22,960
Often these lower levels here might require at least attribution.

2283
04:14:22,960 --> 04:14:33,680
You need to tell where you got the code or the data.

2284
04:14:33,680 --> 04:14:39,880
So yeah, there's a great resource here for this join up licensing assistant is very useful

2285
04:14:39,880 --> 04:14:45,160
when you're trying to actually figure out what license to use.

2286
04:14:45,160 --> 04:14:48,840
Should we, it's 10 to two, I should say.

2287
04:14:48,840 --> 04:14:51,720
I think what I would like to do before, we will take a break soon.

2288
04:14:51,720 --> 04:14:56,840
I would say maybe in five minutes, what we could try to do in before the break into five

2289
04:14:56,840 --> 04:15:03,280
minutes is that we, there were some good questions that I want to bring up later when we discuss

2290
04:15:03,280 --> 04:15:07,040
But one question that we could talk about now is what should we do practically?

2291
04:15:07,040 --> 04:15:13,040
So we have this overview, let's say we choose a specific license, but what should I do then

2292
04:15:13,040 --> 04:15:16,240
practically with my repository?

2293
04:15:16,240 --> 04:15:24,200
And so one thing that we advise you to do, and I think this is so in the material people

2294
04:15:24,200 --> 04:15:27,140
you can find it a little bit below that scheme,

2295
04:15:27,140 --> 04:15:32,140
is add a license file to your,

2296
04:15:33,760 --> 04:15:35,920
it can be either a file called license,

2297
04:15:35,920 --> 04:15:39,880
or it can be, if you need multiple licenses,

2298
04:15:39,880 --> 04:15:42,040
you can create a directory called licenses,

2299
04:15:43,740 --> 04:15:48,740
and add the license text into the repository.

2300
04:15:50,680 --> 04:15:52,640
The other practical advice is to do it

2301
04:15:52,640 --> 04:15:53,720
early in the project.

2302
04:15:54,200 --> 04:16:00,120
because when there is nothing there, when the project is small, it's only one person,

2303
04:16:00,760 --> 04:16:07,720
it's easy to change it. When the project already exists for 15 years and there are 20 people there

2304
04:16:08,520 --> 04:16:12,600
from five different institutions, then it's more difficult to change the license.

2305
04:16:18,520 --> 04:16:22,440
Unfortunately, a common problematic situation which we did run into with those

2306
04:16:22,440 --> 04:16:30,440
long existing codes in the field of science where stuff wasn't really published when I was there.

2307
04:16:30,440 --> 04:16:38,440
Several of those software were published later and somebody did actually figure out where I was working at

2308
04:16:38,440 --> 04:16:49,440
and write an email to my work address and ask if they can publish the changes I made to the code under a specific license.

2309
04:16:49,440 --> 04:16:54,360
So, you have to do that with every author that has made changes to your projects.

2310
04:16:54,360 --> 04:16:56,840
And when it's just you or just your team, it's really easy.

2311
04:16:56,840 --> 04:16:58,520
So yeah, do it then.

2312
04:16:58,520 --> 04:17:02,480
And when somebody has left and gone through five different postdoc positions and is now

2313
04:17:02,480 --> 04:17:08,000
working as a research software engineer in, well, you have no idea where, it's really

2314
04:17:08,000 --> 04:17:09,000
hard.

2315
04:17:09,000 --> 04:17:10,000
Yeah.

2316
04:17:10,000 --> 04:17:14,040
Because then you need to possibly reach out to all of them and get their agreement.

2317
04:17:14,040 --> 04:17:15,040
Yeah.

2318
04:17:15,040 --> 04:17:17,680
So, do it early.

2319
04:17:17,680 --> 04:17:22,620
For most projects, a license file is enough.

2320
04:17:22,620 --> 04:17:28,520
On top of your code, you can add that this code is licensed under this and that.

2321
04:17:28,520 --> 04:17:30,260
It's not strictly necessary.

2322
04:17:30,260 --> 04:17:35,900
So you don't have to add the copyright header for it to have the copyright.

2323
04:17:35,900 --> 04:17:39,960
And then another thing that we recommend is to have this discussion with your group.

2324
04:17:39,960 --> 04:17:45,940
So if maybe have a discussion with your supervisor, or if you are the supervisor, have a discussion

2325
04:17:45,940 --> 04:17:48,080
with your students at the beginning of a project.

2326
04:17:48,080 --> 04:17:51,980
Discuss, it's a little bit like a data,

2327
04:17:53,640 --> 04:17:54,480
what is it called?

2328
04:17:54,480 --> 04:17:55,920
Data management plan.

2329
04:17:55,920 --> 04:17:57,000
Like, what is your plan?

2330
04:17:57,000 --> 04:17:58,760
What is our plan to do now,

2331
04:17:58,760 --> 04:18:01,080
three years later when the code is done?

2332
04:18:01,080 --> 04:18:02,200
How do we want to share it?

2333
04:18:02,200 --> 04:18:03,320
What is the license strategy?

2334
04:18:03,320 --> 04:18:05,200
This is, discuss it with your colleagues,

2335
04:18:05,200 --> 04:18:06,100
with your project.

2336
04:18:09,080 --> 04:18:10,240
Discuss the ownership.

2337
04:18:10,240 --> 04:18:16,160
Yes.

2338
04:18:16,160 --> 04:18:21,600
And the copyright matters, ownership matters, because only those who have the copyright

2339
04:18:21,600 --> 04:18:26,720
can change the license, and it may be your employer.

2340
04:18:26,720 --> 04:18:34,320
Yeah, and it is also, so a lot of these bigger projects, for example, will have this contribution

2341
04:18:34,320 --> 04:18:39,280
guide or contribution agreement that essentially states that you are giving away copyright

2342
04:18:39,280 --> 04:18:41,160
or you're publishing it under this license.

2343
04:18:41,160 --> 04:18:43,160
So if it's an MIT license, for example,

2344
04:18:43,160 --> 04:18:46,600
then it's enough that you publish under that license.

2345
04:18:46,600 --> 04:18:50,560
But they might actually ask you to give away your copyright

2346
04:18:50,560 --> 04:18:54,040
to that change that you're making to a big project

2347
04:18:54,040 --> 04:18:56,560
because then they don't have to chase you up

2348
04:18:56,560 --> 04:18:59,160
if they want to change the license.

2349
04:18:59,160 --> 04:19:03,040
So that's also something good to talk about

2350
04:19:03,040 --> 04:19:05,560
already in the beginning with your team.

2351
04:19:05,560 --> 04:19:07,000
If somebody leaves the team,

2352
04:19:07,000 --> 04:19:09,160
then do they give away the copyright?

2353
04:19:09,160 --> 04:19:16,520
do you does your team have permission to do whatever with the code which I mean usually

2354
04:19:16,520 --> 04:19:22,800
it should it is good to have so how about we take a 10 minute break then we can think about

2355
04:19:22,800 --> 04:19:27,360
more questions hopefully we will see more questions and then in the last half an hour

2356
04:19:27,360 --> 04:19:33,120
we will talk about software citations data and hopefully we get lots of questions that

2357
04:19:33,120 --> 04:19:34,640
that we can hear discuss.

2358
04:19:37,480 --> 04:19:38,560
Does this sound like a good idea?

2359
04:19:38,560 --> 04:19:41,440
If yes, then let's be back five minutes after the hour.

2360
04:19:41,440 --> 04:19:43,260
So a 10 minute break.

2361
04:19:45,940 --> 04:19:46,780
Okay.

2362
04:19:46,780 --> 04:19:48,640
Yes, let's take a break, walk around.

2363
04:19:48,640 --> 04:19:49,480
See you.

2364
04:19:50,480 --> 04:19:51,600
Bye.

2365
04:19:51,600 --> 04:19:52,440
Bye.

2366
04:20:03,120 --> 04:20:05,180
you

2367
04:20:33,120 --> 04:20:35,180
you

2368
04:21:03,120 --> 04:21:05,180
you

2369
04:21:33,120 --> 04:21:35,180
you

2370
04:22:03,120 --> 04:22:05,180
you

2371
04:22:33,120 --> 04:22:35,180
you

2372
04:23:03,120 --> 04:23:05,180
you

2373
04:23:33,120 --> 04:23:35,180
you

2374
04:24:03,120 --> 04:24:05,180
you

2375
04:24:33,120 --> 04:24:35,180
you

2376
04:25:03,120 --> 04:25:05,180
you

2377
04:25:33,120 --> 04:25:35,180
you

2378
04:26:03,120 --> 04:26:05,180
you

2379
04:26:33,120 --> 04:26:35,180
you

2380
04:27:03,120 --> 04:27:05,180
you

2381
04:27:33,120 --> 04:27:35,180
you

2382
04:28:03,120 --> 04:28:05,180
you

2383
04:28:33,120 --> 04:28:35,180
you

2384
04:29:03,120 --> 04:29:05,180
you

2385
04:29:33,120 --> 04:29:57,040
Hello. We are back. Hopefully you can hear us. And I hope you had a good break. Stretch

2386
04:29:57,040 --> 04:30:04,200
your legs a little bit will be another talky section but we'll have some well we'll have

2387
04:30:04,200 --> 04:30:10,400
a lot of interaction with the notes like in the previous section hopefully.

2388
04:30:10,400 --> 04:30:14,640
So you wanted to bring up a question which I'm conveniently already have visible here.

2389
04:30:14,640 --> 04:30:15,640
Yes.

2390
04:30:15,640 --> 04:30:16,640
Yeah.

2391
04:30:16,640 --> 04:30:18,840
So I wanted to say thanks to all the really good questions.

2392
04:30:18,840 --> 04:30:21,660
Please keep them coming also for the remaining 20 minutes.

2393
04:30:21,660 --> 04:30:24,600
This is the best way of creating the session.

2394
04:30:24,600 --> 04:30:27,860
And one thing that we thought would be good to discuss

2395
04:30:27,860 --> 04:30:29,500
is the question that,

2396
04:30:33,440 --> 04:30:34,280
so the one,

2397
04:30:35,660 --> 04:30:37,700
so what happens if somebody actually uses a code

2398
04:30:37,700 --> 04:30:38,640
without permission?

2399
04:30:43,560 --> 04:30:44,400
Is that the one?

2400
04:30:44,400 --> 04:30:45,220
Yes.

2401
04:30:45,220 --> 04:30:46,060
Yeah.

2402
04:30:46,060 --> 04:30:46,880
How can you show that they used it?

2403
04:30:46,880 --> 04:30:47,720
And what can you do?

2404
04:30:47,720 --> 04:30:59,720
I mean, there's the legal side of this, and then there's how things work in academia.

2405
04:30:59,720 --> 04:31:05,680
Because universities or researchers don't want to be fighting each other in court, especially

2406
04:31:05,680 --> 04:31:11,040
when they are in different countries and different jurisdictions anyway.

2407
04:31:11,040 --> 04:31:15,600
But I mean, legally speaking, it is actually breaking the law.

2408
04:31:15,600 --> 04:31:24,400
doing something illegal and there are systems to handle this. It might be too minor to really

2409
04:31:24,400 --> 04:31:29,120
get a lot of attention and like I said, you probably don't want to go to court with it.

2410
04:31:31,520 --> 04:31:37,520
But that is at least for big companies or universities that might be something

2411
04:31:38,800 --> 04:31:43,920
that they think about. And more practically speaking though, if somebody publishes a

2412
04:31:43,920 --> 04:31:50,640
paper using your code and doesn't credit you or does it breaks the license when they do it,

2413
04:31:50,640 --> 04:31:57,280
does it against the license text, that is academic misconduct. That's like if they publish the paper

2414
04:31:58,000 --> 04:32:03,920
then the journal would probably take it into account and maybe retract the paper.

2415
04:32:05,760 --> 04:32:10,640
It's also true that academia works a lot through reputation.

2416
04:32:10,640 --> 04:32:22,240
So, um, basically just talking about it is, um, is part of the solution to the problem.

2417
04:32:22,240 --> 04:32:23,240
Yeah.

2418
04:32:23,240 --> 04:32:31,800
And it can be another motivation also to, to open up our own code and put it on Git,

2419
04:32:31,800 --> 04:32:36,840
because at least if somebody steals my code, at least I can show it because I can show

2420
04:32:36,840 --> 04:32:42,120
the git history and i can show that well that's weird the code that they published looks exactly

2421
04:32:42,120 --> 04:32:50,360
like the one that i put on github 2014 how come so at least you have a you have a basis

2422
04:32:50,360 --> 04:32:54,920
for an argument so this can maybe help us to motivate to share our own codes

2423
04:32:54,920 --> 04:33:06,920
Another thing we didn't mention about licenses at the end of the previous section.

2424
04:33:06,920 --> 04:33:20,920
So at the end of the licenses section there is a part about choosing a license in case what you're publishing is not derivative work, you're starting from scratch and you actually have to choose a license.

2425
04:33:20,920 --> 04:33:27,360
There's a lot of practical tips here, it's a useful read when you're actually choosing

2426
04:33:27,360 --> 04:33:30,360
a license, it's good to come back to this.

2427
04:33:30,360 --> 04:33:36,760
But one important thing is it's just practically not a good idea to invent your own license.

2428
04:33:36,760 --> 04:33:44,080
So these standards exist for a reason, they've been written by lawyers and you don't really

2429
04:33:44,080 --> 04:33:47,840
want to try to do the work of the lawyers.

2430
04:33:47,840 --> 04:33:56,760
plenty of standard license texts available and importantly this this is

2431
04:33:56,760 --> 04:34:03,480
tools around that people use that recognize standard licenses so if your

2432
04:34:03,480 --> 04:34:08,240
license is not standard people will not know what to do with it the lawyers will

2433
04:34:08,240 --> 04:34:13,120
probably say just don't use it I don't know what to do and if you if you can

2434
04:34:13,120 --> 04:34:15,360
Let's scroll up a little bit to that image again.

2435
04:34:16,600 --> 04:34:19,440
It's, what's the scenario here?

2436
04:34:19,440 --> 04:34:21,240
It's really about the compatibility.

2437
04:34:21,240 --> 04:34:24,920
So these are the arrows between licenses.

2438
04:34:24,920 --> 04:34:26,800
And if you invent your own,

2439
04:34:26,800 --> 04:34:30,680
it will not be clear what it is compatible with.

2440
04:34:30,680 --> 04:34:32,080
So that's really the problem.

2441
04:34:32,080 --> 04:34:33,720
So don't invent your own license

2442
04:34:35,480 --> 04:34:37,440
or take one of the standard ones.

2443
04:34:37,440 --> 04:34:41,920
And [name], which, what is your most favorite license?

2444
04:34:41,920 --> 04:34:47,200
Which one do you typically take for your projects when you have to choose?

2445
04:34:47,200 --> 04:34:55,560
When I'm starting and there's no reason to choose any specific license, then I would

2446
04:34:55,560 --> 04:34:57,520
probably go with MIT.

2447
04:34:57,520 --> 04:34:58,520
And why?

2448
04:34:58,520 --> 04:34:59,520
Just by default.

2449
04:34:59,520 --> 04:35:08,800
It's the most permissive license that allows people to do anything they want with it, but

2450
04:35:08,800 --> 04:35:18,720
still requires that they acknowledge you. I don't want it to be completely in public domain because

2451
04:35:18,720 --> 04:35:24,880
I still want people to acknowledge that I've done some of the work, maybe slightly selfishly, but

2452
04:35:24,880 --> 04:35:34,240
it's not very selfish though to put it under MIT. I want it to be as widely used as possible,

2453
04:35:34,240 --> 04:35:40,960
but i also want to be recognized um yeah what's your favorite

2454
04:35:42,800 --> 04:35:49,680
it's either so mit for the things that i just want to share and i don't really mind so much

2455
04:35:49,680 --> 04:35:57,600
what happens to that code yeah sometimes i i want to make sure that when people make changes

2456
04:35:57,600 --> 04:36:03,380
changes to the code that they are obliged to share the changes.

2457
04:36:03,380 --> 04:36:06,820
And then I go for the share alike, the reciprocal.

2458
04:36:06,820 --> 04:36:10,780
So here it's on this image is called reciprocal licenses.

2459
04:36:10,780 --> 04:36:18,900
For instance, the MPL, the Mozilla public license or the EUPL, the European public license.

2460
04:36:18,900 --> 04:36:26,300
So often I go for those if I want to make sure that whatever people come up with all

2461
04:36:26,300 --> 04:36:33,100
improvements i can remix them into my own projects also so it goes both ways so when i want to insist

2462
04:36:33,100 --> 04:36:39,340
on the both ways i go for the reciprocal licenses but they are a little bit more restrictive

2463
04:36:40,140 --> 04:36:44,380
if i don't care yeah or if it's such a like a little project and

2464
04:36:45,340 --> 04:36:49,260
probably nobody will do anything with it anyway than mit

2465
04:36:49,260 --> 04:37:03,820
Yeah. At some point, I think I've maybe done it once. I could move from MIT to a reciprocal

2466
04:37:03,820 --> 04:37:10,340
license, but I would generally start with MIT just by default. When there's no other

2467
04:37:10,340 --> 04:37:20,100
file in the project, except the license file, then it's MIT.

2468
04:37:20,100 --> 04:37:27,100
That's how early I think it's good to start thinking about licenses.

2469
04:37:27,100 --> 04:37:31,820
Shall we talk more about the credit part and the technology of it?

2470
04:37:31,820 --> 04:37:36,740
So how to cite, how does it work, software citation and software publication?

2471
04:37:36,740 --> 04:37:39,380
And this is also about academic citation.

2472
04:37:39,380 --> 04:37:42,340
So the MIT license requires acknowledgment,

2473
04:37:42,340 --> 04:37:47,140
but that's not quite the same thing as a citation

2474
04:37:47,140 --> 04:37:49,100
as researchers think about it.

2475
04:37:49,100 --> 04:37:52,740
So this enables also citing software

2476
04:37:52,740 --> 04:37:54,420
as an academic publication.

2477
04:37:55,900 --> 04:37:58,580
Well, that's one thing we'll talk about.

2478
04:37:58,580 --> 04:38:03,280
So a couple of questions there that we'll try to answer.

2479
04:38:04,340 --> 04:38:06,780
If you put your code on GitHub, GitLab and so on,

2480
04:38:06,780 --> 04:38:07,780
is that publishing?

2481
04:38:07,780 --> 04:38:09,220
We already talked about licenses.

2482
04:38:09,220 --> 04:38:12,180
So assume you also put a license there.

2483
04:38:12,180 --> 04:38:14,700
Is that publishing?

2484
04:38:14,700 --> 04:38:17,020
Where do you publish software?

2485
04:38:17,020 --> 04:38:18,940
How can it be cited?

2486
04:38:18,940 --> 04:38:20,300
How do you make it cited?

2487
04:38:20,300 --> 04:38:22,220
How do you make the software citable?

2488
04:38:26,100 --> 04:38:27,420
Yeah, so let's get into it.

2489
04:38:30,300 --> 04:38:34,980
So just putting your software on GitHub and GitLab,

2490
04:38:34,980 --> 04:38:38,980
that is a good part of publishing.

2491
04:38:38,980 --> 04:38:43,620
We've mentioned these FAIR principles, I think last week at least.

2492
04:38:46,180 --> 04:38:54,580
It's a collection of four words to think about when it comes to publishing and doing

2493
04:38:54,580 --> 04:38:57,540
reproducible science in general, so not just software.

2494
04:38:58,900 --> 04:39:04,500
It comes from findable, accessible, reusable and interoperable.

2495
04:39:04,500 --> 04:39:12,500
So, if you put something on GitHub or GitLab, it's accessible.

2496
04:39:12,500 --> 04:39:15,060
If people can find it, it's accessible.

2497
04:39:15,060 --> 04:39:17,380
It's also pretty findable.

2498
04:39:17,380 --> 04:39:26,260
GitHub is good at indexing things and GitLab, if GitLab here means the official GitLab.org

2499
04:39:26,260 --> 04:39:32,920
interface, then it's pretty good at indexing things so that search engines can find it.

2500
04:39:32,920 --> 04:39:39,120
doesn't make it reusable necessarily depends on the license and how on the

2501
04:39:39,120 --> 04:39:46,000
coding practices and it does not make it interoperable interoperable would mean

2502
04:39:46,000 --> 04:39:52,640
that it runs on different system and it plugs into or it can be used in in

2503
04:39:52,640 --> 04:39:57,160
different different kinds of situations with different types of data and so on

2504
04:39:57,160 --> 04:40:01,640
and there can be also problem with which of the findable there is a very simple

2505
04:40:01,640 --> 04:40:07,240
simple trick on how I can make my code not findable anymore. And that is by what if I

2506
04:40:07,240 --> 04:40:13,400
delete the repository? What if I delete my account? So it's a good first step, but it's

2507
04:40:13,400 --> 04:40:18,200
it's not enough to make it really findable for the next, I don't know, five years, 10

2508
04:40:18,200 --> 04:40:22,440
years. Yeah. I don't know what the horizon is that we want to make things findable. So

2509
04:40:22,440 --> 04:40:30,240
we want to go a step further. And one way is to really make it citable and persistent.

2510
04:40:30,240 --> 04:40:36,880
Yeah. Okay, so we'll talk about making it, well, first citable and then persistent.

2511
04:40:39,840 --> 04:40:48,400
Okay, Katz is here. Hello. So, of course, we also already talked about reproducible and

2512
04:40:48,400 --> 04:40:56,240
how to make it work after five years. That is also a big deal. But yeah, so let's talk about

2513
04:40:56,240 --> 04:41:05,200
that a little bit. So what do you actually need to cite something? And I guess one

2514
04:41:06,240 --> 04:41:10,480
pretty important, very important question is what software do you actually cite? So

2515
04:41:14,160 --> 04:41:18,240
if you use, I mentioned the Linux operating system, I guess that's an obvious thing.

2516
04:41:18,240 --> 04:41:23,840
If you use the Linux operating system, you probably don't cite it. But if you use a

2517
04:41:23,840 --> 04:41:31,840
a specifically scientific software library that someone else published with their paper,

2518
04:41:31,840 --> 04:41:38,720
then you probably do need to cite it. But there is some balance there. Different fields have

2519
04:41:38,720 --> 04:41:45,320
different conventions about what you cite, even when it comes to papers. We never cite

2520
04:41:45,320 --> 04:41:51,640
Einstein, for example, in physics these days. No, I mean,

2521
04:41:51,720 --> 04:41:53,760
that was about those I said in the wrong way around, I was

2522
04:41:53,760 --> 04:41:56,800
about to say we don't cite Newton and not even Einstein,

2523
04:41:56,800 --> 04:42:00,800
but I kind of said it the wrong way around. But anyway, so if

2524
04:42:00,800 --> 04:42:06,560
something is really fundamental enough, and it has its, it has

2525
04:42:06,560 --> 04:42:11,680
intrinsic value already, then it's known enough, you don't

2526
04:42:11,680 --> 04:42:14,320
need to cite it. But that, yeah, that depends a lot on the

2527
04:42:14,320 --> 04:42:19,600
field and the same applies to software but earlier today we talked about dependencies

2528
04:42:19,600 --> 04:42:27,680
so in the other session and so are dependencies fundamental like if i if i want to cite a code

2529
04:42:27,680 --> 04:42:32,480
but the code is using five other dependencies and each of them uses five other dependencies

2530
04:42:33,600 --> 04:42:40,400
do i need to cite all of those yeah that is a good question and i think my answer would be that

2531
04:42:40,400 --> 04:42:43,400
But we don't have to.

2532
04:42:43,400 --> 04:42:45,300
So you don't have to cite all the different dependencies.

2533
04:42:45,300 --> 04:42:50,520
You cite the libraries that you use, that your code is using.

2534
04:42:50,520 --> 04:42:54,880
And then you are hoping that the libraries in turn, when they publish their papers, they

2535
04:42:54,880 --> 04:42:58,800
are citing all the other libraries they are using.

2536
04:42:58,800 --> 04:43:03,480
So for a lot of things, just having it as a dependency might be enough.

2537
04:43:03,480 --> 04:43:09,280
Like if it's a really commonly used library, you might not cite it in a paper.

2538
04:43:09,280 --> 04:43:13,600
I would actually, I would maybe follow a citation trail kind of.

2539
04:43:13,600 --> 04:43:19,280
So if you are citing a piece of software and that piece of software is citing another piece

2540
04:43:19,280 --> 04:43:23,080
of software, then you should consider whether to cite it or not.

2541
04:43:23,080 --> 04:43:30,360
But if that other piece of software just has it as a dependency, it's not citing it, then

2542
04:43:30,360 --> 04:43:35,200
it's also probably the case that you don't cite it, although it depends on the situation,

2543
04:43:35,200 --> 04:43:37,680
depends on how much.

2544
04:43:37,680 --> 04:43:42,280
So citations are about the giving credit for the science.

2545
04:43:42,280 --> 04:43:48,960
So it and dependency is about being able to run the software.

2546
04:43:48,960 --> 04:43:54,760
So you use them for those, for different things.

2547
04:43:54,760 --> 04:44:00,840
And one thing that will help so much when citing is in your code, write down how you

2548
04:44:00,840 --> 04:44:03,000
want to be cited.

2549
04:44:03,000 --> 04:44:04,840
Already this relatively simple thing.

2550
04:44:04,840 --> 04:44:07,440
If I can find it easily, how do I will cite you?

2551
04:44:07,440 --> 04:44:13,980
I will cite you that way make it easy for me to find out how you want to be cited.

2552
04:44:13,980 --> 04:44:21,160
So for that I mean there are things you need to know how to for citing a piece of software

2553
04:44:21,160 --> 04:44:26,840
or a piece of paper or a paper or anything and I mean here's a complete list or maybe

2554
04:44:26,840 --> 04:44:32,120
an almost complete list but you can make life easier for other people by creating these

2555
04:44:32,120 --> 04:44:42,920
citation.cff file and it is a structured way of writing it down in a machine readable way

2556
04:44:42,920 --> 04:44:46,680
and it contains all of the information that's needed to cite your software.

2557
04:44:48,680 --> 04:44:57,240
So this is a message that's displayed or it says essentially just this is how you cite my software

2558
04:44:57,240 --> 04:45:05,160
but yeah this title, version, maybe a digital object identifier or it is actually very good

2559
04:45:05,160 --> 04:45:12,680
to have one, we'll come back to that, and then the names of the authors and maybe identifiers for

2560
04:45:12,680 --> 04:45:19,400
them. So that's the same information you would look for in a paper to cite it and you just

2561
04:45:19,400 --> 04:45:29,800
provide it here in a format that makes it easy to find. Now github for example will read this file

2562
04:45:29,800 --> 04:45:35,720
and process it to different standard citation formats so that you can put them into whatever

2563
04:45:35,720 --> 04:45:43,480
software you use to write your paper and cite other software. Okay so that's a good thing to

2564
04:45:43,480 --> 04:45:49,240
add it's a really these days it became a standard and many services understand this file so if this

2565
04:45:49,240 --> 04:45:57,800
file is in your repository, then many services will use it. So have such a file, get a digital

2566
04:45:57,800 --> 04:46:04,200
object identifier on services like Zenodo, where you can make your code really persistent. So then

2567
04:46:04,200 --> 04:46:11,960
even if I delete my GitHub repository, people can still find the code thanks to the DOI.

2568
04:46:11,960 --> 04:46:20,840
Zenodo is nice in that it integrates with GitHub so that whenever you create a new release

2569
04:46:20,840 --> 04:46:26,940
on GitHub, if you have enabled Zenodo, then it will create a new release also on Zenodo,

2570
04:46:26,940 --> 04:46:34,140
make a new copy so that you don't really have to do much to keep it up to date.

2571
04:46:34,140 --> 04:46:40,700
Here's some examples of how to cite software following standard formats.

2572
04:46:44,140 --> 04:46:49,180
There's also some journals that allow you to publish software papers. That's another way

2573
04:46:49,180 --> 04:46:56,220
of making your software citable. There's a good list of those here.

2574
04:46:59,500 --> 04:47:01,820
I think that's all you need to know how to make it citable.

2575
04:47:01,820 --> 04:47:04,820
Is this another section?

2576
04:47:04,820 --> 04:47:05,820
Yes.

2577
04:47:05,820 --> 04:47:06,820
No.

2578
04:47:08,820 --> 04:47:11,820
So the last section is about sharing data.

2579
04:47:13,820 --> 04:47:14,820
Yes.

2580
04:47:14,820 --> 04:47:19,820
So we have a few minutes, so you should probably go there.

2581
04:47:22,820 --> 04:47:27,820
But yeah, for getting the DOI, that is a separate section.

2582
04:47:31,820 --> 04:47:38,820
Okay, is there anything in the notes about citations?

2583
04:47:38,820 --> 04:47:42,520
Yeah, there is this question about citations in the CFF file.

2584
04:47:42,520 --> 04:47:45,020
And I think it's a good question because it's very general.

2585
04:47:45,020 --> 04:47:54,560
It's about which particular version should people cite when they use the code.

2586
04:47:54,560 --> 04:47:58,980
Because one thing you can do on services like Zenodo is that for each version of your code

2587
04:47:58,980 --> 04:48:02,020
you can get a different DOI.

2588
04:48:02,020 --> 04:48:02,860
Yeah.

2589
04:48:02,860 --> 04:48:07,860
And then you can, you can recommend people to, to cite.

2590
04:48:08,300 --> 04:48:09,780
So I would probably, my recommendation would be

2591
04:48:09,780 --> 04:48:10,900
that people should cite the version

2592
04:48:10,900 --> 04:48:12,260
that they've actually used.

2593
04:48:13,220 --> 04:48:17,460
But then you are maybe interested in knowing

2594
04:48:17,460 --> 04:48:19,940
what is the combined number of citations

2595
04:48:19,940 --> 04:48:21,340
that my software has.

2596
04:48:21,340 --> 04:48:22,660
Yeah.

2597
04:48:22,660 --> 04:48:24,220
And that you can also get this information.

2598
04:48:24,220 --> 04:48:25,460
So you would be more interested

2599
04:48:25,460 --> 04:48:27,380
in the sum of all of the versions.

2600
04:48:27,380 --> 04:48:28,420
but it might be also interesting

2601
04:48:28,420 --> 04:48:30,860
to see the evolution of versions.

2602
04:48:30,860 --> 04:48:34,620
So Zenodo actually creates this sort of sub-DOIs.

2603
04:48:34,620 --> 04:48:39,420
So a DOI that essentially ends with the version number

2604
04:48:39,420 --> 04:48:42,420
or a numeric identifier for the version.

2605
04:48:42,420 --> 04:48:46,180
And that allows you to,

2606
04:48:46,180 --> 04:48:50,760
so you can cite the specific version using that identifier

2607
04:48:50,760 --> 04:48:53,100
and it will still count the citation,

2608
04:48:53,100 --> 04:48:55,140
all the citations to your software together

2609
04:48:55,140 --> 04:48:56,380
when you want to.

2610
04:48:56,380 --> 04:49:01,380
So, yeah, I mean, digital object identifiers

2611
04:49:03,380 --> 04:49:05,620
actually support versioning directly.

2612
04:49:06,860 --> 04:49:09,940
So that's something you can do.

2613
04:49:09,940 --> 04:49:11,860
The service will also create one

2614
04:49:11,860 --> 04:49:14,900
which will always resolve to the latest version

2615
04:49:14,900 --> 04:49:16,520
if you find it practical.

2616
04:49:16,520 --> 04:49:19,260
So maybe that's the one that you can have in your readme.

2617
04:49:20,540 --> 04:49:21,380
Yeah.

2618
04:49:22,820 --> 04:49:24,500
Okay, so.

2619
04:49:26,380 --> 04:49:31,380
About sharing data is at the bottom, by the way, if anyone needs to really.

2620
04:49:31,380 --> 04:49:32,380
Yeah.

2621
04:49:32,380 --> 04:49:33,380
Oh, yeah.

2622
04:49:33,380 --> 04:49:35,380
Please do fill in the feedback.

2623
04:49:35,380 --> 04:49:40,380
We have five minutes so we can quickly look at sharing data, which is not that different.

2624
04:49:40,380 --> 04:49:46,380
But there's a few more considerations you need to take into account.

2625
04:49:46,380 --> 04:49:48,380
But also data.

2626
04:49:48,380 --> 04:49:50,380
You don't need a software license for data, essentially.

2627
04:49:50,380 --> 04:49:59,660
essentially. So it's also a bit simpler in some ways. I think the main thing though with data is

2628
04:49:59,660 --> 04:50:05,340
that it tends to be bigger than software. It tends to take more space. So there's some registries

2629
04:50:05,340 --> 04:50:13,740
that specialize in publishing data and they can go up to, I mean they have a limit of how much

2630
04:50:13,740 --> 04:50:21,660
data you can actually publish there but Zenodo goes up to 50 gigabytes per researcher and

2631
04:50:22,700 --> 04:50:30,460
there's a bunch of other options that may have more or may have less. Zenodo is run by CERN

2632
04:50:30,460 --> 04:50:36,300
so it's something you can kind of expect to stick around for a really long time

2633
04:50:36,300 --> 04:50:40,300
but all of these are good options.

2634
04:50:40,300 --> 04:50:46,300
Then there's local options in almost every country

2635
04:50:46,300 --> 04:50:50,300
that you can usually use to publish larger datasets.

2636
04:50:50,300 --> 04:50:58,300
So giving everyone internationally access to save a lot of huge datasets is hard,

2637
04:50:58,300 --> 04:51:01,300
but you can usually have a local service that allows,

2638
04:51:01,300 --> 04:51:04,420
allows, for example, all the Finnish researchers can publish

2639
04:51:04,420 --> 04:51:12,300
in these places and can publish a much bigger data set

2640
04:51:12,300 --> 04:51:17,620
than is possible on Zenodo.

2641
04:51:17,620 --> 04:51:19,500
But this is something essentially

2642
04:51:19,500 --> 04:51:22,100
that when you get to that problem,

2643
04:51:22,100 --> 04:51:25,260
you need to read up on a bit.

2644
04:51:25,260 --> 04:51:35,400
So, one practical thing can be that what you really want to do, at some point you want

2645
04:51:35,400 --> 04:51:39,420
to have a paper that is citable, that is a DOI, at some point you want to have a software

2646
04:51:39,420 --> 04:51:43,780
that has a DOI, and maybe you have also data.

2647
04:51:43,780 --> 04:51:47,680
And sometimes they go to three different places, so the paper goes to the journal, the software

2648
04:51:47,680 --> 04:51:53,180
goes to, I don't know, Zenodo, and the data goes to one of these services.

2649
04:51:53,180 --> 04:51:59,220
And it can be really useful if each of these three sides the other two, so that you Yeah,

2650
04:51:59,220 --> 04:52:04,220
somebody who finds the data can find a paper and can find a software and vice versa.

2651
04:52:04,220 --> 04:52:09,060
Data is a little bit different than software in terms of sort of licenses are similar but

2652
04:52:09,060 --> 04:52:16,860
different in data, we are less concerned about changing, we are more concerned about reusing

2653
04:52:16,860 --> 04:52:20,460
in the software, we are very concerned about changing because we want to change software,

2654
04:52:20,460 --> 04:52:22,740
we want to create derivative work.

2655
04:52:22,740 --> 04:52:25,180
Data, it's more about how is it used?

2656
04:52:25,180 --> 04:52:26,520
How is it combined?

2657
04:52:29,020 --> 04:52:32,780
With data, it's much more depends on your community.

2658
04:52:32,780 --> 04:52:34,580
So different academic communities

2659
04:52:34,580 --> 04:52:37,560
have different preferred platforms.

2660
04:52:37,560 --> 04:52:38,860
It depends on the country.

2661
04:52:41,860 --> 04:52:43,420
But the principles are the same.

2662
04:52:43,420 --> 04:52:44,500
You want it to be findable

2663
04:52:44,500 --> 04:52:47,620
and you want to connect the software, the data,

2664
04:52:47,620 --> 04:52:49,740
and the paper because they belong together.

2665
04:52:49,740 --> 04:52:50,820
they all tell a story.

2666
04:52:52,820 --> 04:52:54,900
Yeah, so probably the biggest difference

2667
04:52:54,900 --> 04:52:56,780
is that data tends to be,

2668
04:52:59,860 --> 04:53:02,140
it data doesn't tend to change.

2669
04:53:02,140 --> 04:53:05,440
Once you publish a data set, it usually stays the same

2670
04:53:05,440 --> 04:53:08,780
or you get a few updates, but not very often.

2671
04:53:08,780 --> 04:53:10,180
And software changes a lot.

2672
04:53:13,300 --> 04:53:17,820
Okay, just one more quick thing about AI.

2673
04:53:17,820 --> 04:53:22,820
There's, you, well, you can take the existence of AI

2674
04:53:26,460 --> 04:53:30,220
into account in different ways with data and with software.

2675
04:53:32,860 --> 04:53:37,860
But yeah, so essentially, most licenses allow, for example,

2676
04:53:39,360 --> 04:53:40,860
well, they allow data mining.

2677
04:53:41,720 --> 04:53:45,880
And so they kind of also allow your data

2678
04:53:45,880 --> 04:53:53,560
your software to be used for training AIs. But this is an evolving field. The laws are

2679
04:53:53,560 --> 04:54:01,880
not setting stone in any way when it comes to training AIs. So the current state of affairs

2680
04:54:01,880 --> 04:54:11,880
is we have a bunch of links here but if something is public it's likely okay to train AI on it.

2681
04:54:11,880 --> 04:54:19,600
But yeah, I mean, it's not necessarily very useful to go into much detail because the

2682
04:54:19,600 --> 04:54:23,520
situation is changing so quickly.

2683
04:54:23,520 --> 04:54:27,240
And can we maybe show now that we are out of time on a collaborative document, just

2684
04:54:27,240 --> 04:54:28,240
a feedback form.

2685
04:54:28,240 --> 04:54:33,440
It would be really nice to hear one thing that was good that we should keep and one

2686
04:54:33,440 --> 04:54:36,720
thing that we should change, improve for next time.

2687
04:54:36,720 --> 04:54:40,520
Of course, any other feedback welcome.

2688
04:54:40,520 --> 04:54:45,200
So this is what we would like to hear.

2689
04:54:45,200 --> 04:54:49,320
Also can we prepare news for the day?

2690
04:54:49,320 --> 04:54:59,340
So we are essentially done with the material, we would appreciate feedback, but if you need

2691
04:54:59,340 --> 04:55:07,200
to leave now is the time when we've covered everything.

2692
04:55:07,200 --> 04:55:08,200
So let's see.

2693
04:55:08,200 --> 04:55:22,360
we covered the things mentioned in the schedule. It was more, how do we say,

2694
04:55:22,360 --> 04:55:27,040
more discussion, demonstration. It's a different style. You see from the

2695
04:55:27,040 --> 04:55:32,520
feedback that we see that some things are too advanced. We still believe

2696
04:55:32,520 --> 04:55:37,440
that it will be really useful. Tomorrow we will look more on documentation. How

2697
04:55:37,440 --> 04:55:39,760
How can we document code differently approaches?

2698
04:55:41,760 --> 04:55:43,240
Yeah.

2699
04:55:43,240 --> 04:55:45,760
If anyone is watching just a conclusion

2700
04:55:45,760 --> 04:55:47,760
or reading this later,

2701
04:55:47,760 --> 04:55:50,160
there's many good questions during the day,

2702
04:55:50,160 --> 04:55:51,560
which are in the notes document,

2703
04:55:51,560 --> 04:55:53,820
which will be archived on the website.

2704
04:55:56,760 --> 04:55:59,080
So tomorrow will be,

2705
04:55:59,080 --> 04:56:01,640
well, tomorrow and Thursday for that matter

2706
04:56:01,640 --> 04:56:03,920
will be like today.

2707
04:56:03,920 --> 04:56:10,160
So it will be lots of demos and discussions and time for questions and answers.

2708
04:56:11,120 --> 04:56:16,080
So you don't need to prepare, but if you want to, you can try to follow along.

2709
04:56:17,120 --> 04:56:24,160
There will be things that you can possibly do, but we'll be running it as demo.

2710
04:56:33,920 --> 04:56:48,640
What did he think of this format? So, less exercises and more showing things. I think

2711
04:56:48,640 --> 04:56:53,960
it worked really well because instead of lots of questions about small technical problems

2712
04:56:53,960 --> 04:57:03,320
and things breaking, we had a lot more high-level questions about why things are used. And thus,

2713
04:57:03,320 --> 04:57:12,320
That allows us to focus on, well, the interesting part.

2714
04:57:12,320 --> 04:57:17,480
And then you can review the other things later.

2715
04:57:17,480 --> 04:57:24,220
But it can also feel, I can imagine that for some it can feel many things went too fast.

2716
04:57:24,220 --> 04:57:29,240
But then let's remember that we don't need to remember how we did it.

2717
04:57:29,240 --> 04:57:30,980
We can look it up.

2718
04:57:30,980 --> 04:57:32,860
And the how is not even the main point.

2719
04:57:32,860 --> 04:57:38,620
more the why and what is possible again what is possible why do we do things we know that

2720
04:57:38,620 --> 04:57:47,100
it exists we try to now show many different aspects and focus more on the why so like the

2721
04:57:47,100 --> 04:57:54,460
main takeaway probably yeah the main takeaway from the social coding section would for example

2722
04:57:54,460 --> 04:58:02,500
be that you recognize when you need a license for your software and you remember that the

2723
04:58:02,500 --> 04:58:10,660
material has a lot about it that you can check out when you actually are deciding what license to put

2724
04:58:11,220 --> 04:58:17,060
to use. So it's not something you do as an exercise right now because it's actually pretty trivial to

2725
04:58:17,060 --> 04:58:22,260
just click add license file and choose which license to add. It is much more important to know

2726
04:58:22,260 --> 04:58:27,540
what the differences are and remember that that information is on the course website that you can

2727
04:58:27,540 --> 04:58:33,940
check and the same kind of also goes for the for the first section so it's more important to know

2728
04:58:33,940 --> 04:58:41,860
that the tools are there and to recognize when you need them than it is to actually have used them

2729
04:58:42,740 --> 04:58:56,260
in an example yeah and i mean yeah yeah like it's there's lots of things saying today was too

2730
04:58:56,260 --> 04:59:03,460
advanced. I mean, yes, we know what we're doing is sort of advanced stuff using SnakeMake,

2731
04:59:03,460 --> 04:59:09,940
Conda Environments, or Containers. Any one of these things could become its own whole workshop.

2732
04:59:11,060 --> 04:59:20,500
So, don't feel that you're left behind or left out. Feel that you know what you...

2733
04:59:20,500 --> 04:59:31,480
feel that feel inspired to learn something in the future so it is so it

2734
04:59:31,480 --> 04:59:38,680
is true that doing an exercise forces you to be more concentrated and allows

2735
04:59:38,680 --> 04:59:47,500
you to learn something more deeply so if there's a topic that you think you need

2736
04:59:47,500 --> 04:59:52,220
to learn better, you can always repeat the demonstrations

2737
04:59:52,220 --> 04:59:56,540
or do some of the exercises in the notes.

2738
04:59:56,540 --> 04:59:58,700
And well, at least I don't think

2739
04:59:58,700 --> 05:00:00,860
it's any problem to ask questions

2740
05:00:00,860 --> 05:00:03,540
about those in the notes.

2741
05:00:03,540 --> 05:00:06,420
We might not be as actively there outside the workshop

2742
05:00:06,420 --> 05:00:09,340
time, but it could still work.

2743
05:00:12,540 --> 05:00:17,140
So tomorrow we cover, is it Jupyter and documentation?

2744
05:00:17,500 --> 05:00:19,820
or documentation in Jupyter.

2745
05:00:19,820 --> 05:00:20,660
Yes.

2746
05:00:20,660 --> 05:00:24,940
So documentation is about how we can use Git repositories to make

2747
05:00:24,940 --> 05:00:31,780
basically websites which are useful for documentation.

2748
05:00:31,780 --> 05:00:36,120
Basically, it shows how we make these lessons themselves.

2749
05:00:36,120 --> 05:00:38,340
We use these same practices.

2750
05:00:38,340 --> 05:00:40,780
Jupyter shows many Jupyter tips and

2751
05:00:40,780 --> 05:00:43,820
tricks for reproducibility that you might not know.

2752
05:00:43,820 --> 05:00:46,020
Then day three is really cool.

2753
05:00:46,020 --> 05:00:51,300
really wraps everything up. There's automated testing, which sort of puts everything together.

2754
05:00:52,340 --> 05:00:59,860
And then modular code development, which is an exciting demo of starting with some small code

2755
05:01:00,420 --> 05:01:05,700
and making it better and better incrementally, hearing the analysis of all of these steps.

2756
05:01:05,700 --> 05:01:19,500
So, anything else? Any other comments to address here?

2757
05:01:19,500 --> 05:01:24,300
Just a big thanks to everybody involved, and we'll be looking forward to tomorrow.

2758
05:01:24,300 --> 05:01:29,260
More time for discussion in a collaborative document. That would be... I guess we can

2759
05:01:29,260 --> 05:01:30,700
try to do that.

2760
05:01:34,220 --> 05:01:35,140
Yeah, OK.

2761
05:01:35,140 --> 05:01:38,380
Well, thanks a lot.

2762
05:01:38,380 --> 05:01:41,500
See you next time, I guess.

2763
05:01:41,500 --> 05:01:42,100
See you then.

2764
05:01:42,100 --> 05:01:43,140
OK, bye.

2765
05:01:43,140 --> 05:01:44,700
Bye.

2766
05:01:59,260 --> 05:02:01,320
you

2767
05:02:29,260 --> 05:02:31,320
you

2768
05:02:59,260 --> 05:03:01,320
you

2769
05:03:29,260 --> 05:03:31,320
you

