1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:50,320
Hello, test. Can anyone hear us out there?

19
00:08:50,320 --> 00:08:53,360
Good morning. Testing also here. My microphone.

20
00:08:53,360 --> 00:08:57,440
Test, one, two, three.

21
00:08:57,440 --> 00:09:12,320
test. Yes, I can hear you. Yeah, great. Should we do our standard audio test? So, someone

22
00:09:12,320 --> 00:09:19,600
says volumes are balanced, but let's double check. So, the order, me, [name], [Name],

23
00:09:19,600 --> 00:09:33,680
I think it has been too long time since we did the standard audio checks and no one remembers

24
00:09:33,680 --> 00:09:35,640
what we actually are doing.

25
00:09:35,640 --> 00:09:40,360
So the way it works, we each say one, then we each say two, and each say three, and so

26
00:09:40,360 --> 00:09:41,360
on.

27
00:09:41,360 --> 00:09:45,800
It's like one, one, one, one, two, two, two, two, three, three, three, three.

28
00:09:45,800 --> 00:09:48,800
me, [Name], [Name], [Name]. One.

29
00:09:48,800 --> 00:09:50,800
All right.

30
00:09:50,800 --> 00:09:51,800
One.

31
00:09:51,800 --> 00:09:52,800
One.

32
00:09:52,800 --> 00:09:53,800
One.

33
00:09:53,800 --> 00:09:54,800
Two.

34
00:09:54,800 --> 00:09:55,800
Two.

35
00:09:55,800 --> 00:09:56,800
Two.

36
00:09:56,800 --> 00:09:57,800
Two.

37
00:09:57,800 --> 00:09:58,800
Three.

38
00:09:58,800 --> 00:09:59,800
Three.

39
00:09:59,800 --> 00:10:00,800
Three.

40
00:10:00,800 --> 00:10:01,800
Three.

41
00:10:01,800 --> 00:10:05,800
Okay, does that sound balanced online?

42
00:10:05,800 --> 00:10:11,800
Okay, I see a report that says good.

43
00:10:11,800 --> 00:10:20,800
All right, how has yesterday been for you?

44
00:10:20,800 --> 00:10:32,320
It was a bit chaotic preparing for today.

45
00:10:32,320 --> 00:10:38,000
So our nice sound effects seem to have affected Whisper's transcription of our video via

46
00:10:38,000 --> 00:10:44,200
Well, I don't know how, which gave me a bit more work releasing the videos yesterday,

47
00:10:44,200 --> 00:10:46,360
but let's see.

48
00:10:46,360 --> 00:10:55,240
Yeah, the way I feel is so, but is that there is some meme about it, but imagine you drive

49
00:10:55,240 --> 00:11:02,240
a car and you try to change the wheels while the car is driving and you do like repairs

50
00:11:02,240 --> 00:11:06,000
and the thing is still rolling and you hope that you don't break anything.

51
00:11:06,000 --> 00:11:08,040
And that's how I feel.

52
00:11:08,040 --> 00:11:12,080
So it's really chaotic, but it's a lot of fun.

53
00:11:12,080 --> 00:11:17,880
And I think overall, we make it look like it's under control.

54
00:11:17,880 --> 00:11:19,880
So the car is still driving?

55
00:11:19,880 --> 00:11:20,880
Yes.

56
00:11:20,880 --> 00:11:21,880
Good.

57
00:11:21,880 --> 00:11:22,880
Yeah.

58
00:11:22,880 --> 00:11:32,720
So I guess we'll tell a bit more about this later, but the biggest difference is that

59
00:11:32,720 --> 00:11:36,600
today, we've tried to add an RStudio track.

60
00:11:36,600 --> 00:11:39,320
So let's see how well it works.

61
00:11:39,320 --> 00:11:57,000
It's, well, a little bit, um, it's a little bit off somehow, well, not off, but it might

62
00:11:57,000 --> 00:12:02,000
might not be perfect, but it's probably enough to try.

63
00:12:06,560 --> 00:12:08,240
By the way, did you see that we got

64
00:12:08,240 --> 00:12:10,640
some more questions yesterday?

65
00:12:10,640 --> 00:12:11,480
Yeah, let's go over those.

66
00:12:11,480 --> 00:12:14,700
So people might use of the document

67
00:12:14,700 --> 00:12:16,280
and that's exactly the right thing.

68
00:12:16,280 --> 00:12:20,480
So we encourage you to also, after the workshop,

69
00:12:20,480 --> 00:12:23,920
come back to the collaborative document, add your questions

70
00:12:23,920 --> 00:12:25,880
and we will see either right now,

71
00:12:25,880 --> 00:12:31,320
you can see here happening live or in the evening even to still answer your questions.

72
00:12:34,920 --> 00:12:44,120
So, I'm answering the third one. Can someone else look at the first ones?

73
00:12:45,720 --> 00:12:49,640
Staging, that is maybe a question to [Name]. Are we still looking at that?

74
00:12:49,640 --> 00:12:59,640
No, but, and we, so we have this optional episode staging.

75
00:12:59,640 --> 00:13:02,040
Yeah, that's linked.

76
00:13:02,040 --> 00:13:05,200
It really makes sense in on the command line.

77
00:13:05,200 --> 00:13:10,200
It makes also some sense in VS code.

78
00:13:10,200 --> 00:13:18,120
So some editors, they know about it, it, but the, but the episode, it's not if you do,

79
00:13:18,120 --> 00:13:21,440
if you work only on GitHub GitLab,

80
00:13:21,440 --> 00:13:22,880
you don't really need it.

81
00:13:24,280 --> 00:13:26,780
So that's why we will not go everybody through it.

82
00:13:28,280 --> 00:13:30,920
But if you're interested, please have a look.

83
00:13:30,920 --> 00:13:32,240
We have exercises there.

84
00:13:32,240 --> 00:13:35,720
We have two nice explanations there about what that is.

85
00:13:35,720 --> 00:13:39,200
And I can maybe just very briefly explain

86
00:13:39,200 --> 00:13:42,080
what the staging area is

87
00:13:42,080 --> 00:13:45,440
and what it means when we say we stage changes.

88
00:13:46,240 --> 00:13:51,840
it means that you can prepare a commit even before committing.

89
00:13:53,520 --> 00:13:57,680
So you can stage things nicely. It's like a little staging tray,

90
00:13:59,040 --> 00:14:03,280
or you can think of it as a shopping cart where you put things into the shopping cart

91
00:14:04,000 --> 00:14:07,200
and out of the shopping cart and then you change your mind again, you put it back into the shopping

92
00:14:07,200 --> 00:14:14,320
cart and before you go into to pay for the groceries and that which would then correspond

93
00:14:14,320 --> 00:14:18,720
to the commit. But we will not all go through that.

94
00:14:21,040 --> 00:14:26,240
Thank you for the little explanation here. Yeah, the page is also linked here,

95
00:14:26,240 --> 00:14:32,480
so everyone who's interested in that can go there. And then we have also the question about

96
00:14:34,560 --> 00:14:36,320
there's some background noise.

97
00:14:39,040 --> 00:14:39,840
It's my office.

98
00:14:39,840 --> 00:14:49,200
Someone says that it's really helpful to go through the notes after the sessions and if

99
00:14:49,200 --> 00:14:56,240
they will be available indefinitely and that is so that they will not be here on this document

100
00:14:56,240 --> 00:15:01,560
like you may have noticed that they vanished during the day already into an archive document

101
00:15:01,560 --> 00:15:05,720
and in the end of the day we have always someone going through the questions making sure that

102
00:15:05,720 --> 00:15:11,320
everything is answered and then we will link them from our workshop page which are also linked here

103
00:15:11,320 --> 00:15:15,800
so you can always go back to the workshop page and then go through every day and see

104
00:15:15,800 --> 00:15:23,000
the questions and answers that were on these different days so yes they are available

105
00:15:26,520 --> 00:15:28,520
and then this last question was a little bit more

106
00:15:28,520 --> 00:15:34,200
There are more details and I think [Name] is still answering here.

107
00:15:34,200 --> 00:15:35,200
Yeah.

108
00:15:35,200 --> 00:15:43,720
But I really like this question because it shows cases where, like, the workflow doesn't

109
00:15:43,720 --> 00:15:48,760
fit in this perfect standard Git kind of flow.

110
00:15:48,760 --> 00:15:54,680
Or if it did, it might be too much work to actually arrange it that way and in the end

111
00:15:54,680 --> 00:15:56,680
not really worth it.

112
00:15:56,680 --> 00:15:58,680
Um,

113
00:15:58,680 --> 00:16:00,680
yeah,

114
00:16:00,680 --> 00:16:02,680
so, yeah, so in this

115
00:16:02,680 --> 00:16:04,680
question, someone has, so we

116
00:16:04,680 --> 00:16:06,680
usually say that the

117
00:16:06,680 --> 00:16:08,680
original files should be

118
00:16:08,680 --> 00:16:10,680
tracked with version control,

119
00:16:10,680 --> 00:16:12,680
and then, um,

120
00:16:16,680 --> 00:16:18,680
and then, the

121
00:16:18,680 --> 00:16:20,680
like, generated files, like

122
00:16:20,680 --> 00:16:22,680
the compiled code, or the

123
00:16:22,680 --> 00:16:27,960
document PDFs, things like that, would not be tracked. So it's what we call

124
00:16:27,960 --> 00:16:34,520
ignored. And there's a gitignore file that helps git to ignore these. But here

125
00:16:34,520 --> 00:16:39,000
this is a case where you have the original files and they get generated

126
00:16:39,000 --> 00:16:42,680
to something else and then slightly modified, but you'd also like to keep

127
00:16:42,680 --> 00:16:47,960
these other modifications available at the same time. And you could work really

128
00:16:47,960 --> 00:16:55,200
hard and construct some big thing to keep them in sync. But in practice, if it's not

129
00:16:55,200 --> 00:17:05,120
a huge project, it may not be worth it. So, yeah. So, you know, generating it manually

130
00:17:05,120 --> 00:17:10,480
editing and keeping it in sync manually might be okay.

131
00:17:10,480 --> 00:17:16,300
If you did use branches, I guess you could have the same repository checked out in two

132
00:17:16,300 --> 00:17:23,100
different branches in different places. And if the generation is the same, version control

133
00:17:23,100 --> 00:17:29,260
might even help you to update the generated files while preserving your manually generated

134
00:17:29,260 --> 00:17:39,900
things by merging the new changes in with the manually edited ones. But yeah, I mean,

135
00:17:40,460 --> 00:17:42,540
it's something to figure out basically.

136
00:17:42,540 --> 00:17:50,540
Okay, it's 10 o'clock here in Finland, so I think it's time for the jingle.

137
00:17:50,540 --> 00:17:54,540
Yeah, okay.

138
00:17:54,540 --> 00:18:00,540
Should we just do a short one, and then do we go to [Name]'s screen for another introduction?

139
00:18:00,540 --> 00:18:04,540
Yes, for a short one.

140
00:18:04,540 --> 00:18:08,540
Let's see if this works.

141
00:18:12,540 --> 00:18:19,540
Okay, we are back.

142
00:18:19,540 --> 00:18:26,540
Okay. Hello, and welcome to day two of the Code Refinery workshop.

143
00:18:26,540 --> 00:18:36,540
So we had an intense day yesterday, learning about the introduction to version control.

144
00:18:36,540 --> 00:18:39,540
And I see there might be an issue with the audio.

145
00:18:39,540 --> 00:18:42,340
Is there? Should I wait to continue?

146
00:18:47,380 --> 00:18:49,540
I don't think so.

147
00:18:51,620 --> 00:18:52,580
I'll continue.

148
00:18:52,580 --> 00:18:53,060
Go ahead.

149
00:18:53,700 --> 00:18:56,020
And you let me know if...

150
00:18:56,020 --> 00:18:56,500
Keep going.

151
00:18:57,140 --> 00:18:58,420
Okay, seems okay.

152
00:19:00,020 --> 00:19:05,220
All right, so a short recap of the day one of the introduction to version control.

153
00:19:05,220 --> 00:19:11,700
So we learned about a few things yesterday and I intentionally use here the Git terminology to

154
00:19:11,700 --> 00:19:16,580
make you aware that these are the things that we learned about yesterday and maybe you can

155
00:19:16,580 --> 00:19:21,620
understand this now and if not then don't worry you can always go back and review them.

156
00:19:21,620 --> 00:19:28,740
And we will also make use of them today and tomorrow so that they will get more into the

157
00:19:28,740 --> 00:19:31,520
routine of your words you should usage.

158
00:19:31,520 --> 00:19:33,920
So first we had a motivation for

159
00:19:33,920 --> 00:19:36,120
version control and what it is.

160
00:19:36,120 --> 00:19:37,600
Cloning and forking repositories,

161
00:19:37,600 --> 00:19:39,480
committing changes and pull requests.

162
00:19:39,480 --> 00:19:42,920
And for today we will move from what we

163
00:19:42,920 --> 00:19:45,500
did yesterday in the web interface

164
00:19:45,500 --> 00:19:48,260
to more local work so to follow

165
00:19:48,260 --> 00:19:51,200
along for today you will need either

166
00:19:51,200 --> 00:19:53,700
VS code installation or a command

167
00:19:53,700 --> 00:19:56,080
line terminal setup and you can

168
00:19:56,080 --> 00:19:58,480
find instructions for that in this.

169
00:19:58,480 --> 00:20:05,600
behind this link, but many of the parts can also be done through the GitHub web interface.

170
00:20:05,600 --> 00:20:10,600
And even if you don't have anything set up, it's still fine to watch.

171
00:20:10,600 --> 00:20:12,400
Please don't run away.

172
00:20:12,400 --> 00:20:16,400
There's a lot of things that you can learn also by just watching other people do stuff

173
00:20:16,400 --> 00:20:18,040
here.

174
00:20:18,040 --> 00:20:23,000
And then we had a lot of comments yesterday in the feedback, for example, also that we

175
00:20:23,000 --> 00:20:31,160
some R users that would like to see how Git can be used from, for example, RStudio. So we tried to

176
00:20:31,160 --> 00:20:38,440
add at least a basic getting started version for RStudio for today already. So you can take a look

177
00:20:38,440 --> 00:20:46,920
and see if that helps you and you can follow along the exercises. For anyone who joins today for the

178
00:20:46,920 --> 00:20:52,520
first time, how this workshop works briefly. So this is a live streamed workshop. Everyone will

179
00:20:52,520 --> 00:20:59,880
watch the live stream of the instructors talking and showing demos on Twitch. This week there will

180
00:20:59,880 --> 00:21:05,080
also be exercises which you can do either by yourself or in a team that you might be in a

181
00:21:05,080 --> 00:21:13,320
room with or in a Zoom call. And in week two there are no dedicated exercise times but you can always

182
00:21:13,320 --> 00:21:18,760
interact with the instructors via the collaborative document which I will show in a moment.

183
00:21:18,760 --> 00:21:23,760
And then we plan on having a minimum of 10-minute break every hour.

184
00:21:23,760 --> 00:21:27,760
If we should forget, please let us know in the collaborative document.

185
00:21:27,760 --> 00:21:32,760
So even though this is a live stream workshop, you are never alone.

186
00:21:32,760 --> 00:21:38,760
And you are always in contact with the team behind the scenes and also the instructors.

187
00:21:38,760 --> 00:21:44,760
This collaborative document now shows you now briefly how that works.

188
00:21:44,760 --> 00:21:47,760
So we use it to distribute information to you.

189
00:21:47,760 --> 00:21:52,560
information to you, we tell you about links, we tell you about the agenda, and then this

190
00:21:52,560 --> 00:22:00,040
is also used for questions. You have gotten the link to this document in the registration

191
00:22:00,040 --> 00:22:05,560
confirmation email or an email after that. So if you haven't registered to this workshop,

192
00:22:05,560 --> 00:22:11,760
please do so on the Code Refinery web page. So this is how the document looks. We have

193
00:22:11,760 --> 00:22:17,740
a few informations here, some questions already, and then some icebreakers. So let's go and

194
00:22:17,740 --> 00:22:24,380
answer that. To edit the document you find this little pen symbol which might be up here or up in

195
00:22:24,380 --> 00:22:33,100
the right depending on how you're viewing it. You click that one, you scroll down to the icebreaker

196
00:22:33,100 --> 00:22:40,300
question and there we have one first one. What's your spirit animal? Today I feel like a penguin

197
00:22:40,300 --> 00:22:46,780
so I'm going to put penguin here and I'll leave some space for everyone else to add their

198
00:22:46,780 --> 00:22:50,260
spirit animal here as well.

199
00:22:50,260 --> 00:22:53,060
Then we have a second icebreaker question,

200
00:22:53,060 --> 00:22:56,400
which types of project can you use Git,

201
00:22:56,400 --> 00:23:01,040
and which will you use it for in the future?

202
00:23:01,040 --> 00:23:03,100
Now we have learned already something about Git,

203
00:23:03,100 --> 00:23:09,380
so maybe you've got some ideas of what this can be useful for,

204
00:23:09,380 --> 00:23:15,100
and maybe I can put here all our code refinery work is on Git,

205
00:23:15,100 --> 00:23:21,020
or most of ours, we write like the materials, presentations, the web page, everything is on Git,

206
00:23:21,020 --> 00:23:31,500
so that's a good use for it also apart from code. Put it like this. And then you can see here

207
00:23:31,500 --> 00:23:35,980
already some people have already added questions. This is where you can always ask questions.

208
00:23:35,980 --> 00:23:42,620
Please like. No question is too stupid. No question is too basic or anything. We have a whole team

209
00:23:42,620 --> 00:23:50,380
here behind the scenes that will answer those for you and because it will be shown on stream

210
00:23:50,380 --> 00:23:55,180
once in a while please don't put any names or other identifying information in that document.

211
00:23:57,020 --> 00:24:03,260
You can find all the materials linked from the workshop page so if you know where you registered

212
00:24:03,260 --> 00:24:09,260
you can scroll down here to the schedule where there is day two introduction to

213
00:24:09,260 --> 00:24:14,380
version control this is where you can find the materials for today.

214
00:24:14,380 --> 00:24:18,540
And they will also be available after the workshop and

215
00:24:18,540 --> 00:24:22,140
well I can't say forever but for a long time.

216
00:24:22,140 --> 00:24:29,020
So don't worry. Then you can also find the unedited recordings of for example

217
00:24:29,020 --> 00:24:33,260
yesterday on Twitch still for a week I think.

218
00:24:33,260 --> 00:24:37,500
And then with about one day delay we also have the edited

219
00:24:37,500 --> 00:24:43,900
recordings with subtitles and so on on the Code Refinery YouTube channel.

220
00:24:45,580 --> 00:24:52,620
If you want some certificates, a certificate for this course, we are currently updating the

221
00:24:52,620 --> 00:24:59,980
instructions for that, so please stay tuned. It's also on the workshop web page. There is this link

222
00:24:59,980 --> 00:25:05,260
up here, certificates, where you'll find instructions on what you need to do to get one.

223
00:25:05,260 --> 00:25:13,260
And then I would like to highlight just one more thing that we have on March 26th and April 2nd.

224
00:25:13,260 --> 00:25:25,260
These Bring Your Own Code sessions. This is a time where many of the instructors of this workshop and also people behind the scenes will hang around in Zoom for about two hours.

225
00:25:25,260 --> 00:25:37,260
And everyone who joined this workshop or also previous workshops can join, bring your own code and get help from experts and specialists in implementing these concept learns in this workshop.

226
00:25:37,260 --> 00:25:53,260
So if you have a question like this more detailed question that we had here on the collaborative document before, and you would like to just have a quick chat about it with one of the instructors, for example, then these sessions are a very good time to join us.

227
00:25:53,260 --> 00:25:56,900
And that was the short, quick introduction.

228
00:25:56,900 --> 00:26:00,220
So now I will give over to [Name] and [Name].

229
00:26:00,220 --> 00:26:05,220
who will lead you through today's materials.

230
00:26:06,400 --> 00:26:07,240
Thank you.

231
00:26:10,300 --> 00:26:11,220
Thanks so much, [Name].

232
00:26:11,220 --> 00:26:12,060
Thanks for the intro.

233
00:26:12,060 --> 00:26:13,260
Thanks [Name].

234
00:26:13,260 --> 00:26:16,160
Thanks everybody helping also in the document.

235
00:26:17,220 --> 00:26:20,460
Maybe we should start with introducing the instructors.

236
00:26:20,460 --> 00:26:21,860
So my name is [Name],

237
00:26:22,860 --> 00:26:25,480
teaching here today from Tromsø, Northern Norway.

238
00:26:27,460 --> 00:26:30,460
Really looking forward to talk more about Git.

239
00:26:30,460 --> 00:26:32,160
Git is one of my really favorite tools.

240
00:26:32,160 --> 00:26:33,220
I use it every day.

241
00:26:34,060 --> 00:26:36,900
And this workshop is one of my favorite things in the year.

242
00:26:38,420 --> 00:26:40,460
And with me is [Name] from [location].

243
00:26:40,460 --> 00:26:43,580
Hello, my name is [Name].

244
00:26:43,580 --> 00:26:45,300
I'm working at NTNU.

245
00:26:45,300 --> 00:26:47,620
So I've been with the Code Refinery project

246
00:26:47,620 --> 00:26:49,420
almost from the start.

247
00:26:49,420 --> 00:26:52,120
So I'm looking forward to teach today.

248
00:26:55,180 --> 00:26:57,880
And what I should do is I should take the screen share.

249
00:26:59,000 --> 00:27:00,140
Give me a second.

250
00:27:01,540 --> 00:27:03,980
And we will start with a little bit of recap

251
00:27:04,980 --> 00:27:07,200
before we go into the first exercise.

252
00:27:07,200 --> 00:27:10,660
We have today three exercises planned.

253
00:27:14,980 --> 00:27:17,860
And I will just arrange my screens.

254
00:27:17,860 --> 00:27:22,860
This page that I'm sharing is the introduction to Git

255
00:27:24,700 --> 00:27:26,140
where we started yesterday.

256
00:27:26,140 --> 00:27:27,740
If you joined today, no problem.

257
00:27:29,180 --> 00:27:30,580
We will get you up to speed.

258
00:27:32,140 --> 00:27:34,940
You can navigate the page either on the left side.

259
00:27:36,700 --> 00:27:38,820
Now, just for the readability, I will zoom in

260
00:27:38,820 --> 00:27:42,820
and I will tell you what did we do yesterday.

261
00:27:42,820 --> 00:27:45,780
Yesterday, we started with motivation

262
00:27:45,780 --> 00:27:50,720
And then we did three episodes, three exercises.

263
00:27:50,720 --> 00:27:55,200
One was to copy and browse an existing project.

264
00:27:55,200 --> 00:27:57,400
And if you don't have it, no problem,

265
00:27:57,400 --> 00:27:59,460
you can copy it today.

266
00:27:59,460 --> 00:28:02,740
We have then instructions on how you create this copy,

267
00:28:02,740 --> 00:28:05,140
what you have to create the fork.

268
00:28:05,140 --> 00:28:09,420
And then we practiced creating commits

269
00:28:09,420 --> 00:28:11,180
and creating branches.

270
00:28:11,180 --> 00:28:23,060
And finally, yesterday, we practiced how to combine these changes in through merging.

271
00:28:23,060 --> 00:28:32,780
And many of you have even sent so called pull requests towards the upstream repository.

272
00:28:32,780 --> 00:28:38,140
And this was a start to so you have seen how collaboration essentially works.

273
00:28:38,140 --> 00:28:40,540
and we will return to collaborating tomorrow.

274
00:28:42,140 --> 00:28:45,460
The plan for today is we have three sessions planned.

275
00:28:45,460 --> 00:28:47,500
Again, three episodes, three exercises.

276
00:28:47,500 --> 00:28:50,180
One will start in 15 minutes.

277
00:28:52,340 --> 00:28:57,340
And here today, we will move from the web to our computer.

278
00:28:59,860 --> 00:29:04,580
We will clone a repository to our computer and work locally.

279
00:29:05,500 --> 00:29:07,860
And then you can choose your favorite track.

280
00:29:07,860 --> 00:29:11,820
you can work with VS Code, RStudio, Command Line,

281
00:29:12,780 --> 00:29:15,680
and hopefully in the future, we can offer even more tracks.

282
00:29:17,020 --> 00:29:18,500
In order to work locally,

283
00:29:18,500 --> 00:29:23,500
you will need to have an editor,

284
00:29:23,740 --> 00:29:25,300
and we have recommended in doubt,

285
00:29:25,300 --> 00:29:29,740
go for VS Code or the Command Line configured.

286
00:29:29,740 --> 00:29:32,180
So this is something that you have hopefully done

287
00:29:33,140 --> 00:29:34,480
before the workshop.

288
00:29:34,480 --> 00:29:36,620
If not, not a big problem.

289
00:29:36,620 --> 00:29:39,260
you can then during the exercise sessions,

290
00:29:39,260 --> 00:29:40,360
look at the section,

291
00:29:41,260 --> 00:29:45,020
how to configure Git for your command line

292
00:29:45,020 --> 00:29:46,660
or for your editor.

293
00:29:46,660 --> 00:29:49,020
If you use VS Code, there is very little to do.

294
00:29:49,940 --> 00:29:54,160
Basically download, install, and you are ready to go.

295
00:29:57,540 --> 00:29:58,900
So I will not go through this episode,

296
00:29:58,900 --> 00:30:01,440
but you know that it is there if you need it.

297
00:30:01,440 --> 00:30:03,540
And you might need it in the first exercise.

298
00:30:03,540 --> 00:30:06,300
we will, so then we will clone, work locally.

299
00:30:07,740 --> 00:30:11,180
Some of you, those of you who yesterday worked

300
00:30:11,180 --> 00:30:13,740
in a command line or in an editor,

301
00:30:13,740 --> 00:30:15,900
you have already worked locally.

302
00:30:15,900 --> 00:30:18,220
So there will be a little bit of repetition,

303
00:30:19,980 --> 00:30:21,260
but there will also be new things.

304
00:30:21,260 --> 00:30:25,740
So then try to focus on the new things that come up.

305
00:30:25,740 --> 00:30:27,860
Try to focus on seeing the difference

306
00:30:27,860 --> 00:30:30,060
between what is a local branch,

307
00:30:30,060 --> 00:30:32,100
what is a remote branch, how does it work?

308
00:30:33,540 --> 00:30:36,860
And then we will do a little bit more archaeology.

309
00:30:36,860 --> 00:30:44,740
We will give you a puzzle to do archaeology in somebody else's repository.

310
00:30:44,740 --> 00:30:49,860
And there we will practice some of the history inspection commands that we have already seen

311
00:30:49,860 --> 00:30:52,860
yesterday.

312
00:30:52,860 --> 00:30:54,880
Then we will take a longer break.

313
00:30:54,880 --> 00:30:59,320
And in the third session, we will take a different project.

314
00:30:59,320 --> 00:31:00,840
It can be your own project,

315
00:31:00,840 --> 00:31:05,080
or it can be your own new fantasy small project,

316
00:31:06,200 --> 00:31:08,080
which is not on Git.

317
00:31:08,080 --> 00:31:10,720
And we will practice how do we turn,

318
00:31:10,720 --> 00:31:12,000
make it a Git repository,

319
00:31:12,000 --> 00:31:15,240
and how do we share it on services like GitHub,

320
00:31:16,200 --> 00:31:19,480
which is incredibly important that we all know how to do it

321
00:31:20,400 --> 00:31:23,580
in order to make our code findable,

322
00:31:23,580 --> 00:31:25,240
but also in order to have backup.

323
00:31:25,240 --> 00:31:35,240
And as always, the instructors, we are watching these collaborative notes.

324
00:31:35,240 --> 00:31:38,480
The more questions we get, the better it will be.

325
00:31:38,480 --> 00:31:43,080
I have a different screen where I have it open at all times.

326
00:31:43,080 --> 00:31:46,760
And the best way to interact then is to ask questions and comments at the bottom of the

327
00:31:46,760 --> 00:31:48,040
document.

328
00:31:48,040 --> 00:31:53,400
And [Name] and me will watch this and some of the questions we will then also discuss

329
00:31:53,400 --> 00:32:03,080
see on stream. We really look forward to that. So please keep them coming.

330
00:32:03,080 --> 00:32:07,640
And now I recommend that let's go into this part here, cloning our git repository and

331
00:32:07,640 --> 00:32:13,440
working locally. And let's start with our let's get you started there. And also a little

332
00:32:13,440 --> 00:32:20,880
with a little recap. So I will go in here and you find the link at the bottom of the

333
00:32:20,880 --> 00:32:29,160
collaborative nodes. Our objectives are we are able to clone a repository from

334
00:32:29,160 --> 00:32:35,640
the web and modify it locally. We can do the same things we did before, like

335
00:32:35,640 --> 00:32:40,440
committing, branching, merging, but locally. But those of you who have done

336
00:32:40,440 --> 00:32:46,920
that already, we will also get a feeling for what are remote branches and remote

337
00:32:46,920 --> 00:32:49,520
repositories.

338
00:32:50,880 --> 00:32:53,640
And little recap, what is a git repository?

339
00:32:53,640 --> 00:32:55,120
What are we cloning?

340
00:32:55,120 --> 00:32:58,000
A git repository contains all the files

341
00:32:59,200 --> 00:33:00,720
and directories of a project.

342
00:33:00,720 --> 00:33:03,560
It has a complete history of all the changes

343
00:33:04,720 --> 00:33:07,000
to these files and directories.

344
00:33:07,000 --> 00:33:11,400
And each commit is a snapshot of the entire project

345
00:33:12,480 --> 00:33:13,880
at a certain point in time.

346
00:33:15,120 --> 00:33:19,320
And it has this unique identifier and we call it the hash.

347
00:33:19,320 --> 00:33:24,260
So if I go into, this is my practice repository

348
00:33:24,260 --> 00:33:27,100
from yesterday, and if you don't have it yet,

349
00:33:27,100 --> 00:33:29,160
no problem, you can then create it later.

350
00:33:30,540 --> 00:33:35,540
And what I meant with hash are these, this thing here,

351
00:33:35,540 --> 00:33:38,260
this is my latest commit, and it has the identifier

352
00:33:38,260 --> 00:33:41,420
9C2A7E6, et cetera, et cetera, et cetera.

353
00:33:41,420 --> 00:33:42,260
It's unique.

354
00:33:43,600 --> 00:33:46,160
And now if I wanted to publish my work in an article,

355
00:33:46,160 --> 00:33:49,840
I could say that I have used this repository

356
00:33:49,840 --> 00:33:52,220
and I have used this particular version.

357
00:33:55,240 --> 00:33:57,200
But you will probably tag it

358
00:33:58,080 --> 00:34:01,700
and not use the hash, I guess.

359
00:34:03,000 --> 00:34:06,680
Great point, because for humans,

360
00:34:06,680 --> 00:34:08,200
for computers, this is nice,

361
00:34:09,200 --> 00:34:12,300
but for humans, it's hard to remember these characters.

362
00:34:12,300 --> 00:34:17,180
So, we often like to create so-called stack or a release.

363
00:34:17,180 --> 00:34:18,480
So, what I would probably have done,

364
00:34:18,480 --> 00:34:20,180
and let's just, let me just do it.

365
00:34:20,180 --> 00:34:21,920
So, this is not something you need to do.

366
00:34:21,920 --> 00:34:23,800
You can try it later on your own repository,

367
00:34:23,800 --> 00:34:26,480
but what I will do here, I will create a so-called,

368
00:34:26,480 --> 00:34:28,020
what GitHub calls release.

369
00:34:30,580 --> 00:34:33,720
But from the Git perspective, it's really a tag.

370
00:34:33,720 --> 00:34:36,400
And here, it's nothing else than creating

371
00:34:36,400 --> 00:34:40,580
a little sticky note with something that humans understand,

372
00:34:40,580 --> 00:34:43,920
which sticks to that commit.

373
00:34:43,920 --> 00:34:44,900
Let me create it quick.

374
00:34:44,900 --> 00:34:45,940
So create a new release.

375
00:34:45,940 --> 00:34:49,320
I'm here with my mouse on the right side of the screen.

376
00:34:50,580 --> 00:34:51,940
Create a new release.

377
00:34:55,260 --> 00:34:57,660
Here I can decide from where.

378
00:34:57,660 --> 00:34:58,660
If it's from main,

379
00:34:58,660 --> 00:35:01,460
it means it will be from the latest commit

380
00:35:01,460 --> 00:35:02,760
that is currently on main.

381
00:35:04,020 --> 00:35:05,140
How should I call it?

382
00:35:05,140 --> 00:35:06,860
I don't know, version 1.0.

383
00:35:10,580 --> 00:35:25,780
First version of my project, first working version of my project with many nice recipes.

384
00:35:25,780 --> 00:35:28,780
Okay.

385
00:35:28,780 --> 00:35:33,220
I can give it a title if I want to.

386
00:35:33,220 --> 00:35:38,820
Publish release.

387
00:35:38,820 --> 00:35:45,860
But now this is what humans can remember more easily, and this is what I can put in my manuscript.

388
00:35:45,860 --> 00:35:51,660
But it's really just a sticky note with a little bit of metadata that points to a particular

389
00:35:51,660 --> 00:35:53,740
commit.

390
00:35:53,740 --> 00:36:00,060
And the typical metadata would be release notes, a short summary of what has changed

391
00:36:00,060 --> 00:36:03,100
in 1.0 compared to 0.9.

392
00:36:03,100 --> 00:36:05,580
The source code is easily available now

393
00:36:05,580 --> 00:36:08,380
since it's a zip door.

394
00:36:10,220 --> 00:36:11,060
Yeah, that's nice.

395
00:36:11,060 --> 00:36:14,940
So it creates this archive for me,

396
00:36:14,940 --> 00:36:16,220
which people can download.

397
00:36:16,220 --> 00:36:19,060
So they don't even have to know how to use Git.

398
00:36:19,060 --> 00:36:21,020
They don't have to know how to clone.

399
00:36:21,020 --> 00:36:21,860
We will learn that now,

400
00:36:21,860 --> 00:36:24,960
but they can download this directly.

401
00:36:26,660 --> 00:36:29,780
Now, whether this is enough to be findable

402
00:36:29,780 --> 00:36:31,300
and reproducible for the next 10 years

403
00:36:31,300 --> 00:36:32,460
is a different question.

404
00:36:33,100 --> 00:36:36,220
So what we will do next week is we will show you

405
00:36:36,220 --> 00:36:37,780
how you can go a step further,

406
00:36:37,780 --> 00:36:40,900
because I could publish my work,

407
00:36:40,900 --> 00:36:42,980
but I could still delete this repository

408
00:36:42,980 --> 00:36:44,680
and then it will be hard to find.

409
00:36:45,660 --> 00:36:49,300
A nice next step could be to make this citable,

410
00:36:49,300 --> 00:36:52,780
create a digital object identifier and make it persistent

411
00:36:53,740 --> 00:36:56,860
to make sure that this never disappears.

412
00:36:56,860 --> 00:36:58,500
But we will learn that next week.

413
00:36:58,500 --> 00:37:06,980
[Name], how do you use Git in your work?

414
00:37:06,980 --> 00:37:18,300
I use it for almost everything. I try to be totally text based, just only use simple text

415
00:37:18,300 --> 00:37:26,340
and simple text editors. And then it is very useful for taking versions of what they produce.

416
00:37:26,340 --> 00:37:30,420
It goes for written text, configuration files, and code.

417
00:37:32,920 --> 00:37:36,400
What do you find, or what did you find difficult

418
00:37:36,400 --> 00:37:37,700
with Git when you started?

419
00:37:38,820 --> 00:37:41,160
What was the most surprising, difficult thing?

420
00:37:43,000 --> 00:37:46,820
The more, I think branching and merging,

421
00:37:47,780 --> 00:37:52,780
getting a readable graph out of the branches

422
00:37:52,780 --> 00:37:57,780
of the branches and then be at the right place to merge.

423
00:37:59,140 --> 00:38:02,580
So I've done a little bit of backtracking

424
00:38:02,580 --> 00:38:07,580
for getting graphs that are more readable.

425
00:38:12,820 --> 00:38:13,780
What about you?

426
00:38:13,780 --> 00:38:15,020
Yeah, thanks.

427
00:38:15,020 --> 00:38:17,420
What I found difficult at the start

428
00:38:17,420 --> 00:38:19,240
was it was never so clear to me.

429
00:38:20,700 --> 00:38:22,100
Okay, I learned how to make omits

430
00:38:22,100 --> 00:38:23,580
and I could create commits and branches,

431
00:38:23,580 --> 00:38:28,220
but I didn't know whether they stay on my computer

432
00:38:28,220 --> 00:38:30,120
or whether they travel somewhere else.

433
00:38:31,420 --> 00:38:33,400
No, that was never very clear to me.

434
00:38:33,400 --> 00:38:35,260
And I think we will clarify that today.

435
00:38:35,260 --> 00:38:36,260
So we will create commits,

436
00:38:36,260 --> 00:38:39,380
but we will see that everything we do locally

437
00:38:39,380 --> 00:38:41,560
stays locally on the computer,

438
00:38:41,560 --> 00:38:46,560
unless you tell it to go somewhere else.

439
00:38:48,260 --> 00:38:49,180
So something we will see

440
00:38:49,180 --> 00:38:51,540
is that we will have to actively push changes

441
00:38:51,540 --> 00:38:53,620
if I want to publish them from my computers

442
00:38:53,620 --> 00:38:54,500
to somewhere else.

443
00:38:55,500 --> 00:39:00,500
And also if the GitHub repository gets new changes,

444
00:39:01,220 --> 00:39:04,700
they don't automatically magically travel to my computer,

445
00:39:04,700 --> 00:39:07,600
I have to actively pull them.

446
00:39:07,600 --> 00:39:11,920
So we will learn about pulling changes, pushing changes.

447
00:39:13,780 --> 00:39:16,140
And in a little bit, we will do a clone.

448
00:39:16,140 --> 00:39:18,460
And maybe one thing we could try is that

449
00:39:18,460 --> 00:39:25,280
And just to show you what, how this works, maybe one of us could do it in the terminal

450
00:39:25,280 --> 00:39:29,900
and the other person could try it in VS code.

451
00:39:29,900 --> 00:39:40,260
And where we clone our, or I can show both, it doesn't matter, where we clone the exercise

452
00:39:40,260 --> 00:39:43,700
from yesterday so that you have a starting point on your computer.

453
00:39:43,700 --> 00:39:49,680
And then the rest will be, there'll be an exercise with a couple of steps.

454
00:39:49,680 --> 00:39:55,880
And like yesterday, there is no expectation that just by reading the exercise, you know,

455
00:39:55,880 --> 00:40:00,320
the solution, the solution and the walkthrough is part of the exercise.

456
00:40:00,320 --> 00:40:07,720
And then also in the solution and walkthrough, you then find also discussions and some thoughts.

457
00:40:07,720 --> 00:40:13,500
I'm also looking here at the questions, anything we should lift to general discussion.

458
00:40:13,500 --> 00:40:18,100
So there are some questions about releases,

459
00:40:18,100 --> 00:40:19,300
but they are answered.

460
00:40:23,620 --> 00:40:25,820
Should I show how to clone just to get us started?

461
00:40:25,820 --> 00:40:28,700
How to do a clone in the terminal

462
00:40:28,700 --> 00:40:30,460
and how to do it in VS Code?

463
00:40:30,460 --> 00:40:31,900
Yeah, I think that's a good idea.

464
00:40:31,900 --> 00:40:34,860
Then we'll get a good start.

465
00:40:34,860 --> 00:40:37,780
Yeah, so that is, you don't have to do it now.

466
00:40:37,780 --> 00:40:41,180
So for those listening now, it's part of the exercise,

467
00:40:41,180 --> 00:40:46,740
but to show you what, what that means and what's going on.

468
00:40:46,740 --> 00:40:47,740
And I will take

469
00:40:47,740 --> 00:40:55,660
I will take the, my example from yesterday. If you don't have it, no problem. You can,

470
00:40:55,660 --> 00:41:02,540
it is forked from another repository. And if you don't, you can fork it again. If you,

471
00:41:02,540 --> 00:41:07,420
if you haven't done it yesterday, you can, there is a step that shows you how to do that.

472
00:41:07,420 --> 00:41:11,100
and I want to now clone it to my computer.

473
00:41:11,100 --> 00:41:12,700
Cloning means copying everything,

474
00:41:12,700 --> 00:41:17,340
but this time not from one user space

475
00:41:17,340 --> 00:41:19,380
into another user space,

476
00:41:20,380 --> 00:41:25,140
but cloning means copying everything from now GitHub

477
00:41:26,060 --> 00:41:29,140
down to my computer here.

478
00:41:29,140 --> 00:41:34,140
I will show you first terminal in the command line,

479
00:41:34,140 --> 00:41:36,500
terminal in the command line.

480
00:41:36,500 --> 00:41:38,420
And then I will show you that in VS code.

481
00:41:38,420 --> 00:41:41,380
And I will be a little bit clumsy in VS code.

482
00:41:41,380 --> 00:41:42,900
It's not something I use every day.

483
00:41:42,900 --> 00:41:45,280
I use the command line every day, but that is good.

484
00:41:45,280 --> 00:41:46,980
It will slow me down a little bit.

485
00:41:48,300 --> 00:41:49,660
I will show you how I clone.

486
00:41:51,020 --> 00:41:54,500
And down here, hopefully you can see my command history.

487
00:41:56,500 --> 00:41:59,300
The way I clone is that there is this green button here.

488
00:41:59,300 --> 00:42:04,300
And here you can decide how you want to clone.

489
00:42:05,540 --> 00:42:06,820
And if you are unsure,

490
00:42:08,920 --> 00:42:12,080
that's, but then you can find the answer in this,

491
00:42:14,560 --> 00:42:17,060
whoops, zooming out up here,

492
00:42:17,060 --> 00:42:18,840
configuring git command line and editor.

493
00:42:18,840 --> 00:42:20,700
So this is part of the configuration.

494
00:42:25,000 --> 00:42:29,040
In my case, I have done that and I will choose SSH.

495
00:42:29,040 --> 00:42:30,960
it's a way for me to authenticate that.

496
00:42:35,480 --> 00:42:38,680
If you are in for this first exercise,

497
00:42:38,680 --> 00:42:40,040
this one will work as well.

498
00:42:41,920 --> 00:42:43,240
Sure, it doesn't matter which of the two.

499
00:42:43,240 --> 00:42:44,840
What I do is I copy this address

500
00:42:46,440 --> 00:42:48,240
and then on the command line,

501
00:42:48,240 --> 00:42:50,560
and we have the instructions, it's git clone,

502
00:42:52,680 --> 00:42:55,120
git clone the address.

503
00:42:55,120 --> 00:42:57,640
And then where do you want to clone into?

504
00:42:57,640 --> 00:43:05,400
For instance, recipe book, and this would create a new directory on my computer called

505
00:43:05,400 --> 00:43:06,800
recipe book.

506
00:43:06,800 --> 00:43:17,280
If I leave it out, then it will create a directory called the with the same name as the git repository.

507
00:43:17,280 --> 00:43:21,920
I will show you that on the command line, you can practice later if you want to, but

508
00:43:21,920 --> 00:43:25,040
you can choose your own journey.

509
00:43:25,040 --> 00:43:29,680
Here, okay, I received lots of objects and deltas.

510
00:43:34,280 --> 00:43:38,680
It's just, and now I have a new directory

511
00:43:38,680 --> 00:43:40,880
on my computer called recipe book recorded.

512
00:43:43,040 --> 00:43:44,480
And in that directory,

513
00:43:47,040 --> 00:43:49,240
git log one line,

514
00:43:49,240 --> 00:43:56,400
I have a, I have a git repository.

515
00:43:56,400 --> 00:43:58,440
All the commits are there.

516
00:43:58,440 --> 00:44:01,440
All the branches are there.

517
00:44:01,440 --> 00:44:07,600
One interesting thing you can try later is that if I type git branch to see which branches

518
00:44:07,600 --> 00:44:12,660
do I have on my computer, I only see main.

519
00:44:12,660 --> 00:44:21,940
That might be surprising because on GitHub, zooming out, on the GitHub, I have four branches.

520
00:44:21,940 --> 00:44:25,300
But part of the exercise is to find out what's going on there.

521
00:44:25,300 --> 00:44:30,780
They are all four branches are actually on my computer, but I don't want to spoil it.

522
00:44:30,780 --> 00:44:34,300
So in the exercise, you will see the difference between what is a local branch and what is

523
00:44:34,300 --> 00:44:37,140
a remote branch.

524
00:44:37,140 --> 00:44:39,660
And now let me try the same thing in VS code.

525
00:44:39,660 --> 00:44:41,660
Should I try it or [Name], do you want to?

526
00:44:41,660 --> 00:44:46,660
No, I'm more due to, I'm not that used to VS code.

527
00:44:48,480 --> 00:44:49,440
Ah, yeah, me neither.

528
00:44:49,440 --> 00:44:51,520
I was hoping you would take it, but let me try.

529
00:44:51,520 --> 00:44:52,740
Okay, let me see.

530
00:44:52,740 --> 00:44:55,900
So I will just navigate out of this.

531
00:44:57,120 --> 00:45:01,520
And now I will have a sneaky peek at our instructions

532
00:45:02,940 --> 00:45:03,960
on how to do that.

533
00:45:04,840 --> 00:45:09,400
But let me first try, I will make this,

534
00:45:09,400 --> 00:45:11,960
Let me, I will start VS Code.

535
00:45:11,960 --> 00:45:13,760
I started by typing code

536
00:45:13,760 --> 00:45:14,960
and where do I want to start it?

537
00:45:14,960 --> 00:45:15,880
Code dot.

538
00:45:18,080 --> 00:45:20,000
But you might start VS Code differently,

539
00:45:20,000 --> 00:45:20,840
but that's how I started.

540
00:45:20,840 --> 00:45:23,040
I just want to start it in exactly this place.

541
00:45:25,160 --> 00:45:26,680
Ooh, it's very small.

542
00:45:26,680 --> 00:45:27,520
Let me

543
00:45:29,840 --> 00:45:30,680
zoom in.

544
00:45:33,280 --> 00:45:34,120
Ooh, okay.

545
00:45:34,120 --> 00:45:35,440
I see that there is this other repository,

546
00:45:35,440 --> 00:45:36,420
but I don't want to be here.

547
00:45:36,420 --> 00:45:38,260
I want to start something new.

548
00:45:38,260 --> 00:45:43,260
I will start a new window and I will close this one.

549
00:45:44,900 --> 00:45:46,260
No, I'll close everything.

550
00:45:46,260 --> 00:45:47,380
Okay, let's try again.

551
00:45:47,380 --> 00:45:49,200
And then we will choose exit.

552
00:45:50,500 --> 00:45:52,500
Yes, I did the wrong thing.

553
00:45:52,500 --> 00:45:53,500
No problem.

554
00:45:56,740 --> 00:46:00,900
I wanted to do new window and in the other one,

555
00:46:00,900 --> 00:46:02,260
I should do close window.

556
00:46:03,420 --> 00:46:04,260
Here we go.

557
00:46:04,260 --> 00:46:08,620
I have kind of an empty looking VS code.

558
00:46:08,620 --> 00:46:09,700
And now what should we do?

559
00:46:09,700 --> 00:46:12,460
We should, one way to clone it is to go under start.

560
00:46:13,460 --> 00:46:14,300
Where is start?

561
00:46:14,300 --> 00:46:15,120
There is no start.

562
00:46:18,260 --> 00:46:21,240
I hope I see something here on the source code control.

563
00:46:23,060 --> 00:46:25,240
Aha, source control clone repository.

564
00:46:26,620 --> 00:46:28,580
No update right now.

565
00:46:28,580 --> 00:46:30,100
I will go on clone repository

566
00:46:30,100 --> 00:46:32,820
and now I can choose where do I want to clone from

567
00:46:32,820 --> 00:46:37,820
And will it work if I do github.com,

568
00:46:40,500 --> 00:46:44,860
past, cp, book.

569
00:46:44,860 --> 00:46:49,860
You could just paste the URL, I guess, in there.

570
00:46:50,600 --> 00:46:51,840
I could, I could.

571
00:46:53,040 --> 00:46:54,920
So from here, from the green button now?

572
00:46:54,920 --> 00:46:55,760
Yeah.

573
00:46:55,760 --> 00:46:57,160
I will try what happens if I do,

574
00:46:58,160 --> 00:47:00,720
if I just type it from the browser.

575
00:47:00,720 --> 00:47:02,200
I'm curious whether it will work.

576
00:47:02,200 --> 00:47:07,200
I think it might recipe book record that enter.

577
00:47:10,280 --> 00:47:13,320
And now I think it asks me, where do I want to clone into?

578
00:47:13,320 --> 00:47:16,120
So I know that this is outside of your screen.

579
00:47:16,120 --> 00:47:18,320
Where do I want to go into course?

580
00:47:18,320 --> 00:47:20,120
And I will give it a different name.

581
00:47:22,200 --> 00:47:23,480
I know you cannot see this

582
00:47:23,480 --> 00:47:26,560
because I don't want to reveal everything on my hard drive.

583
00:47:26,560 --> 00:47:31,560
Oh, I will call it recipe book VS code.

584
00:47:33,160 --> 00:47:39,560
create and select this repository. And now I got an error message.

585
00:47:41,480 --> 00:47:43,560
So that doesn't work what I wanted to do. Okay.

586
00:47:46,360 --> 00:47:50,680
Let's try again. Let's do it properly. So now clone repository. And now instead I should do

587
00:47:50,680 --> 00:47:57,400
I should take it from here. HTTPS copy this clone repository here.

588
00:47:57,400 --> 00:48:04,300
here. Yes. And now again on into the right place.

589
00:48:04,300 --> 00:48:09,840
Why did you just exit the pass over SSH this time?

590
00:48:09,840 --> 00:48:18,180
I wasn't sure whether it would work with SSH with the VS code. It might. I think it depends

591
00:48:18,180 --> 00:48:25,500
how people set it up. Yeah. And now it will. Now it asked me, would you like to open the

592
00:48:25,500 --> 00:48:27,780
the cloned repository, yes.

593
00:48:27,780 --> 00:48:28,620
Open it.

594
00:48:30,580 --> 00:48:32,020
And here it is on my VSCode.

595
00:48:34,140 --> 00:48:36,780
And when I go on source control,

596
00:48:37,980 --> 00:48:39,460
somewhere here I can see,

597
00:48:40,540 --> 00:48:42,440
no, I need to click on a certain file.

598
00:48:44,740 --> 00:48:45,860
I can see

599
00:48:50,020 --> 00:48:51,180
somewhere the commits.

600
00:48:52,180 --> 00:48:54,660
I should have practiced better how to do it on VSCode.

601
00:48:54,660 --> 00:48:58,940
But you can do it in the exercise.

602
00:48:58,940 --> 00:49:00,940
The essence is that now I have the repository

603
00:49:00,940 --> 00:49:03,900
on my computer and you can choose

604
00:49:06,580 --> 00:49:08,840
the VS code or command line or RStudio.

605
00:49:14,940 --> 00:49:16,040
Here, one of the three.

606
00:49:17,940 --> 00:49:18,780
And what are your goals?

607
00:49:18,780 --> 00:49:23,780
Your goals are decide which repository you want to use.

608
00:49:24,660 --> 00:49:29,660
want to clone your fork or the original repository,

609
00:49:29,660 --> 00:49:31,380
actually both will work because in this case,

610
00:49:31,380 --> 00:49:32,980
we are not pushing any changes.

611
00:49:32,980 --> 00:49:34,060
We are only cloning.

612
00:49:35,460 --> 00:49:38,420
We will learn how to create a new branch locally,

613
00:49:38,420 --> 00:49:41,580
how to create a new commit, how to switch between branches,

614
00:49:41,580 --> 00:49:42,900
how to merge them locally.

615
00:49:43,740 --> 00:49:46,060
And for those of you who have done that already yesterday,

616
00:49:46,060 --> 00:49:49,820
focus more on the question of where are the remote branches?

617
00:49:52,340 --> 00:49:53,180
How does it work?

618
00:49:53,180 --> 00:49:58,420
And down there, you'll find more notes on this.

619
00:49:58,420 --> 00:50:03,740
Once you create these commits and branches locally, also compare the situation locally

620
00:50:03,740 --> 00:50:04,740
and on GitHub.

621
00:50:04,740 --> 00:50:05,900
And you will see there is a difference.

622
00:50:05,900 --> 00:50:11,100
So all the changes that you create on your computer, you will see that they don't travel

623
00:50:11,100 --> 00:50:12,820
to GitHub.

624
00:50:12,820 --> 00:50:15,460
We will have to actively push them.

625
00:50:15,460 --> 00:50:19,220
We will do that later today.

626
00:50:19,220 --> 00:50:27,180
Okay, before we go into exercise, just having a quick look at the notes, whether anything

627
00:50:27,180 --> 00:50:31,180
was confusing.

628
00:50:31,180 --> 00:50:40,660
Yes, should be cloned to origin repository or the forked version if you have it clone

629
00:50:40,660 --> 00:50:41,900
your own.

630
00:50:41,900 --> 00:50:48,020
But both will work here because we are not all the changes that we do, we only do them

631
00:50:48,020 --> 00:50:49,100
locally.

632
00:50:49,100 --> 00:50:52,100
So it doesn't matter whether we are able or not

633
00:50:52,100 --> 00:50:54,180
to apply the changes on GitHub.

634
00:50:57,540 --> 00:51:00,920
All the rest of the exercises today will not depend on this.

635
00:51:00,920 --> 00:51:03,120
It will only depend on the techniques.

636
00:51:03,120 --> 00:51:05,220
So even if you mess it up completely,

637
00:51:07,120 --> 00:51:09,620
it's not a problem for the remaining two exercises.

638
00:51:12,220 --> 00:51:14,260
Good, we have allocated 25 minutes,

639
00:51:14,260 --> 00:51:16,340
which would bring us to,

640
00:51:16,340 --> 00:51:19,380
we will be back after the exercise at the full hour.

641
00:51:22,060 --> 00:51:24,260
And after the exercise, we will play the jingle,

642
00:51:24,260 --> 00:51:26,580
we will say hi, and we will remind you

643
00:51:26,580 --> 00:51:27,700
that there is a break afterwards.

644
00:51:27,700 --> 00:51:31,100
So after the exercise, we will take a 10 minute break.

645
00:51:32,060 --> 00:51:34,680
So exercise until the full hour, 25 minutes.

646
00:51:35,660 --> 00:51:37,360
Ask lots of questions.

647
00:51:37,360 --> 00:51:38,840
We will try to answer as we go.

648
00:51:38,840 --> 00:51:41,340
And in the meantime, I will practice with VS Code.

649
00:51:42,500 --> 00:51:45,980
And we will then afterwards, after the break later,

650
00:51:45,980 --> 00:51:48,940
show you maybe some of the tricky parts

651
00:51:48,940 --> 00:51:50,140
and we can discuss them.

652
00:51:53,580 --> 00:51:55,460
Okay, have fun with the exercise.

653
00:51:55,460 --> 00:51:59,140
See you briefly at the full hour for the jingle

654
00:51:59,140 --> 00:52:01,020
and the break start.

655
00:52:02,680 --> 00:52:03,520
Bye.

656
00:52:06,980 --> 00:52:07,980
Okay, we're off.

657
00:52:15,980 --> 00:52:32,980
Uh, I turned it off just now, I'm still watching.

658
00:52:32,980 --> 00:52:35,980
Yeah.

659
00:52:35,980 --> 00:52:36,820
Isn't it?

660
00:53:05,980 --> 00:53:08,040
you

661
00:53:35,980 --> 00:53:38,040
you

662
00:54:05,980 --> 00:54:08,040
you

663
00:54:35,980 --> 00:54:38,040
you

664
00:55:05,980 --> 00:55:08,040
you

665
00:55:35,980 --> 00:55:38,040
you

666
00:56:05,980 --> 00:56:08,040
you

667
00:56:35,980 --> 00:56:38,040
you

668
00:57:05,980 --> 00:57:08,040
you

669
00:57:35,980 --> 00:57:38,040
you

670
00:58:05,980 --> 00:58:08,040
you

671
00:58:35,980 --> 00:58:38,040
you

672
00:59:05,980 --> 00:59:08,040
you

673
00:59:35,980 --> 00:59:38,040
you

674
01:00:05,980 --> 01:00:08,040
you

675
01:00:35,980 --> 01:00:38,040
you

676
01:01:05,980 --> 01:01:08,040
you

677
01:01:35,980 --> 01:01:38,040
you

678
01:02:05,980 --> 01:02:08,040
you

679
01:02:35,980 --> 01:02:38,040
you

680
01:03:05,980 --> 01:03:08,040
you

681
01:03:35,980 --> 01:03:38,040
you

682
01:04:05,980 --> 01:04:08,040
you

683
01:04:35,980 --> 01:04:38,040
you

684
01:05:05,980 --> 01:05:08,040
you

685
01:05:35,980 --> 01:05:38,040
you

686
01:06:05,980 --> 01:06:08,040
you

687
01:06:35,980 --> 01:06:38,040
you

688
01:07:05,980 --> 01:07:08,040
you

689
01:07:35,980 --> 01:07:38,040
you

690
01:08:05,980 --> 01:08:08,040
you

691
01:08:35,980 --> 01:08:38,040
you

692
01:09:05,980 --> 01:09:08,040
you

693
01:09:35,980 --> 01:09:38,040
you

694
01:10:05,980 --> 01:10:08,040
you

695
01:10:35,980 --> 01:10:38,040
you

696
01:11:05,980 --> 01:11:08,040
you

697
01:11:35,980 --> 01:11:38,040
you

698
01:12:05,980 --> 01:12:08,040
you

699
01:12:35,980 --> 01:12:38,040
you

700
01:13:05,980 --> 01:13:08,040
you

701
01:13:35,980 --> 01:13:38,040
you

702
01:14:05,980 --> 01:14:08,040
you

703
01:14:35,980 --> 01:14:38,040
you

704
01:15:05,980 --> 01:15:08,040
you

705
01:15:35,980 --> 01:15:38,040
you

706
01:16:05,980 --> 01:16:08,040
you

707
01:16:35,980 --> 01:16:38,040
you

708
01:17:05,980 --> 01:17:08,040
you

709
01:17:35,980 --> 01:17:37,980
You

710
01:18:05,980 --> 01:18:10,340
Welcome back from exercise.

711
01:18:10,340 --> 01:18:11,780
We see questions are coming.

712
01:18:11,780 --> 01:18:12,780
Thanks so much for that.

713
01:18:12,780 --> 01:18:16,240
We will try to answer but please don't forget to take a break.

714
01:18:16,240 --> 01:18:18,300
Let's all take a 10 minute break.

715
01:18:18,300 --> 01:18:24,700
We'll be back 10 minutes past the hour and then debrief this exercise and discuss some

716
01:18:24,700 --> 01:18:26,780
of the tricky parts.

717
01:18:26,780 --> 01:18:27,780
See you in 10 minutes.

718
01:18:27,780 --> 01:18:28,580
Bye.

719
01:18:35,980 --> 01:18:38,040
you

720
01:19:05,980 --> 01:19:08,040
you

721
01:19:35,980 --> 01:19:38,040
you

722
01:20:05,980 --> 01:20:08,040
you

723
01:20:35,980 --> 01:20:38,040
you

724
01:21:05,980 --> 01:21:08,040
you

725
01:21:35,980 --> 01:21:38,040
you

726
01:22:05,980 --> 01:22:08,040
you

727
01:22:35,980 --> 01:22:38,040
you

728
01:23:05,980 --> 01:23:08,040
you

729
01:23:35,980 --> 01:23:38,040
you

730
01:24:05,980 --> 01:24:08,040
you

731
01:24:35,980 --> 01:24:38,040
you

732
01:25:05,980 --> 01:25:08,040
you

733
01:25:35,980 --> 01:25:38,040
you

734
01:26:05,980 --> 01:26:08,040
you

735
01:26:35,980 --> 01:26:38,040
you

736
01:27:05,980 --> 01:27:08,040
you

737
01:27:35,980 --> 01:27:47,820
And I think we are back.

738
01:27:47,820 --> 01:27:54,020
I was just trying to remotely control [Name]'s studio, so hopefully that worked.

739
01:27:54,020 --> 01:28:01,980
We are back on stream here, back from the break, and back from the exercise.

740
01:28:01,980 --> 01:28:05,500
So hopefully that went well.

741
01:28:05,500 --> 01:28:09,120
We will see if we can lift some of the many good questions

742
01:28:09,120 --> 01:28:10,920
on the document here for discussion.

743
01:28:12,980 --> 01:28:17,300
I wanted to talk about two things before moving on.

744
01:28:17,300 --> 01:28:18,700
One is about branches.

745
01:28:21,700 --> 01:28:24,380
Because now that we have cloned the repository

746
01:28:26,220 --> 01:28:28,420
and I will try to show that here on VS Code,

747
01:28:30,780 --> 01:28:34,320
I was curious about what branches do I see.

748
01:28:34,320 --> 01:28:36,980
So on my lower left corner of VS Code,

749
01:28:36,980 --> 01:28:38,720
if I click on the main branch,

750
01:28:44,220 --> 01:28:45,060
during the exercise,

751
01:28:45,060 --> 01:28:48,060
I create this one where I added French toast,

752
01:28:50,120 --> 01:28:52,540
but then I see my local branches,

753
01:28:52,540 --> 01:28:56,840
main, French toast, something else,

754
01:28:56,840 --> 01:28:59,340
but then there are also these origin branches.

755
01:29:00,400 --> 01:29:03,980
And these are branches that exist on GitHub.

756
01:29:04,320 --> 01:29:06,160
These are so-called remote branches.

757
01:29:06,160 --> 01:29:09,680
And here, VS Code tells me that remote branch

758
01:29:09,680 --> 01:29:10,720
pointing to some commit,

759
01:29:10,720 --> 01:29:12,960
remote branch pointing to a different commit,

760
01:29:12,960 --> 01:29:14,100
another remote branch.

761
01:29:17,580 --> 01:29:19,760
So actually, I can actually see them here.

762
01:29:19,760 --> 01:29:24,760
And in VS Code, if I switch to a remote branch,

763
01:29:24,920 --> 01:29:28,240
let me maybe switch to the origin [Name]/lasagna.

764
01:29:28,240 --> 01:29:30,240
This is one that I created two days ago.

765
01:29:31,480 --> 01:29:34,000
If I switch to it, so if I click on it here,

766
01:29:34,000 --> 01:29:35,300
So let's see what happens.

767
01:29:37,980 --> 01:29:42,720
It created a local branch for me.

768
01:29:44,420 --> 01:29:45,420
[Name]/lasagna.

769
01:29:45,420 --> 01:29:50,420
This is a local branch and I can make changes to it.

770
01:29:52,380 --> 01:29:55,420
And if I make changes to it, you will then also see

771
01:29:55,420 --> 01:29:58,220
that there will be a button that allows me

772
01:29:58,220 --> 01:30:00,220
to publish these changes back to GitHub.

773
01:30:00,220 --> 01:30:05,220
And in VS Code, this happens automatically for me.

774
01:30:07,860 --> 01:30:10,540
If you tried it on the command line,

775
01:30:12,500 --> 01:30:16,680
and let me test this now inside VS Code, new terminal.

776
01:30:19,060 --> 01:30:22,020
In the command line, maybe you have tried to do git branch.

777
01:30:23,220 --> 01:30:24,740
Git branch will tell you

778
01:30:24,740 --> 01:30:27,100
what are all the branches that you have.

779
01:30:27,100 --> 01:30:29,740
Well, actually, what are the local branches that you have.

780
01:30:30,220 --> 01:30:32,140
And I have now four local branches.

781
01:30:35,900 --> 01:30:40,300
But in order to see all the branches, you really have to do git branch dash dash all.

782
01:30:45,900 --> 01:30:49,740
The remote branches, they are read-only.

783
01:30:51,980 --> 01:30:57,020
I cannot really modify them, but the way to modify them was what I did in VS Code

784
01:30:57,020 --> 01:31:00,580
by creating a local version of them,

785
01:31:02,300 --> 01:31:04,940
which, where I can do my work,

786
01:31:04,940 --> 01:31:06,500
and then later, if we want to,

787
01:31:06,500 --> 01:31:08,740
we can push these changes back.

788
01:31:08,740 --> 01:31:10,140
We will practice that later.

789
01:31:12,140 --> 01:31:15,700
One thing that I was trying to find out during the exercise,

790
01:31:15,700 --> 01:31:17,780
but I don't know the answer, is in VS Code,

791
01:31:17,780 --> 01:31:21,380
how do I know, now that I have a clone of a repository,

792
01:31:21,380 --> 01:31:23,360
how do I know where I cloned from?

793
01:31:23,360 --> 01:31:27,100
And I admit that I don't know how to answer that.

794
01:31:27,100 --> 01:31:29,980
I know how to do it in the command line.

795
01:31:29,980 --> 01:31:31,900
So the way I would ask in,

796
01:31:31,900 --> 01:31:35,760
and if you know, please give us comments.

797
01:31:37,660 --> 01:31:42,660
On the command line, I would type git remote verbose.

798
01:31:46,140 --> 01:31:48,740
So whenever I forget where did I actually clone from,

799
01:31:48,740 --> 01:31:53,380
it will tell me that there is,

800
01:31:53,380 --> 01:31:55,380
let's make it a little bit more readable,

801
01:31:57,380 --> 01:32:00,260
it will tell me that there is a remote called origin,

802
01:32:02,100 --> 01:32:05,180
which is, and this is the address where I cloned from.

803
01:32:07,220 --> 01:32:09,340
And this is the shortcut for the address.

804
01:32:09,340 --> 01:32:10,940
So whenever on the command line,

805
01:32:10,940 --> 01:32:12,860
whenever you want to talk about the address,

806
01:32:12,860 --> 01:32:14,620
I can use these interchangeably.

807
01:32:18,740 --> 01:32:23,980
And there is a question on the document, what is origin hat and what is origin main?

808
01:32:23,980 --> 01:32:25,420
And where did we see that?

809
01:32:25,420 --> 01:32:38,140
Was this when I did this, maybe a hat is in Git, whenever you see head, it's, it's the

810
01:32:38,140 --> 01:32:42,260
position where you are right now.

811
01:32:42,260 --> 01:32:48,580
And this makes sense for those of us who remember still tape recorders, because they have those

812
01:32:48,580 --> 01:32:50,860
tape and there is a recorder head.

813
01:32:50,860 --> 01:32:54,580
And you can think of version control as recording changes.

814
01:32:54,580 --> 01:32:57,560
And this is the position of the recording recorder head.

815
01:32:58,540 --> 01:33:00,120
It's maybe less intuitive for those

816
01:33:00,120 --> 01:33:01,880
who have never seen a cassette tape.

817
01:33:04,500 --> 01:33:06,540
But what is this origin hat?

818
01:33:06,540 --> 01:33:11,540
That refers to the default branch on GitHub.

819
01:33:11,580 --> 01:33:12,900
So the default branch on GitHub,

820
01:33:12,900 --> 01:33:14,780
I can see from this that it is main.

821
01:33:14,780 --> 01:33:22,300
So this is not very technical, but I just wanted to answer the question.

822
01:33:22,300 --> 01:33:25,740
What else should be clarified before moving on?

823
01:33:25,740 --> 01:33:33,500
Oh, there was no jingle.

824
01:33:33,500 --> 01:33:35,980
Oh no.

825
01:33:35,980 --> 01:33:37,260
Okay.

826
01:33:37,260 --> 01:33:45,900
I'm still practicing using these remote controls to the studio.

827
01:33:45,900 --> 01:33:48,300
Thanks so much for these questions.

828
01:33:48,300 --> 01:33:49,300
Maybe we are ready then to...

829
01:33:49,300 --> 01:34:00,620
I will move this out of my way, the VS Code, but we'll return to it.

830
01:34:00,620 --> 01:34:08,420
And I will now navigate to the next episode, which is inspecting history.

831
01:34:08,420 --> 01:34:15,820
And we want, that's our goal now for the next 45 minutes.

832
01:34:15,820 --> 01:34:20,500
Here we are still working locally.

833
01:34:20,500 --> 01:34:24,800
Again you can choose VS Code, Command Line, RStudio.

834
01:34:24,800 --> 01:34:27,780
You can also do it on GitHub.

835
01:34:27,780 --> 01:34:29,380
So if you prefer not to work locally,

836
01:34:29,380 --> 01:34:32,340
this is an exercise that you can do on GitHub.

837
01:34:32,340 --> 01:34:34,980
We will work with a repository that we don't know yet.

838
01:34:36,100 --> 01:34:37,580
It's written by somebody else.

839
01:34:39,140 --> 01:34:43,380
And here are a couple of the toolbox

840
01:34:44,260 --> 01:34:45,480
that we will practice here.

841
01:34:45,480 --> 01:34:47,980
Some of it we have seen yesterday,

842
01:34:47,980 --> 01:34:51,540
like how to navigate through our existing repository.

843
01:34:52,420 --> 01:34:53,980
And just as a fun warmup,

844
01:34:53,980 --> 01:34:59,140
We can try this git history browser.

845
01:34:59,140 --> 01:35:07,980
This is just a fun tool to written where you can visualize the history of a project.

846
01:35:07,980 --> 01:35:12,660
And the repository that we will practice with is on GitHub, it's a it's a Python project

847
01:35:12,660 --> 01:35:13,660
doesn't matter.

848
01:35:13,660 --> 01:35:14,660
It's called NetworkX.

849
01:35:14,660 --> 01:35:17,340
I will open it up here.

850
01:35:17,340 --> 01:35:21,580
And for the moment only watch you will, you will have the chance to practice in a little

851
01:35:21,580 --> 01:35:22,580
bit.

852
01:35:22,580 --> 01:35:27,300
So, this is a code that does some network analysis in Python.

853
01:35:27,300 --> 01:35:32,860
The fact that it is in Python is not of importance for our exercise.

854
01:35:32,860 --> 01:35:38,860
This is a repository with over 7,000 commits.

855
01:35:38,860 --> 01:35:45,920
And one fun thing I will try here is to open this page.

856
01:35:45,920 --> 01:35:50,380
And here with left and right keys, this is the readme file.

857
01:35:50,380 --> 01:35:53,100
So if I navigate left and right,

858
01:35:53,100 --> 01:35:56,620
I can navigate through the history of this README file

859
01:35:56,620 --> 01:35:58,900
and we can see how lines were added and removed

860
01:35:58,900 --> 01:36:00,300
and how things are changing.

861
01:36:02,660 --> 01:36:05,220
I really like how this visually shows

862
01:36:05,220 --> 01:36:09,100
the evolution of a file along a git history.

863
01:36:11,220 --> 01:36:12,580
So that's just a warm up.

864
01:36:13,920 --> 01:36:17,660
We will learn or

865
01:36:20,380 --> 01:36:24,820
re-practice some really useful techniques.

866
01:36:25,900 --> 01:36:26,980
One is to search

867
01:36:30,380 --> 01:36:32,460
through our Git repository.

868
01:36:32,460 --> 01:36:35,300
And maybe here I should take a step back and say that

869
01:36:36,300 --> 01:36:38,120
this is a different repository.

870
01:36:38,120 --> 01:36:39,860
So if you are on VS Code,

871
01:36:39,860 --> 01:36:40,700
make sure to

872
01:36:43,600 --> 01:36:46,140
open a new window with a different project.

873
01:36:46,140 --> 01:36:48,820
And maybe there's a better way than what I did.

874
01:36:48,820 --> 01:36:51,760
So we are not anymore in our recipe book.

875
01:36:51,760 --> 01:36:56,760
We want to really study this NetworkX project.

876
01:36:56,940 --> 01:37:01,060
And if you are in a command line, like I'm down here,

877
01:37:01,060 --> 01:37:05,120
make sure that you are not inside an existing Git repository.

878
01:37:05,120 --> 01:37:08,940
So if you are, then step outside,

879
01:37:08,940 --> 01:37:11,020
we will create, we will make a new clone.

880
01:37:13,620 --> 01:37:16,920
And I will now, I want to show you these,

881
01:37:16,920 --> 01:37:19,920
some of these commands here in

882
01:37:19,920 --> 01:37:23,920
I will show them in the command line, but you can then later try it out on the command line

883
01:37:23,920 --> 01:37:27,920
or try it out on GitHub, VS Code, RStudio

884
01:37:27,920 --> 01:37:31,920
and the first step will be to make a copy

885
01:37:31,920 --> 01:37:35,920
except if you are on GitHub, you don't have to copy anything, you can really just

886
01:37:35,920 --> 01:37:39,920
use their repository, so I will create a copy, the clone

887
01:37:39,920 --> 01:37:43,920
and again we clone everything

888
01:37:46,920 --> 01:37:57,040
I have to make sure that this is readable.

889
01:37:57,040 --> 01:38:03,640
It takes a few seconds.

890
01:38:03,640 --> 01:38:13,400
Because now suddenly it's a lot of objects, it's a lot of commits.

891
01:38:13,400 --> 01:38:20,680
And here I'm in this repository.

892
01:38:20,680 --> 01:38:23,600
The latest commit is 2e-ce-02.

893
01:38:23,600 --> 01:38:24,960
Is that the case?

894
01:38:24,960 --> 01:38:30,760
Yes, the latest is 2e-ce-02.

895
01:38:30,760 --> 01:38:36,800
And some of the tools that you will practice that will be super useful is if you look for

896
01:38:36,800 --> 01:38:42,800
a certain text in the project.

897
01:38:42,800 --> 01:38:50,720
For instance, I want to find all the fixmes in this project, and you can even search case

898
01:38:50,720 --> 01:38:55,000
insensitive git grep-i fixme.

899
01:38:55,000 --> 01:39:02,800
It will list me all the files that contain the word fixme in this file and in this file

900
01:39:02,800 --> 01:39:05,080
and in this file, etc.

901
01:39:05,080 --> 01:39:12,200
This can be useful if you are looking for an error message and you don't know where

902
01:39:12,200 --> 01:39:13,540
in the code, is it crashing?

903
01:39:20,940 --> 01:39:25,940
Then you will learn how to look at the particular commits.

904
01:39:27,860 --> 01:39:31,340
So if I want to have a look what happened

905
01:39:31,340 --> 01:39:34,420
in a particular commit, for instance, this one,

906
01:39:34,420 --> 01:39:35,920
I can look at it with git show.

907
01:39:35,920 --> 01:39:37,480
If I know the identifier,

908
01:39:39,420 --> 01:39:41,500
you don't even have to type the whole identifier,

909
01:39:41,500 --> 01:39:42,920
Just the beginning of it is enough.

910
01:39:42,920 --> 01:39:43,760
I will try that.

911
01:39:48,380 --> 01:39:50,800
And it will show me when did it happen.

912
01:39:50,800 --> 01:39:52,700
So this was a commit from 2020.

913
01:39:55,240 --> 01:39:57,620
And what happened in this commit?

914
01:40:01,360 --> 01:40:02,200
Good.

915
01:40:03,560 --> 01:40:06,600
And the same, if you want to navigate to the same thing,

916
01:40:06,600 --> 01:40:08,480
the same thing exists on GitHub.

917
01:40:08,480 --> 01:40:09,840
So here's the same commit.

918
01:40:09,840 --> 01:40:16,680
What was there before, what was there after?

919
01:40:16,680 --> 01:40:24,640
Then yesterday we have seen this super, super useful way of annotating a file, which on

920
01:40:24,640 --> 01:40:32,000
GitHub is called blame, unfortunate naming, but you can then try it in also in the command

921
01:40:32,000 --> 01:40:46,660
line which will show you line by line when was each line of the code modified last.

922
01:40:46,660 --> 01:40:52,340
And then something we have tried yesterday is to browse the history of a particular file

923
01:40:52,340 --> 01:40:57,920
and see how does a particular file look, how did it look in the past.

924
01:40:57,920 --> 01:41:04,280
And you will practice how to do that on GitHub or command line or any of the other tools.

925
01:41:04,280 --> 01:41:09,000
But now let me let me explain you the exercise.

926
01:41:09,000 --> 01:41:14,920
So in the exercise, your first step will be to make sure that you are not inside another

927
01:41:14,920 --> 01:41:19,680
git repository.

928
01:41:19,680 --> 01:41:22,480
And here is how you want to check.

929
01:41:22,480 --> 01:41:24,920
And I think we didn't tell you how to go out of it.

930
01:41:24,920 --> 01:41:27,360
But I see the question on the collaborative notes.

931
01:41:27,360 --> 01:41:31,600
So thanks for asking that.

932
01:41:31,600 --> 01:41:40,560
And then if you work locally, you will clone this example repository.

933
01:41:40,560 --> 01:41:48,220
In this case, the HTTPS protocol will work.

934
01:41:48,220 --> 01:41:53,480
If you're on GitHub, you don't have to clone anything.

935
01:41:53,480 --> 01:41:57,960
And then we want to go one step further, and we want to make sure that we all work on a

936
01:41:57,960 --> 01:42:04,880
well-defined particular version of this project, which happens to be, this is actually a tag,

937
01:42:04,880 --> 01:42:06,560
it's a release.

938
01:42:06,560 --> 01:42:13,140
So you will navigate your copy to that particular release.

939
01:42:13,140 --> 01:42:21,980
And once you have done that, we have some puzzles for you here, and also a solution.

940
01:42:21,980 --> 01:42:25,220
you will first need to, in this project that we don't know,

941
01:42:25,220 --> 01:42:29,820
with 7,000 commits, you want to find where in the code

942
01:42:30,860 --> 01:42:34,320
is a file that contains this text,

943
01:42:35,340 --> 01:42:37,580
logic error in degree correlation.

944
01:42:37,580 --> 01:42:39,820
And we can imagine that this, maybe we try to run it,

945
01:42:39,820 --> 01:42:42,620
and maybe this is an error that we got.

946
01:42:42,620 --> 01:42:44,780
And then we want to know where does it fail.

947
01:42:46,780 --> 01:42:50,620
Then once you find it, try to find out

948
01:42:50,620 --> 01:42:55,620
when was this line of codes last modified or edit

949
01:42:55,960 --> 01:43:00,120
and find the actual commit that modified that line.

950
01:43:00,120 --> 01:43:02,360
And you can do that with this annotation

951
01:43:02,360 --> 01:43:03,800
with the blame function.

952
01:43:05,480 --> 01:43:08,120
Here is not about who did it.

953
01:43:08,120 --> 01:43:09,880
It's more about when did it happen?

954
01:43:09,880 --> 01:43:11,900
What happened in that change?

955
01:43:11,900 --> 01:43:13,200
And then have a look at this commit

956
01:43:13,200 --> 01:43:16,720
with if you are on the command line, use git show.

957
01:43:16,720 --> 01:43:18,880
If you are on GitHub, try to navigate to that commit

958
01:43:18,880 --> 01:43:20,440
and see what happened in there.

959
01:43:20,620 --> 01:43:25,620
And sometimes you want to then be able to,

960
01:43:25,640 --> 01:43:29,220
if you find, okay, there was a change happened in the past,

961
01:43:29,220 --> 01:43:34,220
I want to be able to get my project back to the state

962
01:43:34,660 --> 01:43:38,740
of how was it back then when this commit was created.

963
01:43:39,820 --> 01:43:44,220
So try to create a branch, not from main,

964
01:43:44,220 --> 01:43:49,020
not from the latest commit, but a branch from the past,

965
01:43:49,020 --> 01:43:54,020
from that commit in the past where this line was modified.

966
01:43:56,360 --> 01:43:58,440
And then bonus question is,

967
01:43:58,440 --> 01:44:01,040
well, how would you bring your code

968
01:44:01,040 --> 01:44:02,200
to the version of the code

969
01:44:02,200 --> 01:44:04,080
right before that line was modified?

970
01:44:05,760 --> 01:44:07,600
We can imagine that maybe this was a mistake,

971
01:44:07,600 --> 01:44:08,840
not in this case,

972
01:44:08,840 --> 01:44:13,460
but if you know that a certain commit in the past

973
01:44:13,460 --> 01:44:14,600
changed the behavior,

974
01:44:14,600 --> 01:44:17,960
you want to be able to navigate your project back to

975
01:44:17,960 --> 01:44:19,900
How was it just before?

976
01:44:19,900 --> 01:44:22,600
And then you want to be able to navigate back to main.

977
01:44:24,120 --> 01:44:25,980
So this is the goal of this exercise.

978
01:44:27,520 --> 01:44:30,940
For those of you who have time left

979
01:44:30,940 --> 01:44:33,380
and are on the command line

980
01:44:33,380 --> 01:44:37,460
and want to try something more advanced,

981
01:44:37,460 --> 01:44:39,900
you can even read up, read on this optional part

982
01:44:39,900 --> 01:44:43,480
where about git bisect.

983
01:44:43,480 --> 01:44:45,940
So the git bisect part is optional.

984
01:44:45,940 --> 01:44:49,420
Our goal for the exercise is this green box, steps one to five.

985
01:44:51,780 --> 01:44:56,380
And we have allocated 20 minutes.

986
01:44:59,300 --> 01:45:00,220
Yeah, 20 minutes,

987
01:45:00,220 --> 01:45:03,700
which means that we will be back 50 minutes past the hour.

988
01:45:03,700 --> 01:45:06,740
I'm just now checking also with my co-instructor

989
01:45:06,740 --> 01:45:09,420
if this was somehow clear

990
01:45:09,420 --> 01:45:10,900
or if we should clarify any step

991
01:45:10,900 --> 01:45:13,620
before sending people into the exercise.

992
01:45:13,620 --> 01:45:15,100
So this is an exercise you can do in groups,

993
01:45:15,100 --> 01:45:18,320
you can do on your own, you can do locally on your computer,

994
01:45:18,320 --> 01:45:22,200
or you can do it, I think you can do all the steps

995
01:45:22,200 --> 01:45:23,300
also purely on GitHub.

996
01:45:31,340 --> 01:45:33,700
Please let us also know how it's going,

997
01:45:33,700 --> 01:45:36,720
like whether this goes well or whether you have problems,

998
01:45:38,000 --> 01:45:39,740
and let us know about the problems.

999
01:45:42,580 --> 01:45:44,900
How is it going, all good from our side?

1000
01:45:44,900 --> 01:45:48,860
Yeah, I think we are covering it all.

1001
01:45:48,860 --> 01:45:51,980
Then let the exercise commence,

1002
01:45:51,980 --> 01:45:56,220
and we will be back 10 minutes before the hour.

1003
01:45:56,220 --> 01:45:58,500
And then together with [Name], we can summarize.

1004
01:45:58,500 --> 01:46:00,740
We can then look at some of the tricky points

1005
01:46:02,180 --> 01:46:03,940
before we take a longer break then.

1006
01:46:05,180 --> 01:46:06,500
Good, have fun at the exercise.

1007
01:46:06,500 --> 01:46:09,060
See you again in 20 minutes, 22 minutes.

1008
01:46:10,540 --> 01:46:11,380
Bye.

1009
01:46:14,900 --> 01:46:16,960
you

1010
01:46:44,900 --> 01:46:46,960
you

1011
01:47:14,900 --> 01:47:16,960
you

1012
01:47:44,900 --> 01:47:46,960
you

1013
01:48:14,900 --> 01:48:16,960
you

1014
01:48:44,900 --> 01:48:46,960
you

1015
01:49:14,900 --> 01:49:16,960
you

1016
01:49:44,900 --> 01:49:46,960
you

1017
01:50:14,900 --> 01:50:16,960
you

1018
01:50:44,900 --> 01:50:46,960
you

1019
01:51:14,900 --> 01:51:16,960
you

1020
01:51:44,900 --> 01:51:46,960
you

1021
01:52:14,900 --> 01:52:16,960
you

1022
01:52:44,900 --> 01:52:46,960
you

1023
01:53:14,900 --> 01:53:16,960
you

1024
01:53:44,900 --> 01:53:46,960
you

1025
01:54:14,900 --> 01:54:16,960
you

1026
01:54:44,900 --> 01:54:46,960
you

1027
01:55:14,900 --> 01:55:16,960
you

1028
01:55:44,900 --> 01:55:46,960
you

1029
01:56:14,900 --> 01:56:16,960
you

1030
01:56:44,900 --> 01:56:46,960
you

1031
01:57:14,900 --> 01:57:16,960
you

1032
01:57:44,900 --> 01:57:46,960
you

1033
01:58:14,900 --> 01:58:16,960
you

1034
01:58:44,900 --> 01:58:46,960
you

1035
01:59:14,900 --> 01:59:16,960
you

1036
01:59:44,900 --> 01:59:46,960
you

1037
02:00:14,900 --> 02:00:16,960
you

1038
02:00:44,900 --> 02:00:46,960
you

1039
02:01:14,900 --> 02:01:16,960
you

1040
02:01:44,900 --> 02:01:46,960
you

1041
02:02:14,900 --> 02:02:16,960
you

1042
02:02:44,900 --> 02:02:46,960
you

1043
02:03:14,900 --> 02:03:16,960
you

1044
02:03:44,900 --> 02:03:46,960
you

1045
02:04:14,900 --> 02:04:16,960
you

1046
02:04:44,900 --> 02:04:46,960
you

1047
02:05:14,900 --> 02:05:16,960
you

1048
02:05:44,900 --> 02:05:46,960
you

1049
02:06:14,900 --> 02:06:16,960
you

1050
02:06:44,900 --> 02:06:46,960
you

1051
02:07:14,900 --> 02:07:16,960
you

1052
02:07:44,900 --> 02:07:46,960
you

1053
02:08:14,900 --> 02:08:41,220
All right, we are back from the exercise.

1054
02:08:41,220 --> 02:08:42,220
Information to [Name].

1055
02:08:42,220 --> 02:08:44,380
I got an error message from my remote control panel.

1056
02:08:44,380 --> 02:08:47,680
So maybe people heard some jingle, maybe they didn't.

1057
02:08:47,680 --> 02:08:49,960
But I think we are streaming at least the right screen.

1058
02:08:49,960 --> 02:08:51,880
We have 10 minutes left.

1059
02:08:51,880 --> 02:08:53,120
We got heaps of questions

1060
02:08:55,200 --> 02:08:57,640
and many, many, many good questions.

1061
02:08:57,640 --> 02:08:59,720
Something that people observed is that actually

1062
02:08:59,720 --> 02:09:03,560
some of the steps are not so easy to do in VS code.

1063
02:09:03,560 --> 02:09:07,400
Some of the steps are not easy to do on GitHub,

1064
02:09:07,400 --> 02:09:08,360
especially for instance,

1065
02:09:08,360 --> 02:09:10,660
when we ask you to create a branch.

1066
02:09:10,660 --> 02:09:12,920
Well, that doesn't really work

1067
02:09:12,920 --> 02:09:14,420
on somebody else's repository.

1068
02:09:14,420 --> 02:09:18,660
So if you wanted to do it, you would have to fork first.

1069
02:09:21,220 --> 02:09:22,780
The solutions that we have here,

1070
02:09:22,780 --> 02:09:24,180
they are only for the command line.

1071
02:09:24,180 --> 02:09:26,020
So this is work in progress, we know.

1072
02:09:29,300 --> 02:09:31,020
Many changes that we did to the lesson

1073
02:09:31,020 --> 02:09:32,300
we did only last week.

1074
02:09:32,300 --> 02:09:34,660
So there is more work needed.

1075
02:09:35,720 --> 02:09:38,340
But what I will try to do here in the last 10 minutes

1076
02:09:38,340 --> 02:09:40,740
before the longer break,

1077
02:09:40,740 --> 02:09:44,320
to go through some of the steps here on VSCode.

1078
02:09:44,320 --> 02:09:48,160
And sometimes I will have to open up our terminal

1079
02:09:48,160 --> 02:09:50,920
inside the VSCode and use the command line instead.

1080
02:09:52,280 --> 02:09:56,240
There exist extensions probably for everything.

1081
02:09:56,240 --> 02:09:59,040
We didn't ask you to install any extensions

1082
02:10:00,160 --> 02:10:01,880
because we didn't want to make it more complicated.

1083
02:10:01,880 --> 02:10:04,280
We wanted to make it easy to join this workshop.

1084
02:10:05,200 --> 02:10:09,600
But one thing we might do is we collect

1085
02:10:09,600 --> 02:10:12,000
on the Code Refinery chat, we started collecting

1086
02:10:12,920 --> 02:10:16,120
what would be really useful extensions for VS Code

1087
02:10:16,120 --> 02:10:18,320
that we can recommend everybody.

1088
02:10:18,320 --> 02:10:20,080
And I admit that I have very little experience.

1089
02:10:20,080 --> 02:10:23,320
So I think I'm using it now for the third time in my life.

1090
02:10:25,560 --> 02:10:28,120
But let me try to go through some of the steps here.

1091
02:10:29,100 --> 02:10:32,320
And hopefully I will also have time to show some of,

1092
02:10:32,320 --> 02:10:33,760
to comment on some of the questions

1093
02:10:33,760 --> 02:10:35,720
on how to do certain things on GitHub.

1094
02:10:36,820 --> 02:10:39,380
And the first step was to make sure

1095
02:10:39,380 --> 02:10:41,040
we start from a well-defined version.

1096
02:10:41,040 --> 02:10:43,840
And this was because the code is evolving

1097
02:10:44,760 --> 02:10:47,360
and we want to make sure that this exercise still works.

1098
02:10:47,360 --> 02:10:49,680
So I will not work on main.

1099
02:10:49,680 --> 02:10:52,480
I will kind of downgrade my version

1100
02:10:52,480 --> 02:10:57,480
to this some past release of NetworkX.

1101
02:10:57,880 --> 02:11:00,220
And one way to do it, I can click here on main.

1102
02:11:01,320 --> 02:11:02,160
Is that visible?

1103
02:11:02,160 --> 02:11:04,320
I'm on the lower left here with my mouse point.

1104
02:11:04,320 --> 02:11:24,040
And, I can probably navigate to the specific release, what was it, 263, here we go.

1105
02:11:24,040 --> 02:11:29,960
So now it's changed a little bit because now we are, we have traveled into the past.

1106
02:11:29,960 --> 02:11:32,960
Now how to find the code, the line that contains this.

1107
02:11:32,960 --> 02:11:36,020
Ooh, I don't know, I will try the magnifying glass.

1108
02:11:36,960 --> 02:11:40,560
Logic error in degree.

1109
02:11:42,860 --> 02:11:44,120
It found something, good.

1110
02:11:45,580 --> 02:11:50,580
It's in network X algorithms threshold PY.

1111
02:11:50,800 --> 02:11:51,800
Good.

1112
02:11:51,800 --> 02:11:55,640
And I can even open it up, the file.

1113
02:11:57,240 --> 02:11:59,540
Let's do it, just that I don't forget the name.

1114
02:11:59,540 --> 02:12:05,700
Find out when this line was last modified.

1115
02:12:05,700 --> 02:12:16,860
Yeah, so that I don't know how to do in VS Code unless I ask the command line.

1116
02:12:16,860 --> 02:12:20,740
And I also admit I don't know what happens on all of your systems.

1117
02:12:20,740 --> 02:12:24,860
So if you click on new terminal, I don't really know precisely what will happen.

1118
02:12:24,860 --> 02:12:29,860
What I'm hoping is that it opens some form of a command line

1119
02:12:31,520 --> 02:12:33,980
that you can type and that looks similar to mine.

1120
02:12:35,280 --> 02:12:36,940
But now that I know the file name,

1121
02:12:38,400 --> 02:12:43,400
I can do git annotate,

1122
02:12:45,120 --> 02:12:49,460
and it was networkX algorithms threshold.py.

1123
02:12:51,260 --> 02:12:53,080
It might be too tiny on my screen,

1124
02:12:53,080 --> 02:12:55,080
but if I now hit enter,

1125
02:12:58,280 --> 02:13:01,800
it's on the very right side is the code

1126
02:13:01,800 --> 02:13:04,600
and the left side is the metadata.

1127
02:13:04,600 --> 02:13:06,560
When was it changed by whom?

1128
02:13:06,560 --> 02:13:07,640
Which date?

1129
02:13:07,640 --> 02:13:08,460
Which commit?

1130
02:13:09,880 --> 02:13:11,640
And I could know with my arrow down or up,

1131
02:13:11,640 --> 02:13:13,600
I could hope to find it.

1132
02:13:14,920 --> 02:13:17,400
One way to search through this is

1133
02:13:17,400 --> 02:13:18,720
if I know what I'm looking for,

1134
02:13:18,720 --> 02:13:20,840
it would be the forward slash.

1135
02:13:20,840 --> 02:13:23,080
So now I'm typing on my keyboard forward slash

1136
02:13:24,120 --> 02:13:28,740
and now I can search for logic error, enter.

1137
02:13:35,000 --> 02:13:37,140
And this is now a little bit hard to read

1138
02:13:37,140 --> 02:13:41,160
because I tried to zoom in and it's not big screen enough

1139
02:13:41,160 --> 02:13:42,740
but this is all one line.

1140
02:13:44,140 --> 02:13:46,520
This is the code and this is the metadata.

1141
02:13:46,520 --> 02:13:51,040
So the last, the line was last changed in this commit.

1142
02:13:52,120 --> 02:13:53,480
I will keep a note of that commit.

1143
02:13:53,480 --> 02:13:55,320
I will just write it down here on my paper.

1144
02:13:55,320 --> 02:13:58,860
It's 90544b4

1145
02:14:02,040 --> 02:14:04,020
How do I get out of this?

1146
02:14:04,020 --> 02:14:04,860
With Q.

1147
02:14:05,740 --> 02:14:10,020
If I type Q, I should, yep, I'm out.

1148
02:14:12,220 --> 02:14:15,660
And now we can inspect the commit with git show, git show.

1149
02:14:16,520 --> 02:14:21,280
90544b4, et cetera, et cetera.

1150
02:14:23,200 --> 02:14:25,000
And there I will see more details.

1151
02:14:27,360 --> 02:14:28,360
I don't want to open it up now

1152
02:14:28,360 --> 02:14:30,480
because I don't want to put other people's email addresses

1153
02:14:30,480 --> 02:14:31,680
onto the stream and recording.

1154
02:14:31,680 --> 02:14:34,240
We will edit this other person out.

1155
02:14:34,240 --> 02:14:36,740
But then I would see what happened in that commit.

1156
02:14:38,480 --> 02:14:42,480
And what, two more steps.

1157
02:14:42,480 --> 02:14:46,080
One was create a branch pointing to the past

1158
02:14:46,080 --> 02:14:47,860
when that commit was created.

1159
02:14:50,000 --> 02:14:51,360
Okay, let me close the terminal

1160
02:14:51,360 --> 02:14:53,260
because that I can do without terminal.

1161
02:14:56,680 --> 02:14:59,840
How do I go back here?

1162
02:15:00,800 --> 02:15:02,280
Let me close this.

1163
02:15:02,280 --> 02:15:04,000
If I know and remember the commit,

1164
02:15:05,120 --> 02:15:07,000
one way to navigate to it would be again,

1165
02:15:07,000 --> 02:15:09,980
click on the branch tag overview.

1166
02:15:09,980 --> 02:15:14,980
And a nice way to do this is to create a new branch.

1167
02:15:16,660 --> 02:15:19,580
Whenever I want to look around in the past

1168
02:15:19,580 --> 02:15:21,420
to some archeology, I personally like

1169
02:15:21,420 --> 02:15:23,300
to create a new branch.

1170
02:15:23,300 --> 02:15:25,220
It will create a new label, a sticky note,

1171
02:15:25,220 --> 02:15:30,220
but I want it to stick to this past commit way, way back.

1172
02:15:31,060 --> 02:15:32,500
Create a new branch from,

1173
02:15:35,340 --> 02:15:36,900
and now I can type the commit.

1174
02:15:36,900 --> 02:15:44,820
Wait a moment, is it asking me for the name?

1175
02:15:44,820 --> 02:15:45,820
I don't know.

1176
02:15:45,820 --> 02:15:47,440
Oh, I forgot.

1177
02:15:47,440 --> 02:15:49,980
Let's try again.

1178
02:15:49,980 --> 02:15:55,980
Create new branch from...

1179
02:15:55,980 --> 02:16:02,820
What happens if I type in the hash 90544B4?

1180
02:16:02,820 --> 02:16:06,000
And then I can give it a name, which is,

1181
02:16:08,420 --> 02:16:09,580
what should we call it?

1182
02:16:10,860 --> 02:16:12,380
Old code.

1183
02:16:12,380 --> 02:16:13,220
Old code.

1184
02:16:14,900 --> 02:16:16,520
Enter.

1185
02:16:16,520 --> 02:16:18,820
And now I have a branch called old code.

1186
02:16:18,820 --> 02:16:19,780
I can navigate to it.

1187
02:16:19,780 --> 02:16:20,780
I can go back to main.

1188
02:16:20,780 --> 02:16:22,860
I can go back to old code.

1189
02:16:22,860 --> 02:16:24,420
And the code that I'm looking here right now

1190
02:16:24,420 --> 02:16:26,560
is the one as it was back then.

1191
02:16:28,100 --> 02:16:29,860
And now for the final question,

1192
02:16:29,860 --> 02:16:34,860
How do I bring it back to the commit just before 90544?

1193
02:16:39,660 --> 02:16:41,820
One way would be I could open the terminal

1194
02:16:41,820 --> 02:16:42,960
and type git log.

1195
02:16:47,580 --> 02:16:48,420
Git log.

1196
02:16:48,420 --> 02:17:03,420
Why do I see here, this hash and not the other one?

1197
02:17:03,420 --> 02:17:08,380
This is not what I wanted.

1198
02:17:08,380 --> 02:17:13,220
This doesn't point to the commit that I thought it would.

1199
02:17:13,220 --> 02:17:17,380
Okay, that's not what I wanted.

1200
02:17:20,940 --> 02:17:22,940
It's pointing to another commit.

1201
02:17:22,940 --> 02:17:25,820
It's pointing to 263.

1202
02:17:25,820 --> 02:17:30,820
So it created the branch on the commit that I was at,

1203
02:17:32,060 --> 02:17:34,740
not the one away in the past.

1204
02:17:34,740 --> 02:17:36,500
Not the one in the past, no.

1205
02:17:36,500 --> 02:17:39,980
Okay, so here I will try to do that in the command line.

1206
02:17:39,980 --> 02:17:42,020
And I see that we are basically out of time.

1207
02:17:42,020 --> 02:17:42,940
I will use one more minute.

1208
02:17:42,940 --> 02:17:47,000
and that is if I want to create a new branch

1209
02:17:47,000 --> 02:17:52,000
in the past git branch, I can call it really old code.

1210
02:17:55,960 --> 02:17:58,060
And now I can give the hash

1211
02:17:58,060 --> 02:18:02,400
from which I wanted to create it 0.544v4.

1212
02:18:05,040 --> 02:18:06,040
And how do I switch to it?

1213
02:18:06,040 --> 02:18:07,520
Git switch.

1214
02:18:12,940 --> 02:18:16,020
And it also, it switched also VSCode.

1215
02:18:17,140 --> 02:18:19,540
And now if I do git log, I see,

1216
02:18:19,540 --> 02:18:21,180
so I don't know why that failed.

1217
02:18:21,180 --> 02:18:22,620
This is what I wanted to see.

1218
02:18:24,420 --> 02:18:26,580
This is the commit right before.

1219
02:18:26,580 --> 02:18:27,940
That's one way of doing it.

1220
02:18:32,220 --> 02:18:33,980
The other way of doing it would be

1221
02:18:35,060 --> 02:18:37,860
if I wanted to branch just before,

1222
02:18:37,860 --> 02:18:46,660
I could say 9, 0, 5, 4, 4, B4, and then tilde 1.

1223
02:18:46,660 --> 02:18:49,260
It's the first parent of that commit.

1224
02:18:49,260 --> 02:18:56,000
It would be the commit just before.

1225
02:18:56,000 --> 02:18:57,000
That was a quick tour.

1226
02:18:57,000 --> 02:18:58,340
I think we're out of time.

1227
02:18:58,340 --> 02:19:01,540
I don't want to eat into the break.

1228
02:19:01,540 --> 02:19:04,380
We will be back in one hour.

1229
02:19:04,380 --> 02:19:12,020
And then before we move on to the next thing, which will be learning how to turn a project

1230
02:19:12,020 --> 02:19:17,580
into a Git repository and publish it, we will debrief some of the questions that I didn't

1231
02:19:17,580 --> 02:19:23,420
have time to comment on.

1232
02:19:23,420 --> 02:19:26,060
Good to see you everybody in one hour.

1233
02:19:26,060 --> 02:19:30,380
We'll be back here with [Name] and for a little bit more Git.

1234
02:19:30,380 --> 02:19:31,380
Looking forward.

1235
02:19:31,380 --> 02:19:32,380
Have a good break.

1236
02:19:32,380 --> 02:19:32,740
Bye.

1237
02:19:34,380 --> 02:19:36,440
you

1238
02:20:04,380 --> 02:20:06,440
you

1239
02:20:34,380 --> 02:20:36,440
you

1240
02:21:04,380 --> 02:21:06,440
you

1241
02:21:34,380 --> 02:21:36,440
you

1242
02:22:04,380 --> 02:22:06,440
you

1243
02:22:34,380 --> 02:22:36,440
you

1244
02:23:04,380 --> 02:23:06,440
you

1245
02:23:34,380 --> 02:23:36,440
you

1246
02:24:04,380 --> 02:24:06,440
you

1247
02:24:34,380 --> 02:24:36,440
you

1248
02:25:04,380 --> 02:25:06,440
you

1249
02:25:34,380 --> 02:25:36,440
you

1250
02:26:04,380 --> 02:26:06,440
you

1251
02:26:34,380 --> 02:26:36,440
you

1252
02:27:04,380 --> 02:27:06,440
you

1253
02:27:34,380 --> 02:27:36,440
you

1254
02:28:04,380 --> 02:28:06,440
you

1255
02:28:34,380 --> 02:28:36,440
you

1256
02:29:04,380 --> 02:29:06,440
you

1257
02:29:34,380 --> 02:29:36,440
you

1258
02:30:04,380 --> 02:30:06,440
you

1259
02:30:34,380 --> 02:30:36,440
you

1260
02:31:04,380 --> 02:31:06,440
you

1261
02:31:34,380 --> 02:31:36,440
you

1262
02:32:04,380 --> 02:32:06,440
you

1263
02:32:34,380 --> 02:32:36,440
you

1264
02:33:04,380 --> 02:33:06,440
you

1265
02:33:34,380 --> 02:33:36,440
you

1266
02:34:04,380 --> 02:34:06,440
you

1267
02:34:34,380 --> 02:34:36,440
you

1268
02:35:04,380 --> 02:35:06,440
you

1269
02:35:34,380 --> 02:35:36,440
you

1270
02:36:04,380 --> 02:36:06,440
you

1271
02:36:34,380 --> 02:36:36,440
you

1272
02:37:04,380 --> 02:37:06,440
you

1273
02:37:34,380 --> 02:37:36,440
you

1274
02:38:04,380 --> 02:38:06,440
you

1275
02:38:34,380 --> 02:38:36,440
you

1276
02:39:04,380 --> 02:39:06,440
you

1277
02:39:34,380 --> 02:39:36,440
you

1278
02:40:04,380 --> 02:40:06,440
you

1279
02:40:34,380 --> 02:40:36,440
you

1280
02:41:04,380 --> 02:41:06,440
you

1281
02:41:34,380 --> 02:41:36,440
you

1282
02:42:04,380 --> 02:42:06,440
you

1283
02:42:34,380 --> 02:42:36,440
you

1284
02:43:04,380 --> 02:43:06,440
you

1285
02:43:34,380 --> 02:43:36,440
you

1286
02:44:04,380 --> 02:44:06,440
you

1287
02:44:34,380 --> 02:44:36,440
you

1288
02:45:04,380 --> 02:45:06,440
you

1289
02:45:34,380 --> 02:45:36,440
you

1290
02:46:04,380 --> 02:46:06,440
you

1291
02:46:34,380 --> 02:46:36,440
you

1292
02:47:04,380 --> 02:47:06,440
you

1293
02:47:34,380 --> 02:47:36,440
you

1294
02:48:04,380 --> 02:48:06,440
you

1295
02:48:34,380 --> 02:48:36,440
you

1296
02:49:04,380 --> 02:49:06,440
you

1297
02:49:34,380 --> 02:49:36,440
you

1298
02:50:04,380 --> 02:50:06,440
you

1299
02:50:34,380 --> 02:50:36,440
you

1300
02:51:04,380 --> 02:51:06,440
you

1301
02:51:34,380 --> 02:51:36,440
you

1302
02:52:04,380 --> 02:52:06,440
you

1303
02:52:34,380 --> 02:52:36,440
you

1304
02:53:04,380 --> 02:53:06,440
you

1305
02:53:34,380 --> 02:53:36,440
you

1306
02:54:04,380 --> 02:54:06,440
you

1307
02:54:34,380 --> 02:54:36,440
you

1308
02:55:04,380 --> 02:55:06,440
you

1309
02:55:34,380 --> 02:55:36,440
you

1310
02:56:04,380 --> 02:56:06,440
you

1311
02:56:34,380 --> 02:56:36,440
you

1312
02:57:04,380 --> 02:57:06,440
you

1313
02:57:34,380 --> 02:57:36,440
you

1314
02:58:04,380 --> 02:58:06,440
you

1315
02:58:34,380 --> 02:58:36,440
you

1316
02:59:04,380 --> 02:59:06,440
you

1317
02:59:34,380 --> 02:59:36,440
you

1318
03:00:04,380 --> 03:00:06,440
you

1319
03:00:34,380 --> 03:00:36,440
you

1320
03:01:04,380 --> 03:01:06,440
you

1321
03:01:34,380 --> 03:01:36,440
you

1322
03:02:04,380 --> 03:02:06,440
you

1323
03:02:34,380 --> 03:02:36,440
you

1324
03:03:04,380 --> 03:03:06,440
you

1325
03:03:34,380 --> 03:03:36,440
you

1326
03:04:04,380 --> 03:04:06,440
you

1327
03:04:34,380 --> 03:04:36,440
you

1328
03:05:04,380 --> 03:05:06,440
you

1329
03:05:34,380 --> 03:05:36,440
you

1330
03:06:04,380 --> 03:06:06,440
you

1331
03:06:34,380 --> 03:06:36,440
you

1332
03:07:04,380 --> 03:07:06,440
you

1333
03:07:34,380 --> 03:07:36,440
you

1334
03:08:04,380 --> 03:08:06,440
you

1335
03:08:34,380 --> 03:08:36,440
you

1336
03:09:04,380 --> 03:09:06,440
you

1337
03:09:34,380 --> 03:09:36,440
you

1338
03:10:04,380 --> 03:10:06,440
you

1339
03:10:34,380 --> 03:10:36,440
you

1340
03:11:04,380 --> 03:11:06,440
you

1341
03:11:34,380 --> 03:11:36,440
you

1342
03:12:04,380 --> 03:12:06,440
you

1343
03:12:34,380 --> 03:12:36,440
you

1344
03:13:04,380 --> 03:13:06,440
you

1345
03:13:34,380 --> 03:13:36,440
you

1346
03:14:04,380 --> 03:14:06,440
you

1347
03:14:34,380 --> 03:14:36,440
you

1348
03:15:04,380 --> 03:15:06,440
you

1349
03:15:34,380 --> 03:15:36,440
you

1350
03:16:04,380 --> 03:16:06,440
you

1351
03:16:34,380 --> 03:16:36,440
you

1352
03:17:04,380 --> 03:17:06,440
you

1353
03:17:34,380 --> 03:18:00,380
Okay, it works. I'm just remote controlling here the studio from a different country.

1354
03:18:01,340 --> 03:18:04,060
Welcome back, everybody, after the break.

1355
03:18:04,060 --> 03:18:05,340
Thanks for the feedback.

1356
03:18:05,340 --> 03:18:07,100
Thanks for the questions.

1357
03:18:07,100 --> 03:18:09,420
I wanted, before moving on, I wanted to comment

1358
03:18:09,420 --> 03:18:12,540
that this was not an easy exercise, the last one.

1359
03:18:12,540 --> 03:18:14,780
It was possibly too short time.

1360
03:18:14,780 --> 03:18:17,820
It was also maybe cold water

1361
03:18:17,820 --> 03:18:21,820
because after yesterday, when we were on GitHub,

1362
03:18:21,820 --> 03:18:24,220
now suddenly we have to work locally.

1363
03:18:24,220 --> 03:18:26,220
Some commands only work in the command line.

1364
03:18:26,220 --> 03:18:28,620
It's a new environment.

1365
03:18:28,620 --> 03:18:29,740
So this was really advanced.

1366
03:18:32,460 --> 03:18:33,740
So I understand the frustration.

1367
03:18:34,940 --> 03:18:39,500
We need to improve the solution and the walkthrough to make it easier for everybody.

1368
03:18:40,300 --> 03:18:46,060
But also now we can relax because the next exercise that we will do in 10-15 minutes

1369
03:18:47,420 --> 03:18:48,540
will be a lot easier.

1370
03:18:49,740 --> 03:18:53,580
And everybody can do it and everybody will need this in their work.

1371
03:18:54,140 --> 03:18:56,300
So it will get better.

1372
03:18:58,620 --> 03:19:06,660
The other thing I wanted to say is that we don't expect that you remember all the commands

1373
03:19:06,660 --> 03:19:12,140
for all of these advanced techniques of how to navigate through a repository, but we

1374
03:19:12,140 --> 03:19:16,420
wanted you to know that you know that this is possible.

1375
03:19:16,420 --> 03:19:20,260
Now you know that these operations are possible.

1376
03:19:20,260 --> 03:19:25,460
Maybe you don't need them now, maybe you need them in three years, but since you start using

1377
03:19:25,460 --> 03:19:27,820
it will be possible later for you

1378
03:19:27,820 --> 03:19:30,100
to do these kind of operations.

1379
03:19:32,360 --> 03:19:34,060
It's not important to remember how to do it.

1380
03:19:34,060 --> 03:19:35,260
You can look it up later.

1381
03:19:35,260 --> 03:19:37,180
If you know where the episode is

1382
03:19:37,180 --> 03:19:39,540
and you can later look up how to do it in detail,

1383
03:19:39,540 --> 03:19:42,920
but we wanted you to know that these things are possible.

1384
03:19:47,900 --> 03:19:48,940
I wanted to show one more thing

1385
03:19:48,940 --> 03:19:50,500
before we move to the next episode.

1386
03:19:50,500 --> 03:19:51,820
This is just demonstration

1387
03:19:51,820 --> 03:19:55,220
because this was one question on GitHub.

1388
03:19:58,660 --> 03:20:01,380
You just need to know that, again, that this is possible,

1389
03:20:01,380 --> 03:20:04,260
that if I look at a repository here

1390
03:20:04,260 --> 03:20:07,660
and I see main and the latest commit from two days ago,

1391
03:20:10,820 --> 03:20:12,660
I can navigate to that commit.

1392
03:20:18,140 --> 03:20:19,940
And you can then navigate to browse files.

1393
03:20:19,940 --> 03:20:22,860
So top right, there is a button called browse files.

1394
03:20:25,940 --> 03:20:27,620
And something is different now in the address.

1395
03:20:27,620 --> 03:20:29,980
The address is now not anymore.

1396
03:20:29,980 --> 03:20:32,280
It will not show me the latest version,

1397
03:20:32,280 --> 03:20:35,000
but it will show me a specific version.

1398
03:20:35,000 --> 03:20:37,420
This is the specific commit identifier.

1399
03:20:38,300 --> 03:20:39,820
And if you want, now you can replace it.

1400
03:20:39,820 --> 03:20:42,100
So if I still remember the commit hash

1401
03:20:42,100 --> 03:20:44,620
from before the break, it was 90544B4.

1402
03:20:44,620 --> 03:20:49,620
90544B4, I don't even have to type the whole thing.

1403
03:20:53,360 --> 03:20:56,400
And now I can navigate through the project

1404
03:20:56,400 --> 03:20:58,100
as it was seven years ago.

1405
03:21:00,080 --> 03:21:01,440
So that can be also useful.

1406
03:21:04,080 --> 03:21:06,280
So many of the steps could have been done on GitHub.

1407
03:21:06,280 --> 03:21:09,480
It wasn't easy, we need to improve the walkthrough.

1408
03:21:14,620 --> 03:21:23,780
Yeah, and the I see that the URL here is hard to read it is very small, but the difference

1409
03:21:23,780 --> 03:21:33,780
is that if the first part is your project, then slash three slash commit hash, you can

1410
03:21:33,780 --> 03:21:36,700
and then navigate into the past.

1411
03:21:38,220 --> 03:21:39,420
It's like time traveling.

1412
03:21:40,560 --> 03:21:41,660
And somewhere in the,

1413
03:21:44,980 --> 03:21:46,580
well, let me paste it.

1414
03:21:46,580 --> 03:21:48,180
So I'll be pasted into the answers,

1415
03:21:48,180 --> 03:21:49,640
then you can try it as well.

1416
03:21:50,980 --> 03:21:51,820
Here we go.

1417
03:21:55,500 --> 03:21:56,960
Good.

1418
03:21:56,960 --> 03:21:59,860
We will now leave this NetworkX project.

1419
03:21:59,860 --> 03:22:03,560
If you didn't finish the exercise, you can try later.

1420
03:22:03,560 --> 03:22:04,760
you know where to find it.

1421
03:22:04,760 --> 03:22:06,960
It is not important for the rest of today

1422
03:22:06,960 --> 03:22:09,580
and it's not important for tomorrow.

1423
03:22:11,040 --> 03:22:16,040
So I will, I think I will close.

1424
03:22:16,660 --> 03:22:17,760
I will move this away.

1425
03:22:23,360 --> 03:22:24,200
Yeah, I will move it.

1426
03:22:24,200 --> 03:22:26,040
No, not this thing, this thing.

1427
03:22:30,040 --> 03:22:31,280
I will move the VS Code away.

1428
03:22:31,280 --> 03:22:33,000
I will bring it back in a moment.

1429
03:22:33,560 --> 03:22:36,120
One more thing that we probably mentioned,

1430
03:22:36,120 --> 03:22:37,440
but I just want to mention it again,

1431
03:22:37,440 --> 03:22:39,640
something that now that we are,

1432
03:22:39,640 --> 03:22:41,600
have a couple of different repositories,

1433
03:22:42,960 --> 03:22:45,880
something I did is on my hard drive,

1434
03:22:45,880 --> 03:22:47,840
I created a directory called course

1435
03:22:49,000 --> 03:22:51,400
and everything we create here, I will put in there.

1436
03:22:51,400 --> 03:22:52,640
And it's easier for me to find.

1437
03:22:52,640 --> 03:22:54,400
And also I don't clutter my hard drive

1438
03:22:54,400 --> 03:22:56,400
with different projects

1439
03:22:56,400 --> 03:23:00,480
because we will now go to a different project.

1440
03:23:00,480 --> 03:23:03,900
it will be, I call it my project.

1441
03:23:03,900 --> 03:23:05,820
It's my own project.

1442
03:23:05,820 --> 03:23:07,140
It's not on Git yet.

1443
03:23:07,140 --> 03:23:10,380
I will bring it to Git and I will bring it onto GitHub.

1444
03:23:10,380 --> 03:23:12,580
And if you want, it can be your real project,

1445
03:23:12,580 --> 03:23:15,860
but note that you will have the choice

1446
03:23:15,860 --> 03:23:17,820
of making the project public or private.

1447
03:23:19,860 --> 03:23:22,820
So we make it invisible for everybody else.

1448
03:23:22,820 --> 03:23:23,660
And if you don't want that,

1449
03:23:23,660 --> 03:23:27,720
you can practice with a small example toy project.

1450
03:23:27,720 --> 03:23:29,020
So this is what I will do.

1451
03:23:29,020 --> 03:23:36,020
Do you have a default license that you use when you publish a project?

1452
03:23:36,020 --> 03:23:49,100
Very good question. I have in my little toy project, I created two files. One is a Python

1453
03:23:49,100 --> 03:23:54,220
script, but then I start, I right away start with a license. So license is one of the first

1454
03:23:54,220 --> 03:24:02,740
things I will add to a project, license and readme. And often I go for open source licenses.

1455
03:24:02,740 --> 03:24:12,100
For coding projects, I often choose MIT license, if I just want to keep it as simple as possible.

1456
03:24:12,100 --> 03:24:19,500
And we will talk more about licenses next week. So sometimes I want to make sure that

1457
03:24:19,500 --> 03:24:24,060
not only my project is open source, but also all the derivative work is open source. And

1458
03:24:24,060 --> 03:24:25,860
then I choose a different license,

1459
03:24:25,860 --> 03:24:27,680
but more about that on Tuesday.

1460
03:24:30,220 --> 03:24:32,060
But let me navigate to the right place.

1461
03:24:32,060 --> 03:24:35,460
And the right place is on the bottom of the document,

1462
03:24:35,460 --> 03:24:37,780
how to turn your own project to a Git repo

1463
03:24:37,780 --> 03:24:39,420
and how to share it.

1464
03:24:39,420 --> 03:24:41,980
I will open it up in my browser tab.

1465
03:24:47,920 --> 03:24:49,460
And here, there is not very much to say.

1466
03:24:49,460 --> 03:24:52,940
We will give you enough time

1467
03:24:54,060 --> 03:24:58,380
to do this, but I want to really explain well

1468
03:24:58,380 --> 03:24:59,540
what the expectation is.

1469
03:24:59,540 --> 03:25:03,660
The expectation is that if you don't want to share

1470
03:25:03,660 --> 03:25:06,800
a real project of yours, it can be a small script.

1471
03:25:06,800 --> 03:25:10,460
You can create a new directory called my project

1472
03:25:10,460 --> 03:25:14,860
or whatever name you like, put a couple of files into it.

1473
03:25:17,100 --> 03:25:19,420
And this represents our own research project,

1474
03:25:19,420 --> 03:25:22,960
our own master thesis or PhD thesis.

1475
03:25:24,060 --> 03:25:26,060
and it is not yet a git repository.

1476
03:25:29,020 --> 03:25:31,320
And the two steps are now,

1477
03:25:31,320 --> 03:25:33,120
we need to make it a git repository.

1478
03:25:35,300 --> 03:25:37,480
And depending on which track you choose,

1479
03:25:37,480 --> 03:25:39,140
you will learn some new commands.

1480
03:25:40,220 --> 03:25:41,660
So for instance, on the command line,

1481
03:25:41,660 --> 03:25:43,500
you will see you have to do a little bit more work.

1482
03:25:43,500 --> 03:25:46,200
There are a little bit more steps to do.

1483
03:25:46,200 --> 03:25:50,600
If you go for VS Code, it's less to do

1484
03:25:50,600 --> 03:25:53,420
because it does lots of these Git commands for you.

1485
03:25:55,160 --> 03:25:57,100
Or you can do only using GitHub.

1486
03:25:59,240 --> 03:26:00,200
In some of these steps,

1487
03:26:00,200 --> 03:26:04,380
you will have to create a GitHub repository for the project.

1488
03:26:06,240 --> 03:26:07,440
Again, if you go for VS Code,

1489
03:26:07,440 --> 03:26:08,360
you don't even have to do that.

1490
03:26:08,360 --> 03:26:10,560
It will create a GitHub repository for you.

1491
03:26:12,880 --> 03:26:14,000
But at some point,

1492
03:26:14,000 --> 03:26:19,000
at some point it might ask you to authorize your VS Code

1493
03:26:22,520 --> 03:26:26,680
to be able to write to GitHub for you.

1494
03:26:26,680 --> 03:26:29,660
And I did that, you have to do it only the very first time

1495
03:26:29,660 --> 03:26:30,520
and I said yes to it.

1496
03:26:30,520 --> 03:26:34,040
So now my VS Code editor can create

1497
03:26:34,040 --> 03:26:36,240
and modify my own GitHub repositories

1498
03:26:36,240 --> 03:26:38,680
because that's what I wanted it to be able to do.

1499
03:26:40,120 --> 03:26:41,160
Scrolling back.

1500
03:26:44,000 --> 03:26:55,300
Your goal will be make it a git repo in one commit or a couple of commits as you like.

1501
03:26:55,300 --> 03:27:01,480
They will live locally on your computer, but then you also want to share this repository

1502
03:27:01,480 --> 03:27:04,400
to GitHub or GitLab.

1503
03:27:04,400 --> 03:27:14,520
Because the steps that we show, especially the command line, is very transferable between

1504
03:27:14,520 --> 03:27:21,440
all of these services.

1505
03:27:21,440 --> 03:27:23,600
And that's so important to do.

1506
03:27:23,600 --> 03:27:29,600
Because our ambition is that every coding project that we do will end up as a version

1507
03:27:29,600 --> 03:27:34,400
controlled project that is findable by other people.

1508
03:27:34,400 --> 03:27:41,400
And after you are done, if you need it for a certificate,

1509
03:27:41,400 --> 03:27:42,620
take a screenshot of it.

1510
03:27:42,620 --> 03:27:44,120
You don't have to keep it on GitHub.

1511
03:27:44,120 --> 03:27:45,360
You can, again, delete it.

1512
03:27:45,360 --> 03:27:49,080
So we don't force you to keep all of these projects there.

1513
03:27:52,760 --> 03:27:55,320
And we have allocated 25 minutes, which may be,

1514
03:27:55,320 --> 03:27:56,940
I think it's good to give people time

1515
03:27:56,940 --> 03:27:59,440
to experiment also a little bit.

1516
03:27:59,440 --> 03:28:03,640
and learn how to share the code.

1517
03:28:03,640 --> 03:28:06,480
And what we will do when we come back from the exercises

1518
03:28:07,480 --> 03:28:09,400
that we will discuss a lot.

1519
03:28:09,400 --> 03:28:12,340
We will really open it up for lots of questions.

1520
03:28:12,340 --> 03:28:16,040
We will try to have a discussion here with my colleagues

1521
03:28:16,040 --> 03:28:19,840
and we will talk about after all of these things we learned,

1522
03:28:19,840 --> 03:28:21,000
what is a good starting point?

1523
03:28:21,000 --> 03:28:22,920
How to progress?

1524
03:28:22,920 --> 03:28:23,960
What are the things to avoid?

1525
03:28:23,960 --> 03:28:28,480
What are typical traps when starting with Git or GitHub?

1526
03:28:29,440 --> 03:28:42,760
Yes, exercise until 35 minutes past. Try it out. Let us know how it went. Follow the solutions

1527
03:28:42,760 --> 03:28:48,540
if you need. And see you then again in 25 minutes. And then let's discuss a lot less

1528
03:28:48,540 --> 03:28:53,200
than spend the remaining time that we will have to clarify all of these questions that

1529
03:28:53,200 --> 03:28:59,760
are left. Good luck with the exercise. See you in 25 minutes. Bye.

1530
03:29:23,200 --> 03:29:25,260
you

1531
03:29:53,200 --> 03:29:55,260
you

1532
03:30:23,200 --> 03:30:25,260
you

1533
03:30:53,200 --> 03:30:55,260
you

1534
03:31:23,200 --> 03:31:25,260
you

1535
03:31:53,200 --> 03:31:55,260
you

1536
03:32:23,200 --> 03:32:25,260
you

1537
03:32:53,200 --> 03:32:55,260
you

1538
03:33:23,200 --> 03:33:25,260
you

1539
03:33:53,200 --> 03:33:55,260
you

1540
03:34:23,200 --> 03:34:25,260
you

1541
03:34:53,200 --> 03:34:55,260
you

1542
03:35:23,200 --> 03:35:25,260
you

1543
03:35:53,200 --> 03:35:55,260
you

1544
03:36:23,200 --> 03:36:25,260
you

1545
03:36:53,200 --> 03:36:55,260
you

1546
03:37:23,200 --> 03:37:25,260
you

1547
03:37:53,200 --> 03:37:55,260
you

1548
03:38:23,200 --> 03:38:25,260
you

1549
03:38:53,200 --> 03:38:55,260
you

1550
03:39:23,200 --> 03:39:25,260
you

1551
03:39:53,200 --> 03:39:55,260
you

1552
03:40:23,200 --> 03:40:25,260
you

1553
03:40:53,200 --> 03:40:55,260
you

1554
03:41:23,200 --> 03:41:25,260
you

1555
03:41:53,200 --> 03:41:55,260
you

1556
03:42:23,200 --> 03:42:25,260
you

1557
03:42:53,200 --> 03:42:55,260
you

1558
03:43:23,200 --> 03:43:25,260
you

1559
03:43:53,200 --> 03:43:55,260
you

1560
03:44:23,200 --> 03:44:25,260
you

1561
03:44:53,200 --> 03:44:55,260
you

1562
03:45:23,200 --> 03:45:25,260
you

1563
03:45:53,200 --> 03:45:55,260
you

1564
03:46:23,200 --> 03:46:25,260
you

1565
03:46:53,200 --> 03:46:55,260
you

1566
03:47:23,200 --> 03:47:25,260
you

1567
03:47:53,200 --> 03:47:55,260
you

1568
03:48:23,200 --> 03:48:25,260
you

1569
03:48:53,200 --> 03:48:55,260
you

1570
03:49:23,200 --> 03:49:25,260
you

1571
03:49:53,200 --> 03:49:55,260
you

1572
03:50:23,200 --> 03:50:25,260
you

1573
03:50:53,200 --> 03:50:55,260
you

1574
03:51:23,200 --> 03:51:25,260
you

1575
03:51:53,200 --> 03:51:55,260
you

1576
03:52:23,200 --> 03:52:25,260
you

1577
03:52:53,200 --> 03:52:55,080
Welcome back, everybody.

1578
03:52:58,740 --> 03:53:00,580
We, how did it go?

1579
03:53:00,580 --> 03:53:02,420
I will try it also on my side.

1580
03:53:02,420 --> 03:53:03,340
We got lots of questions.

1581
03:53:03,340 --> 03:53:04,180
That was great.

1582
03:53:06,700 --> 03:53:07,980
So my plan is I will,

1583
03:53:07,980 --> 03:53:11,340
I have this little toy project.

1584
03:53:11,340 --> 03:53:15,760
I want to, I will try it as well using VS code.

1585
03:53:15,760 --> 03:53:18,480
It will take only two, three minutes,

1586
03:53:19,500 --> 03:53:21,300
and then I can comment on some of the questions

1587
03:53:21,300 --> 03:53:23,700
that came up once I created.

1588
03:53:27,060 --> 03:53:30,260
So let me try that code here.

1589
03:53:30,260 --> 03:53:34,400
Code dot, it will start it at the place where I am.

1590
03:53:37,620 --> 03:53:39,380
I will make this more readable.

1591
03:53:43,980 --> 03:53:45,820
This is not on Git yet.

1592
03:53:45,820 --> 03:53:50,220
And all I have to do is source control.

1593
03:53:51,300 --> 03:53:54,500
I could initialize it.

1594
03:53:54,500 --> 03:53:55,980
I will not even do that.

1595
03:53:55,980 --> 03:53:58,860
So for those of you who did the command line,

1596
03:53:58,860 --> 03:54:01,280
you, at some point you had to type git init,

1597
03:54:02,500 --> 03:54:04,380
and this is what would happen if I click the button,

1598
03:54:04,380 --> 03:54:05,460
but I will not even do that.

1599
03:54:05,460 --> 03:54:08,100
I will go straight to publish to GitHub,

1600
03:54:08,100 --> 03:54:11,820
which will then initialize the repository for me.

1601
03:54:11,820 --> 03:54:14,220
It will create a commit for me

1602
03:54:14,220 --> 03:54:19,020
and push the changes to GitHub, publish to GitHub.

1603
03:54:21,300 --> 03:54:25,180
And I will first make it a public repository,

1604
03:54:25,180 --> 03:54:27,620
and then later I will change it to private,

1605
03:54:27,620 --> 03:54:28,540
because there was also a question,

1606
03:54:28,540 --> 03:54:33,160
where can we switch this to a public?

1607
03:54:34,100 --> 03:54:36,020
You can, I could change the name for my project

1608
03:54:36,020 --> 03:54:40,980
to something more descriptive, public,

1609
03:54:42,940 --> 03:54:46,100
all of the files, okay.

1610
03:54:46,100 --> 03:54:47,720
And here I'm following the screenshots

1611
03:54:47,720 --> 03:54:49,180
that we have in the solution.

1612
03:54:49,180 --> 03:54:59,220
Now, it created the repository for me on GitHub, it created a commit, it pushed a commit, and

1613
03:54:59,220 --> 03:55:01,980
I can open it up on GitHub.

1614
03:55:01,980 --> 03:55:04,420
Ta-da!

1615
03:55:04,420 --> 03:55:06,900
And here is my project.

1616
03:55:06,900 --> 03:55:13,500
This first commit is a commit that I didn't even actively do, VS Code did it for me.

1617
03:55:13,500 --> 03:55:25,140
Now, to the question about one question about public and private, this is a public project.

1618
03:55:25,140 --> 03:55:26,140
How can you switch?

1619
03:55:26,140 --> 03:55:27,140
How can you make it private?

1620
03:55:27,140 --> 03:55:28,140
And how can you delete projects?

1621
03:55:28,140 --> 03:55:30,320
This is something we have been asked.

1622
03:55:30,320 --> 03:55:35,460
So on settings, this is you can do it in settings.

1623
03:55:35,460 --> 03:55:38,940
In settings, you can rename it.

1624
03:55:38,940 --> 03:55:50,400
You can do lots of things, scrolling down, but I will go to the danger zone.

1625
03:55:50,400 --> 03:55:56,080
In the danger zone, I can change visibility, so from public to private.

1626
03:55:56,080 --> 03:56:03,200
And if I don't want the repository anymore, I can also delete it.

1627
03:56:03,200 --> 03:56:05,000
And it will still ask me, do you really want to delete it?

1628
03:56:05,000 --> 03:56:06,000
There is no way back.

1629
03:56:06,000 --> 03:56:07,000
Please type the name.

1630
03:56:07,000 --> 03:56:10,360
but then in a few steps, it can be, it will be gone.

1631
03:56:15,000 --> 03:56:15,840
Good.

1632
03:56:19,520 --> 03:56:21,000
Now, let me show you one more thing here.

1633
03:56:21,000 --> 03:56:24,200
And that is, how is this linked now

1634
03:56:24,200 --> 03:56:28,400
to the local repository with the remote repository?

1635
03:56:28,400 --> 03:56:30,720
And where is this information?

1636
03:56:30,720 --> 03:56:33,720
So I'll click on my Python script,

1637
03:56:33,720 --> 03:56:38,720
And then I want to see, is this the timeline?

1638
03:56:40,240 --> 03:56:42,000
No, this is the timeline.

1639
03:56:42,000 --> 03:56:43,000
Where's the timeline?

1640
03:56:44,920 --> 03:56:47,660
How do I, this one, how do I see the commits?

1641
03:56:51,800 --> 03:56:55,440
What I wanted to see is the commit messages

1642
03:56:55,440 --> 03:56:57,060
here on VS Code as well.

1643
03:57:03,720 --> 03:57:14,040
No, I don't. I looked for that several times. I haven't found somewhere we talk about timeline.

1644
03:57:14,040 --> 03:57:18,240
So where is this timeline thing that we talked about?

1645
03:57:18,240 --> 03:57:23,800
Is a certain file tracked in git open? Yes.

1646
03:57:23,800 --> 03:57:33,440
Should be would be. Oh, can you go to the file browser view? Not the git view?

1647
03:57:33,440 --> 03:57:36,800
Yeah, there, in their timeline at the bottom.

1648
03:57:36,800 --> 03:57:39,320
Ah, here we go, thanks.

1649
03:57:39,320 --> 03:57:43,800
Okay, first commit, good, brilliant.

1650
03:57:43,800 --> 03:57:50,560
And that was hard to find, for me, the first time.

1651
03:57:50,560 --> 03:57:54,520
So there's the timeline, there is the first commit, but now, where is this information

1652
03:57:54,520 --> 03:57:55,520
locally?

1653
03:57:55,520 --> 03:57:57,200
Where is this stuff?

1654
03:57:57,200 --> 03:58:00,000
And in the command line, you could do,

1655
03:58:00,000 --> 03:58:02,800
there is a hidden directory called .git.

1656
03:58:04,760 --> 03:58:06,480
And this is just a reminder that

1657
03:58:06,480 --> 03:58:08,760
when you create commands branches,

1658
03:58:08,760 --> 03:58:11,320
it all goes in there, all the metadata is in there.

1659
03:58:13,040 --> 03:58:16,560
This also stores the connection between this repository

1660
03:58:16,560 --> 03:58:17,880
and the remote repository.

1661
03:58:19,800 --> 03:58:20,920
If you want to

1662
03:58:23,600 --> 03:58:24,920
disconnect the two,

1663
03:58:25,800 --> 03:58:30,920
look for remotes, so you can remove remotes. It will disconnect the two.

1664
03:58:32,760 --> 03:58:36,760
And if I, if I on my computer would delete the .git,

1665
03:58:38,120 --> 03:58:42,360
then this commit is gone. The history is gone. The branches are gone.

1666
03:58:44,920 --> 03:58:47,960
I think just for demonstration, I will try it out. I don't know what will happen. Let me,

1667
03:58:48,680 --> 03:58:53,720
so please don't do it. This is not dangerous. I will do it only, only here on stream. I will remove

1668
03:58:54,920 --> 03:59:07,280
this. No, I will not remove this is dangerous, but I will do I will rename it. Get to renamed

1669
03:59:07,280 --> 03:59:13,640
folder. Because then I can rename it back.

1670
03:59:13,640 --> 03:59:20,240
And if you do a git status, I guess you get. But it's not a git folder anymore.

1671
03:59:20,240 --> 03:59:24,240
Yes, so if I now, like, remove it or move it away,

1672
03:59:27,880 --> 03:59:29,680
git status.

1673
03:59:29,680 --> 03:59:30,920
So this is not a git repository,

1674
03:59:30,920 --> 03:59:33,960
but I think VS Code didn't get the news yet.

1675
03:59:33,960 --> 03:59:36,040
I was wondering what happens here with the timeline

1676
03:59:36,040 --> 03:59:38,880
because there shouldn't be anything now anymore.

1677
03:59:38,880 --> 03:59:40,480
There should be, oh yeah.

1678
03:59:40,480 --> 03:59:43,520
So now VS Code also got the news.

1679
03:59:43,520 --> 03:59:45,800
It tells that, well, this is not a git repository.

1680
03:59:45,800 --> 03:59:47,400
You need to initialize it first.

1681
03:59:47,400 --> 03:59:52,720
And now there is no there is no timeline anymore.

1682
03:59:52,720 --> 03:59:58,700
So all the all the local git information was in the .git.

1683
03:59:58,700 --> 04:00:00,980
Let me try the reverse.

1684
04:00:00,980 --> 04:00:01,980
Rename folder.

1685
04:00:01,980 --> 04:00:04,980
I move it back to .git.

1686
04:00:04,980 --> 04:00:13,680
Now there is a timeline again.

1687
04:00:13,680 --> 04:00:17,280
So that was good.

1688
04:00:17,280 --> 04:00:19,100
What else is here?

1689
04:00:19,100 --> 04:00:20,500
Any trouble here?

1690
04:00:20,500 --> 04:00:22,200
Anything else we should talk about?

1691
04:00:24,380 --> 04:00:25,620
What did I mean by disconnect?

1692
04:00:25,620 --> 04:00:27,160
I meant disconnecting.

1693
04:00:29,460 --> 04:00:30,900
Okay, what do I mean by that?

1694
04:00:34,140 --> 04:00:36,300
The connection, there is a connection

1695
04:00:36,300 --> 04:00:39,620
between now the local repository and the remote repository

1696
04:00:39,620 --> 04:00:43,540
so that when I do local changes here on my computer,

1697
04:00:43,540 --> 04:00:45,100
I can push them to GitHub.

1698
04:00:45,100 --> 04:00:49,540
And if I or somebody else does changes on GitHub,

1699
04:00:49,540 --> 04:00:52,980
I can pull these changes to my local repository.

1700
04:00:54,780 --> 04:00:59,740
This is something we will do quite a bit tomorrow.

1701
04:01:01,260 --> 04:01:02,780
Pull changes, push changes.

1702
04:01:05,220 --> 04:01:07,460
And the connection between the two

1703
04:01:07,460 --> 04:01:10,420
was this thing that we called origin,

1704
04:01:10,420 --> 04:01:13,340
but I think we only mentioned it very briefly earlier.

1705
04:01:13,340 --> 04:01:16,120
It's a placeholder for,

1706
04:01:17,420 --> 04:01:19,660
we saw that earlier when we cloned our repository.

1707
04:01:19,660 --> 04:01:22,020
It remembered where we cloned it from.

1708
04:01:26,060 --> 04:01:27,620
A little bit technical.

1709
04:01:27,620 --> 04:01:29,820
I will now move away my VS codes

1710
04:01:31,420 --> 04:01:32,540
to get more screen space.

1711
04:01:32,540 --> 04:01:34,520
I will also move away my terminal,

1712
04:01:37,580 --> 04:01:38,420
more screen space,

1713
04:01:38,420 --> 04:01:43,300
and I will navigate what I want to do now.

1714
04:01:43,300 --> 04:01:48,300
I want to navigate to the last part and we will...

1715
04:01:50,100 --> 04:01:52,500
So let's discuss a little bit before break.

1716
04:01:52,500 --> 04:01:53,500
We will then take a short break.

1717
04:01:53,500 --> 04:01:55,960
We'll discuss a little bit more later.

1718
04:01:55,960 --> 04:01:58,260
I would like now to really talk about

1719
04:01:58,260 --> 04:02:00,160
all the questions that you might have.

1720
04:02:01,420 --> 04:02:05,040
So let's make this really a Q&A session,

1721
04:02:05,040 --> 04:02:07,660
ask everything about Git that you wanted to know,

1722
04:02:07,660 --> 04:02:09,480
anything about yesterday and today.

1723
04:02:10,440 --> 04:02:16,040
And to get these questions started, we have these two episodes,

1724
04:02:16,840 --> 04:02:22,360
but there won't be any exercises of where we want to now discuss here

1725
04:02:23,880 --> 04:02:26,120
some practical advice, how much it is necessary.

1726
04:02:27,240 --> 04:02:31,320
We showed you many things that are possible, but where should we start?

1727
04:02:31,320 --> 04:02:34,360
What should we do then? And what are typical traps?

1728
04:02:34,360 --> 04:02:38,600
So first, practical advice, and I will add the link also in the document

1729
04:02:38,600 --> 04:02:40,440
and so that you know where to find it.

1730
04:02:41,640 --> 04:02:44,560
We are now here.

1731
04:02:49,600 --> 04:02:51,280
So at the bottom of the document.

1732
04:03:00,780 --> 04:03:01,980
And there are a few topics

1733
04:03:01,980 --> 04:03:03,520
that people might be wondering about.

1734
04:03:03,520 --> 04:03:04,460
And one is,

1735
04:03:04,460 --> 04:03:09,460
Let's talk about commit messages.

1736
04:03:11,300 --> 04:03:13,260
So what makes commit messages useful?

1737
04:03:18,220 --> 04:03:22,060
And we try to summarize here that a useful commit message,

1738
04:03:22,060 --> 04:03:24,540
it's like an entry in a logbook.

1739
04:03:25,540 --> 04:03:29,380
It's if you can, in one line, summarize the change,

1740
04:03:29,380 --> 04:03:31,780
but also if you can provide context for it.

1741
04:03:34,460 --> 04:03:36,860
And sometimes it's hard to do it in one line.

1742
04:03:39,180 --> 04:03:44,180
I find it quite a challenge to write one-liners.

1743
04:03:47,780 --> 04:03:51,780
So if you need more than one line, it's still good to try.

1744
04:03:51,780 --> 04:03:53,160
Here's a good example.

1745
04:03:54,940 --> 04:03:59,940
If you write it in a command line,

1746
04:04:01,140 --> 04:04:04,080
try to summarize the commit message in the first line.

1747
04:04:04,080 --> 04:04:05,280
And why in the first line?

1748
04:04:05,280 --> 04:04:09,480
Because, okay, let me navigate to,

1749
04:04:09,480 --> 04:04:11,240
let me go back to the recipe book.

1750
04:04:11,240 --> 04:04:12,640
Recipe book recorded.

1751
04:04:15,160 --> 04:04:17,660
Because the first line is the one that I see here.

1752
04:04:19,560 --> 04:04:21,640
It's good if it's somehow descriptive

1753
04:04:21,640 --> 04:04:22,840
because then I don't have to click

1754
04:04:22,840 --> 04:04:26,080
and I don't have to look into it to find out more.

1755
04:04:26,080 --> 04:04:28,040
But if you need to give more context,

1756
04:04:28,040 --> 04:04:30,640
more explanation, why was this done?

1757
04:04:30,640 --> 04:04:32,040
What does it refer to?

1758
04:04:32,040 --> 04:04:37,040
It refers to a discussion that maybe started in an issue.

1759
04:04:37,900 --> 04:04:41,480
Then it's customary to do first line summary,

1760
04:04:41,480 --> 04:04:44,180
one empty line, and then more context if you need to.

1761
04:04:46,920 --> 04:04:48,820
And when we created commits on GitHub,

1762
04:04:51,600 --> 04:04:52,640
let me try that on GitHub.

1763
04:04:52,640 --> 04:04:57,560
Now I will modify something faster.

1764
04:04:58,560 --> 04:05:00,060
Let me modify this one.

1765
04:05:02,040 --> 04:05:07,600
So, when I do it on GitHub, I also have the option to give a short summary, your edit,

1766
04:05:07,600 --> 04:05:09,600
I will edit the file.

1767
04:05:09,600 --> 04:05:20,720
Well, we need more instructions, more instructions coming up.

1768
04:05:20,720 --> 04:05:24,820
Let's preview the change.

1769
04:05:24,820 --> 04:05:30,280
And when, when I commit, when I create the commit on GitHub, the top part is the first

1770
04:05:30,280 --> 04:05:36,280
line and this is the this this the empty line is the one between the two and here is the

1771
04:05:36,280 --> 04:05:42,420
more context and this is not a very useful commit message because it only tells me which

1772
04:05:42,420 --> 04:05:45,880
file has changed it would be much nicer to say what has changed what was the context

1773
04:05:45,880 --> 04:05:58,680
there. Why did I change it? Because providing context and hear more context.

1774
04:05:58,680 --> 04:06:06,160
Yeah. When do you have really short message commit messages? And when do you have longer

1775
04:06:06,160 --> 04:06:18,200
Most of the time, I have short messages. I have the longer one if it's, if it could be,

1776
04:06:18,200 --> 04:06:24,520
if it connects to something else, if it connects to a discussion that we had, if I need to

1777
04:06:24,520 --> 04:06:32,640
provide this context, or if it's a bigger change. And I want to summarize what I did

1778
04:06:32,640 --> 04:06:37,480
and why I did it so that people don't have to look through all of the change to understand

1779
04:06:37,480 --> 04:06:44,000
it. But most of the time it fits into one line. How about you? How do you do that?

1780
04:06:44,000 --> 04:06:56,960
I mean, like everything, it really depends on the project. So for, I mean, for small

1781
04:06:56,960 --> 04:07:04,160
projects that I'm just starting and are still chaotic. I mean, it's often really short.

1782
04:07:04,160 --> 04:07:10,760
Sometimes it's even things like fix bugs or so on if I'm busy and it's just all thrown

1783
04:07:10,760 --> 04:07:16,000
in things. Like, for example, this control panel for the stream I've been working on.

1784
04:07:16,000 --> 04:07:21,680
It's so young and things are changing so fast that if I take the time to make a good commit

1785
04:07:21,680 --> 04:07:28,480
message, it's not going to matter by tomorrow. So I just do whatever. But then there's other

1786
04:07:28,480 --> 04:07:33,760
projects that are actually like out there and mostly work. So every change has a particular

1787
04:07:33,760 --> 04:07:40,320
purpose. Like I'm adding a certain new feature to it. And then I'll go into more detail. Also,

1788
04:07:40,320 --> 04:07:44,320
it depends on who else would be reading it. Like if I'm contributing to someone else's project,

1789
04:07:44,320 --> 04:07:51,040
I'll use the commit message to explain why I'm doing it and what the reviewer might need to know.

1790
04:07:51,680 --> 04:07:55,760
and they know I may as well do it there rather than write it somewhere else,

1791
04:07:56,640 --> 04:08:01,280
especially because when you open a pull request, it will automatically use the messages from the

1792
04:08:04,240 --> 04:08:06,000
commit by default.

1793
04:08:08,320 --> 04:08:11,680
Right. If I have a pull request with only one commit,

1794
04:08:13,120 --> 04:08:16,320
it will suggest me that this is the pull request title,

1795
04:08:16,320 --> 04:08:18,800
and it will suggest that this is the pull request context.

1796
04:08:18,800 --> 04:08:23,720
And a good point about that, if you start,

1797
04:08:23,720 --> 04:08:26,920
if it's your own project, it doesn't have to be formal.

1798
04:08:26,920 --> 04:08:28,080
It shouldn't be formal.

1799
04:08:30,880 --> 04:08:34,420
Maybe still good to write the commit messages in English

1800
04:08:34,420 --> 04:08:37,400
because many projects start small

1801
04:08:37,400 --> 04:08:39,500
and then they become lots of people

1802
04:08:39,500 --> 04:08:41,000
and they live for a long time.

1803
04:08:45,000 --> 04:08:46,900
But as for bigger projects,

1804
04:08:46,900 --> 04:08:48,400
and some of them are listed here

1805
04:08:48,400 --> 04:08:50,520
and maybe these are projects that some of you use

1806
04:08:50,520 --> 04:08:54,960
like SciPy, NumPy, Pandas, Julia, GGplot.

1807
04:08:56,480 --> 04:08:59,200
It can be interesting to browse these projects

1808
04:08:59,200 --> 04:09:01,280
and have a look how do they do commit messages.

1809
04:09:01,280 --> 04:09:03,160
And you will see that they are a bit more formal

1810
04:09:03,160 --> 04:09:04,000
because they have to be.

1811
04:09:04,000 --> 04:09:06,640
These are projects with hundreds, thousands of people.

1812
04:09:07,560 --> 04:09:10,000
So then they agree on certain conventions

1813
04:09:10,000 --> 04:09:15,000
of how to document improvements,

1814
04:09:15,000 --> 04:09:18,180
improvements, how to document bugs, how to document,

1815
04:09:19,080 --> 04:09:20,420
how to write commit messages,

1816
04:09:20,420 --> 04:09:23,360
which automatically create release notes,

1817
04:09:23,360 --> 04:09:25,660
but we don't have to be that formal yet.

1818
04:09:25,660 --> 04:09:27,600
But it can be still fun because you can browse them

1819
04:09:27,600 --> 04:09:31,960
for some inspiration of how do these really well-established

1820
04:09:31,960 --> 04:09:36,320
open source projects communicate through commit messages.

1821
04:09:36,320 --> 04:09:37,800
Yeah.

1822
04:09:37,800 --> 04:09:40,880
If you take some project you're interested in

1823
04:09:40,880 --> 04:09:44,000
that's reasonably big and subscribe to its repository

1824
04:09:44,000 --> 04:09:47,860
on GitHub, you'll start getting a flood of these kind of pull

1825
04:09:47,860 --> 04:09:51,220
requests and messages and discussions that are coming in.

1826
04:09:51,220 --> 04:09:54,020
And this can be really educational to see

1827
04:09:54,020 --> 04:09:55,500
how people do things.

1828
04:09:55,500 --> 04:09:57,580
Like from subscribing to repositories

1829
04:09:57,580 --> 04:09:59,360
and seeing how they've worked, I've

1830
04:09:59,360 --> 04:10:03,580
learned many of the different techniques which I use now.

1831
04:10:03,580 --> 04:10:13,980
So I'd, yeah, so I'd, so for becoming better at things,

1832
04:10:13,980 --> 04:10:17,660
This is one of the things I'd recommend.

1833
04:10:17,660 --> 04:10:18,660
It's a great tip.

1834
04:10:18,660 --> 04:10:23,740
Like if you want to become a better writer, you should read books.

1835
04:10:23,740 --> 04:10:25,500
It's similar here.

1836
04:10:25,500 --> 04:10:29,260
I think from all of these, I want to point out one thing.

1837
04:10:29,260 --> 04:10:32,700
It can be more useful to say why something was changed.

1838
04:10:32,700 --> 04:10:35,900
It can be more useful than what has changed.

1839
04:10:35,900 --> 04:10:37,060
Because I can find out what changed.

1840
04:10:37,060 --> 04:10:38,900
I can go to the commit.

1841
04:10:38,900 --> 04:10:41,780
I can click on it and I will see it.

1842
04:10:41,780 --> 04:10:42,940
These lines got removed.

1843
04:10:42,940 --> 04:10:48,220
lines got added. But sometimes it can be hard for me to tell why was this done. So the why

1844
04:10:48,220 --> 04:10:55,380
can be more interesting. But that's the last thing before the break. Let's take a break

1845
04:10:55,380 --> 04:11:00,140
soon. Let the perfect not be the enemy of the good enough. At the beginning, let's make

1846
04:11:00,140 --> 04:11:07,820
it just good enough. More commits, they don't have to be pretty. It's better than trying

1847
04:11:07,820 --> 04:11:12,940
to do everything perfectly and then preventing you from creating commits and sharing your

1848
04:11:12,940 --> 04:11:19,960
work. And I suggest that we take a break, maybe 10 minute break, because then everybody

1849
04:11:19,960 --> 04:11:23,720
can think about what are the questions that you want to ask, and please ask them. And

1850
04:11:23,720 --> 04:11:27,520
then the remaining 20 minutes that we will have after the break, then we can talk about

1851
04:11:27,520 --> 04:11:37,720
complexity, how to where to start with branches, how to deal with branch complexity, repositories,

1852
04:11:37,720 --> 04:11:43,000
to start and how to progress.

1853
04:11:43,000 --> 04:11:44,000
Sounds like a plan.

1854
04:11:44,000 --> 04:11:45,000
Okay.

1855
04:11:45,000 --> 04:11:46,000
Sounds good.

1856
04:11:46,000 --> 04:11:49,480
So then let's be back five minutes after the hour, and hopefully with lots of questions

1857
04:11:49,480 --> 04:11:50,600
about Git.

1858
04:11:50,600 --> 04:11:53,960
And if you want us to show something, please suggest it and maybe we can show something

1859
04:11:53,960 --> 04:11:55,320
here.

1860
04:11:55,320 --> 04:11:59,800
Let's make this a bit of improv session.

1861
04:11:59,800 --> 04:12:02,800
See you all in 10 minutes.

1862
04:12:02,800 --> 04:12:03,800
Bye.

1863
04:12:03,800 --> 04:12:04,800
Okay.

1864
04:12:04,800 --> 04:12:05,800
Bye.

1865
04:12:05,800 --> 04:12:06,800
Do you push the break button?

1866
04:12:06,800 --> 04:12:10,800
Oh yeah, let me find the break button.

1867
04:12:36,800 --> 04:12:38,860
you

1868
04:13:06,800 --> 04:13:08,860
you

1869
04:13:36,800 --> 04:13:38,860
you

1870
04:14:06,800 --> 04:14:08,860
you

1871
04:14:36,800 --> 04:14:38,860
you

1872
04:15:06,800 --> 04:15:08,860
you

1873
04:15:36,800 --> 04:15:38,860
you

1874
04:16:06,800 --> 04:16:08,860
you

1875
04:16:36,800 --> 04:16:38,860
you

1876
04:17:06,800 --> 04:17:08,860
you

1877
04:17:36,800 --> 04:17:38,860
you

1878
04:18:06,800 --> 04:18:08,860
you

1879
04:18:36,800 --> 04:18:38,860
you

1880
04:19:06,800 --> 04:19:08,860
you

1881
04:19:36,800 --> 04:19:38,860
you

1882
04:20:06,800 --> 04:20:08,860
you

1883
04:20:36,800 --> 04:20:38,860
you

1884
04:21:06,800 --> 04:21:08,860
you

1885
04:21:36,800 --> 04:21:38,860
you

1886
04:22:06,800 --> 04:22:08,860
you

1887
04:22:36,800 --> 04:22:53,120
Hello, everybody. Welcome back for the last 20 minutes, 25 minutes of today. It will be

1888
04:22:53,120 --> 04:23:01,520
a discussion session. It's a possibility to ask us lots of questions, which we can now

1889
04:23:01,520 --> 04:23:07,600
here discuss. Maybe we can also show one or two things. So thanks so much for keeping

1890
04:23:07,600 --> 04:23:15,480
this coming. I would maybe before moving on to branches, I would like to we can talk about

1891
04:23:15,480 --> 04:23:25,840
two things that came up. One was when do you clone and when do you fork? How do you decide?

1892
04:23:25,840 --> 04:23:29,920
I can comment, but maybe, yeah, beyond [Name].

1893
04:23:29,920 --> 04:23:32,000
And the cat is there, yeah.

1894
04:23:32,000 --> 04:23:33,720
The cat is there.

1895
04:23:33,720 --> 04:23:34,560
Yes.

1896
04:23:36,120 --> 04:23:41,120
I would fork a repository that seems like a bigger project.

1897
04:23:44,040 --> 04:23:47,360
Fork it first and then clone my version of it.

1898
04:23:52,160 --> 04:23:53,000
Yeah. Yeah.

1899
04:23:55,840 --> 04:24:01,840
So I can say that I fork when I somehow want to have it.

1900
04:24:01,840 --> 04:24:04,240
I want to make sure that I don't lose even the fork, the copy.

1901
04:24:05,920 --> 04:24:12,320
If I'm afraid that the central repository will, I don't know, disappear or something,

1902
04:24:12,320 --> 04:24:13,760
then I just make a copy of it.

1903
04:24:14,880 --> 04:24:20,000
Or if I plan to contribute to it and make changes and keep those changes somewhere

1904
04:24:20,000 --> 04:24:25,760
saved if it's just about i want to run it only today

1905
04:24:25,760 --> 04:24:33,760
oh then then i don't create a fork yeah i didn't think about this uh

1906
04:24:33,760 --> 04:24:39,520
keeping a copy in case the original changes but that's a good point

1907
04:24:39,520 --> 04:24:43,040
yeah it's a little bit like a bookmark yeah so if then the

1908
04:24:43,040 --> 04:24:46,160
central repository disappears it will not remove your fork

1909
04:24:46,160 --> 04:24:51,440
unless the central repository is private. If, at least it used to be like that, if the private

1910
04:24:51,440 --> 04:24:55,600
disappears, it also removes all the forks. I see. Okay.

1911
04:24:56,640 --> 04:25:01,760
But as a side note, how about gitignore? When is that useful? How do you use it?

1912
04:25:03,520 --> 04:25:06,720
What is it good for? It was asked somewhere.

1913
04:25:06,720 --> 04:25:16,240
did you talk about did you talk about git status before and

1914
04:25:16,240 --> 04:25:24,440
not so much because we didn't spend we didn't focus too much on the command line yeah

1915
04:25:24,440 --> 04:25:30,280
i can do a quick quick demo here of it in my in my project

1916
04:25:30,280 --> 04:25:42,720
gitstatus. Everything is, the working tree is clean. And what does that mean? Well, everything

1917
04:25:42,720 --> 04:25:49,680
has been committed. But what if I have now a file here? Give me an example for something

1918
04:25:49,680 --> 04:25:51,680
that should not be in a Git repository.

1919
04:25:52,920 --> 04:25:54,600
Test.py.

1920
04:25:56,680 --> 04:25:57,520
What about,

1921
04:25:59,800 --> 04:26:02,240
oh, sorry, I thought cats was.

1922
04:26:02,240 --> 04:26:03,080
PC.

1923
04:26:04,120 --> 04:26:05,440
Sorry, what was that?

1924
04:26:05,440 --> 04:26:06,280
.pc.

1925
04:26:07,840 --> 04:26:09,600
Yeah, but it's Python specific.

1926
04:26:09,600 --> 04:26:10,640
Let's say I have all,

1927
04:26:12,400 --> 04:26:14,640
okay, I will do something.

1928
04:26:14,640 --> 04:26:19,640
I have a file called passwords.txt.

1929
04:26:20,040 --> 04:26:20,960
Okay, yeah.

1930
04:26:22,980 --> 04:26:23,920
Git status.

1931
04:26:25,280 --> 04:26:27,720
And I don't want to put passwords into the git repository.

1932
04:26:27,720 --> 04:26:29,320
I don't want to put passwords

1933
04:26:29,320 --> 04:26:31,320
and sensitive information onto GitHub.

1934
04:26:32,760 --> 04:26:35,080
And now if I type git status, I see it here.

1935
04:26:35,080 --> 04:26:37,840
Git reminds me that there is this file.

1936
04:26:37,840 --> 04:26:39,120
It's untracked.

1937
04:26:39,120 --> 04:26:40,000
Do you want to edit?

1938
04:26:40,000 --> 04:26:40,960
No, I don't want to edit,

1939
04:26:40,960 --> 04:26:43,800
but I also, I don't want to be reminded.

1940
04:26:43,800 --> 04:26:47,080
And if I want to get to prevent me from adding it,

1941
04:26:47,920 --> 04:26:52,920
I would list this in a file called .gitignore.

1942
04:26:57,480 --> 04:27:00,680
Oh, and now I don't want to spend too much time here.

1943
04:27:00,680 --> 04:27:04,120
I can try to do it in VS code, code dot.

1944
04:27:07,040 --> 04:27:07,880
Oh.

1945
04:27:07,880 --> 04:27:08,760
So, yeah.

1946
04:27:08,760 --> 04:27:11,680
So the point of git status is it will tell you

1947
04:27:11,680 --> 04:27:13,200
what you're currently working on

1948
04:27:13,200 --> 04:27:20,320
what might need to be done. So for example it tells you these are all files that you've done

1949
04:27:20,320 --> 04:27:27,360
something on but they aren't committed yet which usually means you should commit them at some point.

1950
04:27:31,280 --> 04:27:34,880
I can even do a wildcard so anything that starts with passwords please

1951
04:27:35,440 --> 04:27:37,200
never put this into the git repository.

1952
04:27:37,200 --> 04:27:49,740
save now the thing is still there it's like to change color interesting

1953
04:27:49,740 --> 04:27:54,060
and if I go back to the terminal and I do git status

1954
04:27:54,060 --> 04:27:58,340
okay there is not a gitignore which I guess I should add to my git repository

1955
04:27:58,340 --> 04:28:05,660
how do I do that I do it by doing oh yeah oh I need to go into this thing

1956
04:28:05,660 --> 04:28:13,540
source control click add stage and commit in the commit message with a good

1957
04:28:13,540 --> 04:28:26,140
one will be ignore ignore files that start with password commit and back to

1958
04:28:26,140 --> 04:28:31,340
here get status now it looks clean the password TXT is still there it's not in

1959
04:28:31,340 --> 04:28:34,640
my git repository and I will not accidentally commit it it will not let

1960
04:28:34,640 --> 04:28:44,760
Let me I can even try or get add password. Let me try to do that. No, you cannot.

1961
04:28:44,760 --> 04:28:51,640
Yeah, so it even warrants you so you won't accidentally add it.

1962
04:28:51,640 --> 04:28:57,420
So that was getting our typical thing to ignore is sensitive stuff, password stuff. Yeah,

1963
04:28:57,420 --> 04:28:58,740
big generated files.

1964
04:28:58,740 --> 04:29:04,540
If, for example, files. Yeah, like if you're compiling code, you would ignore the results

1965
04:29:04,540 --> 04:29:11,420
the compiling stuff. If you're storing LaTeX papers, you'd ignore the generated PDFs and

1966
04:29:11,420 --> 04:29:20,700
other intermediate files, and so on. For our code refinery web pages, we ignore the generated

1967
04:29:20,700 --> 04:29:30,620
websites, and so on. If you have big data analysis kind of stuff, you might ignore all of the data

1968
04:29:30,620 --> 04:29:34,460
directories, because you store that some other way, for example.

1969
04:29:37,740 --> 04:29:42,460
A little fun fact, if you zoom out here on the lesson down here, you can actually view the

1970
04:29:42,460 --> 04:29:49,900
lesson in PDF format, in one big PDF page. And that's a generated file. We don't want to have

1971
04:29:49,900 --> 04:29:54,700
that in the Git repository. We generate this every time we make a change to the repository.

1972
04:29:55,500 --> 04:30:00,060
And this is not part of the Git repository. This could be something that is ignored.

1973
04:30:00,620 --> 04:30:01,620
Yes.

1974
04:30:01,620 --> 04:30:07,460
Back to the lesson, how about branching?

1975
04:30:07,460 --> 04:30:14,860
Do you create branches or do you work with one branch in your projects or beyond [Name]?

1976
04:30:14,860 --> 04:30:20,820
Well, I use a lot of branches, so.

1977
04:30:20,820 --> 04:30:22,820
How do you keep them organized?

1978
04:30:22,820 --> 04:30:26,620
Yeah, that's a good question.

1979
04:30:26,620 --> 04:30:35,260
I try to give good names and start with my username and then a feature name.

1980
04:30:35,260 --> 04:30:41,260
Do you usually work on big projects or small projects or?

1981
04:30:41,260 --> 04:30:50,940
I work on small projects, private projects.

1982
04:30:50,940 --> 04:30:58,260
So just make this more visible here.

1983
04:30:58,260 --> 04:31:04,980
For me, most of my projects are very small.

1984
04:31:04,980 --> 04:31:10,560
I mean, I guess for everyone, you have a few big projects and many small projects, which

1985
04:31:10,560 --> 04:31:14,720
you might not even consider a project because it's so small.

1986
04:31:14,720 --> 04:31:20,640
So for the small stuff, it's just working on one branch usually, unless there's a specific

1987
04:31:20,640 --> 04:31:26,360
case when I need to do something, like I'm actually testing something else.

1988
04:31:26,360 --> 04:31:33,000
For bigger projects, like small group things, well, if it's a small group but I'm the main

1989
04:31:33,000 --> 04:31:41,480
developer and there's no one else that has time to review things, well, again, it's mostly

1990
04:31:41,480 --> 04:31:43,800
with the main branch.

1991
04:31:43,800 --> 04:31:48,320
But there's often times I'm doing something and I'm like, okay, this is such a big change,

1992
04:31:48,320 --> 04:31:51,160
I know I definitely want someone to look at it.

1993
04:31:51,160 --> 04:31:59,080
And then I would do the pull request workflow, like make a branch and actually ask someone,

1994
04:31:59,080 --> 04:32:07,280
please take a look at this, I really need your help, and then review.

1995
04:32:07,280 --> 04:32:10,920
So start small, start simple, it's okay to have main branch, it's okay to put all the

1996
04:32:10,920 --> 04:32:12,920
commits in there.

1997
04:32:12,920 --> 04:32:18,600
And as soon as the project grows, so as soon as you have two people, more than two people,

1998
04:32:18,600 --> 04:32:26,320
a few people, one thing you could consider is, and we will see that tomorrow in exercise,

1999
04:32:26,320 --> 04:32:31,800
one thing you could do in your project, in your research group, you could even decide

2000
04:32:31,800 --> 04:32:34,680
that, well, we want to right protect the main branch.

2001
04:32:34,680 --> 04:32:37,600
you decide that the main branch is the one that works,

2002
04:32:38,840 --> 04:32:43,360
is tested, and you write protect it.

2003
04:32:43,360 --> 04:32:46,920
So nobody can accidentally modify it or push to it

2004
04:32:46,920 --> 04:32:50,200
or commit to it, but you can then,

2005
04:32:50,200 --> 04:32:52,200
and tomorrow we will show you how you can then configure it

2006
04:32:52,200 --> 04:32:56,300
so that all the changes have to be pull requests.

2007
04:32:56,300 --> 04:32:58,600
And then at least somebody else looks at it.

2008
04:32:58,600 --> 04:33:00,840
And it's not just to make sure that,

2009
04:33:00,840 --> 04:33:02,300
it's not about just quality control,

2010
04:33:02,300 --> 04:33:08,060
also about learning, then at least two people know about each change. And that's important

2011
04:33:08,060 --> 04:33:12,940
in research groups. You want to make sure that if one research group member student leaves,

2012
04:33:13,580 --> 04:33:17,900
that the knowledge is not lost, that at least somebody else understands what was going on there.

2013
04:33:19,740 --> 04:33:26,460
What happens if no one has time or really only one person is working on a project?

2014
04:33:26,460 --> 04:33:37,500
I guess then it's sort of too bad, like that's the problem itself.

2015
04:33:37,500 --> 04:33:40,380
So I think there are two questions in this one question. One is, what do you do if you

2016
04:33:40,380 --> 04:33:47,380
are alone and you have nobody else to look over the code? And maybe you can team up with

2017
04:33:47,380 --> 04:33:51,100
somebody does it can be somebody who works on something else, but at least can look at

2018
04:33:51,100 --> 04:33:56,340
the code part of it. Doesn't have even have to understand the science part of it. And maybe

2019
04:33:56,340 --> 04:34:00,180
Maybe you can help them reviewing their code, but it can be hard.

2020
04:34:00,180 --> 04:34:02,620
And then the other part of the question is, how about time?

2021
04:34:02,620 --> 04:34:04,820
Because code reviewing takes time.

2022
04:34:04,820 --> 04:34:13,140
And it can feel like, well, this is not, you know, work or this is not coding, but it makes

2023
04:34:13,140 --> 04:34:14,140
better code.

2024
04:34:14,140 --> 04:34:16,400
It makes better understanding within the group.

2025
04:34:16,400 --> 04:34:23,780
So we think it's time well spent, but we need to then also convince, well, we need to allocate

2026
04:34:23,780 --> 04:34:24,780
time for it.

2027
04:34:24,780 --> 04:34:25,780
So it takes time.

2028
04:34:25,780 --> 04:34:32,220
reviewing a paper. It takes time, but the system is there for a good reason.

2029
04:34:32,220 --> 04:34:40,980
Yeah. So when you were, like, doing research and stuff like that, did someone usually review

2030
04:34:40,980 --> 04:34:48,820
your work? Did you have enough people to do this?

2031
04:34:48,820 --> 04:34:53,940
No, we were we were not really back then.

2032
04:34:53,940 --> 04:34:57,080
We were not really using this code review.

2033
04:34:57,080 --> 04:35:00,400
Everybody was committing to the main or master branch.

2034
04:35:00,400 --> 04:35:01,400
We had tests.

2035
04:35:01,400 --> 04:35:05,560
So we would notice when things wouldn't go well, and we would run these tests before

2036
04:35:05,560 --> 04:35:06,560
committing.

2037
04:35:06,560 --> 04:35:14,200
And at some point, somebody would notice that something changed and you will fix it.

2038
04:35:14,200 --> 04:35:21,360
These days, also in the project that I used to work on during PhD, we use code review.

2039
04:35:21,360 --> 04:35:22,800
Somebody else looks over it.

2040
04:35:22,800 --> 04:35:24,200
We have automated testing.

2041
04:35:24,200 --> 04:35:26,320
We will show you that next week.

2042
04:35:26,320 --> 04:35:32,600
So even when you look at the pull request, we can see whether all the tests are passing

2043
04:35:32,600 --> 04:35:36,600
or they are not passing.

2044
04:35:36,600 --> 04:35:38,600
But this can be built up step by step.

2045
04:35:38,600 --> 04:35:41,500
It's good not to add all of this machinery

2046
04:35:41,500 --> 04:35:43,400
right from the start in small projects.

2047
04:35:46,400 --> 04:35:47,440
Okay, we have 10 minutes left.

2048
04:35:47,440 --> 04:35:49,800
I just want to see what else kind of topics we have here.

2049
04:35:49,800 --> 04:35:54,280
And looking at questions,

2050
04:35:54,280 --> 04:35:56,960
we could talk about staging and committing.

2051
04:35:56,960 --> 04:35:58,080
I'm just scrolling down here

2052
04:35:58,080 --> 04:36:00,020
and see what interesting topics.

2053
04:36:01,120 --> 04:36:03,740
How large should a commit be?

2054
04:36:03,740 --> 04:36:08,740
What, yeah, what is a good size for a commit?

2055
04:36:10,300 --> 04:36:11,140
Yeah.

2056
04:36:12,060 --> 04:36:13,820
Maybe let's start with this one.

2057
04:36:13,820 --> 04:36:17,220
My experience is that a commit shouldn't be large

2058
04:36:17,220 --> 04:36:21,480
than it's trouble, so that small commits are best.

2059
04:36:22,340 --> 04:36:24,700
Yeah, so it's probably better to do many small commits

2060
04:36:24,700 --> 04:36:28,060
than one commit every few weeks.

2061
04:36:29,460 --> 04:36:32,140
Because if you do many smaller commits,

2062
04:36:32,140 --> 04:36:36,140
You can always recombine them later.

2063
04:36:36,140 --> 04:36:40,140
It is easier to combine than to split.

2064
04:36:40,140 --> 04:36:44,140
If later you find out that some commit was a mistake

2065
04:36:44,140 --> 04:36:48,140
it can be easier to undo it when it was small

2066
04:36:48,140 --> 04:36:52,140
rather than when it was one commit that touched everything.

2067
04:36:52,140 --> 04:36:56,140
What I

2068
04:36:56,140 --> 04:37:00,140
try to do, but I'm not always successful

2069
04:37:00,140 --> 04:37:04,140
is that I try to not put unrelated changes to the same commit

2070
04:37:04,140 --> 04:37:08,140
and to the same pull request because that will

2071
04:37:08,140 --> 04:37:12,140
it will simplify the review for the other person. It will also simplify

2072
04:37:12,140 --> 04:37:16,140
the undoing if we later realize that was a bad idea

2073
04:37:16,140 --> 04:37:20,140
then I can undo the bad idea instead of

2074
04:37:20,140 --> 04:37:24,140
at the same time undoing the good idea that was packaged into the same commit.

2075
04:37:24,140 --> 04:37:28,140
Right, yeah.

2076
04:37:28,140 --> 04:37:36,540
Maybe in terms of time, often I try to make a commit at the end of the day, approximately.

2077
04:37:36,540 --> 04:37:41,200
One per day, a few per day, if all you do is coding.

2078
04:37:41,200 --> 04:37:43,780
So a unit that you would not like to lose.

2079
04:37:43,780 --> 04:37:44,780
Yeah.

2080
04:37:44,780 --> 04:37:50,820
But, I mean, does that imply you tend to do one thing per day?

2081
04:37:50,820 --> 04:37:51,820
Correct.

2082
04:37:51,820 --> 04:37:57,260
So then we need more commits, because often I actually jump from thing to thing.

2083
04:37:57,260 --> 04:37:59,700
I wish I would just work on one day and one thing the other day.

2084
04:37:59,700 --> 04:38:02,140
Yeah.

2085
04:38:02,140 --> 04:38:04,140
I mean, like I've said, I think it really

2086
04:38:04,140 --> 04:38:06,740
depends on the project size and what it is.

2087
04:38:06,740 --> 04:38:11,020
So we're teaching you some of the basics here.

2088
04:38:11,020 --> 04:38:13,820
But how to apply it to your own work,

2089
04:38:13,820 --> 04:38:19,860
well, that is something that you will figure out.

2090
04:38:19,860 --> 04:38:22,900
And I mean, it's OK to do it wrong also.

2091
04:38:22,900 --> 04:38:25,580
We talk so much about the right way to do things.

2092
04:38:25,580 --> 04:38:32,980
But doing anything and then seeing what works or doesn't work is even better.

2093
04:38:33,180 --> 04:38:40,020
I mean, that's how I've learned most of what I know by doing it wrong many times.

2094
04:38:40,220 --> 04:38:42,460
So, yeah, I fully agree.

2095
04:38:42,660 --> 04:38:45,540
I want to have a quick peek here at the what to avoid.

2096
04:38:45,740 --> 04:38:47,820
Maybe there's an interesting topic that we can talk about.

2097
04:38:48,020 --> 04:38:50,100
Yeah, that's good.

2098
04:38:50,300 --> 04:38:52,740
There is a lot of text, but

2099
04:38:52,740 --> 04:39:01,740
I think this is something that well many, many will identify with I, the code is never finished it's always unfinished.

2100
04:39:01,740 --> 04:39:06,740
It's, it's ugly. It's okay.

2101
04:39:06,740 --> 04:39:09,740
Just commit, share it, nobody will judge.

2102
04:39:09,740 --> 04:39:13,740
Don't postpone it just because it's unfinished.

2103
04:39:13,740 --> 04:39:33,740
I can give some metaphors. So when we've been hiring people, I've had to look at a lot of repositories, and I'd say, okay, so this is like practical advice. If you're thinking, oh, I don't want to share ugly looking stuff because people will judge me.

2104
04:39:33,740 --> 04:39:39,380
Well, when you're hiring people, you're doing judging.

2105
04:39:39,380 --> 04:39:46,380
And I would rather see a few, or maybe one really good project that shows this person

2106
04:39:46,380 --> 04:39:55,660
knows how to do things well, and then a lot of small, ugly projects, meaning, oh yeah,

2107
04:39:55,660 --> 04:40:00,780
like they're just, like they're not just doing, they're not too overly perfect, they're able

2108
04:40:00,780 --> 04:40:10,580
to actually track stuff and keep it, you know, that they understand that, wait, how would

2109
04:40:10,580 --> 04:40:17,960
I say this? So they're not just showing their perfect thing, but they believe in openness

2110
04:40:17,960 --> 04:40:28,860
for everything. And they know that it's better to share. And also, I mean, if you look at

2111
04:40:28,860 --> 04:40:33,980
history and it starts ugly and gets better, that's completely normal also.

2112
04:40:36,940 --> 04:40:43,420
And I would never judge anyone for that. I would actually, well, I would judge them positively

2113
04:40:43,420 --> 04:40:50,780
by thinking, okay, this person knows to start recording early, as opposed to something that

2114
04:40:50,780 --> 04:40:59,620
has one commit that's the final product, and then nothing else. I mean, I'm not relying

2115
04:40:59,620 --> 04:41:01,100
on that for anything.

2116
04:41:01,100 --> 04:41:11,300
That's a great point. I wouldn't mind at all ugly commits or ugly code. One thing I would

2117
04:41:11,300 --> 04:41:18,860
maybe look at is how do people communicate? So how do they review other people's code?

2118
04:41:18,860 --> 04:41:24,700
Is it done in a nice friendly way, in a constructive way?

2119
04:41:24,700 --> 04:41:31,520
So there is a lot of communication in issues and in pull requests and in pull request discussion.

2120
04:41:31,520 --> 04:41:35,340
And these days we often work collaboratively.

2121
04:41:35,340 --> 04:41:36,980
Yeah.

2122
04:41:36,980 --> 04:41:44,340
There's these last two good questions, or last two questions that are good.

2123
04:41:44,340 --> 04:41:48,100
Is there a way to do automatic git commit to avoid losing work?

2124
04:41:48,100 --> 04:41:54,780
So once I saw some sort of thing that it would hook into an editor and on every save it would

2125
04:41:54,780 --> 04:42:00,860
do another git commit on like a work in progress branch or something like that.

2126
04:42:00,860 --> 04:42:11,400
I haven't used that or seen it again, but if you want you can probably do similar things.

2127
04:42:11,400 --> 04:42:17,060
Maybe another way to do it is you can run git add more often.

2128
04:42:17,060 --> 04:42:25,560
So once you do get add, it stores a copy and it's hard to figure out where it's storing,

2129
04:42:25,560 --> 04:42:34,780
but it is actually stored somewhere.

2130
04:42:34,780 --> 04:42:39,540
And with enough work, you can probably find it again if you happen to completely mess things

2131
04:42:39,540 --> 04:42:40,540
up.

2132
04:42:40,540 --> 04:42:48,540
Indeed, that's, that's how I often work. I use the staging, I stage often. Anytime it's

2133
04:42:48,540 --> 04:42:54,140
an improvement, I stage it. But when I feel it is an improvement, but not yet a commit,

2134
04:42:54,140 --> 04:43:00,020
stage, stage, stage, and then a commit, I don't use anything automatic. Maybe now with

2135
04:43:00,020 --> 04:43:04,820
AI, it will soon do these things for us. We will just, well, we will not even write code.

2136
04:43:04,820 --> 04:43:06,660
it will write the code and do the commits,

2137
04:43:06,660 --> 04:43:11,660
but so I don't use any automatic committing.

2138
04:43:13,140 --> 04:43:14,900
How about the joining commits?

2139
04:43:14,900 --> 04:43:17,380
We have an episode on the more advanced topics,

2140
04:43:17,380 --> 04:43:20,460
which we will not go through,

2141
04:43:20,460 --> 04:43:22,220
but I want to show you what it is.

2142
04:43:24,180 --> 04:43:26,180
So here the optional episodes can,

2143
04:43:26,180 --> 04:43:27,020
if you're interested,

2144
04:43:27,020 --> 04:43:30,220
have a look at what is this thing staging area

2145
04:43:30,220 --> 04:43:33,820
and how can you undo recover from situations?

2146
04:43:33,820 --> 04:43:43,780
And then you will learn about git reset where you can do lots of these things like moving

2147
04:43:43,780 --> 04:43:50,340
commits around, reordering them, joining them, moving them to a different branch.

2148
04:43:50,340 --> 04:43:54,340
So all of this is possible.

2149
04:43:54,340 --> 04:43:57,860
We should also not forget to copy the feedback form into our notes.

2150
04:43:57,860 --> 04:43:58,860
Yes.

2151
04:43:58,860 --> 04:44:00,780
I'm just trying to find it.

2152
04:44:00,780 --> 04:44:02,160
We have it somewhere.

2153
04:44:05,620 --> 04:44:07,380
Okay, I almost have it.

2154
04:44:07,380 --> 04:44:11,820
I will copy it in, but let's continue the discussion.

2155
04:44:11,820 --> 04:44:13,860
We still have five minutes, but I want,

2156
04:44:13,860 --> 04:44:15,300
oh, somebody's on it, good.

2157
04:44:18,500 --> 04:44:20,060
Here it is.

2158
04:44:20,060 --> 04:44:24,500
So tell us what went well today, what didn't go well today,

2159
04:44:24,500 --> 04:44:26,380
what we need to improve for next time,

2160
04:44:26,380 --> 04:44:30,380
And whatever we can fix already for tomorrow, we will.

2161
04:44:30,380 --> 04:44:34,380
Did you all enjoy

2162
04:44:34,380 --> 04:44:38,380
this RStudio track? So we did it

2163
04:44:38,380 --> 04:44:42,380
relatively late at night, last night.

2164
04:44:42,380 --> 04:44:46,380
Based on feedback and seeing

2165
04:44:46,380 --> 04:44:50,380
how many people it would help.

2166
04:44:50,380 --> 04:44:54,380
So we can't make all of these different tracks perfect,

2167
04:44:54,380 --> 04:45:05,140
perfect, but is it worth it?

2168
04:45:05,140 --> 04:45:10,780
So I'm adding a new poll there, helpful.

2169
04:45:10,780 --> 04:45:11,780
And it is work in progress.

2170
04:45:11,780 --> 04:45:18,180
I mean, you notice that some things are not totally smooth yet because some of the changes

2171
04:45:18,180 --> 04:45:22,100
were last minute.

2172
04:45:22,100 --> 04:45:23,580
So if you look at tomorrow's exercises,

2173
04:45:23,580 --> 04:45:24,540
there is still work to be done.

2174
04:45:24,540 --> 04:45:27,460
So this afternoon we will add some screenshots

2175
04:45:27,460 --> 04:45:31,660
and solutions, but we have really interesting

2176
04:45:32,820 --> 04:45:34,700
and real life exercises for tomorrow

2177
04:45:34,700 --> 04:45:36,000
where we will collaborate.

2178
04:45:37,580 --> 04:45:42,580
Those of you who don't have an exercise team

2179
04:45:42,660 --> 04:45:45,320
or are not in a exercise room.

2180
04:45:45,320 --> 04:45:48,260
So those of you who participate here on your own,

2181
04:45:48,260 --> 04:45:49,580
you can still collaborate with us.

2182
04:45:49,580 --> 04:45:51,480
So hopefully you got an email from me.

2183
04:45:52,100 --> 04:45:57,220
If you signed up today, I will hopefully send it later.

2184
04:45:57,220 --> 04:46:02,100
And then there are instructions on how you can join, because we will need to add you

2185
04:46:02,100 --> 04:46:09,380
to an exercise repository so that we can all collaborate inside it.

2186
04:46:09,380 --> 04:46:13,860
Those of you who are part of a group and part of a team, I mean, lucky you, thanks also

2187
04:46:13,860 --> 04:46:22,060
to the team leaders and to those who help the local rooms and groups to help out, especially

2188
04:46:22,060 --> 04:46:28,860
because we try here really new material. This is also not so easy for all the team leaders

2189
04:46:28,860 --> 04:46:34,660
and helpers. It's really appreciated.

2190
04:46:34,660 --> 04:46:39,300
Should we write news for day two and what people need to do to prepare for day three

2191
04:46:39,300 --> 04:46:44,820
already before we go. So I listed, we did the things which are listed on the schedule.

2192
04:46:45,700 --> 04:46:53,780
We added links to the specific episodes we covered. Tomorrow we do a different lesson,

2193
04:46:53,780 --> 04:46:58,340
it's called Git Collaborative. It's basically the same kind of things, but it's really all

2194
04:46:58,340 --> 04:47:06,740
about working on these bigger projects together. So basically how to, a lot about pull requests

2195
04:47:06,740 --> 04:47:13,460
and central repositories and reviewing code and stuff like that. Is there any extra preparation

2196
04:47:13,460 --> 04:47:21,940
for that? Can it all be done through the GitHub web interface or the other methods?

2197
04:47:23,460 --> 04:47:30,980
Yeah, it will build on. Tomorrow we'll build on today and on yesterday. So for those who want to

2198
04:47:30,980 --> 04:47:33,900
to work on the command line,

2199
04:47:33,900 --> 04:47:38,060
we assume that you are able to, to clone,

2200
04:47:38,060 --> 04:47:39,500
and you are able to push.

2201
04:47:39,500 --> 04:47:42,560
And today we practice these two things.

2202
04:47:42,560 --> 04:47:45,500
So in other words, for those on the command line,

2203
04:47:45,500 --> 04:47:50,000
we hope that either the SSH protocol

2204
04:47:50,000 --> 04:47:52,560
or the Git credential manager is working.

2205
04:47:55,340 --> 04:47:59,220
It will be possible to do everything tomorrow only on GitHub.

2206
04:47:59,220 --> 04:48:02,500
it will be also possible and relatively easy

2207
04:48:02,500 --> 04:48:03,900
to follow on VS Code.

2208
04:48:05,540 --> 04:48:07,420
If you are already curious what the exercises are,

2209
04:48:07,420 --> 04:48:09,980
you can find them on top of this page.

2210
04:48:09,980 --> 04:48:12,140
We have a list of exercises you can browse,

2211
04:48:12,140 --> 04:48:14,300
but you will see that there is a lot of details missing,

2212
04:48:14,300 --> 04:48:15,960
but the big picture is there.

2213
04:48:18,860 --> 04:48:20,420
A list of exercises.

2214
04:48:20,420 --> 04:48:23,320
So tomorrow we will collaborate within the same repository,

2215
04:48:26,060 --> 04:48:28,180
but then we will also learn how to contribute changes

2216
04:48:28,180 --> 04:48:31,080
to repositories that belong to other people.

2217
04:48:31,080 --> 04:48:32,480
What, how to do it technically,

2218
04:48:32,480 --> 04:48:35,380
but also how to do it, like, what is the etiquette there?

2219
04:48:36,680 --> 04:48:38,340
And then we practice code review.

2220
04:48:39,620 --> 04:48:41,880
How do, how can you review somebody else's code?

2221
04:48:41,880 --> 04:48:44,280
How can you give suggestions to changes?

2222
04:48:44,280 --> 04:48:46,760
And how can we then implement these changes

2223
04:48:47,660 --> 04:48:51,840
without having to open a new pull request?

2224
04:48:51,840 --> 04:48:54,720
We will practice this inside the same pull request.

2225
04:48:54,720 --> 04:48:55,760
We will have a discussion

2226
04:48:55,760 --> 04:48:58,520
and we will have these suggestions and improvements.

2227
04:48:58,520 --> 04:49:00,160
And it's a really important technique,

2228
04:49:00,160 --> 04:49:02,160
whether you are on GitHub or on GitLab.

2229
04:49:05,280 --> 04:49:06,120
Yeah.

2230
04:49:07,280 --> 04:49:09,880
And we really have designed this where,

2231
04:49:09,880 --> 04:49:12,960
like our idea, like we need to teach the local things,

2232
04:49:12,960 --> 04:49:15,580
VS code, command line, and so on.

2233
04:49:15,580 --> 04:49:19,360
So our idea was we start with day one GitHub,

2234
04:49:19,360 --> 04:49:22,560
and then we start showing the local things other days.

2235
04:49:22,560 --> 04:49:29,560
And, even though we have these other paths there, unfortunately we can't support everything

2236
04:49:29,560 --> 04:49:32,320
as well.

2237
04:49:32,320 --> 04:49:41,680
But we hope that we give a base where you can go to other things and follow up yourself.

2238
04:49:41,680 --> 04:49:49,040
Yeah, I'm really looking forward to it.

2239
04:49:49,040 --> 04:49:51,880
So I think that's all from me.

2240
04:49:51,880 --> 04:49:58,240
How about a lot, a big thank you to [Name] and [Name] and everybody else helping.

2241
04:49:58,240 --> 04:49:59,240
Yes.

2242
04:49:59,240 --> 04:50:01,480
Any final words for me from you two?

2243
04:50:01,480 --> 04:50:07,920
Not really, I guess it's time we should get going, [Name].

2244
04:50:07,920 --> 04:50:08,920
Yeah.

2245
04:50:08,920 --> 04:50:10,760
Nothing more to add, really.

2246
04:50:10,760 --> 04:50:14,000
I think we're covered, that was all good.

2247
04:50:14,000 --> 04:50:15,000
Yeah.

2248
04:50:15,000 --> 04:50:16,000
Good.

2249
04:50:16,000 --> 04:50:17,000
Thanks, everybody.

2250
04:50:17,000 --> 04:50:18,000
Really looking forward to tomorrow.

2251
04:50:18,000 --> 04:50:19,000
It will be exciting.

2252
04:50:19,000 --> 04:50:21,600
And yeah, exciting lesson coming up.

2253
04:50:21,600 --> 04:50:24,600
Yes. Thanks so much.

2254
04:50:24,600 --> 04:50:27,600
Okay. Bye.

2255
04:50:27,600 --> 04:50:28,600
Bye.

2256
04:50:28,600 --> 04:50:29,600
Bye.

