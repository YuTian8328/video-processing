1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:18:30,000 --> 00:18:35,000
music

18
00:18:35,000 --> 00:18:40,000
music

19
00:18:40,000 --> 00:18:45,000
music

20
00:18:45,000 --> 00:18:50,000
music

21
00:18:50,000 --> 00:18:55,000
music

22
00:18:55,000 --> 00:19:04,000
Every mistake you can think of that we will also go through today, I finally decided to go and spend some time reading about Git.

23
00:19:07,000 --> 00:19:18,000
Yeah, I know the feeling. Anyway, I guess it is 10 o'clock now, so I will head off and [Name] can start with the introduction.

24
00:19:18,000 --> 00:19:20,000
Will you play the jingle?

25
00:19:20,000 --> 00:19:21,000
Should I?

26
00:19:21,000 --> 00:19:23,000
Yeah, let's play the jingle.

27
00:19:23,000 --> 00:19:27,400
Okay, see you shortly.

28
00:19:30,400 --> 00:19:32,400
Let's see, how does this go?

29
00:40:53,000 --> 00:41:13,840
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,

30
00:41:13,840 --> 00:41:22,360
25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 40, 41, 42, 42, 43,

31
00:41:22,360 --> 00:41:27,480
we always need volunteers and partners to continue making this also a success in the future.

32
00:41:28,120 --> 00:41:32,760
And we are very happy to also welcome new institutional partners.

33
00:41:34,120 --> 00:41:39,880
And then if you like this workshop, please share your experiences about it on social media

34
00:41:40,840 --> 00:41:46,920
with this Code Refinery hashtag. And we are also on Mustard on Twitter and LinkedIn.

35
00:41:46,920 --> 00:41:50,000
And now I've already taken a few too many minutes,

36
00:41:50,000 --> 00:41:54,200
so I will give over right away to [Name] and [Name],

37
00:41:54,200 --> 00:41:59,200
who will guide you to our first steps into version control.

38
00:42:02,200 --> 00:42:03,040
Thanks so much, Anatole.

39
00:42:03,040 --> 00:42:05,000
Let me take the screen,

40
00:42:05,000 --> 00:42:08,440
and we should also tell again who we are,

41
00:42:08,440 --> 00:42:10,040
the instructors, just a sec.

42
00:42:12,280 --> 00:42:13,600
I have the screen share.

43
00:42:15,360 --> 00:42:16,200
So hi to everybody.

44
00:42:16,200 --> 00:42:18,340
It's so nice to see so many people on the document

45
00:42:18,340 --> 00:42:19,740
and on stream.

46
00:42:19,740 --> 00:42:21,080
We are so excited about this workshop.

47
00:42:21,080 --> 00:42:25,380
My name is Sadovan and together with Gago,

48
00:42:25,380 --> 00:42:30,340
we are today teaching Git from Tromso, Northern Norway.

49
00:42:30,340 --> 00:42:31,500
It's snowing here.

50
00:42:32,700 --> 00:42:36,940
I work with the Code Refinery Project since its start.

51
00:42:36,940 --> 00:42:40,960
So this is now, I think, eight years that we do this.

52
00:42:42,300 --> 00:42:45,900
In my work, I like teaching, programming,

53
00:42:45,900 --> 00:42:48,900
helping researchers and students with their coding,

54
00:42:49,860 --> 00:42:51,900
so research software engineering,

55
00:42:51,900 --> 00:42:55,820
and also supporting people in computing.

56
00:42:59,380 --> 00:43:04,100
Yes, and maybe a quick hello from my co-instructor [Name].

57
00:43:05,580 --> 00:43:06,980
Yeah, hello from my side.

58
00:43:06,980 --> 00:43:08,300
My name is [Name].

59
00:43:08,300 --> 00:43:10,860
I'm working with the same group as [Name]

60
00:43:10,860 --> 00:43:13,060
here at UIT in TromsÃ¸, Norway.

61
00:43:13,060 --> 00:43:14,620
So it's the high-performance computing group,

62
00:43:14,620 --> 00:43:16,800
but also the research engineering group.

63
00:43:16,800 --> 00:43:18,300
I started recently and before that,

64
00:43:18,300 --> 00:43:20,380
I did a postdoc here at the same university

65
00:43:20,380 --> 00:43:22,060
in plasma physics in my case.

66
00:43:22,060 --> 00:43:24,740
So I've worked a few years as a researcher as well.

67
00:43:25,980 --> 00:43:27,780
Yeah, looking forward to this course.

68
00:43:29,100 --> 00:43:31,940
And since we both have been researchers,

69
00:43:31,940 --> 00:43:33,620
we know how it feels.

70
00:43:33,620 --> 00:43:38,620
We both haven't kind of officially learned coding

71
00:43:39,140 --> 00:43:40,540
in our university curriculum.

72
00:43:40,540 --> 00:43:43,200
We did research and learned it a bit on the side.

73
00:43:43,200 --> 00:43:44,040
We know the pain.

74
00:43:44,040 --> 00:43:55,340
know what is needed. Before we go into get a little bit what to expect and how to participate.

75
00:43:55,340 --> 00:44:04,860
So please expect we will do an exercise soon, roughly in 1520 minutes. We will then also

76
00:44:04,860 --> 00:44:12,860
do a break in half an hour. And the two things that I always have open in my browser, and

77
00:44:12,860 --> 00:44:18,860
You can have that maybe open next to the next to the stream on the other half of your screen

78
00:44:18,860 --> 00:44:21,940
is I have the collaborative notes.

79
00:44:21,940 --> 00:44:25,820
So we will be watching these as instructors and please keep the questions coming.

80
00:44:25,820 --> 00:44:30,180
The more you ask, the more you comment, the better it will be.

81
00:44:30,180 --> 00:44:37,620
We are following this and the best way to do it is to ask at the bottom because we already

82
00:44:37,620 --> 00:44:41,020
have so many things open here on my side and on your side.

83
00:44:41,020 --> 00:44:43,660
I will be watching what comes up at the bottom.

84
00:44:43,660 --> 00:44:44,820
So add your questions,

85
00:44:44,820 --> 00:44:46,420
add your comments to the bottom of the page.

86
00:44:46,420 --> 00:44:49,880
You will also find always here where are we at this moment.

87
00:44:51,780 --> 00:44:54,900
The other place that I have as a starting point

88
00:44:54,900 --> 00:44:55,780
is the workshop page.

89
00:44:55,780 --> 00:45:00,220
So if you get lost and you want to find the material,

90
00:45:00,220 --> 00:45:02,540
you can also find it here through the schedule.

91
00:45:03,740 --> 00:45:06,540
And we have now finished the introduction section.

92
00:45:06,540 --> 00:45:07,500
Thanks to [Name].

93
00:45:07,500 --> 00:45:10,340
And now we will talk about Git and version control.

94
00:45:11,020 --> 00:45:15,660
And I will now go into the first link, which is also in the collaborative notes.

95
00:45:19,900 --> 00:45:25,020
And I want to tell you a little bit what to expect today and tomorrow and on Thursday.

96
00:45:26,940 --> 00:45:29,740
There is a side panel here with lots of episodes.

97
00:45:30,460 --> 00:45:34,780
We will not do all of them. There is a lot more than we chose to present.

98
00:45:34,780 --> 00:45:43,360
But what we will present you is the most important parts.

99
00:45:43,360 --> 00:45:46,540
The exciting thing is that we have a completely new Git lesson.

100
00:45:46,540 --> 00:45:47,780
This is the first time we present it.

101
00:45:47,780 --> 00:45:49,580
We have changed everything.

102
00:45:49,580 --> 00:45:55,660
But hopefully to the better, because our goal was to make it possible for everybody to participate.

103
00:45:55,660 --> 00:46:01,460
And you can actually choose your path, and I will tell you more about it in a moment.

104
00:46:01,460 --> 00:46:03,800
I will now scroll down a little bit

105
00:46:03,800 --> 00:46:05,640
just to give you an overview

106
00:46:05,640 --> 00:46:07,440
and zoom in to make it more readable

107
00:46:11,280 --> 00:46:13,220
so that you know what to expect today,

108
00:46:13,220 --> 00:46:14,880
what to expect tomorrow.

109
00:46:14,880 --> 00:46:17,960
We will now very briefly motivate why we do this.

110
00:46:19,360 --> 00:46:24,360
And then the goal for today is these three episodes

111
00:46:25,600 --> 00:46:28,100
to browse an existing project,

112
00:46:28,100 --> 00:46:30,400
to make changes to an existing project,

113
00:46:31,460 --> 00:46:36,000
and to merge changes that have been done

114
00:46:36,000 --> 00:46:38,840
on different branches.

115
00:46:41,100 --> 00:46:45,060
So today in day one, we learn how do we contribute

116
00:46:45,060 --> 00:46:47,780
to an existing project that already exists.

117
00:46:47,780 --> 00:46:50,900
And we imagine that today and tomorrow,

118
00:46:50,900 --> 00:46:54,360
we want to learn Git for even if you work on your own,

119
00:46:54,360 --> 00:46:56,460
even if you don't collaborate with others.

120
00:46:56,460 --> 00:46:58,780
What are the most important techniques?

121
00:46:58,780 --> 00:47:06,260
Tomorrow. Okay. And each of these three will have one exercise. So, so please expect 20

122
00:47:06,260 --> 00:47:12,420
minutes, 25 minute exercise blocks in each of these three sessions today. And then tomorrow

123
00:47:12,420 --> 00:47:20,180
we will move from, we will move the existing project and learn how do we work locally on

124
00:47:20,180 --> 00:47:26,940
our computer? How do we inspect history of a project locally on our computer? And then

125
00:47:26,940 --> 00:47:31,260
and super important since many of you already have a project,

126
00:47:31,260 --> 00:47:33,980
you have a script, you have some code,

127
00:47:33,980 --> 00:47:35,380
or you are about to start one.

128
00:47:35,380 --> 00:47:38,420
How do you turn this project into a Git repository

129
00:47:38,420 --> 00:47:39,260
and share it?

130
00:47:39,260 --> 00:47:42,360
This is so important because we want to make it findable

131
00:47:42,360 --> 00:47:43,200
and reusable.

132
00:47:45,740 --> 00:47:47,960
So that's the plan.

133
00:47:47,960 --> 00:47:50,440
I will now go into motivation.

134
00:47:53,700 --> 00:47:54,940
Why do we do this?

135
00:47:54,940 --> 00:47:57,620
So our goal is nobody leaves the workshop

136
00:47:57,620 --> 00:47:59,700
without starting some form of version control.

137
00:47:59,700 --> 00:48:02,060
We want to really get you excited about this.

138
00:48:04,500 --> 00:48:06,700
And this will be a really short overview.

139
00:48:06,700 --> 00:48:08,580
And what is Git?

140
00:48:10,700 --> 00:48:14,500
And I see on the document that many of you are new to Git.

141
00:48:14,500 --> 00:48:19,380
You can think of it as a tool that keeps track of changes.

142
00:48:21,340 --> 00:48:24,820
And we will learn how to keep track of changes on the web.

143
00:48:24,820 --> 00:48:27,980
And here's a screenshot and you can even browse

144
00:48:27,980 --> 00:48:29,040
this example repository,

145
00:48:29,040 --> 00:48:32,080
which I think is some of my projects.

146
00:48:32,080 --> 00:48:36,380
So you can open it up in your browser and browse

147
00:48:36,380 --> 00:48:39,460
and see what I was doing in 2017 and 2021.

148
00:48:41,420 --> 00:48:46,060
We keep track of changes that we apply to the project.

149
00:48:46,060 --> 00:48:48,880
And then whenever I want to go back

150
00:48:48,880 --> 00:48:50,420
to a previous version, I can.

151
00:48:52,140 --> 00:48:54,360
Some of you will also experiment with this

152
00:48:54,360 --> 00:48:56,540
in your command line terminal.

153
00:48:56,540 --> 00:48:59,040
Some of you will choose to do that in your editor.

154
00:49:01,440 --> 00:49:03,400
So one way to think about Git would be,

155
00:49:03,400 --> 00:49:05,080
it's like an undo button.

156
00:49:05,080 --> 00:49:08,860
If you ever want to go back, something didn't work out,

157
00:49:08,860 --> 00:49:12,740
you want to try an early version, you can do an undo,

158
00:49:13,680 --> 00:49:15,480
but it can do a lot more than that.

159
00:49:17,960 --> 00:49:22,840
And here are some questions that I have either heard

160
00:49:22,840 --> 00:49:27,160
or I have asked, and maybe you recognize some of them.

161
00:49:27,160 --> 00:49:30,620
For instance, oh, it broke.

162
00:49:30,620 --> 00:49:33,120
Oof, hopefully I have a working version somewhere.

163
00:49:34,100 --> 00:49:36,300
Or can you please send me the latest version?

164
00:49:37,380 --> 00:49:39,920
Or where is the latest version?

165
00:49:39,920 --> 00:49:43,020
Maybe you have asked, which version are you using?

166
00:49:44,280 --> 00:49:45,820
Which version have the authors used

167
00:49:45,820 --> 00:49:48,620
in the paper that I'm trying to reproduce?

168
00:49:48,620 --> 00:49:51,420
Or you found a problem and you want to know

169
00:49:51,420 --> 00:49:52,740
how long was it there?

170
00:49:52,840 --> 00:50:00,960
And gets and version control is the answer to these questions.

171
00:50:00,960 --> 00:50:06,980
So it can do a lot more than just rollback rollback is like an undo.

172
00:50:06,980 --> 00:50:16,320
One thing we will learn already today is how to branch and merge and how to, and then on,

173
00:50:16,320 --> 00:50:20,200
on Thursday, we will do collaboration.

174
00:50:20,200 --> 00:50:21,400
But in order to do collaboration,

175
00:50:21,400 --> 00:50:23,040
we have to understand branching.

176
00:50:24,200 --> 00:50:27,400
It actually cannot go in Git.

177
00:50:29,400 --> 00:50:30,920
We have to.

178
00:50:30,920 --> 00:50:31,760
And what is branching?

179
00:50:31,760 --> 00:50:35,920
We try to visualize it with these cute gophers.

180
00:50:37,520 --> 00:50:42,280
In Git, you can work on different features

181
00:50:42,280 --> 00:50:43,560
inside the same project.

182
00:50:45,720 --> 00:50:47,320
And for this, you can create

183
00:50:47,320 --> 00:50:48,880
these different development branches.

184
00:50:48,880 --> 00:50:53,240
So on this branch, you can implement a new feature

185
00:50:53,240 --> 00:50:55,360
to give this gopher sunglasses.

186
00:50:55,360 --> 00:50:59,080
And on a different branch, it could be the graduation hat.

187
00:50:59,080 --> 00:51:01,600
And then you can so-called merge these changes

188
00:51:01,600 --> 00:51:04,400
into the main branch, recombine them.

189
00:51:05,800 --> 00:51:08,240
So we don't have to wait for each other.

190
00:51:08,240 --> 00:51:09,840
Also, if you want to experiment with something,

191
00:51:09,840 --> 00:51:12,520
you can create this branch, experiment,

192
00:51:12,520 --> 00:51:15,160
and then you can merge it or not.

193
00:51:15,160 --> 00:51:20,160
Different people can work on the same code, same project,

194
00:51:20,160 --> 00:51:21,680
without interfering.

195
00:51:21,680 --> 00:51:25,240
And you can experiment with an idea and discard it

196
00:51:25,240 --> 00:51:27,000
if it turns out it was a bad idea.

197
00:51:27,920 --> 00:51:29,480
And Git is really good at that.

198
00:51:31,720 --> 00:51:33,280
And finally, reproducibility.

199
00:51:33,280 --> 00:51:36,280
This is really about making reproducible science,

200
00:51:36,280 --> 00:51:39,180
reproducible computations and programs.

201
00:51:39,180 --> 00:51:42,760
And if somebody asks you about your results

202
00:51:42,760 --> 00:51:45,860
from some time ago, can you get the same results now?

203
00:51:46,800 --> 00:51:50,680
And often you will want to reproduce somebody else's code

204
00:51:50,680 --> 00:51:53,540
and then you are really happy if you can find

205
00:51:53,540 --> 00:51:56,640
the precise version that the authors have used

206
00:51:56,640 --> 00:51:58,960
in the paper you try to reproduce.

207
00:51:59,840 --> 00:52:02,440
And there will be a day when you find a problem

208
00:52:02,440 --> 00:52:03,760
and you will want to know

209
00:52:04,640 --> 00:52:08,060
when precisely this bug got introduced.

210
00:52:09,560 --> 00:52:12,520
Was it before I published a nature paper

211
00:52:12,520 --> 00:52:13,360
or was it after?

212
00:52:13,360 --> 00:52:15,060
I'm hoping it was after,

213
00:52:15,060 --> 00:52:18,320
but at least I have a tool that tells me

214
00:52:19,960 --> 00:52:21,660
when exactly it was introduced.

215
00:52:23,200 --> 00:52:25,320
And we will, I will not go here to details

216
00:52:25,320 --> 00:52:27,560
because we will actually practice this

217
00:52:27,560 --> 00:52:28,580
in the first exercise.

218
00:52:28,580 --> 00:52:30,640
You will be able to explore these tools.

219
00:52:30,640 --> 00:52:32,340
You will see them in real life.

220
00:52:35,360 --> 00:52:36,360
Just looking at the time,

221
00:52:36,360 --> 00:52:38,260
I think we are still doing pretty okay.

222
00:52:38,260 --> 00:52:43,260
Git also makes it easier for me to talk about code.

223
00:52:43,260 --> 00:52:46,180
If I want to share with somebody a few lines of my project,

224
00:52:47,100 --> 00:52:48,220
I can send them a link

225
00:52:49,700 --> 00:52:51,260
and you can actually visit this permalink.

226
00:52:51,260 --> 00:52:53,860
So if I want to tell you about this code that I wrote,

227
00:52:53,860 --> 00:52:56,460
well, you can open it up in your browser

228
00:52:56,460 --> 00:52:58,640
and you will see exactly what I'm talking about.

229
00:52:58,640 --> 00:53:02,620
It's so much nicer than describing to you,

230
00:53:02,620 --> 00:53:05,260
find a code, please go to the file, so-and-so,

231
00:53:05,260 --> 00:53:09,420
search for the line that contains this text.

232
00:53:09,420 --> 00:53:11,140
Oh, but please make sure that you use the version

233
00:53:11,140 --> 00:53:12,640
from August, 2023.

234
00:53:15,540 --> 00:53:17,220
And it's not just about software.

235
00:53:17,220 --> 00:53:21,060
We can, with Git, we can version snapshots.

236
00:53:21,060 --> 00:53:22,940
We can create these snapshots for software,

237
00:53:22,940 --> 00:53:27,940
for scripts, documents, manuscripts, websites,

238
00:53:28,060 --> 00:53:29,340
configuration files.

239
00:53:29,340 --> 00:53:30,900
In the Code Refinery project,

240
00:53:30,900 --> 00:53:33,020
we kind of use it for everything.

241
00:53:33,020 --> 00:53:37,100
So the lesson that you see is on version control,

242
00:53:37,100 --> 00:53:37,940
it's on Git.

243
00:53:39,180 --> 00:53:42,420
The project website is on version control

244
00:53:42,420 --> 00:53:45,060
and that will become all clear

245
00:53:45,060 --> 00:53:47,780
as we show you the tools that we use

246
00:53:47,780 --> 00:53:49,400
over the next two weeks.

247
00:53:54,020 --> 00:53:55,180
Git is not the only tool,

248
00:53:55,180 --> 00:53:57,100
but we show you a Git and GitHub

249
00:53:57,100 --> 00:54:00,620
because they are the most popular versions of this.

250
00:54:00,620 --> 00:54:05,500
I think I will not spend more time on the motivation.

251
00:54:05,500 --> 00:54:14,900
I want to see whether there are any questions and there are not too many.

252
00:54:14,900 --> 00:54:16,180
So please ask questions here.

253
00:54:16,180 --> 00:54:18,260
You will make really the.

254
00:54:18,260 --> 00:54:20,820
We want to keep it really interactive to see.

255
00:54:20,820 --> 00:54:24,420
We don't really see you in the stream.

256
00:54:24,420 --> 00:54:26,940
We hope you are doing well.

257
00:54:26,940 --> 00:54:27,940
But one way.

258
00:54:27,940 --> 00:54:28,940
Already a question.

259
00:54:28,940 --> 00:54:34,100
There was already one question asking about why GitHub and not GitLab, for instance, so

260
00:54:34,100 --> 00:54:36,700
maybe we could elaborate on that a bit.

261
00:54:36,700 --> 00:54:37,700
Yes.

262
00:54:37,700 --> 00:54:38,700
That's a very good question.

263
00:54:38,700 --> 00:54:40,140
Why do we do that?

264
00:54:40,140 --> 00:54:48,020
And when you go back to the lesson overview, we have all this blue box that answers it

265
00:54:48,020 --> 00:54:50,660
because it is a really good question.

266
00:54:50,660 --> 00:54:53,500
And we show you GitHub.

267
00:54:53,500 --> 00:54:54,940
So we are not sponsored by GitHub.

268
00:54:54,940 --> 00:54:56,780
We have no affiliation with GitHub.

269
00:54:56,780 --> 00:55:00,020
we show you the service, which is owned by Microsoft,

270
00:55:00,020 --> 00:55:00,980
which is proprietary,

271
00:55:00,980 --> 00:55:05,980
because it is the most popular web hosting for Git.

272
00:55:06,660 --> 00:55:09,300
And even if you choose other services,

273
00:55:09,300 --> 00:55:11,420
like GitLab, like Bitbucket, and there are more,

274
00:55:11,420 --> 00:55:12,660
and we will link to them,

275
00:55:13,900 --> 00:55:16,860
it's, the probability is high that you

276
00:55:18,740 --> 00:55:21,380
at least use somebody else's code that is on GitHub.

277
00:55:21,380 --> 00:55:23,580
So we find it, it's probably useful for you

278
00:55:23,580 --> 00:55:25,660
if you know how it works.

279
00:55:25,660 --> 00:55:27,540
And all the things that we will learn with GitHub,

280
00:55:27,540 --> 00:55:29,500
they also work with the other services.

281
00:55:30,580 --> 00:55:33,420
And once you get the understanding of how it works,

282
00:55:33,420 --> 00:55:35,700
it will be easy for you to move between those.

283
00:55:43,000 --> 00:55:45,700
Good, thanks for keeping the questions coming.

284
00:55:47,940 --> 00:55:50,740
Maybe just one quick comment about GitHub versus GitHub,

285
00:55:50,740 --> 00:55:52,060
for instance.

286
00:55:52,060 --> 00:55:54,180
My one motivation is also that most of the projects

287
00:55:54,180 --> 00:55:55,980
that you will work with in the future

288
00:55:55,980 --> 00:55:57,740
are most likely on GitHub

289
00:55:57,740 --> 00:56:00,480
if they are publicly developed projects.

290
00:56:00,480 --> 00:56:01,700
So therefore I think it makes sense

291
00:56:01,700 --> 00:56:05,580
to get you familiar with the tools that GitHub provides.

292
00:56:05,580 --> 00:56:08,940
There are some very small differences in how the UI looks,

293
00:56:08,940 --> 00:56:10,820
like the user interface looks on the websites,

294
00:56:10,820 --> 00:56:14,140
but it's nothing that stops you from using it.

295
00:56:19,620 --> 00:56:21,580
And I really appreciate the comments that come in.

296
00:56:21,580 --> 00:56:23,540
we might return to those.

297
00:56:25,140 --> 00:56:26,560
I will now navigate to,

298
00:56:27,820 --> 00:56:30,900
we are almost at the first exercise

299
00:56:32,300 --> 00:56:35,780
and we will start with browsing.

300
00:56:35,780 --> 00:56:37,180
So we will not make any changes yet,

301
00:56:37,180 --> 00:56:39,940
but we will try to get an understanding

302
00:56:39,940 --> 00:56:41,020
of an existing project.

303
00:56:41,020 --> 00:56:43,420
So I will go to this episode here,

304
00:56:43,420 --> 00:56:45,420
copy and browse an existing project.

305
00:56:45,420 --> 00:56:56,380
And please help me pasting the link to the notes.

306
00:56:56,380 --> 00:57:01,660
And we will give you a whoops, we will give you a short intro of what this is.

307
00:57:01,660 --> 00:57:05,460
And then we will send you into an exercise, the exercise, you will be able to do on your

308
00:57:05,460 --> 00:57:07,940
own or with a group.

309
00:57:07,940 --> 00:57:12,220
And then after the exercise, we will take a break.

310
00:57:12,220 --> 00:57:18,800
And then we will discuss the findings.

311
00:57:18,800 --> 00:57:27,340
Here we prepared an existing project for you and the project is, it's a recipe book.

312
00:57:27,340 --> 00:57:33,060
So we will not only learn how Git works, we will also have a nice recipe book of cooking

313
00:57:33,060 --> 00:57:40,260
recipes which you can then use at home in your kitchen.

314
00:57:40,260 --> 00:57:47,580
Our goal is to really give you an understanding of what are the building blocks.

315
00:57:47,580 --> 00:57:50,760
What is really nice about this version that we present now for the very first time is

316
00:57:50,760 --> 00:57:56,960
that we give you different paths, you can choose your own path.

317
00:57:56,960 --> 00:58:04,960
You can spend everything we will do today, you can do on GitHub alone, if you want to.

318
00:58:04,960 --> 00:58:09,760
So all you need is a GitHub account.

319
00:58:09,760 --> 00:58:15,260
If you like for those who don't want to do that on GitHub, who would rather follow on

320
00:58:15,260 --> 00:58:22,300
Visual Studio code, you can then choose to follow that path.

321
00:58:22,300 --> 00:58:26,840
We also offer all the steps to do also on the command line.

322
00:58:26,840 --> 00:58:30,160
So really you can choose.

323
00:58:30,160 --> 00:58:37,840
And in future we plan to add more paths also for Jupyter, RStudio, Spyder, PyCharm, contributions

324
00:58:37,840 --> 00:58:45,020
Welcome and we will start our very first step and I will demonstrate it but you can then

325
00:58:45,020 --> 00:58:54,900
do it in the exercise is I will create a so-called fork and fork is a new term and think of it

326
00:58:54,900 --> 00:58:56,460
as making a copy.

327
00:58:56,460 --> 00:59:02,260
So I will create a copy of something called repository.

328
00:59:02,260 --> 00:59:05,180
And if you want to know a little bit more about what is really a repository you can

329
00:59:05,180 --> 00:59:11,740
even click on these and it will take you to, we have a quick reference and a glossary.

330
00:59:11,740 --> 00:59:16,700
So it will explain you if some of the terms you never heard before, what is a fork? What

331
00:59:16,700 --> 00:59:28,740
is a repository? You can read these nice descriptions. So I will show you that, but I want to tell

332
00:59:28,740 --> 00:59:34,040
you that when you create this copy, you can then choose, we created this recipe book,

333
00:59:34,040 --> 00:59:36,620
But we have two versions of it.

334
00:59:36,620 --> 00:59:39,760
And you can choose which one you copy.

335
00:59:39,760 --> 00:59:46,400
There is this one, the recipe book, and we have one which is called recipe book recorded.

336
00:59:46,400 --> 00:59:50,500
Here on stream, I will only show the recorded one.

337
00:59:50,500 --> 00:59:54,320
And this is just to make sure that those who don't want to, if you don't want your GitHub

338
00:59:54,320 --> 01:00:01,640
account, or anything you do, ever to show up in any recording or stream, then choose

339
01:00:01,640 --> 01:00:03,520
this one.

340
01:00:03,520 --> 01:00:10,440
But it will help us if few people work on this repository, because then we have something

341
01:00:10,440 --> 01:00:13,280
to show here on stream.

342
01:00:13,280 --> 01:00:19,740
Something that you will do then in the exercise is you can open it up in a browser tab.

343
01:00:19,740 --> 01:00:23,200
And assuming that you have a GitHub account that you are logged in, and here we assume

344
01:00:23,200 --> 01:00:27,740
that you went through the install instructions.

345
01:00:27,740 --> 01:00:32,100
The first step you will do is to forget to make a copy and I can see that three copies

346
01:00:32,100 --> 01:00:38,860
already exist. And I will create the fourth one. So what the first step will be to click

347
01:00:38,860 --> 01:00:47,660
on this fork, boom. And then you can copy it into your own user account. And in this

348
01:00:47,660 --> 01:00:54,900
case, this is my user. Yes, I want to keep the name. There is a description. Do I want

349
01:00:54,900 --> 01:01:00,500
to copy the main branch only? Yeah, it doesn't matter. I think I want to copy everything.

350
01:01:00,500 --> 01:01:07,460
not. And we didn't even tell you what is a branch, we will come back to that. So here

351
01:01:07,460 --> 01:01:13,220
doesn't matter so much, but I will, I want to copy everything. And once I create the

352
01:01:13,220 --> 01:01:22,260
fork, I it takes a few seconds. I have my own copy of it. And you can see that this

353
01:01:22,260 --> 01:01:28,140
is your own copy. If on top left, you see your own username. And you can also see that

354
01:01:28,140 --> 01:01:31,780
this has been copied from forked from this place.

355
01:01:31,780 --> 01:01:34,240
And the rest of the exercise will be,

356
01:01:34,240 --> 01:01:37,480
you will do it in this, inside this fork.

357
01:01:43,720 --> 01:01:46,140
So the exercise steps are here.

358
01:01:47,120 --> 01:01:51,340
And we know that you still need to learn how to do this.

359
01:01:51,340 --> 01:01:52,700
So below the exercise,

360
01:01:52,700 --> 01:01:56,700
you can find solutions walkthrough screenshots,

361
01:01:56,700 --> 01:01:58,900
And you can choose your journey.

362
01:01:58,900 --> 01:01:59,820
So choose your path.

363
01:01:59,820 --> 01:02:01,260
Is it maybe GitHub?

364
01:02:01,260 --> 01:02:04,020
So if you are unsure, just take the GitHub.

365
01:02:04,020 --> 01:02:05,500
If you are sure you want something else,

366
01:02:05,500 --> 01:02:07,280
then choose a different path.

367
01:02:09,180 --> 01:02:14,180
And what we expect from you is to get an overview,

368
01:02:14,260 --> 01:02:16,020
browse the commit history.

369
01:02:16,020 --> 01:02:20,200
You will then see, visually see what are commits,

370
01:02:21,260 --> 01:02:22,400
what are the changes.

371
01:02:22,400 --> 01:02:27,400
You will see the network graph.

372
01:02:27,800 --> 01:02:28,800
Maybe let me show you that

373
01:02:28,800 --> 01:02:31,600
so that you know what to look out for.

374
01:02:31,600 --> 01:02:36,600
So something that you will see in this insights network,

375
01:02:39,520 --> 01:02:43,000
you will see that there are these commits,

376
01:02:43,000 --> 01:02:45,040
changes, versions.

377
01:02:45,040 --> 01:02:46,840
You will see that there are branches,

378
01:02:48,020 --> 01:02:49,620
that there are different people.

379
01:02:49,620 --> 01:02:57,820
And then we have a couple of questions for you, like when was a certain recipe in this

380
01:02:57,820 --> 01:03:05,640
recipe book modified last, how many changes, which recipes include a certain ingredient.

381
01:03:05,640 --> 01:03:11,220
So you will learn how to search through our Git repository.

382
01:03:11,220 --> 01:03:19,900
And you will also learn how to find out when a certain certain line of code was modified

383
01:03:19,900 --> 01:03:20,900
last.

384
01:03:20,900 --> 01:03:24,380
So somebody actually modified the guacamole recipe.

385
01:03:24,380 --> 01:03:29,260
And you will find out who added the cilantro to the recipe.

386
01:03:29,260 --> 01:03:30,260
And then some more questions.

387
01:03:30,260 --> 01:03:32,500
Can you use this recipe yourself?

388
01:03:32,500 --> 01:03:36,060
Are you allowed to share modifications?

389
01:03:36,060 --> 01:03:39,820
And also you will learn how to browse issues and so called pull requests.

390
01:03:39,820 --> 01:03:44,300
and you should think about like what this might be good for.

391
01:03:44,300 --> 01:03:45,380
We have hints.

392
01:03:45,380 --> 01:03:48,140
So in each of these steps, there is a hint

393
01:03:48,140 --> 01:03:49,580
and then please go through.

394
01:03:50,980 --> 01:03:52,980
So this is not a spoiler, go through the solution,

395
01:03:52,980 --> 01:03:56,600
go through the walk through and try this out.

396
01:03:57,700 --> 01:04:00,960
And I think we will give you 20 minutes.

397
01:04:01,960 --> 01:04:04,900
And then when we get back, we will take a break.

398
01:04:04,900 --> 01:04:07,840
We will take a 10 minute break after the exercise.

399
01:04:07,840 --> 01:04:11,080
And then after the break, [Name] and me

400
01:04:11,080 --> 01:04:14,280
will show you some of the aspects

401
01:04:14,280 --> 01:04:15,400
that are the most interesting,

402
01:04:15,400 --> 01:04:16,620
maybe the most problematic,

403
01:04:16,620 --> 01:04:19,840
and we will also react to the questions

404
01:04:19,840 --> 01:04:24,180
that you have on the collaborative notes.

405
01:04:24,180 --> 01:04:40,540
Here, on the bottom of the collaborative notes, where we are, what the expectation is.

406
01:04:40,540 --> 01:04:43,140
So this is our first exercise.

407
01:04:43,140 --> 01:04:52,300
It will be not until 55 past, but it will be up until six minutes past and then break.

408
01:04:52,300 --> 01:04:53,420
I will modify that.

409
01:04:55,500 --> 01:04:58,900
Try it out, see you after the exercise,

410
01:04:58,900 --> 01:05:01,120
but then we will go into break

411
01:05:01,120 --> 01:05:03,600
and then we will discuss more after the break.

412
01:05:04,780 --> 01:05:05,900
Let us also know how it's going

413
01:05:05,900 --> 01:05:08,660
through the, during the exercise, have fun.

414
01:05:08,660 --> 01:05:09,560
See you then, bye.

415
01:05:22,300 --> 01:05:24,360
you

416
01:05:52,300 --> 01:05:54,360
you

417
01:06:22,300 --> 01:06:24,360
you

418
01:06:52,300 --> 01:06:54,360
you

419
01:07:22,300 --> 01:07:24,360
you

420
01:07:52,300 --> 01:07:54,360
you

421
01:08:22,300 --> 01:08:24,360
you

422
01:08:52,300 --> 01:08:54,360
you

423
01:09:22,300 --> 01:09:24,360
you

424
01:09:52,300 --> 01:09:54,360
you

425
01:10:22,300 --> 01:10:24,360
you

426
01:10:52,300 --> 01:10:54,360
you

427
01:11:22,300 --> 01:11:24,360
you

428
01:11:52,300 --> 01:11:54,360
you

429
01:12:22,300 --> 01:12:24,360
you

430
01:12:52,300 --> 01:12:54,360
you

431
01:13:22,300 --> 01:13:24,360
you

432
01:13:52,300 --> 01:13:54,360
you

433
01:14:22,300 --> 01:14:24,360
you

434
01:14:52,300 --> 01:14:54,360
you

435
01:15:22,300 --> 01:15:24,360
you

436
01:15:52,300 --> 01:15:54,360
you

437
01:16:22,300 --> 01:16:24,360
you

438
01:16:52,300 --> 01:16:54,360
you

439
01:17:22,300 --> 01:17:24,360
you

440
01:17:52,300 --> 01:17:54,360
you

441
01:18:22,300 --> 01:18:24,360
you

442
01:18:52,300 --> 01:18:54,360
you

443
01:19:22,300 --> 01:19:24,360
you

444
01:19:52,300 --> 01:19:54,360
you

445
01:20:22,300 --> 01:20:24,360
you

446
01:20:52,300 --> 01:20:54,360
you

447
01:21:22,300 --> 01:21:24,360
you

448
01:21:52,300 --> 01:21:54,360
you

449
01:22:22,300 --> 01:22:24,360
you

450
01:22:52,300 --> 01:22:54,360
you

451
01:23:22,300 --> 01:23:24,360
you

452
01:23:52,300 --> 01:23:54,360
you

453
01:33:22,300 --> 01:33:25,300
And I think that's it for this session.

454
01:33:25,300 --> 01:33:26,300
I hope you enjoyed it.

455
01:33:26,300 --> 01:33:27,300
I'll see you next time.

456
01:33:27,300 --> 01:33:28,300
Bye-bye.

457
01:33:28,300 --> 01:33:29,300
Bye.

458
01:33:29,300 --> 01:33:30,300
Bye.

459
01:33:30,300 --> 01:33:31,300
Bye.

460
01:33:31,300 --> 01:33:32,300
Bye.

461
01:33:32,300 --> 01:33:33,300
Bye.

462
01:33:33,300 --> 01:33:34,300
Bye.

463
01:33:34,300 --> 01:33:35,300
Bye.

464
01:33:35,300 --> 01:33:36,300
Bye.

465
01:33:36,300 --> 01:33:37,300
Bye.

466
01:33:37,300 --> 01:33:38,300
Bye.

467
01:33:38,300 --> 01:33:39,300
Bye.

468
01:33:39,300 --> 01:33:40,300
Bye.

469
01:33:40,300 --> 01:33:41,300
Bye.

470
01:33:41,300 --> 01:33:42,300
Bye.

471
01:33:42,300 --> 01:33:43,300
Bye.

472
01:33:43,300 --> 01:33:44,300
Bye.

473
01:33:44,300 --> 01:33:45,300
Bye.

474
01:33:45,300 --> 01:33:46,300
Bye.

475
01:33:46,300 --> 01:33:47,300
Bye.

476
01:33:47,300 --> 01:33:48,300
Bye.

477
01:33:48,300 --> 01:33:49,300
Bye.

478
01:33:49,300 --> 01:33:50,300
Bye.

479
01:33:50,300 --> 01:33:51,300
Bye.

480
01:33:51,300 --> 01:33:53,360
you

481
01:34:21,300 --> 01:34:46,300
All right, and we are back from the break, hopefully.

482
01:34:46,300 --> 01:34:49,980
I'll just try to control the streaming settings

483
01:34:49,980 --> 01:34:51,380
and it's a new thing for me.

484
01:34:51,380 --> 01:34:53,620
So hopefully you're back and everything is good.

485
01:34:53,620 --> 01:34:54,820
I have the screen share.

486
01:34:56,680 --> 01:34:58,260
Hope you had a good break.

487
01:34:58,260 --> 01:35:01,780
Now, I want to show you some of the steps

488
01:35:01,780 --> 01:35:03,500
from the previous exercise

489
01:35:03,500 --> 01:35:05,620
before we move on to the next episode,

490
01:35:05,620 --> 01:35:08,620
because I know that there were many new things.

491
01:35:11,860 --> 01:35:13,100
But it was a choice from us

492
01:35:13,100 --> 01:35:16,360
because we wanted to really kind of throw you

493
01:35:16,360 --> 01:35:18,180
into something existing.

494
01:35:18,180 --> 01:35:22,680
And our hope is that when you see a commit,

495
01:35:22,680 --> 01:35:25,980
you will get an understanding of what it is

496
01:35:25,980 --> 01:35:29,100
instead of us first describing it theoretically.

497
01:35:31,700 --> 01:35:33,460
The other thing that we hope is that

498
01:35:34,460 --> 01:35:36,820
by providing you these different paths,

499
01:35:38,020 --> 01:35:39,900
that it's a little bit like if you've seen,

500
01:35:39,900 --> 01:35:41,900
there are these books which when you open it up

501
01:35:41,900 --> 01:35:44,660
on one side of the page is one language

502
01:35:44,660 --> 01:35:47,660
and on the other side is a different language.

503
01:35:47,660 --> 01:35:51,060
And they can really help you learning a new language.

504
01:35:51,060 --> 01:35:52,980
And here, the hope is that if you have

505
01:35:52,980 --> 01:35:54,300
maybe already been in GitHub,

506
01:35:54,300 --> 01:35:56,260
but you are curious about the command line,

507
01:35:56,260 --> 01:36:00,020
you will recognize some of these things better

508
01:36:00,020 --> 01:36:00,860
and vice versa.

509
01:36:02,700 --> 01:36:05,220
But in a theory, let me show you some of the,

510
01:36:05,220 --> 01:36:06,980
let's go through some of the steps now

511
01:36:06,980 --> 01:36:10,820
before I hand over the mic to [Name].

512
01:36:10,820 --> 01:36:13,220
So what was the first thing I was supposed to do?

513
01:36:14,900 --> 01:36:16,500
I was supposed to fork.

514
01:36:16,500 --> 01:36:17,660
Here is my fork.

515
01:36:18,540 --> 01:36:21,620
I was supposed to browse the commit history.

516
01:36:21,620 --> 01:36:24,860
In my repository here,

517
01:36:24,860 --> 01:36:28,420
are there are 25 commits, 25 changes.

518
01:36:28,420 --> 01:36:33,420
And if I click this timeline link,

519
01:36:34,540 --> 01:36:37,100
I can see these 25 changes.

520
01:36:37,100 --> 01:36:38,880
They all have an author.

521
01:36:38,880 --> 01:36:40,180
They have a timestamp.

522
01:36:40,820 --> 01:36:42,580
they have a message.

523
01:36:42,580 --> 01:36:45,020
So we have a one line summary.

524
01:36:45,020 --> 01:36:46,860
So it's a little bit like a logbook.

525
01:36:46,860 --> 01:36:51,180
Keep keeping a logbook of changes as we program our code.

526
01:36:52,020 --> 01:36:53,820
Also notice that each of these changes

527
01:36:53,820 --> 01:36:56,580
has a unique identifier.

528
01:36:56,580 --> 01:37:00,280
And we might, when we say commit hash,

529
01:37:01,420 --> 01:37:02,500
this is what we mean.

530
01:37:04,340 --> 01:37:05,660
This is a short version of it.

531
01:37:05,660 --> 01:37:07,320
It's actually 40 characters.

532
01:37:07,320 --> 01:37:10,920
But each of these changes is unique.

533
01:37:10,920 --> 01:37:12,760
We can uniquely label them.

534
01:37:14,240 --> 01:37:15,520
Okay, what was the next thing?

535
01:37:15,520 --> 01:37:17,720
I was supposed to look at the network graph.

536
01:37:19,280 --> 01:37:23,740
This is something I do very often, insights, network.

537
01:37:27,160 --> 01:37:30,240
And in the network, we get this nice visual overview

538
01:37:30,240 --> 01:37:32,760
of these are the commits.

539
01:37:34,200 --> 01:37:36,400
And here the blue line and the green line

540
01:37:37,320 --> 01:37:40,480
These were different branches.

541
01:37:40,480 --> 01:37:41,840
So there is a main branch,

542
01:37:41,840 --> 01:37:44,040
there is a little sticky note main,

543
01:37:45,040 --> 01:37:46,520
but there are other branches.

544
01:37:47,960 --> 01:37:50,880
And in the next exercise already,

545
01:37:50,880 --> 01:37:53,040
we will learn how to create these branches.

546
01:37:54,520 --> 01:37:57,300
We will also discuss what they are good for.

547
01:37:57,300 --> 01:38:00,000
So here, somebody created the branch,

548
01:38:00,000 --> 01:38:03,200
experimented with a vegetarian lasagna,

549
01:38:03,200 --> 01:38:04,880
and then found that this was good

550
01:38:04,880 --> 01:38:08,860
and wanted to have that in the main branch.

551
01:38:08,860 --> 01:38:12,040
So we see that developments got merged.

552
01:38:12,040 --> 01:38:14,240
This is a merge point.

553
01:38:14,240 --> 01:38:15,200
This is a merge point.

554
01:38:15,200 --> 01:38:16,360
And here's another one.

555
01:38:17,600 --> 01:38:20,160
What else were we supposed to do?

556
01:38:20,160 --> 01:38:25,160
If I go back, when was a file last modified?

557
01:38:25,240 --> 01:38:26,480
You can actually see it here.

558
01:38:26,480 --> 01:38:27,440
So this was last week.

559
01:38:27,440 --> 01:38:30,300
You can see that we created this a week ago.

560
01:38:30,300 --> 01:38:35,540
And if I want to know, how about the salads?

561
01:38:35,540 --> 01:38:37,360
Yeah.

562
01:38:37,360 --> 01:38:49,620
So also here last week, which recipe including green salt on GitHub, you can search for it

563
01:38:49,620 --> 01:38:50,620
up here.

564
01:38:50,620 --> 01:38:54,140
But some of you have noticed that it takes a little bit of time, the very first time

565
01:38:54,140 --> 01:38:56,180
when you search for anything,

566
01:38:56,180 --> 01:38:59,400
because it needs to create this search index.

567
01:39:00,820 --> 01:39:05,460
But now it will list me all the files that contain salt.

568
01:39:05,460 --> 01:39:06,460
So this can be really useful

569
01:39:06,460 --> 01:39:08,260
if you look through a code project

570
01:39:08,260 --> 01:39:10,860
and you are not sure in which file was it,

571
01:39:10,860 --> 01:39:13,060
was this error message that I'm looking for.

572
01:39:14,300 --> 01:39:16,820
Okay, now let's go to the guacamole recipe.

573
01:39:18,660 --> 01:39:19,500
Where was it?

574
01:39:19,500 --> 01:39:23,740
It was under sites and guacamole.

575
01:39:24,140 --> 01:39:27,900
And now there is this really useful feature

576
01:39:27,900 --> 01:39:29,700
which has a really unfortunate name.

577
01:39:33,020 --> 01:39:35,800
Blame, so that's historical reasons.

578
01:39:35,800 --> 01:39:37,900
A better name would have been to annotate.

579
01:39:40,960 --> 01:39:43,460
But it's so incredibly useful because it will split

580
01:39:46,100 --> 01:39:48,740
my code into two halves.

581
01:39:48,740 --> 01:39:51,180
On the right side, I see the recipe.

582
01:39:51,180 --> 01:40:02,060
But on the left side, I see line by line, which commit modified a specific line, the

583
01:40:02,060 --> 01:40:03,060
last.

584
01:40:03,060 --> 01:40:09,340
So now if I'm curious about who added this cilantro, because personally, I don't like

585
01:40:09,340 --> 01:40:17,020
cilantro so much, I would consider it a bug.

586
01:40:17,020 --> 01:40:20,080
And much more important than who is when.

587
01:40:20,080 --> 01:40:22,620
If I want to know when was this introduced,

588
01:40:22,620 --> 01:40:24,100
I can click on the commit.

589
01:40:26,220 --> 01:40:28,980
And this is the change that introduced it.

590
01:40:28,980 --> 01:40:33,980
So this fantasy person last week introduced

591
01:40:35,780 --> 01:40:37,660
in this commit, this change.

592
01:40:38,780 --> 01:40:41,500
This will be very useful for you in your,

593
01:40:41,500 --> 01:40:42,840
like for reproducibility.

594
01:40:45,980 --> 01:40:48,580
And I get the feedback that I was scrolling really fast

595
01:40:48,580 --> 01:40:51,620
and it's hard to follow where the mouse pointer is.

596
01:40:51,620 --> 01:40:53,500
So I will try to be more careful.

597
01:40:53,500 --> 01:40:55,460
The good news is that everything I show now,

598
01:40:55,460 --> 01:40:56,620
we have screenshots for this,

599
01:40:56,620 --> 01:40:59,580
and you can find it in the solution and in the walkthrough.

600
01:41:02,980 --> 01:41:06,300
Back to the overview, can I use these recipes myself?

601
01:41:06,300 --> 01:41:09,180
The thing that I would look for before using anything

602
01:41:09,180 --> 01:41:11,120
is the license, is there a license file?

603
01:41:11,120 --> 01:41:12,060
Yes, there is one.

604
01:41:13,980 --> 01:41:16,660
And GitHub even recognizes it,

605
01:41:16,660 --> 01:41:20,340
that it's a so-called CC0 license.

606
01:41:20,340 --> 01:41:23,380
We will learn more about licenses next week,

607
01:41:23,380 --> 01:41:27,100
but if I click here on top right,

608
01:41:27,100 --> 01:41:29,780
I can even get some information of,

609
01:41:32,180 --> 01:41:34,540
no, I need to click on the license file itself.

610
01:41:37,140 --> 01:41:38,940
On top, it will give me a summary

611
01:41:38,940 --> 01:41:42,460
of what are things I can do, cannot do,

612
01:41:43,300 --> 01:41:45,940
any conditions, in this case, there are no conditions.

613
01:41:46,660 --> 01:41:55,340
And then there are issues and pull requests, but we will see more of issues and pull requests

614
01:41:55,340 --> 01:42:00,120
on Thursday.

615
01:42:00,120 --> 01:42:04,840
And some people asked, so if I go back to my fork, why don't I see any issues in my

616
01:42:04,840 --> 01:42:07,220
fork?

617
01:42:07,220 --> 01:42:15,100
This is something that you can enable in settings, but many projects decide to keep track of

618
01:42:15,100 --> 01:42:18,280
of all the issues and bug reports in a central place.

619
01:42:19,240 --> 01:42:21,280
So I will be able to find them if I go back

620
01:42:21,280 --> 01:42:23,860
to the place where I forked from.

621
01:42:26,020 --> 01:42:29,840
I will go back to the so-called upstream repository.

622
01:42:32,200 --> 01:42:34,200
And here I see that there is an issue tab,

623
01:42:34,200 --> 01:42:35,280
there is a pull requests,

624
01:42:35,280 --> 01:42:37,040
we will see what they are good for.

625
01:42:38,600 --> 01:42:40,840
And issues is not only for problems,

626
01:42:40,840 --> 01:42:44,900
it's also for sharing an idea.

627
01:42:45,100 --> 01:42:54,100
So it can, you can even share an idea for something before starting all the work.

628
01:42:54,100 --> 01:42:57,460
Good.

629
01:42:57,460 --> 01:43:03,580
I think I will go, how about you take the screen from me, and then we talk.

630
01:43:03,580 --> 01:43:09,340
Now we will take it a step further and we will instead of just browsing a repository

631
01:43:09,340 --> 01:43:11,500
created by somebody else.

632
01:43:11,500 --> 01:43:16,500
we will learn how do we make changes to it on GitHub,

633
01:43:16,720 --> 01:43:18,660
but also locally for those who want to.

634
01:43:23,820 --> 01:43:25,100
Okay.

635
01:43:25,100 --> 01:43:26,100
Yeah, thank you, [Name].

636
01:43:26,100 --> 01:43:28,440
So we will now focus on the second lesson.

637
01:43:30,920 --> 01:43:34,380
For those of you who want to follow the lesson yourself,

638
01:43:34,380 --> 01:43:35,220
you can find it here.

639
01:43:35,220 --> 01:43:37,460
It's on the top, commit changes.

640
01:43:37,460 --> 01:43:39,380
And in this part now, in the next hour,

641
01:43:39,380 --> 01:43:42,100
we will discuss in further detail commits,

642
01:43:42,100 --> 01:43:43,600
branches, and also tags.

643
01:43:47,140 --> 01:43:50,300
So you're already familiar with commits

644
01:43:50,300 --> 01:43:51,540
since you've now inspected the history

645
01:43:51,540 --> 01:43:52,620
of an existing repository,

646
01:43:52,620 --> 01:43:55,000
but now we will discuss how to create commits.

647
01:43:55,000 --> 01:43:58,860
So this is probably the Git feature

648
01:43:58,860 --> 01:44:02,100
that you will use the most often,

649
01:44:02,100 --> 01:44:04,180
since every time you change a file

650
01:44:04,180 --> 01:44:07,540
or create a new file in your Git repository

651
01:44:07,540 --> 01:44:08,660
and you want to save it,

652
01:44:08,660 --> 01:44:13,660
you want to have it available in the future as well

653
01:44:13,940 --> 01:44:16,180
through the, when you go back in your history,

654
01:44:16,180 --> 01:44:18,620
then you can create a git commit.

655
01:44:18,620 --> 01:44:23,040
Now, usually, we will start on the main branch,

656
01:44:23,040 --> 01:44:27,500
so branches are different ways how to structure

657
01:44:27,500 --> 01:44:30,140
or like how to have different versions of your repository.

658
01:44:30,140 --> 01:44:32,220
So this is indicated here by this nice figure here,

659
01:44:32,220 --> 01:44:37,220
where we have this mascot of a popular programming language.

660
01:44:37,220 --> 01:44:41,180
in this case, it's Go, which is lying on the main branch.

661
01:44:41,180 --> 01:44:44,820
And branches can be thought of lines of development.

662
01:44:46,040 --> 01:44:49,380
So nowadays, all new Git repositories,

663
01:44:49,380 --> 01:44:51,940
if you create a new repository in GitHub or some GitLab,

664
01:44:51,940 --> 01:44:53,360
it will be called the main branch,

665
01:44:53,360 --> 01:44:55,060
but you could name it whatever you want.

666
01:44:55,060 --> 01:44:56,840
In the past, it has been called master,

667
01:44:56,840 --> 01:44:58,260
but because of historical reasons,

668
01:44:58,260 --> 01:45:01,340
people have now decided that main should be the new default.

669
01:45:01,340 --> 01:45:03,200
And in theory, you can still name it whatever you want,

670
01:45:03,200 --> 01:45:04,980
but I think it's a good idea to follow

671
01:45:04,980 --> 01:45:08,600
the convention of calling it the main branch

672
01:45:08,600 --> 01:45:10,720
since that's what's mostly used.

673
01:45:10,720 --> 01:45:15,640
Now, if we now want a whole team work on this code

674
01:45:15,640 --> 01:45:17,880
or like in this painting, let's say,

675
01:45:17,880 --> 01:45:19,860
it would be very difficult if it would be a real painting

676
01:45:19,860 --> 01:45:22,080
to have multiple people working on different parts

677
01:45:22,080 --> 01:45:23,320
of the painting at the same time.

678
01:45:23,320 --> 01:45:27,600
However, with Git, since this is typically code bases

679
01:45:27,600 --> 01:45:32,120
we work with, we can create digital copies of this branch.

680
01:45:32,120 --> 01:45:33,360
In this case, we create two,

681
01:45:33,360 --> 01:45:35,320
One, which is here, the sunglass branch,

682
01:45:35,320 --> 01:45:38,160
and the other one, which is this graduation hat branch.

683
01:45:38,160 --> 01:45:39,880
And then one part of your team can then focus

684
01:45:39,880 --> 01:45:41,880
on the implementation of the sunglasses.

685
01:45:41,880 --> 01:45:43,480
The other one can focus on the implementation

686
01:45:43,480 --> 01:45:44,600
of something different.

687
01:45:44,600 --> 01:45:45,720
And then if you want later,

688
01:45:45,720 --> 01:45:46,840
and you're happy with the results,

689
01:45:46,840 --> 01:45:49,840
they can be merged back into the main branch.

690
01:45:49,840 --> 01:45:51,880
So these branches here are sometimes also called

691
01:45:51,880 --> 01:45:53,720
developer or the developing branches.

692
01:45:54,840 --> 01:45:57,680
As long as they don't show any conflicts,

693
01:45:57,680 --> 01:46:00,040
which means that they work on the same feature

694
01:46:00,040 --> 01:46:02,880
and then try to merge it into the main branch,

695
01:46:02,880 --> 01:46:05,840
will work just fine, but we will discuss this in further detail later.

696
01:46:08,800 --> 01:46:12,640
Now, the last thing which is mentioned here, which you probably have not encountered yet

697
01:46:12,640 --> 01:46:16,080
when you went through the history of the repository before is called tags.

698
01:46:16,720 --> 01:46:22,160
And these are selected commits that you can mark as tags with a specific name,

699
01:46:22,880 --> 01:46:27,600
which can be very useful if you want to have one commit that you want to be easily accessible in

700
01:46:27,600 --> 01:46:32,240
the future. So in the context of this recipe book, for instance, it could be when we decide

701
01:46:32,240 --> 01:46:35,440
to make a printed version of this book, then of course, you

702
01:46:35,440 --> 01:46:37,760
cannot change the version, the printed version anymore. So it

703
01:46:37,760 --> 01:46:41,520
will be good in the future to have committed, we can easily

704
01:46:41,520 --> 01:46:43,800
find which then is the same version as the one that is

705
01:46:43,800 --> 01:46:47,640
printed, even though the project on GitHub might still develop in

706
01:46:47,640 --> 01:46:50,840
other directions. Or to be maybe use an example, which is more

707
01:46:50,840 --> 01:46:54,960
relevant for you as researchers, if you have a manuscript or a

708
01:46:55,120 --> 01:46:58,800
publication, that you submit to a journal, then it could be a

709
01:46:58,800 --> 01:47:01,520
very good idea to create a tag for the version that you

710
01:47:01,520 --> 01:47:06,520
you submitted. And then once you receive the review comments, and

711
01:47:06,520 --> 01:47:11,680
then you change the repository, which is connected to your

712
01:47:11,680 --> 01:47:15,080
publication, then you can create a new tag for every new version

713
01:47:15,080 --> 01:47:17,320
that you submit, and then for the published one as well. So

714
01:47:17,320 --> 01:47:22,120
this can be very useful for this as well. In my case, when I

715
01:47:22,120 --> 01:47:24,760
wrote my PhD thesis three years ago, it was also very useful to

716
01:47:24,800 --> 01:47:28,440
create tags whenever I wanted to have a version that I sent to my

717
01:47:28,440 --> 01:47:30,520
supervisor, so he could read through it and give comments on

718
01:47:30,520 --> 01:47:35,520
so that way I could work on my thesis,

719
01:47:36,960 --> 01:47:38,060
which was written in LaTeX

720
01:47:38,060 --> 01:47:39,900
and therefore easily storable on GitHub.

721
01:47:39,900 --> 01:47:41,860
And then every time I have a version,

722
01:47:41,860 --> 01:47:43,740
or like a chapter which was done,

723
01:47:43,740 --> 01:47:46,100
I could then create a tag on it

724
01:47:46,100 --> 01:47:48,180
and then send it to someone else to read it.

725
01:47:48,180 --> 01:47:49,540
So there was no problem

726
01:47:49,540 --> 01:47:51,820
with having the latest version, for instance.

727
01:47:53,080 --> 01:47:54,140
Maybe just one more sentence

728
01:47:54,140 --> 01:47:56,660
I should mention for the branches.

729
01:47:56,660 --> 01:47:58,180
I was mentioning before that this is very useful

730
01:47:58,180 --> 01:47:59,060
if you have a whole team

731
01:47:59,060 --> 01:48:00,860
which is working on one code base,

732
01:48:00,860 --> 01:48:03,700
but it can also be very useful if you work alone,

733
01:48:03,700 --> 01:48:05,940
since you want to experiment.

734
01:48:05,940 --> 01:48:09,060
So you want to, you have an idea about a new feature

735
01:48:09,060 --> 01:48:10,380
or like something which you could implement

736
01:48:10,380 --> 01:48:12,460
in a better way, but you don't want to touch

737
01:48:12,460 --> 01:48:13,860
the main branch since that's the one

738
01:48:13,860 --> 01:48:17,460
that other people might take a look at,

739
01:48:17,460 --> 01:48:19,400
or also you just want to have like a main batch

740
01:48:19,400 --> 01:48:21,620
which is kind of relatively clean in its history.

741
01:48:21,620 --> 01:48:23,740
So you can create a new branch,

742
01:48:23,740 --> 01:48:25,980
try implementing some new code,

743
01:48:25,980 --> 01:48:27,360
and if you're happy with it, you can merge it,

744
01:48:27,360 --> 01:48:30,360
but if it turns out that it doesn't go the way you want,

745
01:48:30,360 --> 01:48:32,480
you see that you haven't pulled through

746
01:48:32,480 --> 01:48:35,820
all the steps necessary, then you can just delete it

747
01:48:35,820 --> 01:48:38,760
without having to do any changes to the main branch.

748
01:48:38,760 --> 01:48:40,640
Of course, in theory, you could have done this also

749
01:48:40,640 --> 01:48:41,480
just to the main branch,

750
01:48:41,480 --> 01:48:43,760
and then kind of deleted the last couple of commits,

751
01:48:43,760 --> 01:48:47,300
but I would say that this is not particularly clean.

752
01:48:48,760 --> 01:48:50,440
Now, we have, again, an exercise set here,

753
01:48:50,440 --> 01:48:52,000
which takes approximately 20 minutes,

754
01:48:52,000 --> 01:48:54,240
where we'll now create commits,

755
01:48:54,240 --> 01:48:57,880
and on top of the branch, on top of the,

756
01:48:57,880 --> 01:48:59,760
sorry, on top of the repository

757
01:48:59,760 --> 01:49:01,960
that you've been working with in the past,

758
01:49:03,040 --> 01:49:03,880
in a new branch.

759
01:49:03,880 --> 01:49:06,760
And I will now show the first two, three steps live,

760
01:49:06,760 --> 01:49:08,880
and then I will leave the remaining steps to you.

761
01:49:08,880 --> 01:49:11,320
And then at the end, we can then,

762
01:49:11,320 --> 01:49:12,240
after the exercises,

763
01:49:12,240 --> 01:49:14,240
we can go through some of the questions.

764
01:49:15,480 --> 01:49:16,920
I will do this now in GitHub,

765
01:49:16,920 --> 01:49:18,640
but if there is time remaining,

766
01:49:18,640 --> 01:49:20,320
I will do the same thing,

767
01:49:20,320 --> 01:49:23,300
or at least show some of the parts also in VS Code.

768
01:49:23,300 --> 01:49:27,100
Now, I go now to the recipe book recorded repository,

769
01:49:28,420 --> 01:49:33,420
which is in the Code Refinery GitHub project.

770
01:49:35,220 --> 01:49:37,820
And first of all, what I will do is to create a fork.

771
01:49:37,820 --> 01:49:38,860
I've already done this.

772
01:49:38,860 --> 01:49:40,580
So we just create a fork now.

773
01:49:40,580 --> 01:49:42,660
I copy it to my own account.

774
01:49:42,660 --> 01:49:44,500
Just a question, [Name].

775
01:49:44,500 --> 01:49:47,420
Should we, we should now watch or should we do something?

776
01:49:48,940 --> 01:49:51,700
I will, I will, everything I'm doing now

777
01:49:51,700 --> 01:49:56,900
is also shown in the in the description it's just two it's just the first two

778
01:49:56,900 --> 01:50:01,420
steps I thought so that we make sure that everyone uses the right repository

779
01:50:01,420 --> 01:50:06,460
and first commit yeah and the fork people have already done in the previous

780
01:50:06,460 --> 01:50:10,420
exercise but here we show it it's good that we show it because just to make

781
01:50:10,420 --> 01:50:16,020
sure that everybody's on the same page also if people join later yeah so this

782
01:50:16,020 --> 01:50:21,380
takes now just a few seconds and now we have a copy again of this repository

783
01:50:21,380 --> 01:50:23,960
and in this case, we are still on the main branch.

784
01:50:23,960 --> 01:50:27,240
However, if I now want to introduce a new feature

785
01:50:27,240 --> 01:50:30,360
or like a new recipe, I can now create a new branch name.

786
01:50:32,480 --> 01:50:34,320
And then I click on create branch.

787
01:50:35,920 --> 01:50:37,160
And this will now create,

788
01:50:38,600 --> 01:50:41,040
it'll copy over all the code from the previous branch

789
01:50:41,040 --> 01:50:41,940
into this new one.

790
01:50:43,200 --> 01:50:44,760
And the last thing I will just quickly show

791
01:50:44,760 --> 01:50:46,520
is then how to create a new commit.

792
01:50:47,400 --> 01:50:49,320
So in my case, I like pasta a lot,

793
01:50:49,320 --> 01:50:50,760
so I want to add a recipe here,

794
01:50:50,760 --> 01:50:52,080
so I can keep an add file.

795
01:50:55,320 --> 01:50:57,920
I can copy now something into

796
01:51:02,900 --> 01:51:04,240
a new file into,

797
01:51:05,200 --> 01:51:07,660
or like some, a new recipe.

798
01:51:11,240 --> 01:51:12,520
I need to give it a name in this case

799
01:51:12,520 --> 01:51:13,360
because it's a new file.

800
01:51:13,360 --> 01:51:17,300
So in this case, it's a tomato dazzle.

801
01:51:20,760 --> 01:51:25,760
recipe and I commit the changes.

802
01:51:26,120 --> 01:51:28,680
And now this is the new part for you.

803
01:51:28,680 --> 01:51:30,440
We can now create a commit message.

804
01:51:30,440 --> 01:51:32,600
That's the one that the other one was showing just before.

805
01:51:32,600 --> 01:51:34,920
So this would be this one line message.

806
01:51:34,920 --> 01:51:36,360
And then we have also the option

807
01:51:36,360 --> 01:51:41,360
to give a more extended description of this change.

808
01:51:41,400 --> 01:51:43,400
Now, if you have a small project

809
01:51:43,400 --> 01:51:45,400
and it might not be necessary

810
01:51:45,400 --> 01:51:47,720
to have like a very detailed extended description here.

811
01:51:47,720 --> 01:51:50,000
And in this case, I think it's not necessary

812
01:51:50,000 --> 01:51:51,640
since it's kind of self-descripted.

813
01:51:51,640 --> 01:51:54,600
But in the future, if you would work with a larger project,

814
01:51:54,600 --> 01:51:56,600
then they might actually have some expectations

815
01:51:56,600 --> 01:51:59,480
or like some rules on how you have to create these commits.

816
01:51:59,480 --> 01:52:01,820
So there might be some template

817
01:52:01,820 --> 01:52:04,520
for what to add into the extension descriptions.

818
01:52:04,520 --> 01:52:06,700
But in this case, we just keep it simple.

819
01:52:08,080 --> 01:52:09,200
And we now see that we have,

820
01:52:09,200 --> 01:52:11,300
if you go now to the history,

821
01:52:11,300 --> 01:52:12,960
we have now created a new commit

822
01:52:15,360 --> 01:52:18,660
with the description that we chose before.

823
01:52:18,660 --> 01:52:20,700
and also the new hash that was generated for us.

824
01:52:20,700 --> 01:52:22,740
So this is the identifier of this commit.

825
01:52:23,660 --> 01:52:25,900
Okay, I think this is enough for now.

826
01:52:25,900 --> 01:52:30,440
I will now mute myself and in 20 minutes,

827
01:52:31,780 --> 01:52:36,180
we will get back and discuss some of the problems

828
01:52:36,180 --> 01:52:37,700
that some people have seen

829
01:52:37,700 --> 01:52:40,380
and maybe discuss some interesting questions.

830
01:52:41,500 --> 01:52:44,880
Yes, so we'll be back of 55 minutes past the hour.

831
01:52:46,060 --> 01:52:47,960
And then we will do a quick summary.

832
01:52:48,660 --> 01:52:53,860
before we take a longer break. And your task is now to do the steps one to nine.

833
01:52:54,900 --> 01:52:57,700
Again, let us know how it's going on the collaborative notes,

834
01:52:58,740 --> 01:53:02,660
ask us questions, and then we can return to the questions and discuss them here, here on stream.

835
01:53:05,140 --> 01:53:08,900
See you in 20 minutes. Bye.

836
01:53:18,660 --> 01:53:20,720
you

837
01:53:48,660 --> 01:53:50,720
you

838
01:54:18,660 --> 01:54:20,720
you

839
01:54:48,660 --> 01:54:50,720
you

840
01:55:18,660 --> 01:55:20,720
you

841
01:55:48,660 --> 01:55:50,720
you

842
01:56:18,660 --> 01:56:20,720
you

843
01:56:48,660 --> 01:56:50,720
you

844
01:57:18,660 --> 01:57:20,720
you

845
01:57:48,660 --> 01:57:50,720
you

846
01:58:18,660 --> 01:58:20,720
you

847
01:58:48,660 --> 01:58:50,720
you

848
01:59:18,660 --> 01:59:20,720
you

849
01:59:48,660 --> 01:59:50,720
you

850
02:00:18,660 --> 02:00:20,720
you

851
02:00:48,660 --> 02:00:50,720
you

852
02:01:18,660 --> 02:01:20,720
you

853
02:01:48,660 --> 02:01:50,720
you

854
02:02:18,660 --> 02:02:20,720
you

855
02:02:48,660 --> 02:02:50,720
you

856
02:03:18,660 --> 02:03:20,720
you

857
02:03:48,660 --> 02:03:50,720
you

858
02:04:18,660 --> 02:04:20,720
you

859
02:04:48,660 --> 02:04:50,720
you

860
02:05:18,660 --> 02:05:20,720
you

861
02:05:48,660 --> 02:05:50,720
you

862
02:06:18,660 --> 02:06:20,720
you

863
02:06:48,660 --> 02:06:50,720
you

864
02:07:18,660 --> 02:07:20,720
you

865
02:07:48,660 --> 02:07:50,720
you

866
02:08:18,660 --> 02:08:20,720
you

867
02:08:48,660 --> 02:08:50,720
you

868
02:09:18,660 --> 02:09:20,720
you

869
02:09:48,660 --> 02:09:50,720
you

870
02:10:18,660 --> 02:10:20,720
you

871
02:10:48,660 --> 02:10:50,720
you

872
02:11:18,660 --> 02:11:20,720
you

873
02:11:48,660 --> 02:11:50,720
you

874
02:12:18,660 --> 02:12:20,720
you

875
02:12:48,660 --> 02:12:50,720
you

876
02:13:18,660 --> 02:13:20,720
you

877
02:13:48,660 --> 02:13:50,660
You

878
02:14:19,620 --> 02:14:21,120
Okay, so we are back.

879
02:14:22,140 --> 02:14:24,300
We have five minutes before the break starts.

880
02:14:24,300 --> 02:14:28,300
So there were two questions which arose,

881
02:14:28,300 --> 02:14:29,740
which I would like to discuss now.

882
02:14:29,740 --> 02:14:30,580
And if we have some time,

883
02:14:30,580 --> 02:14:33,860
I can also quickly show how to use VS Code

884
02:14:33,860 --> 02:14:36,100
for creating commits.

885
02:14:36,100 --> 02:14:37,980
The first thing was about comparing.

886
02:14:37,980 --> 02:14:41,180
And one, in my view, simplest way

887
02:14:41,180 --> 02:14:45,020
to create two different branches or commits

888
02:14:45,020 --> 02:14:46,780
is by copying the URL

889
02:14:46,780 --> 02:14:49,020
and just writing compare at the end.

890
02:14:50,640 --> 02:14:53,400
And this will then open this interface

891
02:14:53,400 --> 02:14:56,920
where we can then here choose which branches,

892
02:14:56,920 --> 02:14:58,400
repositories we want to compare.

893
02:14:58,400 --> 02:15:01,640
So in this case, I will now just focus on mine.

894
02:15:02,480 --> 02:15:04,320
And we can have here the main branch

895
02:15:04,320 --> 02:15:06,320
and we can compare it to the new recipe branch

896
02:15:06,320 --> 02:15:08,400
that I created previously.

897
02:15:08,400 --> 02:15:11,200
And this way, it will now show us all the differences

898
02:15:11,200 --> 02:15:12,420
between the two branches.

899
02:15:12,420 --> 02:15:15,440
So we assume, in this case, the only difference is

900
02:15:15,440 --> 02:15:19,200
that we have the new file that I created previously,

901
02:15:19,200 --> 02:15:22,760
the tomato basil spaghetti recipe in this case.

902
02:15:23,840 --> 02:15:27,680
So you will see something similar

903
02:15:27,680 --> 02:15:28,840
when you create pull requests,

904
02:15:28,840 --> 02:15:32,200
but that's something we will discuss later in this course.

905
02:15:32,200 --> 02:15:33,400
But in my view, that's the simplest way

906
02:15:33,400 --> 02:15:35,300
of comparing it on GitHub itself.

907
02:15:36,520 --> 02:15:38,720
So I hope this answers one of the questions.

908
02:15:39,800 --> 02:15:42,600
Another question was there was some confusion

909
02:15:42,600 --> 02:15:44,760
about the creating a tag.

910
02:15:46,880 --> 02:15:48,960
And on GitHub, this can be some,

911
02:15:48,960 --> 02:15:51,520
maybe a little bit confusing that it has a feature

912
02:15:51,520 --> 02:15:52,960
which is called releases,

913
02:15:52,960 --> 02:15:54,400
which is basically the same thing.

914
02:15:54,400 --> 02:15:56,520
But the simplest way of creating one is then just,

915
02:15:56,520 --> 02:15:57,680
let's just quickly go back.

916
02:15:57,680 --> 02:15:59,080
I click here on this button,

917
02:15:59,080 --> 02:16:00,800
create a new release on the right.

918
02:16:03,120 --> 02:16:07,520
And I can now choose a tag.

919
02:16:07,520 --> 02:16:10,040
And now I need to actually write a new name into it

920
02:16:10,040 --> 02:16:13,080
before I can create a new release or tag.

921
02:16:13,080 --> 02:16:14,760
So I think this is the problem that arose there

922
02:16:14,760 --> 02:16:18,360
and I think it's kind of counterintuitive in GitHub.

923
02:16:18,360 --> 02:16:20,620
So if I now write new release, for instance,

924
02:16:25,600 --> 02:16:27,660
then I can give it a title again.

925
02:16:31,080 --> 02:16:33,360
I can provide some more information, which I won't do now.

926
02:16:33,360 --> 02:16:34,800
Then I can publish a release.

927
02:16:34,800 --> 02:16:40,080
And [Name], can I ask, or can we take a step back?

928
02:16:40,080 --> 02:16:44,440
So when do you use branches, and when do you use tags?

929
02:16:44,440 --> 02:16:48,680
And so how are they similar, how are they different, and when would you use one or the

930
02:16:48,680 --> 02:16:49,680
other?

931
02:16:49,680 --> 02:16:50,860
It's a very good question.

932
02:16:50,860 --> 02:16:56,160
So branches I would use if I have a project where I still want to develop it, or still

933
02:16:56,160 --> 02:17:02,320
make changes to the project, with the idea that I would eventually merge them.

934
02:17:02,320 --> 02:17:08,000
I would use tags then when I'm not planning to make any changes to this version of the project,

935
02:17:08,800 --> 02:17:14,800
but I want them to be easily accessible in the future. For instance, if I want to have like this

936
02:17:15,680 --> 02:17:19,840
specific version of a manuscript that I submitted to a journal, then it makes sense to have it as a

937
02:17:19,840 --> 02:17:25,120
tag in my view, because branches somehow imply that I would do some changes. In fact, I have

938
02:17:25,120 --> 02:17:29,760
seen a few projects where they had like an own branch for the version that they submitted to a

939
02:17:29,760 --> 02:17:35,440
journal or that was uploaded to archive, for instance, which I think isn't ideal because

940
02:17:35,440 --> 02:17:39,280
these branches in theory can still be changed. Now, of course, I can always go to the history.

941
02:17:40,000 --> 02:17:45,760
Since I'm using Git, I can always check what was the date when I submitted it, which was the

942
02:17:45,760 --> 02:17:51,280
latest branch back then. But I think a tag makes more sense. This would be my answer to this

943
02:17:51,280 --> 02:17:53,920
question. Thanks.

944
02:17:53,920 --> 02:17:54,820
Thanks.

945
02:17:54,820 --> 02:17:55,660
Okay.

946
02:17:56,800 --> 02:18:00,520
Shall I very briefly talk about VS code

947
02:18:00,520 --> 02:18:01,760
or shall we do that after the break?

948
02:18:01,760 --> 02:18:03,320
What do you think about the one?

949
02:18:05,480 --> 02:18:06,480
Just looking at the time,

950
02:18:06,480 --> 02:18:09,160
I think we should do it after the break.

951
02:18:09,160 --> 02:18:11,600
I'm just looking here to whether there's any questions

952
02:18:11,600 --> 02:18:15,440
that we should pick up before we go into the break.

953
02:18:21,360 --> 02:18:23,700
So let me thank everybody for the questions.

954
02:18:23,920 --> 02:18:25,780
Let's have many more questions.

955
02:18:25,780 --> 02:18:28,380
We want to be really overwhelmed by questions.

956
02:18:28,380 --> 02:18:31,260
Let's take a, we will take a one hour break.

957
02:18:31,260 --> 02:18:33,380
This is lunchtime in some time zones.

958
02:18:33,380 --> 02:18:36,220
We know that this is not ideal for everybody,

959
02:18:36,220 --> 02:18:38,380
but in that hour, you can a little bit

960
02:18:39,900 --> 02:18:41,580
process what we learned.

961
02:18:43,060 --> 02:18:45,180
And we will then do a recap.

962
02:18:46,700 --> 02:18:51,700
And after the break, our plan is to learn how to

963
02:18:52,220 --> 02:18:53,620
merge the changes that we did.

964
02:18:53,620 --> 02:18:56,020
So we learn how to browse, how to create branch,

965
02:18:56,020 --> 02:18:57,940
how to create commits,

966
02:18:57,940 --> 02:18:59,980
but how do we get all of these developments

967
02:18:59,980 --> 02:19:02,380
back into the main branch

968
02:19:02,380 --> 02:19:04,140
that we will learn after the break.

969
02:19:06,500 --> 02:19:08,380
We will be back in one hour,

970
02:19:08,380 --> 02:19:09,420
back here on stream.

971
02:19:11,100 --> 02:19:13,300
See you then, have a good break,

972
02:19:13,300 --> 02:19:14,340
and bye everybody.

973
02:19:23,620 --> 02:19:25,680
you

974
02:19:53,620 --> 02:19:55,680
you

975
02:20:23,620 --> 02:20:25,680
you

976
02:20:53,620 --> 02:20:55,680
you

977
02:21:23,620 --> 02:21:25,680
you

978
02:21:53,620 --> 02:21:55,680
you

979
02:22:23,620 --> 02:22:25,680
you

980
02:22:53,620 --> 02:22:55,680
you

981
02:23:23,620 --> 02:23:25,680
you

982
02:23:53,620 --> 02:23:55,680
you

983
02:24:23,620 --> 02:24:25,680
you

984
02:24:53,620 --> 02:24:55,680
you

985
02:25:23,620 --> 02:25:25,680
you

986
02:25:53,620 --> 02:25:55,680
you

987
02:26:23,620 --> 02:26:25,680
you

988
02:26:53,620 --> 02:26:55,680
you

989
02:27:23,620 --> 02:27:25,680
you

990
02:27:53,620 --> 02:27:55,680
you

991
02:28:23,620 --> 02:28:25,680
you

992
02:28:53,620 --> 02:28:55,680
you

993
02:29:23,620 --> 02:29:25,680
you

994
02:29:53,620 --> 02:29:55,680
you

995
02:30:23,620 --> 02:30:25,680
you

996
02:30:53,620 --> 02:30:55,680
you

997
02:31:23,620 --> 02:31:25,680
you

998
02:31:53,620 --> 02:31:55,680
you

999
02:32:23,620 --> 02:32:25,680
you

1000
02:32:53,620 --> 02:32:55,680
you

1001
02:33:23,620 --> 02:33:25,680
you

1002
02:33:53,620 --> 02:33:55,680
you

1003
02:34:23,620 --> 02:34:25,680
you

1004
02:34:53,620 --> 02:34:55,680
you

1005
02:35:23,620 --> 02:35:25,680
you

1006
02:35:53,620 --> 02:35:55,680
you

1007
02:36:23,620 --> 02:36:25,680
you

1008
02:36:53,620 --> 02:36:55,680
you

1009
02:37:23,620 --> 02:37:25,680
you

1010
02:37:53,620 --> 02:37:55,680
you

1011
02:38:23,620 --> 02:38:25,680
you

1012
02:38:53,620 --> 02:38:55,680
you

1013
02:39:23,620 --> 02:39:25,680
you

1014
02:39:53,620 --> 02:39:55,680
you

1015
02:40:23,620 --> 02:40:25,680
you

1016
02:40:53,620 --> 02:40:55,680
you

1017
02:41:23,620 --> 02:41:25,680
you

1018
02:41:53,620 --> 02:41:55,680
you

1019
02:42:23,620 --> 02:42:25,680
you

1020
02:42:53,620 --> 02:42:55,680
you

1021
02:43:23,620 --> 02:43:25,680
you

1022
02:43:53,620 --> 02:43:55,680
you

1023
02:44:23,620 --> 02:44:25,680
you

1024
02:44:53,620 --> 02:44:55,680
you

1025
02:45:23,620 --> 02:45:25,680
you

1026
02:45:53,620 --> 02:45:55,680
you

1027
02:46:23,620 --> 02:46:25,680
you

1028
02:46:53,620 --> 02:46:55,680
you

1029
02:47:23,620 --> 02:47:25,680
you

1030
02:47:53,620 --> 02:47:55,680
you

1031
02:48:23,620 --> 02:48:25,680
you

1032
02:48:53,620 --> 02:48:55,680
you

1033
02:49:23,620 --> 02:49:25,680
you

1034
02:49:53,620 --> 02:49:55,680
you

1035
02:50:23,620 --> 02:50:25,680
you

1036
02:50:53,620 --> 02:50:55,680
you

1037
02:51:23,620 --> 02:51:25,680
you

1038
02:51:53,620 --> 02:51:55,680
you

1039
02:52:23,620 --> 02:52:25,680
you

1040
02:52:53,620 --> 02:52:55,680
you

1041
02:53:23,620 --> 02:53:25,680
you

1042
02:53:53,620 --> 02:53:55,680
you

1043
02:54:23,620 --> 02:54:25,680
you

1044
02:54:53,620 --> 02:54:55,680
you

1045
02:55:23,620 --> 02:55:25,680
you

1046
02:55:53,620 --> 02:55:55,680
you

1047
02:56:23,620 --> 02:56:25,680
you

1048
02:56:53,620 --> 02:56:55,680
you

1049
02:57:23,620 --> 02:57:25,680
you

1050
02:57:53,620 --> 02:57:55,680
you

1051
02:58:23,620 --> 02:58:25,680
you

1052
02:58:53,620 --> 02:58:55,680
you

1053
02:59:23,620 --> 02:59:25,680
you

1054
02:59:53,620 --> 02:59:55,680
you

1055
03:00:23,620 --> 03:00:25,680
you

1056
03:00:53,620 --> 03:00:55,680
you

1057
03:01:23,620 --> 03:01:25,680
you

1058
03:01:53,620 --> 03:01:55,680
you

1059
03:02:23,620 --> 03:02:25,680
you

1060
03:02:53,620 --> 03:02:55,680
you

1061
03:03:23,620 --> 03:03:25,680
you

1062
03:03:53,620 --> 03:03:55,680
you

1063
03:04:23,620 --> 03:04:25,680
you

1064
03:04:53,620 --> 03:04:55,680
you

1065
03:05:23,620 --> 03:05:25,680
you

1066
03:05:53,620 --> 03:05:55,680
you

1067
03:06:23,620 --> 03:06:25,680
you

1068
03:06:53,620 --> 03:06:55,680
you

1069
03:07:23,620 --> 03:07:25,680
you

1070
03:07:53,620 --> 03:07:55,680
you

1071
03:08:23,620 --> 03:08:25,680
you

1072
03:08:53,620 --> 03:08:55,680
you

1073
03:09:23,620 --> 03:09:25,680
you

1074
03:09:53,620 --> 03:09:55,680
you

1075
03:10:23,620 --> 03:10:25,680
you

1076
03:10:53,620 --> 03:10:55,680
you

1077
03:11:23,620 --> 03:11:25,680
you

1078
03:11:53,620 --> 03:11:55,680
you

1079
03:12:23,620 --> 03:12:25,680
you

1080
03:12:53,620 --> 03:12:55,680
you

1081
03:13:23,620 --> 03:13:25,680
you

1082
03:13:53,620 --> 03:13:55,680
you

1083
03:14:23,620 --> 03:14:25,680
you

1084
03:14:53,620 --> 03:14:55,680
you

1085
03:15:23,620 --> 03:15:25,680
you

1086
03:15:53,620 --> 03:15:55,680
you

1087
03:16:23,620 --> 03:16:25,680
you

1088
03:16:53,620 --> 03:16:55,680
you

1089
03:17:23,620 --> 03:17:25,680
you

1090
03:17:53,620 --> 03:17:55,620
You

1091
03:57:23,620 --> 03:57:30,780
music

1092
03:57:30,780 --> 03:57:32,900
music

1093
03:57:32,900 --> 03:57:34,380
music

1094
03:57:34,380 --> 03:57:36,380
music

1095
03:57:36,380 --> 03:57:38,380
music

1096
03:57:38,380 --> 03:57:40,380
music

1097
03:57:40,380 --> 03:57:42,380
music

1098
03:57:42,380 --> 03:57:44,380
music

1099
03:57:44,380 --> 03:57:46,380
music

1100
03:57:46,380 --> 03:57:48,380
music

1101
03:57:48,380 --> 03:57:50,380
music

1102
03:57:50,380 --> 03:57:52,380
music

1103
03:57:52,380 --> 03:57:54,440
you

1104
03:58:22,380 --> 03:58:24,440
you

1105
03:58:52,380 --> 03:58:54,440
you

1106
03:59:22,380 --> 03:59:24,440
you

1107
03:59:52,380 --> 03:59:54,440
you

1108
04:00:22,380 --> 04:00:24,440
you

1109
04:00:52,380 --> 04:00:54,440
you

1110
04:01:22,380 --> 04:01:24,440
you

1111
04:01:52,380 --> 04:01:54,440
you

1112
04:02:22,380 --> 04:02:24,440
you

1113
04:02:52,380 --> 04:02:54,440
you

1114
04:03:22,380 --> 04:03:24,440
you

1115
04:03:52,380 --> 04:04:17,140
Welcome back from exercise. I actually cannot hear the jingle if there was one on my side

1116
04:04:17,140 --> 04:04:21,340
but maybe there was one, and hopefully you all enjoy it.

1117
04:04:21,340 --> 04:04:26,180
Thanks to our colleague, Matthias, who created those.

1118
04:04:26,180 --> 04:04:31,340
My plan is now that I want to go through the exercise,

1119
04:04:31,340 --> 04:04:33,500
but show you the key steps,

1120
04:04:33,500 --> 04:04:36,100
and I want to show you how we, how Gecko and we,

1121
04:04:36,100 --> 04:04:40,940
how we look at pull requests when we create them

1122
04:04:40,940 --> 04:04:45,540
and how we look at them when we merge them.

1123
04:04:45,540 --> 04:04:49,100
and I also want to go through this step of deleting branches.

1124
04:04:49,100 --> 04:04:52,020
And then we will take a very short break.

1125
04:04:52,020 --> 04:04:54,220
So then only five minute break,

1126
04:04:54,220 --> 04:04:57,140
and then we will back for conflict resolution.

1127
04:04:58,900 --> 04:05:01,060
So let me go through the steps.

1128
04:05:01,060 --> 04:05:04,060
I'm now here, top left is my mouse.

1129
04:05:04,060 --> 04:05:05,580
I'm in my branch.

1130
04:05:05,580 --> 04:05:09,140
I will now initiate a pull request.

1131
04:05:12,780 --> 04:05:14,700
Let me get more space here.

1132
04:05:14,700 --> 04:05:15,540
Oops.

1133
04:05:17,680 --> 04:05:20,560
And the first thing I always verify is from where to where.

1134
04:05:20,560 --> 04:05:25,560
So I want to go from this repository to this one.

1135
04:05:26,280 --> 04:05:28,240
No, I want to go to my own one.

1136
04:05:28,240 --> 04:05:31,840
So I will change this to my repository.

1137
04:05:33,560 --> 04:05:36,800
And then I verify from which branch to which branch.

1138
04:05:36,800 --> 04:05:38,240
From new recipe to main.

1139
04:05:38,240 --> 04:05:39,600
Yes, that's what I wanted.

1140
04:05:39,600 --> 04:05:45,920
I will change the title because a new recipe is not very descriptive.

1141
04:05:45,920 --> 04:05:50,920
So we want to have a descriptive one-line title for this was so if I remember correctly

1142
04:05:50,920 --> 04:06:00,600
it was so idea for a tasty pineapple salad.

1143
04:06:00,600 --> 04:06:09,360
Here I can give more context more context for instance if if we discussed this earlier

1144
04:06:09,360 --> 04:06:17,860
in an issue, I can refer to it. So more context, why I did this, what I did. And then what

1145
04:06:17,860 --> 04:06:24,140
I personally do before clicking create pull request, I normally scroll down and I have

1146
04:06:24,140 --> 04:06:33,420
a look. I had two commits. Are these the one that I intended to send? Yes. If I see some

1147
04:06:33,420 --> 04:06:39,660
commits that I don't recognize, then I stop. I also scroll down to the bottom and I see

1148
04:06:39,660 --> 04:06:47,780
what is the actual change. Is this the one that I wanted to send? Yes, this is the one.

1149
04:06:47,780 --> 04:06:55,820
So this looks all pretty good. Note that here if I go on the little arrow I have a choice

1150
04:06:55,820 --> 04:07:01,940
between create pull request and create draft pull request we will this thing can be really

1151
04:07:01,940 --> 04:07:07,620
useful but we will come back to that on Thursday. I'm now ready to create a pull

1152
04:07:07,620 --> 04:07:18,300
request. Did I forget anything? Hopefully not. Let's create it. When I create a pull

1153
04:07:18,300 --> 04:07:24,180
request there is a new number here in the tab pull requests. Each pull request

1154
04:07:24,180 --> 04:07:31,060
has a number so I can refer to them. This is the pull request number one.

1155
04:07:31,940 --> 04:07:35,720
And before I review it and before I merge it,

1156
04:07:37,840 --> 04:07:39,800
I will try to reload my network graph

1157
04:07:39,800 --> 04:07:42,100
and it might take again a few seconds.

1158
04:07:43,240 --> 04:07:45,040
But what I wanted to show you is that

1159
04:07:45,040 --> 04:07:48,940
just by opening up a request, I didn't really,

1160
04:07:51,520 --> 04:07:52,760
oh, nothing merged yet.

1161
04:07:52,760 --> 04:07:55,060
The main branch didn't change yet.

1162
04:07:57,320 --> 04:07:58,680
This is still my branch.

1163
04:07:58,680 --> 04:08:03,020
The tasty pineapple recipe is still not on the main branch,

1164
04:08:04,800 --> 04:08:06,080
but now let's review it.

1165
04:08:08,240 --> 04:08:12,760
And when I merge a change proposal or request,

1166
04:08:13,600 --> 04:08:18,600
I look at the same things, the title, what is the context?

1167
04:08:22,340 --> 04:08:24,740
And notice that here we can even have a discussion.

1168
04:08:24,740 --> 04:08:26,740
You can comment on it.

1169
04:08:26,740 --> 04:08:29,020
You can say this is a good idea, this is a bad idea.

1170
04:08:29,020 --> 04:08:32,300
You can give ideas for changes.

1171
04:08:33,940 --> 04:08:37,660
More about that on Thursday.

1172
04:08:37,660 --> 04:08:40,740
I also look at what are the commits

1173
04:08:41,980 --> 04:08:43,100
and what has actually changed.

1174
04:08:43,100 --> 04:08:45,000
I often click here, files changed.

1175
04:08:49,060 --> 04:08:50,540
Yep, that looks pretty okay.

1176
04:08:50,540 --> 04:08:52,980
I want to have that in my main branch.

1177
04:08:56,740 --> 04:09:08,420
merge, merge, confirm

1178
04:09:08,420 --> 04:09:18,780
and now it's merged, so when I now look at the network and reload it

1179
04:09:18,780 --> 04:09:24,300
we will see a merge commit, we will see a new commit on main which combines these two

1180
04:09:24,300 --> 04:09:35,260
developments. And while this is loading and refreshing, I can already, if I now check

1181
04:09:35,260 --> 04:09:45,740
on my main branch, and I go to Salads, here I can find it. Here's the one. Has this finished

1182
04:09:45,740 --> 04:09:52,700
in the meantime? It hasn't. Yes, here it is. Here's the merge commit. So now I have merged

1183
04:09:52,700 --> 04:09:53,820
these two changes.

1184
04:09:54,780 --> 04:09:56,260
And this is now a little bit hard to navigate

1185
04:09:56,260 --> 04:09:57,980
because we have now so many collaborators

1186
04:09:57,980 --> 04:09:59,940
that work on a very similar repository.

1187
04:10:01,140 --> 04:10:03,160
But this is really what I wanted to do.

1188
04:10:03,160 --> 04:10:04,560
So I'm happy with this.

1189
04:10:06,620 --> 04:10:08,540
But now I want to go one step further.

1190
04:10:08,540 --> 04:10:11,060
In the exercise, we asked you to,

1191
04:10:11,060 --> 04:10:12,660
okay, scroll, scroll.

1192
04:10:13,860 --> 04:10:16,320
We asked you to delete a branch.

1193
04:10:16,320 --> 04:10:19,900
And what I will show you is that when I delete a branch,

1194
04:10:19,900 --> 04:10:23,320
I will only delete this sticky note.

1195
04:10:23,320 --> 04:10:25,060
I will not delete the commits.

1196
04:10:25,060 --> 04:10:26,500
The commits will still remain there

1197
04:10:26,500 --> 04:10:30,600
because the commits are now part of another branch.

1198
04:10:31,880 --> 04:10:36,580
So what we wanted you to see that deleting branches

1199
04:10:36,580 --> 04:10:39,460
doesn't necessarily delete commits.

1200
04:10:39,460 --> 04:10:41,660
And we also wanted to show you

1201
04:10:41,660 --> 04:10:44,000
how can you safely remove branches.

1202
04:10:44,000 --> 04:10:53,200
One way is I can click on the button and then it's gone because here Git knows that GitHub

1203
04:10:53,200 --> 04:10:55,680
knows that this has been merged.

1204
04:10:55,680 --> 04:10:57,880
It is safe to delete the branch.

1205
04:10:57,880 --> 04:11:01,480
It is safe to delete the sticky note.

1206
04:11:01,480 --> 04:11:04,200
But what if I forget?

1207
04:11:04,200 --> 04:11:06,440
I forgot.

1208
04:11:06,440 --> 04:11:10,880
I navigated back.

1209
04:11:10,880 --> 04:11:14,200
How can you find out which branches are safe to delete?

1210
04:11:14,200 --> 04:11:15,200
You can also leave them there.

1211
04:11:15,200 --> 04:11:18,120
I mean, they don't cost anything.

1212
04:11:18,120 --> 04:11:20,720
No problem to have them there.

1213
04:11:20,720 --> 04:11:23,720
But after a while, maybe you will have, I have now five branches.

1214
04:11:23,720 --> 04:11:28,760
After a while, you might have 50 branches and you want to do some cleanup.

1215
04:11:28,760 --> 04:11:40,000
So what I sometimes do is I navigate here to the branches, top left.

1216
04:11:40,000 --> 04:11:46,720
And this is a little bit tiny font, but this symbol here tells me that this branch has

1217
04:11:46,720 --> 04:11:52,880
been merged.

1218
04:11:52,880 --> 04:11:54,880
This one has been merged, the new recipe.

1219
04:11:54,880 --> 04:12:01,800
It is absolutely safe to delete it, your trashcan.

1220
04:12:01,800 --> 04:12:03,240
And now it's deleted.

1221
04:12:03,240 --> 04:12:14,880
And if I now reload this page, I would have to wait a few seconds. The commit will still

1222
04:12:14,880 --> 04:12:27,240
be here. But this sticky note would be gone. That's all we did with deleting branches.

1223
04:12:27,240 --> 04:12:28,240
Super

1224
04:12:28,240 --> 04:12:33,240
And my suggestion is that we will take a five minute break

1225
04:12:36,280 --> 04:12:39,340
and then [Name] and me will return to step number seven

1226
04:12:39,340 --> 04:12:44,340
and we will do a pull request.

1227
04:12:44,980 --> 04:12:47,640
We will show you a pull request across repositories.

1228
04:12:49,400 --> 04:12:53,020
And at the same time, we will try to create a conflict,

1229
04:12:53,020 --> 04:12:54,740
but it will be a conflict

1230
04:12:54,740 --> 04:12:57,940
between two different code versions.

1231
04:12:57,940 --> 04:13:05,940
So it will be very friendly and the humans will help the programs to resolve the conflict.

1232
04:13:08,940 --> 04:13:10,640
Sounds good.

1233
04:13:10,640 --> 04:13:14,840
Just catching up here with any questions.

1234
04:13:14,840 --> 04:13:16,840
Yeah, so let's take a break until the full hour.

1235
04:13:16,840 --> 04:13:20,040
So until...

1236
04:13:20,040 --> 04:13:22,640
I need to make that visible.

1237
04:13:22,640 --> 04:13:25,560
here, break until the full hour.

1238
04:13:25,560 --> 04:13:30,520
And then we show you some conflict resolution

1239
04:13:30,520 --> 04:13:33,120
in Git directly on GitHub.

1240
04:13:35,640 --> 04:13:37,600
See you in five minutes.

1241
04:13:37,600 --> 04:13:38,440
Bye.

1242
04:13:52,640 --> 04:13:54,700
you

1243
04:14:22,640 --> 04:14:24,700
you

1244
04:14:52,640 --> 04:14:54,700
you

1245
04:15:22,640 --> 04:15:24,700
you

1246
04:15:52,640 --> 04:15:54,700
you

1247
04:16:22,640 --> 04:16:24,700
you

1248
04:16:52,640 --> 04:16:54,700
you

1249
04:17:22,640 --> 04:17:24,700
you

1250
04:17:52,640 --> 04:17:54,700
you

1251
04:18:22,640 --> 04:18:24,700
you

1252
04:18:52,640 --> 04:19:19,920
And welcome back for the last half an hour of today.

1253
04:19:19,920 --> 04:19:30,500
Here we will continue on the idea of creating these change proposals pull requests on GitHub.

1254
04:19:30,500 --> 04:19:33,600
But now we want to take it a step further.

1255
04:19:33,600 --> 04:19:40,880
Because what I will try to do is I will try to create a pull request between my repository

1256
04:19:40,880 --> 04:19:45,400
and towards the one that I forked from.

1257
04:19:45,400 --> 04:19:48,640
At the same time, we will, with Kaggle,

1258
04:19:48,640 --> 04:19:53,160
we will try to change the same recipe

1259
04:19:55,120 --> 04:19:57,760
in two different ways, and we will see what happens

1260
04:19:57,760 --> 04:19:59,040
and how do we deal with it.

1261
04:19:59,040 --> 04:20:00,720
Because that can happen in real life,

1262
04:20:00,720 --> 04:20:02,080
that you work with somebody

1263
04:20:02,940 --> 04:20:06,740
and you modify the same portion of the file

1264
04:20:06,740 --> 04:20:07,840
in two different ways.

1265
04:20:09,400 --> 04:20:12,160
Let's see how Git deals with this.

1266
04:20:12,160 --> 04:20:14,780
Also note that when I'm now on my fork,

1267
04:20:14,780 --> 04:20:19,100
it informs me that this branch, which is the main branch,

1268
04:20:20,100 --> 04:20:25,100
seems to be four commits ahead of the one that I forked from.

1269
04:20:29,740 --> 04:20:34,180
That's interesting because that also shows me

1270
04:20:34,180 --> 04:20:38,860
that the fork and the so-called upstream,

1271
04:20:38,860 --> 04:20:43,860
they don't automatically synchronize somehow magically.

1272
04:20:44,780 --> 04:20:51,620
I have to, we can synchronize it, but we have to do it actively.

1273
04:20:51,620 --> 04:20:57,340
So until I do it, they are really separate repositories with their separate histories.

1274
04:20:57,340 --> 04:20:58,340
Why four commits?

1275
04:20:58,340 --> 04:21:01,180
What are the four commits?

1276
04:21:01,180 --> 04:21:07,300
I did two commits on the new recipe branch.

1277
04:21:07,300 --> 04:21:09,580
I did a different commit on the main branch.

1278
04:21:09,580 --> 04:21:10,580
So three.

1279
04:21:10,580 --> 04:21:11,580
Where is the fourth one?

1280
04:21:11,580 --> 04:21:14,020
The fourth one was the merge commit.

1281
04:21:14,020 --> 04:21:17,820
It was the one where I combined new recipe with main.

1282
04:21:17,820 --> 04:21:20,980
So my branch is four commits ahead.

1283
04:21:20,980 --> 04:21:27,760
But now I will try to create a new change, and let's see what we do.

1284
04:21:27,760 --> 04:21:36,500
I will create a new branch, and I will call it another recipe.

1285
04:21:36,500 --> 04:21:38,300
It's not a great name.

1286
04:21:38,300 --> 04:21:40,060
It's also good if the branches are,

1287
04:21:42,340 --> 04:21:44,340
if the branch name is descriptive.

1288
04:21:44,340 --> 04:21:46,240
Let me take a descriptive branch name.

1289
04:21:47,500 --> 04:21:50,380
I personally like to call my branches with my name

1290
04:21:51,300 --> 04:21:53,500
because then I can find them again

1291
04:21:53,500 --> 04:21:55,320
and what I'm doing on the branch.

1292
04:21:55,320 --> 04:21:57,480
So in this case, I will do,

1293
04:22:00,380 --> 04:22:04,200
I will make a change to modify guacamole.

1294
04:22:06,940 --> 04:22:08,120
So now everybody, please watch.

1295
04:22:08,120 --> 04:22:10,760
So now no more exercise, you don't have to,

1296
04:22:10,760 --> 04:22:13,120
you don't have to do the same thing.

1297
04:22:13,120 --> 04:22:16,360
Now, please watch and let's see if I,

1298
04:22:18,840 --> 04:22:20,280
if I make some mistakes

1299
04:22:20,280 --> 04:22:21,760
and please continue asking the questions.

1300
04:22:21,760 --> 04:22:23,600
So I'm seeing the questions coming in.

1301
04:22:24,840 --> 04:22:26,120
I create this branch.

1302
04:22:30,320 --> 04:22:32,160
What do I need to do now?

1303
04:22:32,160 --> 04:22:33,600
Oh yeah, here, create branch.

1304
04:22:34,600 --> 04:22:35,440
Yes.

1305
04:22:35,440 --> 04:22:39,840
And here it is, so I'm on the new branch.

1306
04:22:39,840 --> 04:22:40,840
And guess what?

1307
04:22:40,840 --> 04:22:49,800
I will now modify the guacamole, which happens to be here, sides, guacamole.

1308
04:22:49,800 --> 04:22:55,880
And I can modify it directly here, the pen button on top right, edit.

1309
04:22:55,880 --> 04:22:59,140
What should we do with it?

1310
04:22:59,140 --> 04:23:02,360
So I personally am not a big fan of cilantro.

1311
04:23:02,360 --> 04:23:13,900
What I will do is I will reduce the cilantro amount to 0.5 tablespoons.

1312
04:23:13,900 --> 04:23:20,580
Something I like to do when I do this on GitHub is I switch on the preview so that I can see

1313
04:23:20,580 --> 04:23:23,660
what did I actually change.

1314
04:23:23,660 --> 04:23:39,580
showed it here I removed one I added 0.5 that looks good and now I want to commit change

1315
04:23:39,580 --> 04:23:43,620
on the branch

1316
04:23:43,620 --> 04:23:48,780
this is not a good commit message because it's it tells me what file I change but it

1317
04:23:48,780 --> 04:23:52,160
it doesn't really summarize what I did.

1318
04:23:52,160 --> 04:23:54,020
A much better commit message would be

1319
04:23:55,160 --> 04:23:56,960
reduce the cilantro amount.

1320
04:23:58,780 --> 04:24:00,000
And why did I change it?

1321
04:24:00,000 --> 04:24:02,200
Well, because I'm not a fan.

1322
04:24:07,800 --> 04:24:09,520
Does this look okay?

1323
04:24:09,520 --> 04:24:10,800
Yes.

1324
04:24:10,800 --> 04:24:13,000
Do the Guacamole branch commit changes.

1325
04:24:13,000 --> 04:24:27,800
If I now go back to my repository on top, there is this yellow field that also some

1326
04:24:27,800 --> 04:24:28,800
people were wondering about.

1327
04:24:28,800 --> 04:24:29,800
What is that?

1328
04:24:29,800 --> 04:24:33,640
This is because GitHub now recognized that I have a new branch.

1329
04:24:33,640 --> 04:24:36,640
I modified it recently.

1330
04:24:36,640 --> 04:24:38,480
I maybe want to create a pull request.

1331
04:24:38,480 --> 04:24:39,480
Yes.

1332
04:24:39,480 --> 04:24:40,480
Thank you.

1333
04:24:40,480 --> 04:24:41,480
I want to.

1334
04:24:41,480 --> 04:24:42,480
So this can be helpful sometimes.

1335
04:24:42,480 --> 04:24:44,640
If you don't want to create a pull request, just ignore it.

1336
04:24:44,640 --> 04:24:46,300
But I really want to.

1337
04:24:47,920 --> 04:24:48,820
And this time,

1338
04:24:50,760 --> 04:24:52,620
I want to create the pull request,

1339
04:24:52,620 --> 04:24:55,920
not inside the same repository.

1340
04:24:55,920 --> 04:24:58,700
I really want to send it to Code Refinery recipe book.

1341
04:24:59,640 --> 04:25:00,480
So this looks good.

1342
04:25:00,480 --> 04:25:02,580
From my branch, from my repository,

1343
04:25:03,680 --> 04:25:06,920
towards the main branch, Code Refinery recipe book.

1344
04:25:09,800 --> 04:25:11,620
Let's summarize it in a title.

1345
04:25:12,480 --> 04:25:16,160
reduce cilantro amount

1346
04:25:19,440 --> 04:25:24,960
more description if needed again i scroll down what is the change

1347
04:25:28,560 --> 04:25:32,560
here is the change now how come i see all these other things

1348
04:25:37,680 --> 04:25:40,480
which i didn't modify now this is because

1349
04:25:42,480 --> 04:25:46,880
my main branch was four commits ahead

1350
04:25:46,880 --> 04:25:49,080
and I created this new,

1351
04:25:49,080 --> 04:25:51,560
I created this, what was it called?

1352
04:25:52,600 --> 04:25:54,640
The other one modified guacamole from main,

1353
04:25:54,640 --> 04:25:56,120
which was four commits ahead.

1354
04:25:56,120 --> 04:26:01,120
So what I see here is not only the cilantro change,

1355
04:26:01,800 --> 04:26:03,720
but also all my other local changes.

1356
04:26:05,080 --> 04:26:07,080
This is fine, but maybe this is a bit misleading.

1357
04:26:07,080 --> 04:26:09,480
So it's not only the cilantro amount,

1358
04:26:09,480 --> 04:26:14,480
it's also plus new salad recipe.

1359
04:26:20,280 --> 04:26:22,760
So here I bake together a couple of unrelated changes

1360
04:26:22,760 --> 04:26:25,920
into the same pull request.

1361
04:26:25,920 --> 04:26:28,880
Not the best practice, but happens.

1362
04:26:33,960 --> 04:26:38,560
And now I will open the pull request.

1363
04:26:39,480 --> 04:26:48,040
Oh, there are already 18 pull requests, wonderful.

1364
04:26:48,040 --> 04:26:49,480
We will review them later.

1365
04:26:49,480 --> 04:26:53,600
We will maybe not have time now, but thanks to everybody else who sent pull requests.

1366
04:26:53,600 --> 04:26:58,960
This is really cool because we can now build together a recipe book.

1367
04:26:58,960 --> 04:27:02,320
But I suggest that now we switch the screen to [Name] and [Name] makes a pull request,

1368
04:27:02,320 --> 04:27:07,720
which will also modify the guacamole recipe, but in a different way.

1369
04:27:07,720 --> 04:27:09,320
and let's see what happens then.

1370
04:27:23,720 --> 04:27:24,920
And [Name], you're muted.

1371
04:27:27,320 --> 04:27:29,480
Thanks for telling me.

1372
04:27:29,480 --> 04:27:34,000
So I'm now on my fork of the recipe book recorded repository

1373
04:27:35,600 --> 04:27:37,360
and I will now change the same recipe

1374
04:27:37,360 --> 04:27:39,320
that [Name] has changed before.

1375
04:27:40,440 --> 04:27:43,040
In fact, in the previous exercise,

1376
04:27:43,040 --> 04:27:44,160
I changed the amount already,

1377
04:27:44,160 --> 04:27:48,240
but I will now increase it to two tablespoons of cilantro.

1378
04:27:48,240 --> 04:27:49,640
Oh, go for three.

1379
04:27:49,640 --> 04:27:50,840
I'll go for three, okay.

1380
04:27:53,400 --> 04:27:55,500
So I will now make a commit.

1381
04:27:55,500 --> 04:28:00,500
So I will now say, increase amount of cilantro.

1382
04:28:02,880 --> 04:28:05,640
Again, I could provide some more extended description,

1383
04:28:05,640 --> 04:28:07,360
is, I don't know, I really like

1384
04:28:13,880 --> 04:28:14,840
cilantro, for instance,

1385
04:28:14,840 --> 04:28:17,220
and of course provide some more explanations.

1386
04:28:17,220 --> 04:28:19,040
But for now, that should be enough.

1387
04:28:19,040 --> 04:28:22,040
I will now commit the changes.

1388
04:28:22,040 --> 04:28:23,760
So I have created now a new commit.

1389
04:28:23,760 --> 04:28:25,360
So if I go back to my repository,

1390
04:28:28,840 --> 04:28:31,040
I will see now again, if I click on commits,

1391
04:28:35,640 --> 04:28:38,120
Oh, sorry, that's the wrong branch, my bad.

1392
04:28:38,120 --> 04:28:41,860
So I go now to the change cilantro branch.

1393
04:28:43,000 --> 04:28:45,540
And I take a look at the commits, it should appear now.

1394
04:28:46,920 --> 04:28:47,840
And it does.

1395
04:28:47,840 --> 04:28:50,580
So increase amount of cilantro, that's fine.

1396
04:28:50,580 --> 04:28:52,940
And now I compare pull requests.

1397
04:28:55,840 --> 04:28:57,400
Create a pull request.

1398
04:28:57,400 --> 04:29:00,480
So I go and choose the repository I want to

1399
04:29:01,540 --> 04:29:02,960
merge my changes to.

1400
04:29:02,960 --> 04:29:06,340
So this would then be co-definery recipe book recorded.

1401
04:29:06,340 --> 04:29:07,180
That's fine.

1402
04:29:07,180 --> 04:29:08,020
I enter the main branch

1403
04:29:08,020 --> 04:29:11,260
and I do it from my local branch here,

1404
04:29:11,260 --> 04:29:13,660
which is in my namespace

1405
04:29:13,660 --> 04:29:18,660
and I use the change cilantro branch.

1406
04:29:18,700 --> 04:29:20,700
So I can now say, again,

1407
04:29:20,700 --> 04:29:22,700
I should also provide a title which is more descriptive.

1408
04:29:22,700 --> 04:29:27,140
So increase cilantro in,

1409
04:29:27,140 --> 04:29:32,140
Oh, remind me of the way, it's okay.

1410
04:29:36,940 --> 04:29:38,060
Guacamole recipe.

1411
04:29:39,300 --> 04:29:41,380
Then I quickly check the changes.

1412
04:29:41,380 --> 04:29:43,700
In this case, I have two commits.

1413
04:29:43,700 --> 04:29:45,620
One in the first, which was in the previous exercise,

1414
04:29:45,620 --> 04:29:47,400
where I reduced it, now I increased it.

1415
04:29:47,400 --> 04:29:49,380
And here, down here again, I see the changes

1416
04:29:49,380 --> 04:29:51,140
actually in the files directly.

1417
04:29:51,140 --> 04:29:52,740
So this is what I want to merge.

1418
04:29:52,740 --> 04:29:55,260
And I can see here that I increased the amount

1419
04:29:55,260 --> 04:30:02,580
Cilantro by free. So I will now create the pull request and then I will give the

1420
04:30:02,580 --> 04:30:05,820
screen back to another one.

1421
04:30:06,980 --> 04:30:12,460
All righty, I will take the screen and let's see how it looks on my side.

1422
04:30:13,140 --> 04:30:16,580
Just a sec.

1423
04:30:18,220 --> 04:30:21,500
Here I have it.

1424
04:30:25,260 --> 04:30:30,260
And I'm now looking at the, that's not my fork,

1425
04:30:31,340 --> 04:30:33,720
that's the central repository.

1426
04:30:34,700 --> 04:30:37,340
And I clicked on the pull requests map.

1427
04:30:37,340 --> 04:30:39,300
There are 21 open, 22 now.

1428
04:30:40,580 --> 04:30:41,780
Thanks to all of you,

1429
04:30:41,780 --> 04:30:45,260
we will look through them and merge them.

1430
04:30:45,260 --> 04:30:47,140
Maybe some of you tried to merge these

1431
04:30:47,140 --> 04:30:49,580
and now you realize that you cannot.

1432
04:30:49,580 --> 04:30:50,760
And this is a bit by design,

1433
04:30:50,760 --> 04:30:53,560
but now because now only the code refinery team

1434
04:30:53,560 --> 04:30:57,640
has the permissions to merge and modify this repository.

1435
04:30:58,480 --> 04:31:01,680
But don't worry, we will on Thursday

1436
04:31:01,680 --> 04:31:04,440
when we really practice collaboration,

1437
04:31:04,440 --> 04:31:06,360
we will create exercise repositories

1438
04:31:06,360 --> 04:31:09,320
where you also have permissions to review

1439
04:31:09,320 --> 04:31:11,160
and merge and modify those.

1440
04:31:12,120 --> 04:31:16,280
So then you will also practice being the person

1441
04:31:16,280 --> 04:31:17,880
who is reviewing these changes.

1442
04:31:20,600 --> 04:31:23,360
So now I want to focus on two changes.

1443
04:31:23,360 --> 04:31:27,220
One is the one that I created,

1444
04:31:27,220 --> 04:31:30,900
and the other one is the one that [Name] created.

1445
04:31:30,900 --> 04:31:34,020
And now I will do something which is not super nice.

1446
04:31:34,020 --> 04:31:35,500
I shouldn't really review my own changes,

1447
04:31:35,500 --> 04:31:36,780
but now for the sake of time,

1448
04:31:36,780 --> 04:31:39,700
I don't want to switch too much back and forth.

1449
04:31:39,700 --> 04:31:43,080
I will review my own change.

1450
04:31:45,360 --> 04:31:46,860
And of course it's excellent,

1451
04:31:46,860 --> 04:31:49,780
but I will still double check here.

1452
04:31:49,780 --> 04:31:51,980
Is this what I really wanted?

1453
04:31:51,980 --> 04:31:53,740
what's happening here, lots of changes,

1454
04:31:53,740 --> 04:31:57,220
but that looks pretty okay.

1455
04:31:57,220 --> 04:32:02,220
Overall, I will merge it into main branch.

1456
04:32:08,940 --> 04:32:11,660
And now it is, is it safe to delete?

1457
04:32:11,660 --> 04:32:13,660
Yes, it's safe to delete.

1458
04:32:13,660 --> 04:32:18,340
Now it is on the main branch in the central repository.

1459
04:32:19,500 --> 04:32:20,340
And that worked.

1460
04:32:20,340 --> 04:32:28,260
But let's see what happens when I now try to merge [Name]'s change.

1461
04:32:28,260 --> 04:32:35,720
This one, the pull request number 39.

1462
04:32:35,720 --> 04:32:39,440
Here we go.

1463
04:32:39,440 --> 04:32:43,020
Something is different here and it's this one.

1464
04:32:43,020 --> 04:32:49,960
It doesn't let me merge, I can't really click here because there are conflicts.

1465
04:32:49,960 --> 04:32:51,080
And why are there conflicts?

1466
04:32:51,080 --> 04:32:55,640
Because on two different branches, we have changed the same portion in two different

1467
04:32:55,640 --> 04:32:56,640
ways.

1468
04:32:56,640 --> 04:33:01,240
The Git now doesn't know which one do we want to keep, like, do we want to keep the one

1469
04:33:01,240 --> 04:33:03,280
that is now on main?

1470
04:33:03,280 --> 04:33:08,720
Or do I want to keep the one that the change that comes in from this other branch, and

1471
04:33:08,720 --> 04:33:12,240
we have to help get deciding.

1472
04:33:12,240 --> 04:33:17,120
It's really good that it stops here, because it doesn't, it will not just accidentally

1473
04:33:17,120 --> 04:33:29,900
let Gago override my changes. So it stops here. It, it needs some human advice. So let's try

1474
04:33:29,900 --> 04:33:36,280
it together. And you can, you can do it in many different ways, but we will try it here

1475
04:33:36,280 --> 04:33:42,980
directly on GitHub and Gago will help me. So I click first on resolve conflicts just

1476
04:33:42,980 --> 04:33:53,740
just to see what is the conflict.

1477
04:33:53,740 --> 04:33:58,780
And it doesn't now show me all the, if you remember, I have changed a couple of files.

1478
04:33:58,780 --> 04:34:02,460
It was, I changed guacamole, but there was also some pineapple salad and there was some

1479
04:34:02,460 --> 04:34:05,140
other change.

1480
04:34:05,140 --> 04:34:13,000
But we only conflict in this one file, and we only conflict in this one portion.

1481
04:34:13,000 --> 04:34:22,900
These that I see here, these symbols are so-called conflict markers, they tell me where

1482
04:34:22,900 --> 04:34:25,280
is the conflict.

1483
04:34:25,280 --> 04:34:33,460
And the conflict is between main and between the main branch, and the change cylinder branch.

1484
04:34:33,460 --> 04:34:35,980
On the main branch, I reduced it to 0.5.

1485
04:34:35,980 --> 04:34:42,460
On the ChangeCylinder branch, it was changed from 1 to 3.

1486
04:34:42,460 --> 04:34:46,340
And we need to decide now.

1487
04:34:46,340 --> 04:34:55,940
And I will now not take my own version, but I will take this version.

1488
04:34:55,940 --> 04:34:59,620
And the way to resolve a conflict is, and whether you are on GitHub or whether you are

1489
04:34:59,620 --> 04:35:03,980
and your editor, that's to decide which version.

1490
04:35:03,980 --> 04:35:06,900
And then don't forget to remove these markers also.

1491
04:35:06,900 --> 04:35:07,840
They should not stay there.

1492
04:35:07,840 --> 04:35:12,840
So I will, I decide to keep three, remove these markers.

1493
04:35:18,240 --> 04:35:22,040
And once we are happy, mark it as resolved.

1494
04:35:22,040 --> 04:35:36,240
And now what we don't see because I'm zoomed in is that on the top right there is a button

1495
04:35:36,240 --> 04:35:37,240
commit merge.

1496
04:35:37,240 --> 04:35:44,880
I also this resolution needs to be committed to be a new commit that decides between the

1497
04:35:44,880 --> 04:35:47,760
two versions.

1498
04:35:47,760 --> 04:36:03,420
the merge. So these were, [Name] did in fact two commits, one was this one, one was this.

1499
04:36:03,420 --> 04:36:08,580
Where does this come from? This was my resolution commit. The conflict resolution created a

1500
04:36:08,580 --> 04:36:17,460
new commit because it merges between [Name]'s branch and the main branch.

1501
04:36:17,460 --> 04:36:19,740
Now, before I merge it, I want to review

1502
04:36:19,740 --> 04:36:21,820
what did we get at the end.

1503
04:36:21,820 --> 04:36:22,940
Files changed.

1504
04:36:27,660 --> 04:36:32,500
At the end, it's changed from 0.5 to three.

1505
04:36:33,860 --> 04:36:34,700
Are we happy?

1506
04:36:34,700 --> 04:36:35,940
We are happy.

1507
04:36:35,940 --> 04:36:36,780
Let's merge.

1508
04:36:39,300 --> 04:36:42,380
This was a relatively easy conflict.

1509
04:36:42,380 --> 04:36:49,020
Sometimes, the conflict will require that you actually talk to the other person and

1510
04:36:49,020 --> 04:36:55,960
discuss with them on, maybe you schedule a video call, but at least now you know technically

1511
04:36:55,960 --> 04:37:04,920
on how to tell Git which version you like better.

1512
04:37:04,920 --> 04:37:11,620
Back to the lesson, I will now scroll down to the summary.

1513
04:37:11,620 --> 04:37:12,460
What did we learn?

1514
04:37:12,460 --> 04:37:13,460
And what did we learn in this lesson?

1515
04:37:13,460 --> 04:37:14,940
What did we learn today?

1516
04:37:16,020 --> 04:37:18,660
We learned how to browse a project,

1517
04:37:18,660 --> 04:37:20,940
how to create commits and branches.

1518
04:37:20,940 --> 04:37:23,580
And in this episode, we learned how to merge them,

1519
04:37:23,580 --> 04:37:25,420
how to merge two branches together.

1520
04:37:25,420 --> 04:37:27,420
This is the basis of collaboration.

1521
04:37:27,420 --> 04:37:29,740
We will use this a lot on Thursday.

1522
04:37:31,620 --> 04:37:35,140
And it's really useful also for your own work.

1523
04:37:35,140 --> 04:37:40,140
If you want to put something unfinished

1524
04:37:40,140 --> 04:37:43,180
finished or something that you aren't sure about

1525
04:37:43,180 --> 04:37:45,220
on a side branch and not on main.

1526
04:37:46,420 --> 04:37:49,620
But when you are new to Git, it's also fine really

1527
04:37:49,620 --> 04:37:54,540
to start just with one branch, create commits.

1528
04:37:54,540 --> 04:37:58,340
Better to many commits than to few commits.

1529
04:37:58,340 --> 04:37:59,940
They don't have to be beautiful.

1530
04:38:02,580 --> 04:38:04,380
And same with pull requests.

1531
04:38:04,380 --> 04:38:07,940
If I may quickly mention this one question

1532
04:38:07,940 --> 04:38:10,640
which came up in the documents,

1533
04:38:10,640 --> 04:38:13,000
what to do if I have like a pull request

1534
04:38:13,000 --> 04:38:14,800
and I only want to merge half of it.

1535
04:38:15,760 --> 04:38:17,200
I think the best strategy

1536
04:38:17,200 --> 04:38:19,200
is to create many small pull requests

1537
04:38:19,200 --> 04:38:20,320
if you're able to separate it

1538
04:38:20,320 --> 04:38:22,320
so that this situation doesn't arise.

1539
04:38:22,320 --> 04:38:23,700
So in the ideal case,

1540
04:38:23,700 --> 04:38:27,760
you have one pull request for one encapsulated feature

1541
04:38:27,760 --> 04:38:32,220
or one change instead of one huge one.

1542
04:38:33,800 --> 04:38:34,640
Exactly.

1543
04:38:34,640 --> 04:38:37,320
So at the beginning, start using these features.

1544
04:38:37,320 --> 04:38:39,920
then later what is a good practice

1545
04:38:39,920 --> 04:38:42,640
is to not put unrelated things into a commit

1546
04:38:43,560 --> 04:38:46,400
because it is hard to separate unrelated things.

1547
04:38:46,400 --> 04:38:49,640
Also don't put too much into a pull request.

1548
04:38:49,640 --> 04:38:51,480
Not unrelated things into a pull request

1549
04:38:51,480 --> 04:38:53,360
is something I've done here.

1550
04:38:53,360 --> 04:38:58,360
So what if the guacamole recipe change was good

1551
04:38:58,760 --> 04:39:00,960
but my pineapple salad wasn't good?

1552
04:39:00,960 --> 04:39:03,160
So then suddenly it becomes a little bit difficult

1553
04:39:03,160 --> 04:39:04,440
to separate the one from the other.

1554
04:39:04,440 --> 04:39:07,680
So what would it be nicer is to create

1555
04:39:07,680 --> 04:39:12,680
two separate pull requests, which create nice little units.

1556
04:39:14,960 --> 04:39:17,040
A small pull request is easier to review

1557
04:39:17,040 --> 04:39:18,160
than a gigantic one.

1558
04:39:19,080 --> 04:39:21,580
Nobody wants to look through 20,000 lines of code,

1559
04:39:23,360 --> 04:39:26,240
but at the beginning, it's good to use them

1560
04:39:26,240 --> 04:39:27,760
and make it nicer later.

1561
04:39:27,760 --> 04:39:31,680
So don't let the beautiful commits

1562
04:39:31,680 --> 04:39:33,640
and the beautiful pull requests be the enemy

1563
04:39:33,640 --> 04:39:34,800
of just good enough.

1564
04:39:39,280 --> 04:39:42,040
Looking at other questions, we have nine minutes left.

1565
04:39:42,040 --> 04:39:43,120
We want to use it now.

1566
04:39:43,120 --> 04:39:44,320
We can do a little bit more discussion,

1567
04:39:44,320 --> 04:39:46,920
but one thing we should not forget is to,

1568
04:39:46,920 --> 04:39:48,900
we would like to hear feedback from you.

1569
04:39:48,900 --> 04:39:51,800
Maybe somebody can paste our feedback form

1570
04:39:56,280 --> 04:39:57,680
into these documents.

1571
04:39:58,840 --> 04:40:00,120
So what we would like to hear from you

1572
04:40:00,120 --> 04:40:02,140
is what went well today

1573
04:40:02,140 --> 04:40:05,020
then what should we improve today?

1574
04:40:05,020 --> 04:40:08,500
So what should we remove, change, do differently?

1575
04:40:08,500 --> 04:40:09,620
This is very important for us

1576
04:40:09,620 --> 04:40:12,500
because we look at the feedback, we use it.

1577
04:40:12,500 --> 04:40:14,140
If there is something we can improve already

1578
04:40:14,140 --> 04:40:15,500
until tomorrow, we will do.

1579
04:40:22,660 --> 04:40:24,540
And I hear that there is cut visible on the screen

1580
04:40:24,540 --> 04:40:27,140
on the stream and even audible, but I don't hear that.

1581
04:40:27,140 --> 04:40:30,660
So that's too bad for us instructors, [Name],

1582
04:40:30,660 --> 04:40:33,320
but apparently there are some cut sightings on stream.

1583
04:40:37,240 --> 04:40:39,760
So please, now that I share it, please give us feedback.

1584
04:40:39,760 --> 04:40:40,820
Was it, how did it go?

1585
04:40:40,820 --> 04:40:42,300
Was it too fast, too slow?

1586
04:40:44,440 --> 04:40:47,760
Tell us one good thing about today.

1587
04:40:47,760 --> 04:40:49,120
This feedback is anonymous.

1588
04:40:50,680 --> 04:40:52,520
What was good about today?

1589
04:40:52,520 --> 04:40:55,200
Tell us one thing that we should improve for next time.

1590
04:40:55,200 --> 04:40:57,720
And next time is maybe already tomorrow.

1591
04:40:57,720 --> 04:40:59,160
Any other feedback will come.

1592
04:41:00,660 --> 04:41:05,420
And while the feedback is coming in, I want to look at,

1593
04:41:05,420 --> 04:41:07,080
is there any other question?

1594
04:41:09,140 --> 04:41:12,260
Maybe the one about how exactly are conflicts happening?

1595
04:41:12,260 --> 04:41:16,700
For example, what if we change lines?

1596
04:41:16,700 --> 04:41:18,460
What if the change lines are moved?

1597
04:41:19,620 --> 04:41:21,020
Could be considered different lines

1598
04:41:21,020 --> 04:41:23,020
and therefore different entries,

1599
04:41:23,020 --> 04:41:25,840
even if they are changing the same thing.

1600
04:41:25,840 --> 04:41:26,900
That's an excellent question.

1601
04:41:26,900 --> 04:41:29,020
And Git is really smart about this.

1602
04:41:29,020 --> 04:41:30,780
it doesn't look at blind numbers.

1603
04:41:31,660 --> 04:41:36,080
It uses some really smart algorithms to decide

1604
04:41:36,080 --> 04:41:39,540
which parts are the same thing,

1605
04:41:39,540 --> 04:41:42,300
even as the code evolves,

1606
04:41:42,300 --> 04:41:46,660
even across file renames.

1607
04:41:48,340 --> 04:41:49,480
So it is really smart.

1608
04:41:51,900 --> 04:41:54,780
It is often not a problem.

1609
04:41:54,780 --> 04:41:57,700
You will probably not see it when working just on your own.

1610
04:41:57,700 --> 04:41:59,860
You might see it when collaborating.

1611
04:41:59,860 --> 04:42:03,320
When it happens, it's not a big deal.

1612
04:42:04,620 --> 04:42:06,820
You now know how to resolve it technically.

1613
04:42:07,940 --> 04:42:10,660
We will also on Thursday, when we do collaboration,

1614
04:42:10,660 --> 04:42:12,980
we will discuss on what are good strategies

1615
04:42:12,980 --> 04:42:15,900
so that we can avoid conflicts from even happening.

1616
04:42:18,300 --> 04:42:20,820
And in one sentence, the strategy would be

1617
04:42:20,820 --> 04:42:24,460
keep branches small, keep commits small,

1618
04:42:24,460 --> 04:42:28,160
don't do too many things at the same time,

1619
04:42:28,160 --> 04:42:31,260
then the likelihood that there will be conflicts is smaller.

1620
04:42:37,580 --> 04:42:40,240
We are doing amazing with time, five minutes left, yes.

1621
04:42:40,240 --> 04:42:44,920
Did you comment on how we do very similar things tomorrow,

1622
04:42:44,920 --> 04:42:49,240
but with VS code and command line and locally?

1623
04:42:49,240 --> 04:42:50,720
That's a great prompt here.

1624
04:42:50,720 --> 04:42:53,960
There was a question comment about that.

1625
04:42:54,460 --> 04:42:55,300
That's a great.

1626
04:42:55,300 --> 04:42:57,680
So let's, with everything we did today,

1627
04:42:58,700 --> 04:43:01,080
how will that connect to tomorrow?

1628
04:43:04,500 --> 04:43:07,000
Tomorrow we will learn how to clone a repository

1629
04:43:07,000 --> 04:43:08,140
and work locally.

1630
04:43:08,140 --> 04:43:09,740
Some of you have done it already.

1631
04:43:13,100 --> 04:43:15,020
Tomorrow we will take this recipe,

1632
04:43:15,020 --> 04:43:16,660
make a copy onto our computer

1633
04:43:16,660 --> 04:43:21,660
and learn committing, branching, merging locally.

1634
04:43:21,660 --> 04:43:30,820
Locally, we will, this is possible either in VS code or command line.

1635
04:43:30,820 --> 04:43:34,540
But even if you don't, if the command line doesn't work for you, you don't want to install

1636
04:43:34,540 --> 04:43:37,620
VS code, please still come tomorrow.

1637
04:43:37,620 --> 04:43:41,380
Because the other episode tomorrow will not.

1638
04:43:41,380 --> 04:43:44,900
You can do them only on GitHub if you want to.

1639
04:43:44,900 --> 04:43:52,180
So the second episode will be we will do some of the repository browsing and history inspection

1640
04:43:52,180 --> 04:43:56,300
but a little bit more in depth than today.

1641
04:43:56,300 --> 04:43:59,060
We will study a repository that we don't know.

1642
04:43:59,060 --> 04:44:03,540
It's written by somebody else but we will try to figure a few things out about it.

1643
04:44:03,540 --> 04:44:06,740
This is a very typical situation.

1644
04:44:06,740 --> 04:44:13,060
And then tomorrow the finale will be to turn your own project and it doesn't have to be

1645
04:44:13,060 --> 04:44:15,420
a real project where you don't have to share your project

1646
04:44:15,420 --> 04:44:16,340
that you have on a computer,

1647
04:44:16,340 --> 04:44:20,380
but we will create your own example project,

1648
04:44:20,380 --> 04:44:24,460
but learn how to turn it, make it a Git repository

1649
04:44:24,460 --> 04:44:28,780
and how to share it on GitHub or GitLab.

1650
04:44:28,780 --> 04:44:30,980
And what would be the next steps

1651
04:44:30,980 --> 04:44:34,620
if you want to make your project citable.

1652
04:44:36,260 --> 04:44:37,940
So these are the goal for tomorrow.

1653
04:44:37,940 --> 04:44:40,820
We will then tomorrow also talk a bit more about the balance.

1654
04:44:40,820 --> 04:44:50,820
what is a good balance when you start using it, of where to start, how to progress,

1655
04:44:50,820 --> 04:44:55,300
and what are typical things, typical problems that you want to avoid?

1656
04:44:56,180 --> 04:45:00,820
Of course, you're already welcome to browse these, and then tomorrow come with lots of questions.

1657
04:45:00,820 --> 04:45:12,820
questions. So, if someone has tried the VS code track today. Are there is tomorrow something

1658
04:45:12,820 --> 04:45:24,220
different than today. Do you learn new things. Yes, there will be. So, if you have done this

1659
04:45:24,220 --> 04:45:28,900
already today then the first episode, there will be some repetition but I think it doesn't

1660
04:45:28,900 --> 04:45:33,520
harm, to get it a little bit more into our muscle memory, there will be something new

1661
04:45:33,520 --> 04:45:40,700
and that is, we will take a closer look at what is the difference between a local branch

1662
04:45:40,700 --> 04:45:46,900
and a remote branch. And we got a few questions about it today, we didn't really talk about

1663
04:45:46,900 --> 04:45:54,220
it by design, but tomorrow we will hopefully give an understanding that you see the difference

1664
04:45:54,220 --> 04:45:58,120
between what is a local branch and remote branch. This is something that confused me

1665
04:45:58,120 --> 04:46:04,400
a lot when I started using it. So that will be different already in episode one.

1666
04:46:04,400 --> 04:46:13,020
Yes. Okay. And if someone starts from tomorrow and hasn't been here today, I guess that works

1667
04:46:13,020 --> 04:46:18,400
fine. Also, that's fine. No problem. Invite your friends and so on.

1668
04:46:18,400 --> 04:46:23,000
Exactly. So even if, or even if you were here today and everything failed, and I don't know

1669
04:46:23,000 --> 04:46:29,000
you don't find the repositories again, please come tomorrow. You don't need to have the things

1670
04:46:29,000 --> 04:46:37,080
from today for the tomorrow's exercises. We invite your friends. It's really fine and welcome to

1671
04:46:37,800 --> 04:46:39,800
join just for a day or just for an episode.

1672
04:46:42,840 --> 04:46:47,240
And thanks a lot for the feedback. One thing that was really good and one thing to improve.

1673
04:46:47,240 --> 04:46:55,240
Yeah, and we should thank [Name] for this latest lesson redesigned.

1674
04:46:55,240 --> 04:46:56,240
And [Name].

1675
04:46:56,240 --> 04:47:01,240
Well, yeah, but I was gone on the weekend when [Name] was working on it.

1676
04:47:01,240 --> 04:47:14,240
But anyway, it was a great effort to rewrite it this new way that introduces it with GitHub as the main flow, main path, and the other things there.

1677
04:47:14,240 --> 04:47:15,400
there.

1678
04:47:15,400 --> 04:47:19,120
So we're really looking forward to see

1679
04:47:19,120 --> 04:47:21,600
how this goes for future days.

1680
04:47:21,600 --> 04:47:24,000
And you can all help us contributing.

1681
04:47:24,000 --> 04:47:26,800
We know that there are some rough edges.

1682
04:47:26,800 --> 04:47:29,160
If you go into the Git history of the lesson,

1683
04:47:29,160 --> 04:47:32,040
you will see that there has been some weekend work

1684
04:47:32,040 --> 04:47:35,560
and late changes.

1685
04:47:35,560 --> 04:47:38,040
So this will evolve as we go.

1686
04:47:38,040 --> 04:47:39,440
But now, I mean, in this workshop,

1687
04:47:39,440 --> 04:47:43,000
we learn how to contribute to other people's projects

1688
04:47:43,000 --> 04:47:50,000
and your contributions and issues and ideas are really what makes this go.

1689
04:47:50,000 --> 04:48:01,160
Yeah, so I guess there's no new questions. So, you can expect videos to be processed

1690
04:48:01,160 --> 04:48:11,240
by later this evening.

1691
04:48:11,240 --> 04:48:17,040
If you want to be more involved, consider joining the Code Refinery chat and asking

1692
04:48:17,040 --> 04:48:18,200
what you can do.

1693
04:48:18,200 --> 04:48:22,000
We've got different stuff that people can look at.

1694
04:48:22,000 --> 04:48:27,800
Anyway, yeah, anything else or?

1695
04:48:27,800 --> 04:48:31,440
Yeah, we need more cats tomorrow.

1696
04:48:31,440 --> 04:48:34,240
So that's a clear takeaway here from the feedback.

1697
04:48:34,240 --> 04:48:35,240
But I think I'm happy.

1698
04:48:35,240 --> 04:48:38,240
I don't know, Gego, did we forget something?

1699
04:48:38,240 --> 04:48:46,920
No, I think we went through most of the important things that we were planning to go for anyway.

1700
04:48:46,920 --> 04:48:50,640
We can go through the documents today in the afternoon and see whether we missed anything

1701
04:48:50,640 --> 04:48:56,520
and maybe, if there is time, we can discuss it tomorrow.

1702
04:48:56,520 --> 04:48:57,520
Thanks so much, [Name].

1703
04:48:57,520 --> 04:48:59,840
I'm looking forward to teach with you again then on Thursday.

1704
04:48:59,840 --> 04:49:03,080
Tomorrow we will be with [name].

1705
04:49:03,080 --> 04:49:05,960
Really looking forward to it.

1706
04:49:05,960 --> 04:49:06,960
Thanks everybody.

1707
04:49:06,960 --> 04:49:16,800
to all the people answering questions, working in local rooms. Thanks to [Name] for the

1708
04:49:16,800 --> 04:49:21,320
intro. There are lots of people who make this happen. Have a nice afternoon. See you all

1709
04:49:21,320 --> 04:49:22,320
tomorrow.

1710
04:49:22,320 --> 04:49:25,800
OK, thanks so much.

1711
04:49:25,800 --> 04:49:26,800
Bye.

1712
04:49:26,800 --> 04:49:27,300
Bye.

1713
04:49:27,300 --> 04:49:48,400
See you next time.

