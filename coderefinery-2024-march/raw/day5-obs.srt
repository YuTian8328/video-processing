1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:32,060
you

21
00:10:00,000 --> 00:10:02,060
you

22
00:10:30,000 --> 00:10:32,060
you

23
00:11:00,000 --> 00:11:02,060
you

24
00:11:30,000 --> 00:11:45,000
Test 1, 2. Can anyone hear us?

25
00:11:45,000 --> 00:11:49,000
Test, test. Hello. Good morning.

26
00:11:49,000 --> 00:11:54,000
Good morning, everyone.

27
00:11:54,000 --> 00:12:01,500
So, yeah, like usual, we have 10 minutes before the main thing starts, but let's do the initial icebreaker stuff.

28
00:12:01,500 --> 00:12:03,500
First off is our audio good.

29
00:12:06,500 --> 00:12:09,500
At least for me, the levels seem good.

30
00:12:09,500 --> 00:12:11,500
Should we do the standard sound check?

31
00:12:11,500 --> 00:12:15,500
So, the order on my screen, me, [name], [name], [name].

32
00:12:15,500 --> 00:12:16,500
One.

33
00:12:16,500 --> 00:12:17,500
One.

34
00:12:18,500 --> 00:12:19,500
One.

35
00:12:19,500 --> 00:12:20,500
One.

36
00:12:20,500 --> 00:12:21,500
Two.

37
00:12:21,500 --> 00:12:22,500
Two.

38
00:12:22,500 --> 00:12:23,500
Two.

39
00:12:23,500 --> 00:12:24,500
Two.

40
00:12:24,500 --> 00:12:25,500
Three.

41
00:12:25,500 --> 00:12:26,500
Three.

42
00:12:26,500 --> 00:12:27,500
Three.

43
00:12:27,500 --> 00:12:28,500
Three.

44
00:12:28,500 --> 00:12:36,660
Okay, let us know if our audio is or isn't balanced and who needs to adjust.

45
00:12:36,660 --> 00:12:45,740
So, as usual, we have some icebreakers here, some interesting questions to think about.

46
00:12:45,740 --> 00:12:53,420
And today we've got, how would you explain your current job to someone from the year

47
00:12:53,420 --> 00:13:01,180
1700, which is something I saw on some sort of social media in the last few days.

48
00:13:01,180 --> 00:13:07,100
So I guess if many of us do computer things, this will be hard, but let's see how well

49
00:13:07,100 --> 00:13:11,180
we can abstract ourselves back down.

50
00:13:11,180 --> 00:13:18,420
is what's the best documented project you've seen? And do you prefer reading short social

51
00:13:18,420 --> 00:13:23,300
media posts or long blog posts? So, of the people here, how would you explain what you

52
00:13:23,300 --> 00:13:26,180
do to someone from...

53
00:13:26,180 --> 00:13:29,740
I mean, I like the first one, actually.

54
00:13:29,740 --> 00:13:33,700
Yeah. I mean, that's what I wrote, so...

55
00:13:33,700 --> 00:13:34,700
Oh, okay.

56
00:13:34,700 --> 00:13:35,700
Yeah.

57
00:13:35,700 --> 00:13:40,700
Some would guess that that was one of us in some way.

58
00:13:40,700 --> 00:13:41,700
Yeah.

59
00:13:41,700 --> 00:13:49,700
I mean, it's at least clear it's a research software engineer or, yeah, a support person.

60
00:13:49,700 --> 00:13:51,700
I mean, I guess that is sort of general.

61
00:13:51,700 --> 00:13:54,700
Like, there's complicated machines or other tools.

62
00:13:54,700 --> 00:13:58,700
People need to use them, but aren't the specialist in there.

63
00:13:58,700 --> 00:14:02,700
And people exist to help with that.

64
00:14:02,700 --> 00:14:09,900
I think one of the problems that I see was explaining it to someone from the 1700s.

65
00:14:09,900 --> 00:14:17,580
I see my work at least very much as helping people to allow them to keep their specialization

66
00:14:17,580 --> 00:14:25,380
and not, well, having to worry about anything else or having to worry about nitty-gritty

67
00:14:25,380 --> 00:14:26,380
things.

68
00:14:26,380 --> 00:14:34,700
While in the 1700s I think there was not that much really specialization in science at least.

69
00:14:34,700 --> 00:14:41,260
I mean not necessarily in science, but in 1700s we are already in the industrial revolution, right?

70
00:14:44,220 --> 00:14:47,260
Yeah, I mean very, very, very beginning.

71
00:14:47,260 --> 00:14:53,020
Yeah, I mean the first industrial revolution is sort of going on or done, the second hasn't started.

72
00:14:53,020 --> 00:15:06,020
So you have people whose job it is to operate a big machine like a windmill or a certain part of a boat, I think.

73
00:15:06,020 --> 00:15:07,020
Yeah.

74
00:15:07,020 --> 00:15:08,020
At least mills.

75
00:15:08,020 --> 00:15:14,020
It's like applied research and science and so on.

76
00:15:14,020 --> 00:15:19,020
Or, you know, something like that.

77
00:15:19,020 --> 00:15:23,820
What do you think the, well, the second job, reading letters and writing letters,

78
00:15:25,100 --> 00:15:31,340
is that a scientist making journal articles? Maybe? Maybe.

79
00:15:32,220 --> 00:15:37,420
That's what a scholar does. Yeah. Organizing assemblies of

80
00:15:37,420 --> 00:15:42,300
people to discuss that conference organizer or something.

81
00:15:42,300 --> 00:15:55,700
email and chat. So, okay, so it could be any job, but you're so busy writing emails that

82
00:15:55,700 --> 00:16:02,780
you can't do your main job, which is a lot of manager, I guess. I guess that's also partly

83
00:16:02,780 --> 00:16:09,500
me. Mathematically rephrasing what people have already invented in 1700. What is that

84
00:16:09,500 --> 00:16:20,380
job. Could it be some sort of programmer or other researcher that's using math that's

85
00:16:20,380 --> 00:16:27,420
already been known then but doing it faster in computers now?

86
00:16:27,420 --> 00:16:35,220
A lot of math, actual math research is rephrasing, I can't speak right now, rephrasing stuff

87
00:16:35,220 --> 00:16:40,140
that people have already invented, but making it easier to use and clearer.

88
00:16:40,140 --> 00:16:46,700
And, well, even making it usable, because there was just not the computational power

89
00:16:46,700 --> 00:16:53,860
before now. There's quite a lot of stuff that, well, in theory would work, it just

90
00:16:53,860 --> 00:17:02,900
took too long, and now computers are fast enough to, yep, now you can actually do this.

91
00:17:02,900 --> 00:17:08,200
So if you're just joining now, we have an interesting icebreaker there.

92
00:17:08,200 --> 00:17:15,400
If you registered, you should have the notes link, and well, you can read the questions

93
00:17:15,400 --> 00:17:20,440
as well as I can read them, so let's play this game.

94
00:17:20,440 --> 00:17:25,880
But so today, well, [name] will have some interlater.

95
00:17:25,880 --> 00:17:29,720
How do you think the workshop's going overall, everyone here?

96
00:17:29,720 --> 00:17:33,600
Have you all been happy?

97
00:17:33,600 --> 00:17:39,920
I think it has been going well, like the week one redesign was very successful, like looking

98
00:17:39,920 --> 00:17:48,800
at the questions that we got, more into towards how researchers actually encounter version

99
00:17:48,800 --> 00:17:54,520
control and GitHub on their journey.

100
00:17:54,520 --> 00:17:59,880
And week two, I'm still a bit unsure about the no exercise sessions

101
00:17:59,880 --> 00:18:02,960
because they have always been very nice.

102
00:18:02,960 --> 00:18:07,740
And I've gotten people into looking at these things themselves

103
00:18:07,740 --> 00:18:12,080
and trying to figure them out versus us showing it on stream.

104
00:18:12,080 --> 00:18:15,120
It probably depends a lot on how people learn best.

105
00:18:15,120 --> 00:18:16,120
Yeah.

106
00:18:16,120 --> 00:18:18,920
What is more beneficial?

107
00:18:18,920 --> 00:18:19,920
Very true.

108
00:18:19,920 --> 00:18:22,760
What do you think?

109
00:18:22,760 --> 00:18:33,400
This is definitely helping us cover more ground and not feel as busy and not feel like we're

110
00:18:33,400 --> 00:18:36,080
always running out of time.

111
00:18:36,080 --> 00:18:42,280
I do hope that this also moves more to the direction where we can then support people

112
00:18:42,280 --> 00:18:47,640
after the workshop and make this more of a mentor thing.

113
00:18:47,640 --> 00:18:56,640
I suppose that means people joining our Zulip chat and asking questions there when they have questions.

114
00:18:56,640 --> 00:19:06,640
Because, of course, during the workshop, we have the collaborative document, the notes, which we will not be actively checking after the workshop.

115
00:19:06,640 --> 00:19:12,640
Yeah.

116
00:19:12,640 --> 00:19:19,680
I mean, yeah, my ideal would be for the second week, imagine if we could do the workshop like

117
00:19:19,680 --> 00:19:26,480
we've been doing now, but then in the afternoons we could arrange some sort of like, well, like

118
00:19:26,480 --> 00:19:31,920
the bring your own code sessions, which we actually have for Code Refinery, but we should be doing as

119
00:19:31,920 --> 00:19:39,040
part of our own individual or institutions also. We could tell people, okay, next week come to

120
00:19:39,040 --> 00:19:45,040
our garage with any of the questions from Code Refinery about how to do it and we'll help you

121
00:19:45,040 --> 00:19:51,840
set it up and or you know help you do the exercises test it out whatever it may be

122
00:19:53,840 --> 00:20:02,800
and that would be good but it's almost time to get going um if you're joining now please write your

123
00:20:02,800 --> 00:20:10,800
job. So you can see the icebreakers here. How would you explain your job to someone from year 1700?

124
00:20:15,760 --> 00:20:21,680
And if you can't figure it out, write down what you do and we'll work together.

125
00:20:24,240 --> 00:20:31,840
So I propose some sort of workshop for other teachers or people that run workshops

126
00:20:31,840 --> 00:20:38,800
that will discuss how we do this very kind of streaming workshop. So basically, I would help

127
00:20:38,800 --> 00:20:45,040
train people, train other people to do it. If this is interesting to you, look at the most recent

128
00:20:45,040 --> 00:20:53,520
Code Refinery blog post and see what it says. We can announce that at the end. I guess it is time.

129
00:20:53,520 --> 00:20:59,120
So, [name], I think you have an intro for us. Yes. Do you want to play the jingle, the short

130
00:20:59,120 --> 00:21:16,120
one. So, welcome! [name], I believe you have our first intro. Yes, are you sharing

131
00:21:16,120 --> 00:21:24,720
my screen to the stream? There you go. Okay, very welcome to day five of this Code Refinery

132
00:21:24,720 --> 00:21:31,840
workshop. We're almost at the end already. Very sad about that. Soon it's over. But we still have

133
00:21:31,840 --> 00:21:39,600
two days ahead of us. So week one of this workshop was all about version control from really the

134
00:21:42,320 --> 00:21:49,920
basics of Git to collaborative use using GitHub. And then yesterday we started week two with an

135
00:21:49,920 --> 00:21:57,360
overview around the reproducible research. We discussed how to record computational steps with

136
00:21:57,360 --> 00:22:04,400
SnakeMake as an example tool, dependencies with Konda as an example tool and environments

137
00:22:05,040 --> 00:22:11,520
with containers. And in the afternoon we then took a peek into the FAIR research software

138
00:22:11,520 --> 00:22:18,960
development practices, licenses and what you need to know about these kind of things.

139
00:22:19,920 --> 00:22:27,200
related to your research code. So today we're going to look into different ways of documenting

140
00:22:27,200 --> 00:22:33,840
your research software, meaning from comments to readme files that we now have been looking

141
00:22:33,840 --> 00:22:41,680
a little bit at already, and then to actually doing really nicely rendered web pages similar to

142
00:22:41,680 --> 00:22:50,560
the Code Refinery materials pages and how you can do that like with a few small commands yourself.

143
00:22:51,760 --> 00:22:56,560
And then in the afternoon we will take a look into the world of Jupyter notebooks and that you maybe

144
00:22:57,360 --> 00:23:05,520
have already come in contact with during computing classes or while like working by yourself.

145
00:23:05,520 --> 00:23:13,520
And here we're going to focus on things that can make your research also more reproducible

146
00:23:13,520 --> 00:23:16,840
using Jupyter, for example.

147
00:23:16,840 --> 00:23:20,840
So even if you know it already, I think there will still be something new in that lesson

148
00:23:20,840 --> 00:23:23,240
as well.

149
00:23:23,240 --> 00:23:29,840
And then for newcomers today, this workshop is fully live streamed.

150
00:23:29,840 --> 00:23:35,880
So you will all watch the sessions via Twitch.

151
00:23:35,880 --> 00:23:39,840
And if you know the workshop from before this year,

152
00:23:39,840 --> 00:23:46,200
we don't have any dedicated team exercises in this second week.

153
00:23:46,200 --> 00:23:49,680
But we have a lot of time for interaction

154
00:23:49,680 --> 00:23:51,680
with our collaborative document, which

155
00:23:51,680 --> 00:23:53,680
I will be showing in a moment.

156
00:23:53,680 --> 00:23:56,000
And then we plan to have a minimum of 10 minute

157
00:23:56,000 --> 00:24:01,640
breaks every hour plus a one-hour break over, well, in Finland,

158
00:24:01,640 --> 00:24:05,160
midday lunchtime.

159
00:24:05,160 --> 00:24:08,280
So our collaborative document, you should have,

160
00:24:08,280 --> 00:24:11,200
or you have gotten the link after you

161
00:24:11,200 --> 00:24:13,760
registered to this workshop.

162
00:24:13,760 --> 00:24:16,040
It looks something like this.

163
00:24:16,040 --> 00:24:20,680
And depending on how wide and how zoomed in you have this,

164
00:24:20,680 --> 00:24:23,760
you will find a little pen symbol up top.

165
00:24:23,760 --> 00:24:28,880
me it's now up here to the right for you it might be somewhere here up to the left where you can

166
00:24:28,880 --> 00:24:35,280
switch to the edit mode if you want to add something here. Here we have all the links

167
00:24:36,800 --> 00:24:44,160
also to this welcome session and then to the materials and the archive of previous questions

168
00:24:45,440 --> 00:24:51,840
and let's switch to edit mode for a moment then we can scroll down we have our icebreaker question

169
00:24:51,840 --> 00:24:59,680
here. Today we have three questions that you can answer. How would you explain your current job to

170
00:24:59,680 --> 00:25:06,400
someone in the year 1700? Quite tricky one. For me I think the first one fits best. We have really

171
00:25:06,400 --> 00:25:13,600
big complicated machines and I help people use them. So I try to help people use supercomputers

172
00:25:13,600 --> 00:25:24,720
and maybe I can add a plus one here or a little dot. What's the best documented

173
00:25:24,720 --> 00:25:29,360
project you have seen? Since we're going to talk about documentation we can pick

174
00:25:29,360 --> 00:25:35,400
up on that later. For me I think it's also the scikit-learn documentation that

175
00:25:35,400 --> 00:25:40,120
is really really great if you haven't seen it. Take a look and do you prefer

176
00:25:40,120 --> 00:25:47,880
reading short social media posts or long blogs. And this is now a voting system, so like I added

177
00:25:48,760 --> 00:25:56,440
my little O here, I basically added that me too. And here I also prefer

178
00:25:57,880 --> 00:26:04,360
maybe often more longer blogs and also in the code, well more often the longer source code to

179
00:26:04,360 --> 00:26:12,360
have everything at once. And then if you go down here, then here you can actually edit your

180
00:26:12,360 --> 00:26:18,680
questions that you have about the upcoming session. So you can see some people already wrote some

181
00:26:19,480 --> 00:26:24,680
here, so you can always ask that during the workshop and instructors will pick it up.

182
00:26:24,680 --> 00:26:33,880
workshop. All the materials are linked from the workshop page and you can like come back

183
00:26:33,880 --> 00:26:41,080
to it and look at them and you can also reuse them if you want to for your own workshops.

184
00:26:41,080 --> 00:26:45,600
And we also record this whole workshop. So for some days the recordings will still be

185
00:26:45,600 --> 00:26:50,320
available on Twitch and then after that you can find them on YouTube. There's usually

186
00:26:50,320 --> 00:26:57,280
playlist and then you can look through the lessons and to jump to the lessons that you're interested

187
00:26:57,280 --> 00:27:05,120
in. If you need a certificate for this course for university you can find instructions for that on

188
00:27:05,120 --> 00:27:12,320
our web page and as mentioned before this session already we have this bring your own code session

189
00:27:12,320 --> 00:27:18,320
so if there was a tool during this workshop that you would like to start using in your own work

190
00:27:18,320 --> 00:27:31,320
You can come to these sessions and can take a look at these things with our experts or if you have a question related to tools like SnickMake or whatever.

191
00:27:31,320 --> 00:27:35,320
They will happen next weekend, the week after Tuesday.

192
00:27:35,320 --> 00:27:42,320
And now I will give over to [name] and [name] for the documentation lesson.

193
00:27:42,320 --> 00:27:45,320
The floor is yours.

194
00:27:45,320 --> 00:27:51,320
Thanks. I will take over the screen share.

195
00:27:53,320 --> 00:27:57,320
Oops, where did the window go?

196
00:27:57,320 --> 00:28:13,320
We have already put into a question or three questions about motivation and what our kind of wish list or what we think or what you essentially you think about documentation, what should be in there?

197
00:28:13,320 --> 00:28:24,760
So, I think it's kind of expected that the best documented projects people have seen

198
00:28:24,760 --> 00:28:27,280
are really big projects.

199
00:28:27,280 --> 00:28:32,240
So they are things where you don't want to go through the source code and try to understand

200
00:28:32,240 --> 00:28:34,680
what it's doing because it's so big.

201
00:28:34,680 --> 00:28:43,640
Also, they are aimed at an audience who doesn't necessarily need to know all the details of the

202
00:28:43,640 --> 00:28:54,920
thing that the package is doing. You just need one small piece. In Scikit-learn, you usually

203
00:28:54,920 --> 00:28:58,200
don't use everything that Scikit-learn has because it has a lot of things.

204
00:28:58,200 --> 00:29:08,600
things. So PyTorch is really big. Scikit-learn is really big. There's NumPy, SciPy. Pandas,

205
00:29:08,600 --> 00:29:15,520
okay, yeah, Pandas is a bit – I often have to go and actually find stuff in the documentation

206
00:29:15,520 --> 00:29:25,080
to use Pandas, and it often helps. But that's true. I think Pandas can be a bit complicated.

207
00:29:25,080 --> 00:29:26,920
I'm not actually sure about FlutterDust.

208
00:29:26,920 --> 00:29:28,320
Do you know that?

209
00:29:28,320 --> 00:29:30,320
No.

210
00:29:30,320 --> 00:29:33,520
And then, yeah, Tidyverse is really good.

211
00:29:33,520 --> 00:29:34,760
Yeah, sorry?

212
00:29:34,760 --> 00:29:41,680
Tidyverse is good at enforcing good documentation.

213
00:29:41,680 --> 00:29:43,560
In my experience, it's not necessarily

214
00:29:43,560 --> 00:29:49,240
that big project means good documentation, actually.

215
00:29:49,240 --> 00:29:53,760
It's more active use by a lot of people,

216
00:29:53,760 --> 00:30:02,960
which are activated by a lot of interested people who then also re-contribute a bit,

217
00:30:02,960 --> 00:30:07,920
doesn't necessarily make all big projects having a good documentation.

218
00:30:08,480 --> 00:30:10,160
Yeah, that's a good point.

219
00:30:10,160 --> 00:30:11,040
Especially for details.

220
00:30:12,000 --> 00:30:21,120
So, if you've ever actually, so that there is a built-in documentation thing for the new

221
00:30:21,120 --> 00:30:30,400
operating system. All of these things you can run in Linux, for example, the commands like ls and

222
00:30:31,440 --> 00:30:39,680
cd and so on. It's kind of a running joke that those are almost unreadable,

223
00:30:40,880 --> 00:30:47,440
but they do have all the details. Being a really big project doesn't guarantee that

224
00:30:47,440 --> 00:30:53,520
the documentation is especially good. Although it kind of does guarantee that there's a lot of it

225
00:30:53,520 --> 00:30:59,760
available. So someone might write a tutorial who's not even involved in writing the code.

226
00:31:05,120 --> 00:31:11,040
I guess my point is small things used by a small number of people don't necessarily need

227
00:31:11,040 --> 00:31:17,840
so much documentation and you kind of have to decide what level of documentation is appropriate.

228
00:31:17,840 --> 00:31:23,920
It depends on who's going to use it and it depends on how much time you have

229
00:31:24,880 --> 00:31:30,640
and a lot of other factors. Well at the same time a small project that has

230
00:31:32,000 --> 00:31:38,480
little documentation can still be well documented. Yeah I mean it's a small project it doesn't need

231
00:31:38,480 --> 00:31:44,480
it doesn't have as much the document because it's also not that complex it's easier to just grasp

232
00:31:44,480 --> 00:31:52,080
what it's actually doing okay but yeah i don't know what flutter does but if you wrote down

233
00:31:52,080 --> 00:31:56,080
something that you think has really good documentation then there's the question

234
00:31:57,440 --> 00:32:03,680
what actually makes the documentation useful what makes it good so that's the second question here

235
00:32:03,680 --> 00:32:14,480
of course, what makes it important? Well, actually not a huge number of answers. Can

236
00:32:14,480 --> 00:32:24,800
we think of some more? Well, okay. It's important for at least anything that's more complex

237
00:32:24,800 --> 00:32:32,720
than a few simple functions to be actually useful to someone else. If you don't have

238
00:32:32,720 --> 00:32:37,760
any documentation and everyone needs to read through your code to understand what it actually

239
00:32:37,760 --> 00:32:43,120
does, then it's very likely that people just won't use it. They will have a look at, okay,

240
00:32:43,120 --> 00:32:49,280
there's some code, I don't care. I have no idea what it does. I don't have the time to go through

241
00:32:49,280 --> 00:32:56,080
the whole source code. And this applies to you yourself in the future. So yeah, if the future

242
00:32:56,080 --> 00:33:02,640
is important, yes, that's a good answer. So if you go back to your code, even if it's a really

243
00:33:02,640 --> 00:33:10,640
short simple code that has only three functions or three main functions. When you

244
00:33:11,440 --> 00:33:16,160
come back to it in three years you're not going to remember what those function names are and

245
00:33:16,160 --> 00:33:22,400
it's much nicer if they're mentioned in the documentation somewhere you can quickly see

246
00:33:23,200 --> 00:33:28,160
so rather than you have to go digging through the code to figure out what you need to do or

247
00:33:28,160 --> 00:33:32,400
how do you need to call the functions so it is also useful for yourself

248
00:33:34,800 --> 00:33:40,240
okay so what is good documentation how would you describe useful documentation

249
00:33:41,040 --> 00:33:47,600
um it helps you understand the code it gives you examples on how the code is being used

250
00:33:50,160 --> 00:33:56,240
so that and yeah yeah okay so a really good point so it helps someone else use the code in without

251
00:33:56,240 --> 00:34:02,400
them having to ask the creator. So if it's code that you wrote, then people don't have to always

252
00:34:02,400 --> 00:34:10,880
come and ask you. You can offload some of that work to the documentation. Of course, you can

253
00:34:10,880 --> 00:34:14,960
never write perfect documentation, so there will always be some questions and some things will

254
00:34:14,960 --> 00:34:22,480
just not be correct. But it's much better than having to always show people exactly how to use

255
00:34:22,480 --> 00:34:29,200
it for everything. That second point to me is, well, clear engaging not too long. Not too long

256
00:34:29,200 --> 00:34:37,680
is a very relative thing, but I think that mostly applies to the initial readme, which is only

257
00:34:37,680 --> 00:34:44,400
some part of the documentation. Yes, you shouldn't put useless information or repetitive

258
00:34:44,400 --> 00:34:52,240
information into your documentation, but I'm not sure if I would agree with the not too long

259
00:34:52,240 --> 00:34:57,600
in general. Well, too long is always... You can always make something too long.

260
00:35:02,640 --> 00:35:08,000
Yeah, that's a good question. Can you add information that's actually relevant

261
00:35:08,640 --> 00:35:16,000
and make it too long? I think it's possible. At some point, it's easier to just read the code.

262
00:35:16,000 --> 00:35:21,000
So, at some point, it's no longer useful.

263
00:35:21,000 --> 00:35:26,840
But also, it is important to structure it so that there is this, like, the first page

264
00:35:26,840 --> 00:35:33,800
you see something relatively short that tells you what the software does.

265
00:35:33,800 --> 00:35:35,160
Something like a README.

266
00:35:35,160 --> 00:35:38,840
And then there are tutorials that tell you how to do the things that the software is

267
00:35:38,840 --> 00:35:40,720
designed to do.

268
00:35:40,720 --> 00:35:48,960
And then for each user-facing function, each function that a user could need, there's some

269
00:35:48,960 --> 00:35:52,160
description of how to use it and what it does.

270
00:35:52,160 --> 00:35:57,720
I would rephrase that, for every function that you intend to use it to use.

271
00:35:57,720 --> 00:36:00,600
Right, yes.

272
00:36:00,600 --> 00:36:05,720
It's also good if you want to, if you have the time, it's very good to have documentation

273
00:36:05,720 --> 00:36:11,720
for all the functions that you never expect any user to use because of course someone will be

274
00:36:11,720 --> 00:36:17,720
developing the code. Might be you in three years or might be someone else.

275
00:36:17,720 --> 00:36:22,840
So it is good to document everything at least a little bit.

276
00:36:25,560 --> 00:36:29,720
I think the third point is also quite good with having examples that actually help you to get

277
00:36:29,720 --> 00:36:39,960
started. So, yeah, which is the tutorials that you mentioned is and the points here generally are

278
00:36:40,600 --> 00:36:49,800
good. Yeah, I think. And yeah, the last edit point is actually something

279
00:36:51,480 --> 00:36:58,120
easy to navigate. Yes, easy way to find what you're actually looking for, which is really

280
00:36:58,120 --> 00:37:04,360
difficult. That's probably one of the most difficult bits in my opinion because a good

281
00:37:04,360 --> 00:37:13,160
structure is not easily found. And if your code is growing then it's very likely to get messy

282
00:37:13,160 --> 00:37:22,280
structure-wise at some point. So how do you motivate your colleagues to contribute to the

283
00:37:22,280 --> 00:37:28,920
documentation. I mean, the first point is they explicitly say it's meant as a joke,

284
00:37:28,920 --> 00:37:33,800
but I'm going to take it seriously because the best way to motivate someone, especially like

285
00:37:33,800 --> 00:37:38,760
if you're developing something as a job, if it's part of your job to develop software for research,

286
00:37:39,720 --> 00:37:44,520
actually paying people for spending time on it would be a good idea. It's not

287
00:37:45,720 --> 00:37:50,600
something we always do very well, but it is actually a very good way of motivating people.

288
00:37:50,600 --> 00:37:56,600
actually pay them for their time. But yeah, there are other ways as well.

289
00:38:00,200 --> 00:38:07,240
So, yeah, explaining why it is important, explaining why it helps them in the future

290
00:38:07,240 --> 00:38:12,600
and helps get their work cited, so it helps other people use the code. And for researchers,

291
00:38:12,600 --> 00:38:20,920
citations are the kind of important so if other people can use your code then they can also

292
00:38:20,920 --> 00:38:28,760
contribute to your field and help you in your career as well. And what I think is important

293
00:38:30,120 --> 00:38:38,040
both in an academic or non-academic setting if you have undocumented code it takes a lot more

294
00:38:38,040 --> 00:38:40,560
more time for someone else to get into that code.

295
00:38:40,560 --> 00:38:41,240
Yeah.

296
00:38:41,240 --> 00:38:43,440
And might even be impossible.

297
00:38:43,440 --> 00:38:44,440
Yeah.

298
00:38:44,440 --> 00:38:51,160
So just documenting saves money, if you want it like that.

299
00:38:51,160 --> 00:38:56,880
Or in the academic instance, heaps knowledge.

300
00:38:56,880 --> 00:38:59,760
It saves you time, and it saves your research group

301
00:38:59,760 --> 00:39:01,440
time in the future.

302
00:39:01,440 --> 00:39:03,400
There are so many non-doc, there's

303
00:39:03,400 --> 00:39:06,800
so much non-documented code around

304
00:39:06,800 --> 00:39:14,320
that is essentially, okay, well, this was done by a PhD master student, whatever, last year,

305
00:39:15,280 --> 00:39:21,280
and he's gone. If you're lucky, he answers to emails. If you're unlucky, he doesn't,

306
00:39:22,240 --> 00:39:31,200
at which point it's, I have no idea how this works, and I can't understand the code, so this

307
00:39:31,200 --> 00:39:39,320
is dead upon the person leaving the group and might even have been dead before.

308
00:39:39,320 --> 00:39:43,900
That last point being added is true, very important.

309
00:39:43,900 --> 00:39:51,200
So we have talked about how to cite software and how to make sure that the correct people

310
00:39:51,200 --> 00:39:53,800
get credit for software.

311
00:39:53,800 --> 00:39:55,600
Documentation is part of the software.

312
00:39:55,600 --> 00:40:00,880
It is an important part of the job of actually doing the research and getting to a result

313
00:40:00,880 --> 00:40:03,880
and publishing the software and publishing the paper and all of that.

314
00:40:04,080 --> 00:40:09,680
So the person, someone contributing to the documentation really should be looked

315
00:40:09,880 --> 00:40:17,080
at, someone who's actually spending time contributing to the research project.

316
00:40:17,720 --> 00:40:22,280
At least if we are at the point where we can actually talk about citing software,

317
00:40:22,480 --> 00:40:24,400
then definitely someone who writes

318
00:40:24,600 --> 00:40:29,960
documentation should be included in the authors for that software.

319
00:40:29,960 --> 00:40:41,840
Okay, I think that is quite a good piece of information and let's head to what should

320
00:40:41,840 --> 00:40:45,480
documentation actually contain.

321
00:40:45,480 --> 00:40:55,620
So we basically covered everything in the first section, but I just want to quickly

322
00:40:55,620 --> 00:40:58,020
show what we're going to do in this lesson.

323
00:40:58,020 --> 00:41:00,780
So in the first half, essentially,

324
00:41:00,780 --> 00:41:04,420
will be discussions about documentation

325
00:41:04,420 --> 00:41:07,020
and then how to write good README files.

326
00:41:07,020 --> 00:41:09,860
And then in the second half, we'll

327
00:41:09,860 --> 00:41:14,340
go through a demonstration with a slightly more

328
00:41:14,340 --> 00:41:17,220
complicated documentation than README files

329
00:41:17,220 --> 00:41:23,620
and how to get that viewable online,

330
00:41:23,620 --> 00:41:27,420
how to deploy it on a website.

331
00:41:27,420 --> 00:41:33,580
So let's go to the motivation section and feel free to answer of course in the notes

332
00:41:34,220 --> 00:41:39,500
even though I'm not sharing them right now. So why documenting code is essentially done.

333
00:41:45,740 --> 00:41:51,020
Yeah so let's talk about that. So yeah what should a good documentation contain?

334
00:41:51,020 --> 00:41:57,460
Should we, let's wait for a moment before we start throwing around ideas, give people

335
00:41:57,460 --> 00:41:58,460
some time to talk.

336
00:41:58,460 --> 00:42:03,980
We can already collect what we had further up, which is how would you describe a useful

337
00:42:03,980 --> 00:42:04,980
documentation?

338
00:42:04,980 --> 00:42:05,980
Sure.

339
00:42:05,980 --> 00:42:31,780
Yeah, so there are some points that go to that section, so okay, so the arrangement

340
00:42:31,780 --> 00:42:32,780
should be boring.

341
00:42:32,780 --> 00:42:35,220
So yeah, it should contain the things

342
00:42:35,220 --> 00:42:36,720
that you expect it to contain,

343
00:42:37,740 --> 00:42:39,700
which is installation instructions,

344
00:42:39,700 --> 00:42:42,180
some quick start, and how to,

345
00:42:42,180 --> 00:42:45,100
so these are tutorials on how to do a specific thing

346
00:42:45,100 --> 00:42:47,100
the code is intended to do,

347
00:42:47,100 --> 00:42:49,080
and a reference, which means,

348
00:42:51,640 --> 00:42:52,640
I guess we'll get back to it,

349
00:42:52,640 --> 00:42:56,180
but some documentation for almost everything in the code,

350
00:42:56,180 --> 00:42:58,120
but in a structured way,

351
00:42:58,120 --> 00:43:00,960
so that you can find what you're looking for.

352
00:48:02,780 --> 00:48:07,780
.

353
00:48:07,780 --> 00:48:12,780
.

354
00:48:12,780 --> 00:48:17,780
.

355
00:48:17,780 --> 00:48:22,780
.

356
00:48:22,780 --> 00:48:27,780
.

357
00:48:27,780 --> 00:48:35,860
where to report bugs, where to report issues or where to report or where to discuss about

358
00:48:35,860 --> 00:48:40,260
features that you would like to add or would like someone to add to the software

359
00:48:41,460 --> 00:48:44,420
and then in general how contributions work.

360
00:48:44,420 --> 00:48:59,380
okay so here's our checklist it's mostly the same things so you would want to have in the

361
00:48:59,380 --> 00:49:05,940
documentation you would want to mention the authors of the software the license purpose

362
00:49:05,940 --> 00:49:13,300
is something already mentioned how it should be cited it's useful to have that's also in

363
00:49:13,300 --> 00:49:22,420
the citations file of course and then some examples where you can or tutorials how to get started

364
00:49:23,300 --> 00:49:28,660
dependencies um installation instructions is important

365
00:49:31,380 --> 00:49:38,180
the reference documentation is already mentioned um yeah and how do you want people to contact you

366
00:49:38,180 --> 00:49:43,780
and some frequently asked questions section this is roughly almost everything was was there in the

367
00:49:43,780 --> 00:49:54,980
answers so that's a good thinking we've roughly have the same ideas okay um we do have um in the

368
00:49:54,980 --> 00:50:04,580
next step kind of a list of popular tools and solutions let's go there um we will go over

369
00:50:04,580 --> 00:50:13,380
some of them in more detail and I think the only things we really want to mention here for these

370
00:50:13,380 --> 00:50:20,260
tools and solutions are the formats that we commonly use to create documentation or

371
00:50:21,540 --> 00:50:32,500
which is mainly markdown and restructured text. Okay right so yeah okay we have a whole section

372
00:50:32,500 --> 00:50:38,820
on in-code documentation, which basically means the documentation that is embedded in the code

373
00:50:38,820 --> 00:50:48,180
itself. And then I think in the next section we'll have readme files, so we'll talk more about that.

374
00:50:49,620 --> 00:50:55,620
So yeah, Markdown you already know because the collaborative document is in Markdown. I was

375
00:50:55,620 --> 00:51:00,620
I was going to just open it and show, but it's, you can,

376
00:51:01,220 --> 00:51:03,580
if you're looking at it, you can see it.

377
00:51:03,580 --> 00:51:04,980
So this is Markdown.

378
00:51:08,820 --> 00:51:11,780
Yeah, and the restructured text is another option.

379
00:51:11,780 --> 00:51:14,140
So can you, do you want to say more about

380
00:51:14,140 --> 00:51:16,940
why use either one of them?

381
00:51:16,940 --> 00:51:19,660
Well, the one biggest reason is that

382
00:51:19,660 --> 00:51:22,460
it's a relatively simple format.

383
00:51:22,460 --> 00:51:24,580
It's all text-based.

384
00:51:24,580 --> 00:51:27,980
So you, well, yeah, it's all text-based.

385
00:51:27,980 --> 00:51:31,140
So you can easily put it into version control

386
00:51:31,140 --> 00:51:32,580
and see differences.

387
00:51:32,580 --> 00:51:34,580
So it's not a binary format

388
00:51:34,580 --> 00:51:36,780
where you get a big binary dump of the data,

389
00:51:37,660 --> 00:51:41,060
but you can actually follow what changes were made.

390
00:51:43,660 --> 00:51:47,940
It has most features that you need

391
00:51:47,940 --> 00:51:52,940
for having a nice looking, at least online document.

392
00:51:54,580 --> 00:52:05,540
So I guess, I mean, they look a bit different, but they have roughly the same features, and

393
00:52:05,540 --> 00:52:12,660
I guess restructured text, because it is what Sphinx uses, and Sphinx is very commonly

394
00:52:12,660 --> 00:52:21,700
used to build documentation, it might have some features more, some features are there

395
00:52:21,700 --> 00:52:31,540
more by default, whereas in Markdown, you might need some expansion plugin, something like that.

396
00:52:34,500 --> 00:52:39,940
One thing is that Markdown is maybe a bit simpler. It's maybe a bit faster to learn,

397
00:52:39,940 --> 00:52:45,780
but it's not a big difference. It's a very small difference. There's many flavors of Markdown,

398
00:52:45,780 --> 00:52:55,620
unfortunately so some syntax that you use on say github readme files might not work in a different

399
00:52:55,620 --> 00:53:04,820
place so yeah there's um and there's multiple flavors that implement for example equations

400
00:53:04,820 --> 00:53:08,820
So they might do it slightly differently, unfortunately.

401
00:53:08,820 --> 00:53:19,820
But the standard, the text formatting things generally work the same way.

402
00:53:19,820 --> 00:53:24,820
Yeah.

403
00:53:24,820 --> 00:53:31,940
yeah so we'll in our example in the next second well not the next section but the

404
00:53:31,940 --> 00:53:40,740
the next hour we'll use a mist flavored markdown in Sphinx but yeah you can you can use

405
00:53:41,620 --> 00:53:46,180
essentially whatever you want in Sphinx and of course Sphinx is not the only thing out there.

406
00:53:48,100 --> 00:53:53,860
And there is a list of other static html site generators on this page as well so

407
00:53:53,860 --> 00:53:59,540
feel free to have a look at that. But really the main thing the main reason to use markdown or

408
00:54:00,420 --> 00:54:07,220
restructured text is that it is text so you can version control it and you can use it with your

409
00:54:07,220 --> 00:54:14,180
source code very easily. So yeah we will use Sphinx and one reason is that it is actually

410
00:54:14,180 --> 00:54:22,580
what we use to build this course website. It's very commonly used in Python projects but not

411
00:54:22,580 --> 00:54:29,700
limited, of course, to Python. It is itself, it runs in Python. There's plenty of other options

412
00:54:29,700 --> 00:54:37,860
and a lot of these use Markdown. I guess that's probably enough, probably all we want to say

413
00:54:37,860 --> 00:54:41,860
about this. Sphinx is a built-in thing for API documentation as well.

414
00:54:43,860 --> 00:54:46,420
Okay, let's head on to Encode documentation.

415
00:54:46,420 --> 00:54:59,460
Well, I mean, wikis are another popular option, but they don't exist as text in your repository.

416
00:54:59,460 --> 00:55:03,540
The advantage is that it's pretty easy to start editing it.

417
00:55:03,540 --> 00:55:08,340
You don't even really need to learn any new language, even though Markdown is an easy

418
00:55:08,340 --> 00:55:10,980
language to learn.

419
00:55:10,980 --> 00:55:15,940
But yeah, it is not connected to your repository, which is the main big downside.

420
00:55:15,940 --> 00:55:22,900
Leite is very common and that produces PDFs. The advantage is that it's very popular and

421
00:55:24,340 --> 00:55:30,260
people in certain fields know how to use it. The disadvantage is the PDF format.

422
00:55:33,060 --> 00:55:42,180
It has some restrictions on how you can use it. It is not easy to turn Leite into a website,

423
00:55:42,180 --> 00:55:46,500
although it is possible and it's not easy to automate building it although it is possible

424
00:55:47,620 --> 00:55:49,060
so it gets a bit more complex.

425
00:55:51,780 --> 00:55:58,740
Doxygen is well you can use it for it's very popular for C++ you can use it again for API

426
00:55:58,740 --> 00:56:05,540
documentation so it's kind of like Sphinx it's just another option and here's some other tools

427
00:56:05,540 --> 00:56:10,900
and they kind of seem to go with certain languages but in principle you don't need

428
00:56:10,900 --> 00:56:16,500
to pick a specific one based on what language you use. It just depends on the community.

429
00:56:20,260 --> 00:56:30,180
Okay, so in code documentation. So anything that's inside a source code file is in code

430
00:56:30,180 --> 00:56:37,860
documentation and it's probably the first thing you do maybe after the readme file.

431
00:56:37,860 --> 00:56:44,340
So when you start writing code it's good to already start including some documentation

432
00:56:44,340 --> 00:56:49,020
in the code itself.

433
00:56:49,020 --> 00:56:53,420
So let's take a look at these two comments, I wonder how much should we go back to the

434
00:56:53,420 --> 00:57:07,660
notes even, well let's say, let's paste something into the notes and, okay, let's

435
00:57:07,660 --> 00:57:27,860
Okay, it's already there, so yeah, which one is better, what is useful about either option?

436
00:57:27,860 --> 00:57:32,540
Let's just do a vote, you can write down some comments below, but yeah, vote for option

437
00:57:32,540 --> 00:57:52,540
A or B. So what makes comment B so obviously better? Maybe this was too obvious a question.

438
00:57:52,540 --> 00:58:00,780
This is a pretty obvious question. Well, comment A only says what's plainly written there already.

439
00:58:00,780 --> 00:58:08,460
no additional additional information obtainable from comment a is comment b wrong on purpose

440
00:58:09,020 --> 00:58:12,700
you record temperatures below minus 50 as measurement errors and this checks

441
00:58:13,660 --> 00:58:19,260
if it's larger yes if it's larger than it i don't actually know if it's i don't think it was on

442
00:58:19,260 --> 00:58:27,260
purpose but um yeah you're right now we check if so this one actually doesn't if you just have this

443
00:58:27,260 --> 00:58:31,420
And then this line of code, it doesn't actually

444
00:58:31,420 --> 00:58:35,180
tell you that it's wrong.

445
00:58:35,180 --> 00:58:38,140
But here, you say why you want to check

446
00:58:38,140 --> 00:58:40,100
if it's bigger than minus 50.

447
00:58:40,100 --> 00:58:41,940
And that's a measurement error.

448
00:58:41,940 --> 00:58:44,460
So yeah, now you know that the code is actually

449
00:58:44,460 --> 00:58:48,340
wrong when you just know what it's doing.

450
00:58:48,340 --> 00:58:51,260
It could well be on purpose, actually.

451
00:58:51,260 --> 00:58:53,340
So the comment definitely is useful,

452
00:58:53,340 --> 00:58:56,620
because you just spotted the bug.

453
00:58:56,620 --> 00:59:02,060
Yeah, is there anything here that we didn't mention? Not really? No. Yeah.

454
00:59:04,460 --> 00:59:10,220
Okay, yeah, and there's some situations where people often use

455
00:59:11,420 --> 00:59:20,300
comments where having version control is actually a better option. So sometimes you see people

456
00:59:20,300 --> 00:59:26,140
comment out a piece of code and, you know, for testing that's fine. You comment it out, you run

457
00:59:26,140 --> 00:59:34,540
it once and you see if what you're doing is working. But it's then not a good idea to just

458
00:59:34,540 --> 00:59:40,620
keep it lying around in the code because when you remove a piece of code and you commit it to version

459
00:59:40,620 --> 00:59:48,300
control, commit it to Git, the code exists. Before removing it, if you have committed it to Git,

460
00:59:48,300 --> 00:59:55,260
the code exists in Git and you can get it back. So there's no reason to keep it also commented

461
00:59:55,260 --> 00:59:58,220
out in the code. It just makes the code harder to read.

462
00:59:59,660 --> 01:00:03,180
And this is not even the worst thing. So if it's at least commented out,

463
01:00:04,220 --> 01:00:09,740
it's not looking as if it were a normal code, but I've also seen things like if zero.

464
01:00:11,100 --> 01:00:11,900
Okay. Yeah.

465
01:00:11,900 --> 01:00:16,140
Or if to comment stuff out.

466
01:00:17,500 --> 01:00:24,620
Yeah. I'm guilty of that, but it's usually to force. So for example, if it checks for a file

467
01:00:24,620 --> 01:00:30,540
and then creates one if it doesn't exist. I might force it to delete the existing file and overwrite

468
01:00:30,540 --> 01:00:37,740
it by doing that when developing. But yeah, just keeping that around in the code is not a good

469
01:00:37,740 --> 01:00:46,860
idea. It makes it harder to read. Another one is emulating version control.

470
01:00:46,860 --> 01:00:56,780
So a comment that tells people why you changed a piece of code is not really that useful or that's

471
01:00:56,780 --> 01:01:01,500
what version controllers is meant to do. That's why you write a comment for each comment that

472
01:01:01,500 --> 01:01:08,860
you make in Git. You tell people why you're making the change. So it's not necessary to

473
01:01:08,860 --> 01:01:15,500
make those in the code as well or in comments. I think what's important with these kind of

474
01:01:15,500 --> 01:01:21,380
of in-code comments is that they explain things.

475
01:01:21,380 --> 01:01:25,900
They don't state what's happening,

476
01:01:25,900 --> 01:01:29,140
but they explain why things are happening.

477
01:01:29,140 --> 01:01:32,420
Why are you doing these kind of things, and so on.

478
01:01:32,420 --> 01:01:40,460
And that's where these kind of inline comments become useful.

479
01:01:40,460 --> 01:01:41,540
Yeah.

480
01:01:41,540 --> 01:01:45,940
And then there's a second type of ENCODE documentation.

481
01:01:45,940 --> 01:01:51,660
Yes, so this is more about the API documentation.

482
01:01:51,660 --> 01:01:55,540
There was already a question a little bit further on and

483
01:01:55,540 --> 01:01:59,380
further up in the collaborative document about it.

484
01:01:59,380 --> 01:02:02,180
Ah, right.

485
01:02:02,180 --> 01:02:07,620
And this is, I think, the answer to that question.

486
01:02:07,620 --> 01:02:09,300
What should be in a doc string?

487
01:02:11,540 --> 01:02:17,460
In general, yeah, what's going into the function, what's coming out of the function, what does

488
01:02:17,460 --> 01:02:29,260
the function do so that whatever kind of API documentation generator you would be using

489
01:02:29,260 --> 01:02:38,860
can pass this and create a nice looking documentation out of it.

490
01:02:38,860 --> 01:02:47,740
the better structured for whatever parser you use it is the more the better it

491
01:02:49,260 --> 01:02:52,300
the better it is for the for usability in the end.

492
01:02:55,740 --> 01:03:03,020
Yeah so it is actually very common to see the comments take more space than the actual code

493
01:03:03,020 --> 01:03:10,020
Even though this is a relatively constructed example, it's also relatively realistic.

494
01:03:10,020 --> 01:03:22,020
So it is useful to tell how you're converting between Fahrenheit and Celsius in this function.

495
01:03:22,020 --> 01:03:28,020
And what is the expected input and output.

496
01:03:28,020 --> 01:03:36,700
And it is actually just having this line of code inside your code is less descriptive

497
01:03:36,700 --> 01:03:38,220
than calling this function.

498
01:03:38,220 --> 01:03:43,820
So yeah, this is a good example.

499
01:03:43,820 --> 01:03:51,860
This is how you do it in R, just occasionally change from Python for variety.

500
01:03:51,860 --> 01:03:56,860
Okay, so, yeah, so docstrings can,

501
01:03:56,960 --> 01:03:58,420
they do more than just comments

502
01:03:58,420 --> 01:04:02,580
because you can pass them out into this documentation.

503
01:04:05,940 --> 01:04:08,180
And so you can automatically generate

504
01:04:08,180 --> 01:04:11,940
this API documentation part of your documentation,

505
01:04:11,940 --> 01:04:13,140
which is very useful.

506
01:04:13,140 --> 01:04:15,900
And what that really means is

507
01:04:15,900 --> 01:04:18,620
that your API documentation lives with the code.

508
01:04:18,620 --> 01:04:21,540
It exists in the same place as the code.

509
01:04:21,540 --> 01:04:24,580
and you, well, that makes it more likely

510
01:04:24,580 --> 01:04:26,020
that you will remember to change it

511
01:04:26,020 --> 01:04:27,460
when you change the function.

512
01:04:29,060 --> 01:04:30,920
So there is no separate file

513
01:04:30,920 --> 01:04:32,980
where you have all of your API documentation.

514
01:04:32,980 --> 01:04:36,760
It is in the same file as the code, which is very useful.

515
01:04:39,160 --> 01:04:41,420
Okay, so a good docstring will describe

516
01:04:41,420 --> 01:04:42,580
what the function does.

517
01:04:43,500 --> 01:04:46,220
What are the input variables and what are the outputs?

518
01:04:47,220 --> 01:04:51,060
Format as they are the input variables, so what types?

519
01:04:51,060 --> 01:04:55,060
So essentially, how to use the function and what is it doing.

520
01:05:02,580 --> 01:05:07,460
Oh, and one very good point is that the name of the function

521
01:05:07,460 --> 01:05:10,900
is also important for documentation.

522
01:05:10,900 --> 01:05:16,340
So here, the function name tells you exactly what it's doing.

523
01:05:16,340 --> 01:05:19,700
And that is important.

524
01:05:19,700 --> 01:05:25,860
So then finally to README files, let's go over this section and then have a break.

525
01:05:27,860 --> 01:05:35,460
So README files are kind of the first, well I said that you might want to first start when you're

526
01:05:35,460 --> 01:05:40,980
starting to write the code, you might want to start with in code documentation of some kind,

527
01:05:41,540 --> 01:05:47,380
but then README files are the first thing that a user would see and that anyone you share the

528
01:05:47,380 --> 01:05:55,380
code with. When they get your code the first thing they look at is a readme file and if it's

529
01:05:55,940 --> 01:06:01,140
on GitHub, GitLab, something like that, then it's a nicely formatted section on the front

530
01:06:01,140 --> 01:06:09,060
page of your code. So it is the first thing people see and I think it is very important

531
01:06:09,060 --> 01:06:14,980
to have. So you should always have some kind of a readme file. It might also be enough

532
01:06:14,980 --> 01:06:21,380
in a small enough project to put everything in the readme file.

533
01:06:21,380 --> 01:06:22,380
I would agree.

534
01:06:22,380 --> 01:06:28,940
In general, I think the readme is kind of your way to advertise your code.

535
01:06:28,940 --> 01:06:30,700
Yeah.

536
01:06:30,700 --> 01:06:42,420
So we have a few fun exercises for readme files and I think we should take a little

537
01:06:42,420 --> 01:06:48,740
bit of time to so we have already talked a lot about what is required but we should spend a

538
01:06:48,740 --> 01:06:55,700
little bit of time playing around with it so let's do the exercise one as a demonstration

539
01:06:58,980 --> 01:07:06,740
but for that we need a readme on github so in the next section we'll use this

540
01:07:06,740 --> 01:07:15,240
this documentation example, but I will also use it in this readme example.

541
01:07:15,240 --> 01:07:21,120
And if we open the readme file here, we'll see that it's written in Markdown.

542
01:07:21,120 --> 01:07:26,180
GitHub nicely renders Markdown automatically.

543
01:07:26,180 --> 01:07:30,300
So what are these things?

544
01:07:30,300 --> 01:07:40,860
some more information about what kinds of formatting you can use here. But let's try

545
01:07:40,860 --> 01:07:51,600
make a note. So if I copy the whole thing, maybe it doesn't copy these ticks. Let's see.

546
01:07:51,600 --> 01:07:56,980
So what is each of these things? No, it does copy the ticks. Oh, because the ticks are

547
01:07:56,980 --> 01:08:04,820
part of the Markdown language. Right. Okay. So the first thing is a note.

548
01:08:06,420 --> 01:08:12,180
It will do some fancy formatting. The second is important. And one thing you can do if you're

549
01:08:12,180 --> 01:08:18,420
editing it on GitHub is you can preview. So let's see what it looks like. Okay. So there is a blue

550
01:08:18,420 --> 01:08:27,900
information thing. There is a slightly more red and well I guess yellowish but

551
01:08:27,900 --> 01:08:36,780
more visible version of it. Okay so that's a fun thing you can do. What is this

552
01:08:36,780 --> 01:08:48,180
details and summary? I guess this is some kind of card section. So let's try this.

553
01:08:48,180 --> 01:08:54,820
so if you add this details tag and it has a summary on top, short summary.

554
01:08:58,420 --> 01:09:02,900
Oh okay so details is something that's hidden by default but it has a title

555
01:09:03,700 --> 01:09:10,980
and then when you click on it it expands. So this is useful for making the readme more

556
01:09:10,980 --> 01:09:16,580
readable but still you can include some additional information that people might need.

557
01:09:18,180 --> 01:09:26,500
Okay and then there's some batches. So a lot of projects have these automatically updating

558
01:09:26,500 --> 01:09:33,140
batches that fetch some information like is the documentation up to date and building correctly

559
01:09:34,820 --> 01:09:42,260
or do the tests currently pass in this branch and so on. So this format creates some sort of a batch

560
01:09:42,260 --> 01:09:58,260
This is from image.shields.io, so it builds you this image with the text that you put in.

561
01:09:58,260 --> 01:10:05,260
Which is essentially the address that you use converted into text.

562
01:10:05,260 --> 01:10:10,260
Yeah, so this is also a link that goes to example.org in this case.

563
01:10:10,260 --> 01:10:19,620
this case. But there would be a lot more realistic cases for using this. So you can use a batch,

564
01:10:19,620 --> 01:10:25,460
for example, to show, well, like I said, that the documentation is correctly compiling.

565
01:10:28,660 --> 01:10:34,500
Which would probably come from a different source because that commonly comes from some kind of

566
01:10:34,500 --> 01:10:40,660
of continuous integration or a system that tells you okay it actually builds properly and so on.

567
01:10:42,580 --> 01:10:50,580
Okay so we should go on a break soon. Let's take an example readme quickly

568
01:10:53,780 --> 01:11:02,180
so we can find something on github. Do you have an example in mind that has some batches and

569
01:11:04,500 --> 01:11:08,500
what other useful features we would want to see.

570
01:11:08,500 --> 01:11:12,500
Let's look at

571
01:11:12,500 --> 01:11:16,500
NumPy

572
01:11:16,500 --> 01:11:20,500
is the one that always comes to my mind when I think of a Python project.

573
01:11:20,500 --> 01:11:24,500
Go for NumPy, I think that's fine.

574
01:11:24,500 --> 01:11:28,500
Okay, so NumPy is a huge

575
01:11:28,500 --> 01:11:32,500
project. You have to scroll down a bit to get to the

576
01:11:32,500 --> 01:11:40,340
to the readme file. So the batches are on top. There's a DOI that links to the digital object

577
01:11:40,340 --> 01:11:47,220
identifier of the software. There's a stack overflow page for NumPy where you can ask questions

578
01:11:48,580 --> 01:11:51,380
and it shows how many downloads per month they've had.

579
01:11:53,460 --> 01:11:59,940
And an open SSF. I'm not actually sure what this is, some sort of score. So you might have

580
01:11:59,940 --> 01:12:06,820
something like the coverage of tests and or whether the tests are passing is one I mentioned

581
01:12:07,460 --> 01:12:13,940
all sorts of useful Ataclans information in there and then they have everything

582
01:12:13,940 --> 01:12:17,460
you need to know about NumPy right on top

583
01:12:20,180 --> 01:12:25,220
code of conduct and how to contribute or call for contributions in this case

584
01:12:25,220 --> 01:12:35,060
and yeah, so these are the most important things. In the documentation itself, actually this one,

585
01:12:36,020 --> 01:12:41,700
this readme already tells you how to install it. Does it tell you how to install it? Well,

586
01:12:41,700 --> 01:12:46,340
it has a pypy tag, but it doesn't really tell you how to install it. Okay, fine,

587
01:12:47,060 --> 01:12:50,900
it tells you how to test something, test that it runs correctly.

588
01:12:50,900 --> 01:13:00,100
So here's the documentation page though and let's go to the web version.

589
01:13:01,060 --> 01:13:06,980
So there's a getting started section, there's a user guide, there's the API reference

590
01:13:07,780 --> 01:13:15,460
and how to contribute. So the most important parts are quickly there,

591
01:13:15,460 --> 01:13:23,300
there's installation instructions and links to important things like issue tracker is where you

592
01:13:23,860 --> 01:13:30,100
report bugs for example and support QnA.

593
01:13:32,580 --> 01:13:37,300
Okay so maybe I should still quickly show what an API reference looks like

594
01:13:37,300 --> 01:13:49,300
like so this is I want to function well let's just do infinity so somewhere in the code

595
01:13:49,300 --> 01:13:57,060
they define this numpy.infinity which represents an infinite number and there they have a doc

596
01:13:57,060 --> 01:14:05,340
string that's essentially converted into this section of the documentation okay so I think

597
01:14:05,340 --> 01:14:15,660
that's enough of that example and let's take a break before we go to the next section so

598
01:14:15,660 --> 01:14:27,980
I would say at least until five past then we'll we should have plenty of time all right

599
01:14:27,980 --> 01:14:30,940
so see you at five past bye

600
01:14:35,340 --> 01:14:37,400
you

601
01:15:05,340 --> 01:15:07,400
you

602
01:15:35,340 --> 01:15:37,400
you

603
01:16:05,340 --> 01:16:07,400
you

604
01:16:35,340 --> 01:16:37,400
you

605
01:17:05,340 --> 01:17:07,400
you

606
01:17:35,340 --> 01:17:37,400
you

607
01:18:05,340 --> 01:18:07,400
you

608
01:18:35,340 --> 01:18:37,400
you

609
01:19:05,340 --> 01:19:07,400
you

610
01:19:35,340 --> 01:19:37,400
you

611
01:20:05,340 --> 01:20:07,400
you

612
01:20:35,340 --> 01:20:37,400
you

613
01:21:05,340 --> 01:21:07,400
you

614
01:21:35,340 --> 01:21:37,400
you

615
01:22:05,340 --> 01:22:07,400
you

616
01:22:35,340 --> 01:22:37,400
you

617
01:23:05,340 --> 01:23:07,400
you

618
01:23:35,340 --> 01:23:37,400
you

619
01:24:05,340 --> 01:24:07,400
you

620
01:24:35,340 --> 01:24:37,400
you

621
01:25:05,340 --> 01:25:07,400
you

622
01:25:35,340 --> 01:25:37,400
you

623
01:26:05,340 --> 01:26:34,340
Hello, we are back, um, hope you had a good break.

624
01:26:34,340 --> 01:26:42,140
There was a question about the repository that I showed. I didn't actually save the

625
01:26:42,140 --> 01:26:49,620
changes but that's actually the template, that's the repository that we're going to

626
01:26:49,620 --> 01:26:59,020
use in this next demonstration anyway. So I will show it in a moment. Sorry, we don't

627
01:26:59,020 --> 01:27:03,380
use it in this one. We use it in the next one. So let me just quickly hop over to that

628
01:27:03,380 --> 01:27:06,180
just to answer the question that I started to answer.

629
01:27:06,180 --> 01:27:15,580
So there is this documentation example repository

630
01:27:15,580 --> 01:27:18,580
that allows you to generate an example that we

631
01:27:18,580 --> 01:27:21,060
will be using today.

632
01:27:21,060 --> 01:27:24,220
And what I showed was actually generated

633
01:27:24,220 --> 01:27:26,660
from this documentation example.

634
01:27:26,660 --> 01:27:30,500
So it's something that I will delete in

635
01:27:30,500 --> 01:27:32,260
after this course is over.

636
01:27:32,260 --> 01:27:35,300
but you can also generate an example from here.

637
01:27:39,820 --> 01:27:42,140
It will be more important later what the contents are,

638
01:27:42,140 --> 01:27:44,400
but of course, for the thing that I showed,

639
01:27:44,400 --> 01:27:46,440
it was mainly that it has a README file.

640
01:27:48,500 --> 01:27:51,680
Okay, so Sphinx and Markdown.

641
01:27:53,600 --> 01:27:55,500
So yeah, we mentioned that Sphinx is the thing

642
01:27:55,500 --> 01:27:58,640
we use to generate these course materials,

643
01:27:58,640 --> 01:28:01,420
and they are large part written in Markdown.

644
01:28:02,260 --> 01:28:06,260
And you can also use RichText in

645
01:28:08,260 --> 01:28:12,260
RichText with Sphinx, that is probably the default

646
01:28:12,260 --> 01:28:15,260
but it's also easy to use Markdown

647
01:28:15,260 --> 01:28:18,260
and since you're all used to Markdown by now

648
01:28:18,260 --> 01:28:21,260
because all the nodes are in Markdown, we will use that.

649
01:28:21,260 --> 01:28:24,260
Okay, so this is mainly a demonstration

650
01:28:24,260 --> 01:28:28,260
so I will soon move into the

651
01:28:28,260 --> 01:28:31,260
Visual Studio window

652
01:28:31,260 --> 01:28:38,700
But you can also try to do this probably better to just follow along for now but you can also

653
01:28:38,700 --> 01:28:45,540
try to do this in a project of your own or just following these steps.

654
01:28:45,540 --> 01:28:52,060
So I will just expand this window a bit.

655
01:28:52,060 --> 01:29:02,060
Okay, so the instructions start with some checks that everything is working as expected.

656
01:29:02,060 --> 01:29:08,120
So Sphinx runs in Python, so we need to have Python.

657
01:29:08,120 --> 01:29:09,120
We do have Python.

658
01:29:09,120 --> 01:29:16,820
I will just quickly run through this, just that we don't run into problems while doing

659
01:29:16,820 --> 01:29:20,060
the demonstration.

660
01:29:20,060 --> 01:29:26,580
So we need Sphinx build. Whoops, I clicked on Sphinx build, and now I'm no longer copied.

661
01:29:26,580 --> 01:29:33,420
I have no longer copied what I was expecting. So, okay, Sphinx quick start is a descriptive

662
01:29:33,420 --> 01:29:39,140
tool we'll use. It has the correct version. Everything's fine. And one important thing

663
01:29:39,140 --> 01:29:46,220
that you need to install separately is this mist parser. So for this to work, you need

664
01:29:46,220 --> 01:29:50,980
both Python, Sphinx, and Mist parser.

665
01:29:50,980 --> 01:29:55,060
So Mist is the kind of markdown we will be using.

666
01:29:55,060 --> 01:29:57,180
Okay, so let's get started.

667
01:29:57,180 --> 01:30:02,260
So right now we are in an empty folder.

668
01:30:02,260 --> 01:30:04,340
So there's nothing in here.

669
01:30:04,340 --> 01:30:07,180
I will make a new directory.

670
01:30:07,180 --> 01:30:09,940
I'll actually use the file view for that.

671
01:30:10,580 --> 01:30:11,380
new folder

672
01:30:13,700 --> 01:30:14,500
doc example

673
01:30:19,060 --> 01:30:23,220
and then in there we okay we need to go in that folder and then run

674
01:30:23,780 --> 01:30:28,980
Sphinx quick start in that folder so let's go there to documentation example

675
01:30:31,860 --> 01:30:35,460
and then run Sphinx quick start right here

676
01:30:35,460 --> 01:30:44,100
Okay, maybe I need a bit more space for this. Okay, so it asks you a few questions.

677
01:30:47,780 --> 01:30:52,740
Let's say I don't want to separate the directories now. It's usually best to just

678
01:30:52,740 --> 01:30:58,740
stick with the standard, with the defaults. Project name is something we of course need.

679
01:30:58,740 --> 01:31:05,700
need. This is only a test project. Let's call it that. Or should we have a funny name for

680
01:31:05,700 --> 01:31:10,140
it? I'm not great with funny names. I will not start because then I will not be able

681
01:31:10,140 --> 01:31:18,500
to continue. Okay. Author's names, that's my name. Project release, so that's the version

682
01:31:18,500 --> 01:31:28,700
number, let's say. So it's 0.0.1. And language, let's do English. So it will support English.

683
01:31:28,700 --> 01:31:32,540
English and no other languages by default.

684
01:31:32,540 --> 01:31:35,740
Okay. So now we have a bunch of new files here.

685
01:31:35,740 --> 01:31:40,540
So quickstart created

686
01:31:40,540 --> 01:31:45,540
all the files that Sphinx needs to run in this folder.

687
01:31:45,540 --> 01:31:48,740
There's this conf.py,

688
01:31:48,740 --> 01:31:54,900
which has all the configuration for this project.

689
01:31:54,900 --> 01:32:01,380
there's all the project name, copyright statement, all those name,

690
01:32:01,380 --> 01:32:05,940
version number and then we have some extensions that you can add

691
01:32:09,460 --> 01:32:16,980
and we will in fact add one since we are here why not do it now. So we want to add this

692
01:32:16,980 --> 01:32:24,180
mist parser extension here. Okay and that's probably the only thing we want to change in this

693
01:32:24,900 --> 01:32:35,460
in this file. Let's look at the other files. So okay, conf.py has the configuration options

694
01:32:36,340 --> 01:32:43,780
for Sphinx. Then we have an index.rst, which is the main file for this documentation. It's a

695
01:32:44,580 --> 01:32:48,900
rich text file. Oh, sorry, [name], did you say something?

696
01:32:48,900 --> 01:32:52,020
No, I wouldn't call it the main, it's the root file.

697
01:32:52,020 --> 01:33:04,820
Okay, yeah, the root file. So, in this case, it has a title and then it has a talk tree,

698
01:33:04,820 --> 01:33:16,160
so a table of contents, yes. And then you can define some indices in here that it will

699
01:33:16,160 --> 01:33:21,440
use to generate the documentation pages.

700
01:33:22,640 --> 01:33:29,280
Okay, the makefile and make.bat are something you use to actually build the documentation,

701
01:33:29,280 --> 01:33:30,960
so they're workflow files.

702
01:33:36,960 --> 01:33:41,360
We don't need to go into the details of what's in there because it will look pretty complicated.

703
01:33:41,360 --> 01:33:47,360
And it's essentially like you never modify.

704
01:33:47,360 --> 01:33:48,360
Yeah.

705
01:33:48,360 --> 01:33:49,360
Okay.

706
01:33:49,360 --> 01:33:54,640
So there's an empty build directory, an empty static directory, an empty templates directory.

707
01:33:54,640 --> 01:34:03,680
So the build directory, it's where Sphinx puts things that it creates.

708
01:34:03,680 --> 01:34:08,520
So you generally don't put anything in there.

709
01:34:08,520 --> 01:34:15,800
is for your own HTML templates, you will not be creating any of those in this example.

710
01:34:17,080 --> 01:34:26,680
And static is for static files for the HTML site like images or CSS for styles and so on.

711
01:34:27,320 --> 01:34:32,760
So mainly images are the ones you will run into first, those will go into the static folder.

712
01:34:32,760 --> 01:34:44,240
Okay, so let's look at the index.

713
01:34:44,240 --> 01:34:52,360
So we will not use this indices and tables section, so we can remove it.

714
01:34:52,360 --> 01:35:01,240
And then, okay, so this section here is a comment in rich text, so this will not be

715
01:35:01,240 --> 01:35:09,320
displayed on the website. Let me show the whole thing. It states that it's the master file created

716
01:35:09,320 --> 01:35:27,560
by Sphinx Quickstart. Then we have this table of contents, max depth of the table. If a file

717
01:35:27,560 --> 01:35:33,480
contains sections, like how deep do you want to go in those sections? And then in here,

718
01:35:34,040 --> 01:35:37,720
we can add our own pages. Sorry, let me

719
01:35:39,960 --> 01:35:43,160
disable that because it is definitely going to make things

720
01:35:45,960 --> 01:35:53,000
weird for what we want to do here. Okay, so I should actually probably have logged out of

721
01:35:53,000 --> 01:36:03,240
everything. Okay, so here we go. We can add a page into a documentation, so somefeature.markdown.

722
01:36:04,120 --> 01:36:11,240
This is a file name and that file doesn't exist yet, so we need to add it, but

723
01:36:12,920 --> 01:36:20,520
once we add it, it will be in the table of contents. Okay, so let's add that file.

724
01:36:20,520 --> 01:36:31,180
Let's call it somefeature.md and then we can start adding things here.

725
01:36:31,180 --> 01:36:39,720
So this is now marked down so it should look relatively familiar by this point.

726
01:36:39,720 --> 01:36:54,240
It has a title, it has a subsection title, some normal text and a list and some nested

727
01:36:54,240 --> 01:36:57,760
items in that list.

728
01:36:57,760 --> 01:37:04,160
And I need to also save this one.

729
01:37:04,160 --> 01:37:14,640
And now going back to the terminal, I could probably run something in VS Code as well

730
01:37:14,640 --> 01:37:20,640
to run this. But, well, let's just run it in the terminal, follow the instructions to

731
01:37:20,640 --> 01:37:29,320
the letter. So, what we run is Sphinx build. Then we give it the directory that we want

732
01:37:29,320 --> 01:37:33,680
to where the input files are in,

733
01:37:33,680 --> 01:37:36,160
which is this current directory, so dot,

734
01:37:36,160 --> 01:37:40,440
and then where do we want to put all the build files?

735
01:37:40,440 --> 01:37:42,640
And that's the underscore build directory.

736
01:37:44,360 --> 01:37:47,320
Okay, there's a warning, non-existent.

737
01:37:47,320 --> 01:37:48,980
It didn't find some feature.

738
01:37:48,980 --> 01:37:50,720
Okay, so did I do something wrong?

739
01:37:52,840 --> 01:37:53,680
Yes, some-

740
01:37:53,680 --> 01:37:54,520
There's a typo.

741
01:37:56,280 --> 01:37:57,560
Oh no, wait.

742
01:37:57,560 --> 01:38:07,000
somefeature.md. Yes this is somefeature.md. So then the right folder. Okay it should be.

743
01:38:09,080 --> 01:38:17,480
No. No it's not. True. This isn't right. So I originally opened

744
01:38:19,240 --> 01:38:26,920
the folder one above this one and then created this folder. Okay so it was in the wrong folder.

745
01:38:26,920 --> 01:38:35,240
It's a slightly unintended. Okay, let's try again. So I'll go to the terminal and run the

746
01:38:35,240 --> 01:38:41,960
same command again by pressing up arrow. There we go. And there it was.

747
01:38:45,080 --> 01:38:52,440
Am I sharing the entire terminal window now? I think there are many.

748
01:38:52,440 --> 01:38:55,240
Might be cutting off a little bit of the bottom.

749
01:38:55,240 --> 01:38:57,520
Yeah, it's actually complete.

750
01:38:57,520 --> 01:38:58,020
OK.

751
01:38:58,020 --> 01:39:00,280
It just looks odd because it's line breaking.

752
01:39:04,400 --> 01:39:08,760
No, I mean, I think the last thing I'm seeing in the stream

753
01:39:08,760 --> 01:39:10,560
is this line here.

754
01:39:10,560 --> 01:39:11,520
Yeah, sorry.

755
01:39:11,520 --> 01:39:13,480
OK, I've updated it.

756
01:39:13,480 --> 01:39:14,640
Yeah.

757
01:39:14,640 --> 01:39:20,080
So the command I just ran is this things build dot

758
01:39:20,080 --> 01:39:22,440
and then underscore build.

759
01:39:22,440 --> 01:39:24,760
OK, so mostly it was visible just

760
01:39:24,760 --> 01:39:31,000
when it reads the end of the last line, then you maybe didn't see it. Okay, but here we are.

761
01:39:33,400 --> 01:39:34,840
It's a little bit wider as well.

762
01:39:40,680 --> 01:39:48,360
Okay, so now we should have the files. It didn't complain about anything.

763
01:39:48,360 --> 01:39:54,040
And now in this build directory, this is what we had previously. And now we have

764
01:39:54,760 --> 01:40:01,040
Well, we have some HTML files, importantly, an index.html.

765
01:40:01,040 --> 01:40:07,680
So we can open that in a web browser and see what's inside.

766
01:40:07,680 --> 01:40:11,200
So there's different ways of doing that from the terminal.

767
01:40:11,200 --> 01:40:18,040
I think in this case, we can try to do this in VS Code.

768
01:40:18,040 --> 01:40:24,000
We can go live, on the live server.

769
01:40:24,000 --> 01:40:32,120
The problem is that it will open the folder that's in the bottom of the, but while it

770
01:40:32,120 --> 01:40:38,840
will open the folder that's currently open in VS Code.

771
01:40:38,840 --> 01:40:45,040
So this font is really small, okay, now it's really big.

772
01:40:45,040 --> 01:40:50,400
So yeah, that's the build directory and finally, okay, so now it opened the actual documentation

773
01:40:50,400 --> 01:40:51,400
page.

774
01:40:51,400 --> 01:40:57,920
So this is what the default looks like, it's a table of contents, there's some feature

775
01:40:57,920 --> 01:41:03,880
and a subsection and then there's this navigation area.

776
01:41:03,880 --> 01:41:12,960
Okay, so let's go to some feature and this is now the page we wrote in Markdown for this

777
01:41:12,960 --> 01:41:16,040
some feature section.

778
01:41:16,040 --> 01:41:20,600
Okay, so how are we doing?

779
01:41:20,600 --> 01:41:31,240
are actually we haven't spent all that much time here yet so let's do a bit more

780
01:41:36,520 --> 01:41:44,840
so we can go and edit the somefeature.markdown and try some

781
01:41:44,840 --> 01:41:49,840
try some more fancy features of the mist markdown.

782
01:41:53,880 --> 01:41:56,660
Okay, so maybe not as that fancy,

783
01:41:56,660 --> 01:41:59,480
but there's different levels of titles,

784
01:41:59,480 --> 01:42:02,080
which we are already seeing.

785
01:42:02,080 --> 01:42:03,400
So just level one,

786
01:42:09,240 --> 01:42:10,560
level two.

787
01:42:10,560 --> 01:42:20,320
so this will look slightly different once we run oops that's still level two with three of these

788
01:42:22,720 --> 01:42:26,400
hashes it will be level three and with four hashes it will be level

789
01:42:26,400 --> 01:42:33,760
four okay so this will look slightly different actually why not

790
01:42:36,320 --> 01:42:39,680
why not just keep recompiling and show as we go

791
01:42:40,560 --> 01:42:45,120
Okay so this is what the different levels of titles look like.

792
01:42:47,600 --> 01:42:50,240
There's a useful feature here so there is a permalink

793
01:42:51,440 --> 01:42:56,880
to each of these heading each of these sections so when you say

794
01:42:58,880 --> 01:43:04,960
hash then the section title it will take you directly to that section in the documentation.

795
01:43:04,960 --> 01:43:22,440
Okay, so what else can you do? You can do numbered lists, so let's do three items,

796
01:43:22,440 --> 01:43:28,200
but now we don't actually have to keep numbering the items correctly. You can make edits and

797
01:43:28,200 --> 01:43:33,400
sometimes the numbers come out or sometimes you forget to change the numbers, but

798
01:43:33,400 --> 01:43:44,800
but the Markdown Renderer takes care of that for you, so the numbers will come up correctly

799
01:43:44,800 --> 01:43:53,640
in this case, yeah, that's expected. Okay, then some other things you can do and you can

800
01:43:53,640 --> 01:44:03,040
also test this in the notes. Maybe don't add too large tables into the notes, but okay,

801
01:44:03,040 --> 01:44:07,880
This is what a table looks like.

802
01:44:07,880 --> 01:44:18,240
So you need to have a header and a line below the header and then the renderer will realize

803
01:44:18,240 --> 01:44:25,560
that this is supposed to be a table.

804
01:44:25,560 --> 01:44:30,360
Okay so this is a table of whether each number is prime.

805
01:44:30,360 --> 01:44:32,580
I'm always a bit confused about why one is not a prime,

806
01:44:32,580 --> 01:44:33,860
but fine.

807
01:44:33,860 --> 01:44:34,860
Two is a prime.

808
01:44:35,740 --> 01:44:36,700
Maybe one is a prime.

809
01:44:36,700 --> 01:44:37,600
What do you think?

810
01:44:42,260 --> 01:44:44,700
Let's also add a bit of spacing there just to,

811
01:44:44,700 --> 01:44:47,820
so one useful thing, of course, in Markdown is that

812
01:44:49,220 --> 01:44:52,900
the texts written into,

813
01:44:52,900 --> 01:45:04,400
The text document itself usually looks good enough on its own, so you don't even need

814
01:45:04,400 --> 01:45:11,340
to render it to be able to read it properly.

815
01:45:11,340 --> 01:45:19,980
But this creates a table, so 4 is not a prime, which is good to know.

816
01:45:19,980 --> 01:45:33,960
And then, well, you can have, importantly in software documentation, you can have code.

817
01:45:33,960 --> 01:45:35,500
So this is Python code.

818
01:45:35,500 --> 01:45:39,660
So we'll start with three ticks and then the language name.

819
01:45:39,660 --> 01:45:42,820
So Python.

820
01:45:42,820 --> 01:45:45,300
So let's just do a quick function.

821
01:45:45,300 --> 01:45:52,340
hello world or just hello and this function prints

822
01:45:55,620 --> 01:46:02,900
hello world okay so that's an example of how to include code in

823
01:46:07,380 --> 01:46:12,260
in markdown and i will language yeah in a certain language so i will quick

824
01:46:12,260 --> 01:46:20,660
also just copy paste in an example from that's written in C so that you see there's multiple

825
01:46:20,660 --> 01:46:28,020
languages I just didn't write to write all of this C code into the markdown file okay

826
01:46:29,620 --> 01:46:36,340
because there's a lot of a lot more you need to do in C to get the same result okay

827
01:46:36,340 --> 01:46:42,420
OK, you can also include a file directly.

828
01:46:42,420 --> 01:46:46,300
So this is literal include directive.

829
01:46:46,300 --> 01:46:51,820
So it's the same three ticks, and then literal include,

830
01:46:51,820 --> 01:46:53,060
and the name of the file.

831
01:46:56,300 --> 01:46:59,700
That was the question, if you can give a bit more

832
01:46:59,700 --> 01:47:04,700
explanation of what you can configure and what you can do.

833
01:47:04,700 --> 01:47:11,980
and I think going through the conf.py a bit would be useful. Okay yeah.

834
01:47:14,700 --> 01:47:21,020
Let's see so there's one more thing so we don't have an example.py so this will not actually

835
01:47:21,020 --> 01:47:28,940
work so let's get rid of this section but one more thing before that so you can

836
01:47:29,900 --> 01:47:33,580
also write math equations which is important in many fields

837
01:47:34,700 --> 01:47:42,700
So this is a math section and this is something that the specifically missed flavored markdown does for you.

838
01:47:42,700 --> 01:47:46,700
I think that's also for the literal include, that's also missed.

839
01:47:46,700 --> 01:47:49,700
Oh yeah, okay, that is true.

840
01:47:49,700 --> 01:47:57,700
We do need to do something in the conf.py to get this to work, so we'll be there in a second.

841
01:47:57,700 --> 01:48:03,700
So we'll just write this very interesting equation with a green theorem.

842
01:48:03,700 --> 01:48:07,700
Okay, and you can also do an inline equation.

843
01:48:11,700 --> 01:48:16,700
So again, math is, it's not square brackets, what are these called?

844
01:48:16,700 --> 01:48:18,700
Curly brackets.

845
01:48:18,700 --> 01:48:20,700
Curly brackets, okay.

846
01:48:20,700 --> 01:48:35,260
Okay. So that's an inline equation. Okay. And so, okay, this will actually not work.

847
01:48:35,260 --> 01:48:39,620
No, let's see. I'm quite surprised.

848
01:48:39,620 --> 01:48:45,180
Well, it mentions that in some older versions of Sphinx, you needed to include it.

849
01:48:45,180 --> 01:48:51,740
Okay, yes, so this Sphinx is, so now this is included in Sphinx or with the Mist

850
01:48:51,740 --> 01:48:57,180
parser extension directly. We don't need to change the config file for this to work.

851
01:48:58,220 --> 01:48:59,980
Let's change the config file anyway.

852
01:49:03,180 --> 01:49:09,340
So here's the config file. So there's not that much here actually.

853
01:49:09,340 --> 01:49:16,340
That's where to look for HTML templates and what files to not include.

854
01:49:16,340 --> 01:49:18,340
And we could change the HTML theme.

855
01:49:18,340 --> 01:49:22,340
Yeah, we can do that. I don't know what the defaults are.

856
01:49:22,340 --> 01:49:31,340
Well, you could use the Sphinx RTD. I think that should be part of the Codefinery environment.

857
01:49:31,340 --> 01:49:37,340
Okay, let's do that. So is it Sphinx RTD?

858
01:49:37,340 --> 01:49:50,540
I think read the docs RTD. Yes. Let's see if this works. No. Okay. So we don't have

859
01:49:50,540 --> 01:50:01,900
that one. So that failed. It's things RTD underscore RTD underscore theme. Sphinx read

860
01:50:01,900 --> 01:50:04,020
Orthodox theme with underscores.

861
01:50:04,020 --> 01:50:04,860
Okay.

862
01:50:07,380 --> 01:50:08,840
Okay, that works.

863
01:50:08,840 --> 01:50:11,220
So yeah, this looks a lot nicer, doesn't it?

864
01:50:12,260 --> 01:50:17,260
This looks pretty much like our course documentation,

865
01:50:18,380 --> 01:50:19,980
which is built on this as well.

866
01:50:21,820 --> 01:50:22,660
Okay.

867
01:50:25,300 --> 01:50:30,300
It's half past, so yeah, okay, we are doing good time.

868
01:50:30,300 --> 01:50:42,940
time. So I mean in principle there's a lot you can change but a lot of it is not in the default

869
01:50:42,940 --> 01:50:49,820
configuration options here. So you have HTML templates so you can write any HTML file you

870
01:50:49,820 --> 01:50:57,420
want and include the contents in that Sphinx creates into that. There's also a number of

871
01:50:57,420 --> 01:51:06,060
these themes that you can use and you can install third-party themes as Python packages.

872
01:51:07,100 --> 01:51:09,660
So there is a lot you can do.

873
01:51:16,380 --> 01:51:22,780
But yeah, so I don't know if there's anything we can easily demonstrate here in the time we have.

874
01:51:22,780 --> 01:51:29,780
I think the theming is probably the easiest that we have done that.

875
01:51:29,780 --> 01:51:31,780
Yeah.

876
01:51:31,780 --> 01:51:33,780
Okay.

877
01:51:33,780 --> 01:51:42,780
We could build this example.py file to show how it actually works and just add a example.py.

878
01:51:42,780 --> 01:51:50,780
this literal include section it also specifies the language and we are putting emphasis on

879
01:51:50,780 --> 01:51:55,780
lines two and three here so we don't know what those lines are yet because we didn't

880
01:51:55,780 --> 01:52:04,940
create the file yet lines two and three that means if I'm importing

881
01:52:04,940 --> 01:52:21,420
something, it will probably be those lines.

882
01:52:21,420 --> 01:52:28,180
So those are the lines we're emphasizing and then we do something.

883
01:52:28,180 --> 01:52:34,820
I think that's already sufficient.

884
01:52:34,820 --> 01:52:35,820
Yeah.

885
01:52:35,820 --> 01:52:36,820
Okay.

886
01:52:36,820 --> 01:52:39,340
So that's some Python code.

887
01:52:39,340 --> 01:52:40,340
And let's demo.

888
01:52:40,340 --> 01:52:43,020
And your example of Py is again in the wrong folder.

889
01:52:43,020 --> 01:52:44,020
True.

890
01:52:44,020 --> 01:52:47,820
Let's move it to the right folder.

891
01:52:47,820 --> 01:52:48,820
Okay.

892
01:52:48,820 --> 01:52:49,820
Good.

893
01:52:49,820 --> 01:52:53,820
Thanks for noticing that.

894
01:52:53,820 --> 01:52:55,340
Okay.

895
01:52:55,340 --> 01:52:59,900
So now it's including the example code directly,

896
01:52:59,900 --> 01:53:04,260
and it's added some emphasis on these two lines.

897
01:53:04,260 --> 01:53:08,980
And that's pretty convenient, especially in our case,

898
01:53:08,980 --> 01:53:12,620
where we sometimes have examples that build on one another,

899
01:53:12,620 --> 01:53:14,580
and we just want to highlight what changed

900
01:53:14,580 --> 01:53:18,660
in between the previous and this piece of code.

901
01:53:18,660 --> 01:53:20,940
So that's something that's quite useful there.

902
01:53:21,820 --> 01:53:28,460
yeah and of course this is a way of including the same example in multiple different places

903
01:53:28,460 --> 01:53:40,620
for example okay so we did the math we did the so we we did not add one thing we didn't add

904
01:53:40,620 --> 01:53:46,220
is api documentation and we have talked a good bit about that so maybe we should do that one

905
01:53:46,220 --> 01:53:51,820
as well before moving on to the next part. One thing I want to mention is that this is

906
01:53:51,820 --> 01:53:58,780
also a nice way to, in general, present examples and keep the examples as actual runnable files.

907
01:53:59,740 --> 01:54:05,500
So I think you can do literal includes that only include certain lines and don't

908
01:54:06,300 --> 01:54:10,460
not just highlight but just include the specific lines that you want to show.

909
01:54:10,460 --> 01:54:17,460
but you essentially have the example files as whole scripts or whatever,

910
01:54:17,460 --> 01:54:23,460
which makes it more usable in the end.

911
01:54:23,460 --> 01:54:26,460
Yeah, that's a good point.

912
01:54:26,460 --> 01:54:31,460
Because often you write a tutorial with some code examples,

913
01:54:31,460 --> 01:54:35,460
but it's hard to write that in such a way

914
01:54:35,460 --> 01:54:38,460
that the code examples actually work and actually run.

915
01:54:38,460 --> 01:54:44,940
run. It is hard to test those code examples but if you instead include certain lines from a script

916
01:54:44,940 --> 01:54:52,140
you can always run the script and see that it actually works. Okay so I've deleted the

917
01:54:52,140 --> 01:54:58,860
script-like part that I added but instead now I'm adding this multiply function and importantly this

918
01:54:58,860 --> 01:55:12,300
function has in code documentation, it has an API reference. So this is now our code for this

919
01:55:12,300 --> 01:55:18,620
project and we want to have an API reference added to our documentation. We don't currently have one.

920
01:55:18,620 --> 01:55:29,500
So how do we do that? First we need to go back to this index.rst file

921
01:55:33,900 --> 01:55:43,100
and we will be documenting the example module example.py here. So let's just call it the

922
01:55:43,100 --> 01:55:49,660
subsection example. Let's actually add a whole main section API reference.

923
01:55:54,140 --> 01:55:59,180
I assume the example will work but this looks a lot like

924
01:55:59,180 --> 01:56:05,900
Markdown and RST are getting mixed together so we'll see. It looks suspicious.

925
01:56:05,900 --> 01:56:19,820
Okay, so this is another of these tree tick sections, we'll call this eval RST.

926
01:56:19,820 --> 01:56:23,020
I am very much starting to think that I'm doing something wrong here.

927
01:56:23,020 --> 01:56:26,860
No, I think that's perfectly fine.

928
01:56:26,860 --> 01:56:34,300
This is already RST, so why don't I just have an RST section directly, like this.

929
01:56:34,300 --> 01:56:43,900
Ah, yeah, but then you can't use the hashtags for the titles, the API reference.

930
01:56:43,900 --> 01:56:44,900
Yes.

931
01:56:44,900 --> 01:56:47,580
Well, this title is already in RST.

932
01:56:47,580 --> 01:56:53,540
This title is already in rich text, so why not do it this way?

933
01:56:53,540 --> 01:56:54,540
Okay.

934
01:56:54,540 --> 01:57:01,180
So let's have an example of how to do titles in rich text instead.

935
01:57:01,180 --> 01:57:12,380
So this is a big title and this is a small one, I think level one and level two.

936
01:57:12,380 --> 01:57:21,900
So this will be auto module example.

937
01:57:21,900 --> 01:57:27,820
So module in this case is a Python module, it's this example module here.

938
01:57:27,820 --> 01:57:36,660
And then some magic words members so we include all of the members everything that's in example.py.

939
01:57:36,660 --> 01:57:45,500
Okay and now we do need to go and change the configuration file conf.py.

940
01:57:45,500 --> 01:57:57,340
We need to add an extension autodoc extension we need to make some other changes as well.

941
01:57:57,340 --> 01:58:06,420
So, there is an auto-doc extension that generates this API documentation.

942
01:58:06,420 --> 01:58:13,380
The rest of this stuff, I think, maybe goes on top, but below this first comment, maybe.

943
01:58:13,380 --> 01:58:14,860
Yeah, on top.

944
01:58:14,860 --> 01:58:17,180
So we need to import some things.

945
01:58:17,180 --> 01:58:25,860
What we essentially need to do is we need to inform Sphinx on where this can be found.

946
01:58:25,860 --> 01:58:30,060
And that's what we're doing here.

947
01:58:30,060 --> 01:58:34,860
From OS, we are getting the path we are currently on.

948
01:58:34,860 --> 01:58:38,620
And this allows us to set the path Python

949
01:58:38,620 --> 01:58:42,380
is looking for code in.

950
01:58:42,380 --> 01:58:46,260
So if you are not familiar with Python,

951
01:58:46,260 --> 01:58:48,660
you can think of this as a magic expression.

952
01:58:48,660 --> 01:58:53,820
But then you put whatever your source path is in here.

953
01:58:53,820 --> 01:58:56,100
So our source path is the current directory,

954
01:58:56,100 --> 01:58:57,100
so we just use dot.

955
01:59:01,340 --> 01:59:03,180
OK.

956
01:59:03,180 --> 01:59:04,140
Should it run now?

957
01:59:04,140 --> 01:59:05,100
I think it should run.

958
01:59:05,100 --> 01:59:06,220
I think it should.

959
01:59:06,220 --> 01:59:13,180
In a normal Python project, you would probably

960
01:59:13,180 --> 01:59:16,660
have something like source in here and not dot.

961
01:59:16,660 --> 01:59:19,740
Yeah, or the Python package name.

962
01:59:19,740 --> 01:59:21,380
You know what I did incorrectly here?

963
01:59:21,380 --> 01:59:26,380
I've just added this section directly to the index.rst,

964
01:59:26,460 --> 01:59:29,300
and not as a separate file.

965
01:59:29,300 --> 01:59:31,260
That's why I got confused.

966
01:59:31,260 --> 01:59:32,540
It doesn't hurt too much.

967
01:59:32,540 --> 01:59:33,780
Yeah, yeah.

968
01:59:34,700 --> 01:59:36,700
Okay, so it should build.

969
01:59:38,020 --> 01:59:42,540
Build the example, build import module, example.

970
01:59:44,220 --> 01:59:46,060
No module named my project.

971
01:59:48,220 --> 01:59:50,420
Okay, so what is happening?

972
01:59:51,380 --> 01:59:57,420
Right. I still have these lines that don't work in my code.

973
01:59:57,420 --> 01:59:58,420
Yeah.

974
01:59:58,420 --> 02:00:04,900
I should be importing something else. Okay. So yeah, now it should work as long as I have

975
02:00:04,900 --> 02:00:05,900
NumPy available.

976
02:00:05,900 --> 02:00:09,620
Which I think you have.

977
02:00:09,620 --> 02:00:18,980
And let's do some proper formatting there. Okay. Now it works. Okay. So now let's go

978
02:00:18,980 --> 02:00:25,060
back to the main page and here we have the API documentation directly in the main page which is

979
02:00:25,860 --> 02:00:28,020
not the best thing. Not optimal.

980
02:00:30,660 --> 02:00:37,700
Okay. Normally you would do this. Yeah normally it would be a separate section here

981
02:00:39,700 --> 02:00:47,940
in a separate file. Okay but it's, we have a limited amount of time it would not be that

982
02:00:47,940 --> 02:00:52,820
complicated to fix this, but it works already, so let's keep it as it is.

983
02:00:55,300 --> 02:01:00,100
Okay, so that was the Sphinx and Markdown example. There's a lot of stuff there you can play around

984
02:01:00,100 --> 02:01:04,980
with. You can try doing this yourself either with the example or with your own project.

985
02:01:07,780 --> 02:01:14,580
Are people confused about Mist and Markdown and restructured text?

986
02:01:17,940 --> 02:01:25,940
Not a huge number of questions in the notes, so I guess we're fine.

987
02:01:25,940 --> 02:01:28,940
Well, there's a bit more information here.

988
02:01:28,940 --> 02:01:38,940
Write them in the document. We can come to them later or they can be answered in the document as well.

989
02:01:38,940 --> 02:01:52,940
One useful thing to mention that often saves me and often I forget to do and therefore get into trouble is there is a way of checking links in this generated documentation.

990
02:01:52,940 --> 02:02:01,780
So, at least if the links just don't work at all, this will help you.

991
02:02:01,780 --> 02:02:06,860
If they lead you to the wrong place, it might not save you, but it's a very common issue

992
02:02:06,860 --> 02:02:12,180
to add wrong or incorrect links, so this is useful.

993
02:02:12,180 --> 02:02:18,700
Okay, let's then head on to the next section.

994
02:02:18,700 --> 02:02:25,660
GitHub pages and how to deploy Sphinx documentation to GitHub pages. This is again using GitHub

995
02:02:26,380 --> 02:02:36,700
and GitHub is not the only option, but it is a common and easy option. Since basically

996
02:02:36,700 --> 02:02:39,900
everything we have is on GitHub, we will demonstrate using GitHub.

997
02:02:39,900 --> 02:02:49,380
GitHub. So we will be using two things, GitHub pages, which is a way of including websites

998
02:02:49,380 --> 02:02:58,140
essentially in your repository and showing them as HTML as websites instead of the source

999
02:02:58,140 --> 02:03:09,880
code. And GitHub actions, which are things that run automatically when you push something

1000
02:03:09,880 --> 02:03:16,040
to your repository so this is a really useful thing in general we'll see an example of.

1001
02:03:18,600 --> 02:03:28,760
Okay so yeah this is pulling a lot of stuff from the past two weeks and putting it all together

1002
02:03:28,760 --> 02:03:35,320
so we'll just go into it and see how it goes. Okay so there is this documentation example

1003
02:03:35,320 --> 02:03:45,240
repository and I already made my own version of this documentation example, so it's generated

1004
02:03:45,240 --> 02:03:53,440
from this template as it says here and at this point I should have the instructions

1005
02:03:53,440 --> 02:04:03,040
available for me. Okay, just a small moment. Here we are.

1006
02:04:03,040 --> 02:04:08,040
So this is a repository that contains,

1007
02:04:08,240 --> 02:04:09,880
it's already on GitHub,

1008
02:04:09,880 --> 02:04:12,840
but it contains essentially what we just did.

1009
02:04:12,840 --> 02:04:17,520
So there's a documentation folder in this repository.

1010
02:04:17,520 --> 02:04:21,680
It has a conf.py for Sphinx

1011
02:04:21,680 --> 02:04:23,480
and all of this other status,

1012
02:04:24,400 --> 02:04:27,840
some feature.markdown that we just created.

1013
02:04:29,000 --> 02:04:30,880
It is very familiar looking.

1014
02:04:33,040 --> 02:04:40,160
and then there's a source folder for our actual software. It's actually an empty folder

1015
02:04:40,160 --> 02:04:46,240
just as a readme file that says this is where your code would go. So yeah, this is an example.

1016
02:04:48,000 --> 02:04:49,600
Okay, so

1017
02:04:53,680 --> 02:04:59,920
we could clone this locally and do what we just did to build the documentation,

1018
02:04:59,920 --> 02:05:05,840
but instead we're going to do it with a workflow file so we will add a new file

1019
02:05:08,080 --> 02:05:11,600
is the um is the text too small

1020
02:05:13,600 --> 02:05:18,160
that may be slightly better okay so let's create a new file

1021
02:05:19,920 --> 02:05:26,000
and this needs to go into dot github slash workflows

1022
02:05:29,920 --> 02:05:39,240
And now we can choose whatever name we want for the workflow, so let's call it documentation

1023
02:05:39,240 --> 02:05:44,280
and it's a YML file, a YAML file.

1024
02:05:44,280 --> 02:05:50,720
So this is something I would rarely type out, basically never, I just always get an example

1025
02:05:50,720 --> 02:05:55,720
from somewhere and change the parts that need changing.

1026
02:05:55,720 --> 02:05:58,880
But the syntax is not that complicated.

1027
02:05:58,880 --> 02:06:04,640
So a workflow has a name, documentation.

1028
02:06:04,640 --> 02:06:05,960
When do we want to run it?

1029
02:06:05,960 --> 02:06:12,520
So we run on a push, a pull request.

1030
02:06:12,520 --> 02:06:14,160
So if somebody makes a pull request,

1031
02:06:14,160 --> 02:06:18,480
we want to run this documentation builder.

1032
02:06:18,480 --> 02:06:22,800
And then workflow dispatch.

1033
02:06:22,800 --> 02:06:26,840
This means that we can manually ask this workflow to run.

1034
02:06:29,520 --> 02:06:38,800
which is useful for an example. Okay permissions so it needs so the idea is that it work this

1035
02:06:38,800 --> 02:06:43,760
workflow will build our documentation and then put it in our repository in a branch

1036
02:06:44,640 --> 02:06:55,680
and then that branch is our website so it needs the permission to write into our repository.

1037
02:06:59,760 --> 02:07:04,000
Let's give it write permissions to the contents of the repository.

1038
02:07:05,680 --> 02:07:10,160
Okay and then we'll define a job for this workflow to run.

1039
02:07:13,920 --> 02:07:16,080
So there's a job step called docs.

1040
02:07:17,520 --> 02:07:22,720
This will run on so you need to tell it what operating system you want your job to run on.

1041
02:07:22,720 --> 02:07:32,640
Ubuntu. That's the simplest option for me. And then we define some steps to run.

1042
02:07:33,680 --> 02:07:41,440
Okay. So at this point, maybe I will quickly tell you what each step does,

1043
02:07:41,440 --> 02:07:49,920
but I will not write out the details. So first we need to check out or clone our repository.

1044
02:07:49,920 --> 02:07:58,960
and then we need to install Python because Sphinx runs in Python. Then we need to install

1045
02:07:58,960 --> 02:08:10,400
some dependencies and that is a piece of code we write ourselves. So this step install

1046
02:08:10,400 --> 02:08:16,560
dependencies runs a piece of code which is pip install and the dependencies we need.

1047
02:08:16,560 --> 02:08:30,000
Okay. Am I now on the same level as the name? Yes. Okay. Then we want to build the documentation.

1048
02:08:32,320 --> 02:08:41,120
So it also runs a command. It runs the Sphinx build command. The source for the documentation

1049
02:08:41,120 --> 02:08:44,720
is the doc folder and the build folder is where the documentation goes.

1050
02:08:44,720 --> 02:08:50,480
Now, importantly, the build folder will not appear in our repository. It's not modifying

1051
02:08:50,480 --> 02:08:55,880
our repository at this point. It's just running on some random machine in the cloud and creating

1052
02:08:55,880 --> 02:09:02,040
a build folder. So, we need to copy it somewhere where other people can see it. So, deploy

1053
02:09:02,040 --> 02:09:13,120
to GitHub pages. Now, what does this do? This runs a workflow

1054
02:09:13,120 --> 02:09:20,160
someone else wrote for us that actually does the deployment but we need to give it some parameters

1055
02:09:20,160 --> 02:09:31,840
and well okay before we give it the parameters we only want it to run if the push is to the main

1056
02:09:31,840 --> 02:09:37,280
if something gets pushed to the main branch so this looks a bit complicated it is a bit

1057
02:09:37,280 --> 02:09:42,320
complicated but what it does it it prevents this from publishing documentation that's

1058
02:09:43,120 --> 02:09:50,160
in the wrong branch. That's in a pull request, for example. So, only documentation in the main

1059
02:09:50,160 --> 02:09:59,440
branch gets updated to the actual documentation. Okay. And then some parameters. Publish it to

1060
02:09:59,440 --> 02:10:05,120
a branch called GitHub Pages. It needs a secret token to actually modify the repository.

1061
02:10:05,120 --> 02:10:12,560
and well that's where it should find the build documentation.

1062
02:10:12,560 --> 02:10:24,280
Okay, so a good number of steps here but each of them in principle is hopefully something that's

1063
02:10:24,280 --> 02:10:32,900
familiar to you by now. So we are cloning a repository, installing Python, installing

1064
02:10:32,900 --> 02:10:36,220
dependencies, building the documentation,

1065
02:10:36,220 --> 02:10:37,780
and the last thing is new.

1066
02:10:37,780 --> 02:10:41,740
We are pushing it to a new branch

1067
02:10:41,740 --> 02:10:45,300
in our existing repository.

1068
02:10:45,300 --> 02:10:46,540
OK.

1069
02:10:46,540 --> 02:10:49,100
Now I have a new file.

1070
02:10:49,100 --> 02:10:52,060
I want to commit this to GitHub.

1071
02:10:52,060 --> 02:10:54,740
Actually, this is a pretty good commit message.

1072
02:11:03,380 --> 02:11:10,420
to build and publish documentation. Okay. And I'll just push directly to the main branch

1073
02:11:10,420 --> 02:11:15,220
in this case. I'm the only one working on this project. Okay.

1074
02:11:18,660 --> 02:11:24,660
Here we go. Now we have a new workflow file. Okay. Well, did anything happen? Not really.

1075
02:11:25,780 --> 02:11:26,580
Yes, there did.

1076
02:11:26,580 --> 02:11:34,020
it is something did happen. It is already running. So the workflows are already set to run

1077
02:11:34,020 --> 02:11:38,340
in this repository. They are automatically set to run. As soon as you have any workflows being

1078
02:11:38,340 --> 02:11:47,860
set up, they will run. Okay, that's nice. There's a workflow that hasn't completed yet,

1079
02:11:47,860 --> 02:11:54,020
but we can look at the details from here. So this is all the steps we just defined.

1080
02:11:54,020 --> 02:11:57,100
And now it is done.

1081
02:11:57,100 --> 02:11:58,100
Now it is done.

1082
02:11:58,100 --> 02:11:59,100
Okay.

1083
02:11:59,100 --> 02:12:01,780
So it prints some output at each step.

1084
02:12:01,780 --> 02:12:05,100
It's installed Python, Sphinx build and so on.

1085
02:12:05,100 --> 02:12:06,440
Okay.

1086
02:12:06,440 --> 02:12:08,980
So what did it do?

1087
02:12:08,980 --> 02:12:10,380
It created a new branch.

1088
02:12:10,380 --> 02:12:12,620
Oh, that's still yellow.

1089
02:12:12,620 --> 02:12:14,580
Maybe I need to just refresh the page.

1090
02:12:14,580 --> 02:12:17,380
Now it's, yeah, it's a nice green tick.

1091
02:12:17,380 --> 02:12:20,220
So everything's working.

1092
02:12:20,220 --> 02:12:27,340
created a new branch called GitHub pages which is here and now this has this index.html and

1093
02:12:27,340 --> 02:12:32,300
everything that's needed for the website. That's essentially a copy of the build directory

1094
02:12:32,300 --> 02:12:41,020
as we specified in our. Okay I would assume that it's not working as a page yet though

1095
02:12:41,020 --> 02:12:49,340
I need to go to settings. Yeah at least it's not deployed as a page yet. So if I go to settings

1096
02:12:49,340 --> 02:12:56,780
there's a pages section here and here I can select deploy from a branch

1097
02:12:59,820 --> 02:13:03,100
and the branch I want to deploy from is github pages

1098
02:13:03,100 --> 02:13:09,100
gh pages okay and the root of that branch save the settings

1099
02:13:09,100 --> 02:13:22,700
Okay, and now if I go to, so the URL is slightly different from this repository URL, but it's

1100
02:13:22,700 --> 02:13:23,700
related.

1101
02:13:23,700 --> 02:13:37,620
So I need to go to myusername.github.io and then the name of the repository.

1102
02:13:37,620 --> 02:13:48,420
Okay and here we are. So now my documentation is online. Anyone can go to this address and

1103
02:13:48,420 --> 02:13:58,180
see it. Actually one very useful thing to do after this would be to take this URL and

1104
02:13:58,180 --> 02:14:08,820
edit the readme file and add some sort of link to it in here. I will do the simplest

1105
02:14:08,820 --> 02:14:16,260
possible job of adding the link here but you might want to format it slightly better.

1106
02:14:20,660 --> 02:14:23,380
Add a link to documentation in readme.

1107
02:14:23,380 --> 02:14:35,380
Okay, so now we have, I guess, I made a mistake in Markdown syntax here.

1108
02:14:35,380 --> 02:14:44,100
Okay, so now we have a link to the documentation in our README and it will get updated automatically.

1109
02:14:44,100 --> 02:14:50,820
So now I did a new push, it's rebuilding the documentation, although even though there

1110
02:14:50,820 --> 02:14:52,440
wasn't any change to the documentation.

1111
02:14:52,440 --> 02:14:55,920
It's always when I change anything in this repository,

1112
02:14:55,920 --> 02:14:57,960
it will rebuild and publish again.

1113
02:15:02,720 --> 02:15:06,000
You can also, which people very often do,

1114
02:15:06,000 --> 02:15:09,920
put it into the About.

1115
02:15:09,920 --> 02:15:13,760
Yes, so the About section is not visible now

1116
02:15:13,760 --> 02:15:15,160
if I make it a bit smaller.

1117
02:15:15,160 --> 02:15:16,920
So here is an About section.

1118
02:15:16,920 --> 02:15:23,760
So if you click on that cogwheel in the top right corner,

1119
02:15:23,760 --> 02:15:26,880
there's the website URL.

1120
02:15:26,880 --> 02:15:28,560
OK.

1121
02:15:28,560 --> 02:15:32,480
Or use your GitHub pages website,

1122
02:15:32,480 --> 02:15:34,540
which will point to the correct one,

1123
02:15:34,540 --> 02:15:39,120
even if you change the name of the repository.

1124
02:15:39,120 --> 02:15:43,120
You can also add a description here.

1125
02:15:43,120 --> 02:15:47,500
Example of building documentation.

1126
02:15:51,580 --> 02:15:53,580
OK, now that's updated.

1127
02:15:53,580 --> 02:15:56,380
So now there's a link to the documentation

1128
02:15:56,380 --> 02:15:59,860
right here in the sidebar for anyone who's

1129
02:15:59,860 --> 02:16:01,960
looking at the Adjurable story.

1130
02:16:06,700 --> 02:16:08,740
After this is the lunch break, right?

1131
02:16:08,740 --> 02:16:10,180
So we have five more minutes.

1132
02:16:13,120 --> 02:16:17,120
We definitely don't want to start on the next section, which is

1133
02:16:17,120 --> 02:16:21,120
how to publish your own website in GitHub Pages.

1134
02:16:21,120 --> 02:16:25,120
It is quite similar

1135
02:16:25,120 --> 02:16:29,120
to this one, and you can check it out on your own.

1136
02:16:29,120 --> 02:16:33,120
I guess the biggest difference is that we're not automatically building

1137
02:16:33,120 --> 02:16:37,120
the documentation. We're not automatically building

1138
02:16:37,120 --> 02:16:41,120
the website. We are only publishing it on GitHub Pages.

1139
02:16:41,120 --> 02:16:52,520
Yeah. Well, I did mention there are alternatives. There's GitLab. CI GitLab is a common alternative

1140
02:16:52,520 --> 02:17:01,080
to GitHub. And GitLab Pages, Read2Docs is commonly used. And well, those are the alternatives

1141
02:17:01,080 --> 02:17:11,800
we mentioned here, I guess. There's essentially all the places where you can host your report

1142
02:17:11,800 --> 02:17:19,160
stories. Almost all of them also have a way of hosting a static website because it is

1143
02:17:19,160 --> 02:17:22,200
actually just HTML code.

1144
02:17:22,200 --> 02:17:29,000
Which you could also on whatever other server, web server you have that you in some way control

1145
02:17:29,000 --> 02:17:31,960
and just point it to, okay, this is the static website.

1146
02:17:31,960 --> 02:17:32,960
Yeah.

1147
02:17:32,960 --> 02:17:33,960
True.

1148
02:17:33,960 --> 02:17:44,720
GitHub Pages or GitLab Pages is just a very simple way to have a web host for you, that

1149
02:17:44,720 --> 02:17:47,080
you don't have to explicitly pay.

1150
02:17:47,080 --> 02:17:54,280
So we will skip over the hosting websites and homepages on GitHub and go to the summary.

1151
02:17:54,280 --> 02:17:58,640
And probably the best way of doing this would be to ask everyone, if you have any questions

1152
02:17:58,640 --> 02:18:04,240
questions, please ask them in the notes and see if there's anything interesting there

1153
02:18:04,240 --> 02:18:12,800
or anything very important to bring up.

1154
02:18:12,800 --> 02:18:18,760
I think the first point in the summary is actually quite important. There is not the

1155
02:18:18,760 --> 02:18:27,520
one right way to do things in documentation. And I would add to that, it's in general more

1156
02:18:27,520 --> 02:18:36,560
important to have some documentation than to have a perfect documentation yeah yeah this is a typical

1157
02:18:36,560 --> 02:18:47,040
case of better have something incomplete than not having anything at all well now if you feel

1158
02:18:47,040 --> 02:18:55,920
this went too fast or you just want to learn this better to actually use this on your own

1159
02:18:55,920 --> 02:19:04,640
repository. The instructions are on the course website or on the website for this section.

1160
02:19:04,640 --> 02:19:13,520
So I essentially followed this deploying Sphinx documentation to GitHub almost exactly. So

1161
02:19:13,520 --> 02:19:17,880
just take a look there and the Sphinx and Markdown section where you can set up your

1162
02:19:17,880 --> 02:19:24,360
documentation first.

1163
02:19:24,360 --> 02:19:33,020
But yeah, so there's always a balance you need to find with how much time you spend

1164
02:19:33,020 --> 02:19:37,160
writing documentation versus how much time you spend coding and how much time you spend

1165
02:19:37,160 --> 02:19:39,840
doing research and other things in your life.

1166
02:19:39,840 --> 02:19:47,120
So for smaller projects, a README file can easily contain everything you need, especially

1167
02:19:47,120 --> 02:19:52,720
you have in code documentation as well. Something that takes that in code documentation and turns it

1168
02:19:52,720 --> 02:20:00,400
into an API reference is nice and you can do that very quickly with Sphinx even if you don't write

1169
02:20:00,400 --> 02:20:09,680
any other documentation in there. But that's a small step further and then in a bigger project

1170
02:20:09,680 --> 02:20:18,880
you will have a full-fledged website with lots of examples and so on. So it depends on

1171
02:20:20,080 --> 02:20:27,520
practically speaking how much time you have to spend on this and you want of course to spend

1172
02:20:27,520 --> 02:20:32,880
time actually writing your code as well and not just documentation so there is a balance there.

1173
02:20:32,880 --> 02:20:41,120
In most projects, just a README is enough, because most projects are small.

1174
02:20:45,440 --> 02:20:51,840
And you can essentially put all the examples also just in the README if it's a really small project.

1175
02:20:53,120 --> 02:20:57,200
Even kind of API definitions you can put in the README

1176
02:20:57,200 --> 02:21:01,840
in a small project and you don't need to set up a whole Sphinx environment for it.

1177
02:21:03,840 --> 02:21:11,200
Okay but it is time to go for lunch break. After the lunch break we will have a section

1178
02:21:11,200 --> 02:21:21,520
on Jupyter notebooks. Anyone who is around do you want to do a quick outro or a quick teaser

1179
02:21:21,520 --> 02:21:30,480
of what's after the lunch break? Jupyter notebooks are a really useful tool for research so

1180
02:21:32,880 --> 02:21:42,000
Yeah, I mean, I guess many people know Jupyter in general.

1181
02:21:42,000 --> 02:21:48,480
Here we go over just a little bit of the basics in case anyone doesn't know.

1182
02:21:48,480 --> 02:21:54,120
But more important than that, we talk about how to make them a little bit more reproducible,

1183
02:21:54,120 --> 02:22:00,080
like some ways of sharing them, which perhaps you didn't know about.

1184
02:22:00,080 --> 02:22:05,300
of diffing and merging them using them with version control and so on. So

1185
02:22:05,300 --> 02:22:12,340
basically it will help you go from using them and a big mess to using them and a

1186
02:22:12,340 --> 02:22:22,020
little bit more organized and closer to regular code. So with that should we go

1187
02:22:22,020 --> 02:22:35,860
to lunch yep so okay we will see you later then enjoy your lunch okay thanks

1188
02:22:35,860 --> 02:22:39,820
bye bye

1189
02:22:52,020 --> 02:22:54,080
you

1190
02:23:22,020 --> 02:23:24,080
you

1191
02:23:52,020 --> 02:23:54,080
you

1192
02:24:22,020 --> 02:24:24,080
you

1193
02:24:52,020 --> 02:24:54,080
you

1194
02:25:22,020 --> 02:25:24,080
you

1195
02:25:52,020 --> 02:25:54,080
you

1196
02:26:22,020 --> 02:26:24,080
you

1197
02:26:52,020 --> 02:26:54,080
you

1198
02:27:22,020 --> 02:27:24,080
you

1199
02:27:52,020 --> 02:27:54,080
you

1200
02:28:22,020 --> 02:28:24,080
you

1201
02:28:52,020 --> 02:28:54,080
you

1202
02:29:22,020 --> 02:29:24,080
you

1203
02:29:52,020 --> 02:29:54,080
you

1204
02:30:22,020 --> 02:30:24,080
you

1205
02:30:52,020 --> 02:30:54,080
you

1206
02:31:22,020 --> 02:31:24,080
you

1207
02:31:52,020 --> 02:31:54,080
you

1208
02:32:22,020 --> 02:32:24,080
you

1209
02:32:52,020 --> 02:32:54,080
you

1210
02:33:22,020 --> 02:33:24,080
you

1211
02:33:52,020 --> 02:33:54,080
you

1212
02:34:22,020 --> 02:34:24,080
you

1213
02:34:52,020 --> 02:34:54,080
you

1214
02:35:22,020 --> 02:35:24,080
you

1215
02:35:52,020 --> 02:35:54,080
you

1216
02:36:22,020 --> 02:36:24,080
you

1217
02:36:52,020 --> 02:36:54,080
you

1218
02:37:22,020 --> 02:37:24,080
you

1219
02:37:52,020 --> 02:37:54,080
you

1220
02:38:22,020 --> 02:38:24,080
you

1221
02:38:52,020 --> 02:38:54,080
you

1222
02:39:22,020 --> 02:39:24,080
you

1223
02:39:52,020 --> 02:39:54,080
you

1224
02:40:22,020 --> 02:40:24,080
you

1225
02:40:52,020 --> 02:40:54,080
you

1226
02:41:22,020 --> 02:41:24,080
you

1227
02:41:52,020 --> 02:41:54,080
you

1228
02:42:22,020 --> 02:42:24,080
you

1229
02:42:52,020 --> 02:42:54,080
you

1230
02:43:22,020 --> 02:43:24,080
you

1231
02:43:52,020 --> 02:43:54,080
you

1232
02:44:22,020 --> 02:44:24,080
you

1233
02:44:52,020 --> 02:44:54,080
you

1234
02:45:22,020 --> 02:45:24,080
you

1235
02:45:52,020 --> 02:45:54,080
you

1236
02:46:22,020 --> 02:46:24,080
you

1237
02:46:52,020 --> 02:46:54,080
you

1238
02:47:22,020 --> 02:47:24,080
you

1239
02:47:52,020 --> 02:47:54,080
you

1240
02:48:22,020 --> 02:48:24,080
you

1241
02:48:52,020 --> 02:48:54,080
you

1242
02:49:22,020 --> 02:49:24,080
you

1243
02:49:52,020 --> 02:49:54,080
you

1244
02:50:22,020 --> 02:50:24,080
you

1245
02:50:52,020 --> 02:50:54,080
you

1246
02:51:22,020 --> 02:51:24,080
you

1247
02:51:52,020 --> 02:51:54,080
you

1248
02:52:22,020 --> 02:52:24,080
you

1249
02:52:52,020 --> 02:52:54,080
you

1250
02:53:22,020 --> 02:53:24,080
you

1251
02:53:52,020 --> 02:53:54,080
you

1252
02:54:22,020 --> 02:54:24,080
you

1253
02:54:52,020 --> 02:54:54,080
you

1254
02:55:22,020 --> 02:55:24,080
you

1255
02:55:52,020 --> 02:55:54,080
you

1256
02:56:22,020 --> 02:56:24,080
you

1257
02:56:52,020 --> 02:56:54,080
you

1258
02:57:22,020 --> 02:57:24,080
you

1259
02:57:52,020 --> 02:57:54,080
you

1260
02:58:22,020 --> 02:58:24,080
you

1261
02:58:52,020 --> 02:58:54,080
you

1262
02:59:22,020 --> 02:59:24,080
you

1263
02:59:52,020 --> 02:59:54,080
you

1264
03:00:22,020 --> 03:00:24,080
you

1265
03:00:52,020 --> 03:00:54,080
you

1266
03:01:22,020 --> 03:01:24,080
you

1267
03:01:52,020 --> 03:01:54,080
you

1268
03:02:22,020 --> 03:02:24,080
you

1269
03:02:52,020 --> 03:02:54,080
you

1270
03:03:22,020 --> 03:03:24,080
you

1271
03:03:52,020 --> 03:03:54,080
you

1272
03:04:22,020 --> 03:04:24,080
you

1273
03:04:52,020 --> 03:04:54,080
you

1274
03:05:22,020 --> 03:05:24,080
you

1275
03:05:52,020 --> 03:05:54,080
you

1276
03:06:22,020 --> 03:06:24,080
you

1277
03:06:52,020 --> 03:06:54,080
you

1278
03:07:22,020 --> 03:07:24,080
you

1279
03:07:52,020 --> 03:07:54,080
you

1280
03:08:22,020 --> 03:08:24,080
you

1281
03:08:52,020 --> 03:08:54,080
you

1282
03:09:22,020 --> 03:09:24,080
you

1283
03:09:52,020 --> 03:09:54,080
you

1284
03:10:22,020 --> 03:10:24,080
you

1285
03:10:52,020 --> 03:10:54,080
you

1286
03:11:22,020 --> 03:11:24,080
you

1287
03:11:52,020 --> 03:11:54,080
you

1288
03:12:22,020 --> 03:12:24,080
you

1289
03:12:52,020 --> 03:12:54,080
you

1290
03:13:22,020 --> 03:13:24,080
you

1291
03:13:52,020 --> 03:13:54,080
you

1292
03:14:22,020 --> 03:14:24,080
you

1293
03:14:52,020 --> 03:14:54,080
you

1294
03:15:22,020 --> 03:15:24,080
you

1295
03:15:52,020 --> 03:15:54,080
you

1296
03:16:22,020 --> 03:16:24,080
you

1297
03:16:52,020 --> 03:16:54,080
you

1298
03:17:22,020 --> 03:17:24,080
you

1299
03:17:52,020 --> 03:17:54,080
you

1300
03:18:22,020 --> 03:18:24,080
you

1301
03:18:52,020 --> 03:18:54,080
you

1302
03:19:22,020 --> 03:19:24,020
You

1303
03:29:52,020 --> 03:29:57,020
♪

1304
03:29:57,020 --> 03:30:02,020
♪

1305
03:30:02,020 --> 03:30:07,020
♪

1306
03:30:07,020 --> 03:30:12,020
♪

1307
03:30:12,020 --> 03:30:17,020
♪

1308
03:30:17,020 --> 03:30:23,940
file, where the code is really nice. Yeah, that's really reproducibility right here.

1309
03:30:23,940 --> 03:30:29,660
It's this can be a nice, really nice way of sharing supporting information that should

1310
03:30:29,660 --> 03:30:35,020
go along with the manuscript. So the manuscript has the has the summary. But then if I want

1311
03:30:35,020 --> 03:30:42,660
to verify it or to understand it, or I want to reuse it, I have all the steps here available.

1312
03:30:42,660 --> 03:30:49,140
a wonderful solution to share. So instead of just putting graphics, I mean images and

1313
03:30:49,140 --> 03:30:55,120
tables into the manuscript, it can be a nice way to put images and tables into the manuscript,

1314
03:30:55,120 --> 03:31:01,200
but then put all the steps into a notebook. And here we show you Jupyter notebook but maybe

1315
03:31:01,200 --> 03:31:08,820
if you are developing R, maybe you're using R Markdown. And that's a similar idea. So

1316
03:31:08,820 --> 03:31:12,740
So here's more about the idea than again, than really, it's more about the why than

1317
03:31:12,740 --> 03:31:13,740
the how.

1318
03:31:13,740 --> 03:31:14,740
Yeah.

1319
03:31:14,740 --> 03:31:26,740
So basically, in our studio, can you do the similar thing in our markdown?

1320
03:31:26,740 --> 03:31:30,340
I have never used it, but I think it's possible.

1321
03:31:30,340 --> 03:31:31,340
Yes.

1322
03:31:31,340 --> 03:31:32,340
Yes.

1323
03:31:32,340 --> 03:31:33,340
Sorry.

1324
03:31:33,340 --> 03:31:35,660
I was just, I will answer one question in the, in the notes, but it's the same idea

1325
03:31:35,660 --> 03:31:44,340
that you can interleave code and markdown text in the same document.

1326
03:31:44,340 --> 03:31:52,380
And please, all the comments and questions, as usual, in the collaborative document, especially

1327
03:31:52,380 --> 03:32:00,500
[name] is now checking out them and can raise something out loud if we find something that

1328
03:32:00,500 --> 03:32:03,340
we particularly want to share in the stream also.

1329
03:32:06,300 --> 03:32:08,580
Scrolling onwards to the lesson material,

1330
03:32:08,580 --> 03:32:11,140
there's use cases and pitfalls.

1331
03:32:11,140 --> 03:32:16,140
So as with any tool, Jupyter is good for something,

1332
03:32:16,740 --> 03:32:20,860
but then not so good for some occasions.

1333
03:32:20,860 --> 03:32:25,420
And here we try to have some overall view

1334
03:32:25,420 --> 03:32:30,420
of the good stuff and then the not so good stuff.

1335
03:32:30,500 --> 03:32:40,100
stuff. So, the basic use case is this kind of linear workflow. And how I understand the

1336
03:32:40,100 --> 03:32:46,460
linear workflow is that it starts from a point and goes forward from there, not doing any

1337
03:32:46,460 --> 03:32:52,780
branches and so on. So, do you agree, [name]?

1338
03:32:52,780 --> 03:33:01,660
Exactly. It's really an excellent fit for when you have this step-by-step workflow and

1339
03:33:01,660 --> 03:33:05,220
at the end comes a figure, an image.

1340
03:33:05,220 --> 03:33:12,900
Yeah, you mentioned data analysis. So you start from reading a data in and then some

1341
03:33:12,900 --> 03:33:18,900
data manipulations cleaning up and then doing the plots and there you go. So that kind of

1342
03:33:18,900 --> 03:33:20,920
I think Jupyter is really good.

1343
03:33:20,920 --> 03:33:25,420
And as mentioned also, if you want to experiment and test,

1344
03:33:26,400 --> 03:33:28,120
it's really easy to experiment

1345
03:33:28,120 --> 03:33:32,320
because you can have the different versions there

1346
03:33:32,320 --> 03:33:35,680
next to each other and run them as you like.

1347
03:33:37,240 --> 03:33:41,480
And there's many, yeah.

1348
03:33:41,480 --> 03:33:43,160
So the service that [name] shown,

1349
03:33:43,160 --> 03:33:44,840
and we will later demonstrate,

1350
03:33:44,840 --> 03:33:47,480
it allows people to run the codes

1351
03:33:47,480 --> 03:33:51,760
without like installing anything, they can run it in the browser. So we will come back

1352
03:33:51,760 --> 03:33:56,520
to that. Yeah. And maybe if we have time, if you if it's easy for you to open up the

1353
03:33:56,520 --> 03:34:02,060
notes, we are getting a couple of really good questions. Yeah. And I want to encourage more.

1354
03:34:02,060 --> 03:34:07,400
So at the bottom, there are two that we can briefly discuss now one is how does it work

1355
03:34:07,400 --> 03:34:14,900
with privacy and sensitive data. And what we what we will later show is that it can

1356
03:34:14,900 --> 03:34:21,100
be a good idea to put your notebook onto GitHub and make it runnable for everybody and make

1357
03:34:21,100 --> 03:34:26,900
that part of your paper. But now how about privacy and sensitive data? So what can you

1358
03:34:26,900 --> 03:34:31,980
do there? I mean, you don't want to put the actual sensitive data then on GitHub and make

1359
03:34:31,980 --> 03:34:33,660
it publicly visible.

1360
03:34:33,660 --> 03:34:41,860
Yeah, never a good idea to put sensitive data in GitHub. But like, I would like to start

1361
03:34:41,860 --> 03:34:49,580
from the fact that Jupyter runs, if you want to do locally, you can run Jupyter locally

1362
03:34:49,580 --> 03:34:57,100
on your computer, so you don't have to share anything anywhere if you don't want to.

1363
03:34:57,100 --> 03:35:07,460
And then considering GitHub and sharing and reusability, you can share your code, but

1364
03:35:07,460 --> 03:35:08,860
But not the data.

1365
03:35:08,860 --> 03:35:14,340
And I think that's the case, regardless of the tool that you are using to write the code.

1366
03:35:14,340 --> 03:35:17,180
But it's still nice to share some data so that people can actually run it.

1367
03:35:17,180 --> 03:35:19,780
But then you don't have to share the actual sensitive data.

1368
03:35:19,780 --> 03:35:26,380
You can show you can share an example data set with John Doe, Jane Doe, example person.

1369
03:35:26,380 --> 03:35:30,860
And so that people can still verify this is working, they can still replace it by the

1370
03:35:30,860 --> 03:35:31,860
actual data.

1371
03:35:31,860 --> 03:35:38,500
But then the sensitive data can be then protected on a dedicated server.

1372
03:35:38,500 --> 03:35:41,100
So that can be a good solution.

1373
03:35:41,100 --> 03:35:45,220
Similar solution is if your data is big, gigantic, but if you have terabytes of data and it's

1374
03:35:45,220 --> 03:35:49,400
difficult for you to share it, it can still be nice to share a small example data set

1375
03:35:49,400 --> 03:35:55,460
so then people can still run your notebook, but then replace it by the real gigantic data.

1376
03:35:55,460 --> 03:35:57,980
How about kit and notebooks?

1377
03:35:57,980 --> 03:36:00,020
I just want to say that we will come back to that.

1378
03:36:00,020 --> 03:36:01,020
Yeah.

1379
03:36:01,020 --> 03:36:06,000
In before, in the next half an hour, we will show you what are some of the challenges when

1380
03:36:06,000 --> 03:36:07,960
working with Git.

1381
03:36:07,960 --> 03:36:12,120
Because we still want to work with Git, we still didn't forget what we thought last week.

1382
03:36:12,120 --> 03:36:13,880
We want to use Git.

1383
03:36:13,880 --> 03:36:17,920
But there are some challenges, but we will show you that there are really nice solutions

1384
03:36:17,920 --> 03:36:21,560
to to use all the tools from last week to in combination with notebooks.

1385
03:36:21,560 --> 03:36:22,560
So we will get there.

1386
03:36:22,560 --> 03:36:23,560
And keep the questions coming.

1387
03:36:23,560 --> 03:36:25,560
This is wonderful.

1388
03:36:25,560 --> 03:36:27,560
Yeah.

1389
03:36:27,560 --> 03:36:33,140
And there's an upcoming question about the privacy in Google Colab.

1390
03:36:33,140 --> 03:36:41,440
So I think in there, it's the question of Google's privacy and should refer to the privacy

1391
03:36:41,440 --> 03:36:44,000
statement of the Google Colab service.

1392
03:36:44,000 --> 03:36:45,000
Yes.

1393
03:36:45,000 --> 03:36:51,720
And if I would run them the notebook with sensitive data, I would run it on the infrastructure

1394
03:36:51,720 --> 03:36:53,240
made for it.

1395
03:36:53,240 --> 03:36:55,120
And maybe that's my own computer.

1396
03:36:55,120 --> 03:36:56,120
Yeah.

1397
03:36:56,120 --> 03:37:06,560
You can run also JupyterLab in many HPC clusters, so then the data can be in your cluster, but

1398
03:37:06,560 --> 03:37:14,200
you can still use Jupyter if that's what you like for your workflow.

1399
03:37:14,200 --> 03:37:21,980
Some of the pitfalls in Jupyter, especially when there's this non-linear code flow.

1400
03:37:21,980 --> 03:37:27,200
Would you like to elaborate on that a little bit right away.

1401
03:37:27,200 --> 03:37:34,620
So if it starts to, if you have, if you write a program that has lots of modules, and it's

1402
03:37:34,620 --> 03:37:40,180
not first we do this, then we do this, then we do that, then we do the other thing.

1403
03:37:40,180 --> 03:37:44,820
But sometimes you have a code that maybe we go in here into this module, or maybe not

1404
03:37:44,820 --> 03:37:50,700
maybe into the other module, then it, it doesn't really fit into a notebook.

1405
03:37:50,700 --> 03:37:55,200
Your notebook is really like a recipe of do these series of steps.

1406
03:37:55,200 --> 03:38:02,240
If it doesn't fit into a series of steps, then maybe notebook is not the right thing.

1407
03:38:02,240 --> 03:38:06,560
But you can use modules also in Jupyter.

1408
03:38:06,560 --> 03:38:11,500
You can so the and we will get back to that tomorrow, we will actually show how to do it.

1409
03:38:11,500 --> 03:38:17,060
So you can if you have reusable code blocks, and you realize that while I'm using the same

1410
03:38:17,060 --> 03:38:21,580
code block in all of my notebooks, and I'm tired of copy pasting it.

1411
03:38:21,580 --> 03:38:26,960
You can put these into module and you can include modules in a notebook, but it should

1412
03:38:26,960 --> 03:38:29,440
be this series of steps.

1413
03:38:29,440 --> 03:38:33,100
If it's a series of steps, then yes, yeah.

1414
03:38:33,100 --> 03:38:42,240
And mention some good practices, Jupyter, the basic Jupyter usually renames that you

1415
03:38:42,240 --> 03:38:45,520
use is the default naming of untitled.

1416
03:38:45,520 --> 03:38:52,220
So when you start a new notebook, it's a good idea to always have your own name so that

1417
03:38:52,220 --> 03:38:56,640
you later know what the notebook is about.

1418
03:38:56,640 --> 03:39:00,720
And also run all cells before saving.

1419
03:39:00,720 --> 03:39:04,880
I think that's something that we can show in the example later.

1420
03:39:04,880 --> 03:39:08,840
Yeah, let's demonstrate the good practices.

1421
03:39:08,840 --> 03:39:10,240
Yes.

1422
03:39:10,240 --> 03:39:19,280
So the notebook interface and how to actually start the whole JupyterLab.

1423
03:39:19,280 --> 03:39:30,760
So I will go into a terminal here and get it started.

1424
03:39:30,760 --> 03:39:34,360
Let's see where I am.

1425
03:39:34,360 --> 03:39:41,240
And typically, so we everybody else than Matias, we should watch and ask, but I just wanted

1426
03:39:41,240 --> 03:39:45,240
to comment here that typically we want to start the notebook, you are often inside some

1427
03:39:45,240 --> 03:39:46,240
environment.

1428
03:39:46,240 --> 03:39:50,600
So now we are in inside a software environment.

1429
03:39:50,600 --> 03:39:54,740
And often you have a specific environment for each of your projects.

1430
03:39:54,740 --> 03:39:57,680
This is something that we have recommended yesterday.

1431
03:39:57,680 --> 03:40:02,960
And in there, we will now start up a notebook and the notebook will then open up.

1432
03:40:02,960 --> 03:40:07,040
we start it, but then we, we interact with it through the browser.

1433
03:40:07,040 --> 03:40:17,320
Yes. So as mentioned in the material, I create a new folder and I go there and then it says

1434
03:40:17,320 --> 03:40:28,120
I have to launch the JupyterLab. But first I need the Codefinery Conda environment, right?

1435
03:40:28,120 --> 03:40:35,840
Yes, so here you activate your programming environment that we have set up with all the

1436
03:40:35,840 --> 03:40:38,960
dependencies that we need.

1437
03:40:38,960 --> 03:40:45,680
For this example, if people later want to try it on their own, like you can, you can

1438
03:40:45,680 --> 03:40:49,080
create an environment that is looks exactly like ours.

1439
03:40:49,080 --> 03:40:52,760
And in this you can run this around the JupyterLab.

1440
03:40:52,760 --> 03:40:57,380
Is it the JupyterLab with minus in or is it JupyterSpaceLab?

1441
03:40:57,380 --> 03:41:01,980
work actually, with or without the minus.

1442
03:41:01,980 --> 03:41:09,540
And I wanted to mention that you actually can, if you don't want to mess up with Code

1443
03:41:09,540 --> 03:41:17,380
Refinery and Conda environment stuff, you might be unsure how the Conda works or something.

1444
03:41:17,380 --> 03:41:22,100
We encourage you to try and ask for help if needed, but if you don't want to, there is

1445
03:41:22,100 --> 03:41:28,680
also a version of JupyterLab as a desktop app. I'm not sure which platforms

1446
03:41:28,680 --> 03:41:35,840
it supports but that exists at least. So here now I'm launching the JupyterLab

1447
03:41:35,840 --> 03:41:41,400
in the terminal. I'm using this no browser option because I want to

1448
03:41:41,400 --> 03:41:48,140
decide where in which browser I open it. There's a lot of text coming up but we

1449
03:41:48,140 --> 03:41:52,020
We don't want, we don't need to care about that.

1450
03:41:52,020 --> 03:41:58,040
Only thing we do is we copy paste this URL in the end.

1451
03:41:58,040 --> 03:42:01,560
So if you would, if you would have left out this no browser, it would open up your default

1452
03:42:01,560 --> 03:42:02,560
browser somewhere.

1453
03:42:02,560 --> 03:42:06,860
But if you want to have more control of which browser it is, I also do the same thing as

1454
03:42:06,860 --> 03:42:07,860
you.

1455
03:42:07,860 --> 03:42:12,700
I take it into my browser, then I decide where this is opened.

1456
03:42:12,700 --> 03:42:18,740
So I copy-paste this to a browser into URL field and it opens.

1457
03:42:18,740 --> 03:42:21,740
So now the...

1458
03:42:21,740 --> 03:42:27,500
Actually let's go to see how this Jupyter is structured.

1459
03:42:27,500 --> 03:42:35,220
So in the core there's this kernel and notebook server and they are now running in the terminal

1460
03:42:35,220 --> 03:42:37,220
here.

1461
03:42:37,220 --> 03:42:45,580
And then the browser is what shows you the user interface, and then you can happily use

1462
03:42:45,580 --> 03:42:47,100
it.

1463
03:42:47,100 --> 03:42:59,140
So now we have the user interface in the browser, and now we should go to see what's around

1464
03:42:59,140 --> 03:43:04,580
the Jupyter interface, right?

1465
03:43:04,580 --> 03:43:10,860
So in the material there's this screenshot that you can refer to whenever you want to

1466
03:43:10,860 --> 03:43:15,900
if you forget something.

1467
03:43:15,900 --> 03:43:18,500
Is it easy for you to zoom in a little bit?

1468
03:43:18,500 --> 03:43:20,020
Yes, I think so.

1469
03:43:20,020 --> 03:43:22,940
Yeah, great, thanks.

1470
03:43:22,940 --> 03:43:31,140
So we have this toolbar containing some tabs.

1471
03:43:31,140 --> 03:43:39,300
Then there's some buttons, some menus and the file view in the right side.

1472
03:43:39,300 --> 03:43:51,740
So the toolbar contains the file explorer and open kernels and the git integration and

1473
03:43:51,740 --> 03:43:56,420
this works if you have used the CodeRefinery Conda environment because this is an extension

1474
03:43:56,420 --> 03:43:59,020
and it's there installed.

1475
03:43:59,020 --> 03:44:09,220
why we recommend trying the CodeRefinery Conda environment and other extensions in here.

1476
03:44:09,220 --> 03:44:18,900
But we focus on the file browser and later on in the Git extension.

1477
03:44:18,900 --> 03:44:29,260
So now what we do, we create a new Jupyter Notebook and the launcher in here is the place

1478
03:44:29,260 --> 03:44:30,420
to go.

1479
03:44:30,420 --> 03:44:32,500
The first option is Notebook.

1480
03:44:32,500 --> 03:44:33,820
There are other options.

1481
03:44:33,820 --> 03:44:38,860
You can open a terminal or text file or markdown file here if you want to.

1482
03:44:38,860 --> 03:44:43,980
But as we are in Jupyter, let's go with the Notebook option.

1483
03:44:43,980 --> 03:44:48,080
I'm going to zoom out just a little bit.

1484
03:44:48,080 --> 03:44:52,660
And as I mentioned, it creates a new file and it's untitled.

1485
03:44:52,660 --> 03:45:03,220
So what I do first is rename the file, right?

1486
03:45:03,220 --> 03:45:05,980
Is there questions or something?

1487
03:45:05,980 --> 03:45:06,980
Should I just go on?

1488
03:45:06,980 --> 03:45:08,980
All is good.

1489
03:45:08,980 --> 03:45:11,260
Yep, great.

1490
03:45:11,260 --> 03:45:19,720
So now in the Jupyter notebook file, there are different types of cells.

1491
03:45:19,720 --> 03:45:26,600
I can create more cells and I can delete cells.

1492
03:45:26,600 --> 03:45:33,840
I can reorganize cells and this is obviously some keyboards or how it looks very fast.

1493
03:45:33,840 --> 03:45:35,140
Yes.

1494
03:45:35,140 --> 03:45:38,180
And I can say that the way I do it often is that I click on these symbols.

1495
03:45:38,180 --> 03:45:41,860
Also, if you move the mouse over the cell,

1496
03:45:41,860 --> 03:45:44,900
there is a symbol like I want one more cell above or below.

1497
03:45:44,900 --> 03:45:45,740
Yes.

1498
03:45:46,940 --> 03:45:50,260
Just quickly mentioned that I'm gonna explain

1499
03:45:50,260 --> 03:45:54,420
from the material, I'm gonna explain these cells,

1500
03:45:54,420 --> 03:45:58,700
but afterwards there is the list of keyboard shortcuts.

1501
03:45:58,700 --> 03:46:01,740
And as with any tool,

1502
03:46:01,740 --> 03:46:06,740
if you want to use a tool quickly and effectively,

1503
03:46:06,740 --> 03:46:17,340
I really recommend to learn the shortcuts it applies to any any tool basically

1504
03:46:17,340 --> 03:46:21,340
Everything is of course like credible mentioned it's it's all here you can

1505
03:46:21,340 --> 03:46:29,980
Yeah I meant the symbols in the cell like if you yeah this you know the third cell from

1506
03:46:29,980 --> 03:46:33,940
the top and then the symbols to the right there I use those

1507
03:46:33,940 --> 03:46:37,940
Yeah, so you can reorder.

1508
03:46:37,940 --> 03:46:41,940
You can add cells below, above and delete cells.

1509
03:46:43,520 --> 03:46:46,860
Yeah, I use the keyboard shortcuts.

1510
03:46:46,860 --> 03:46:49,860
There's a A for,

1511
03:46:51,540 --> 03:46:53,600
actually it shows the keyboard shortcuts in here.

1512
03:46:53,600 --> 03:46:58,100
So you can hover your mouse and start to learn.

1513
03:46:58,100 --> 03:47:00,180
Nice, I didn't know, okay.

1514
03:47:00,180 --> 03:47:01,820
That's right, that's a handy one.

1515
03:47:01,820 --> 03:47:04,900
So they are different.

1516
03:47:04,900 --> 03:47:07,060
Now, these are all code cells.

1517
03:47:07,060 --> 03:47:11,460
I'm gonna remove all but two.

1518
03:47:11,460 --> 03:47:15,420
And what would be the first cell

1519
03:47:15,420 --> 03:47:18,660
if you start a new notebook?

1520
03:47:18,660 --> 03:47:20,420
Would you start with the code cell?

1521
03:47:22,020 --> 03:47:23,900
In reality, yes, but later,

1522
03:47:23,900 --> 03:47:25,540
I would like to have a title there,

1523
03:47:25,540 --> 03:47:27,140
but maybe I will come up with the title later,

1524
03:47:27,140 --> 03:47:28,980
but let's start with the title.

1525
03:47:28,980 --> 03:47:29,820
Yeah.

1526
03:47:29,820 --> 03:47:38,060
So here's a small menu that you can open and see all the different types of cells that

1527
03:47:38,060 --> 03:47:39,380
you can have.

1528
03:47:39,380 --> 03:47:46,660
Usually I use Markdown and of course Code4Code, but then there are certain cases you might

1529
03:47:46,660 --> 03:47:54,260
want to use raw, that means it shows you the raw text, nothing fancy there.

1530
03:47:54,260 --> 03:48:04,180
But we want the fancy thing, so let's go with Markdown.

1531
03:48:04,180 --> 03:48:15,660
And the point there is that it renders nicely, so it looks fancier than just the plain text.

1532
03:48:15,660 --> 03:48:17,860
How did I get it to render?

1533
03:48:17,860 --> 03:48:29,220
I use this run command, and it tells you that shift enter is the shortcut there.

1534
03:48:29,220 --> 03:48:41,960
This is now the start of my cool coding project, and then I can start the coding stuff.

1535
03:48:41,960 --> 03:48:43,960
What should I import there?

1536
03:48:43,960 --> 03:49:00,400
Sounds good. Yeah. Right. So there are markdown cells and there's code cells. What else you

1537
03:49:00,400 --> 03:49:06,840
can put in the markdown cells than just text?

1538
03:49:06,840 --> 03:49:13,640
I'm wondering whether we should follow the example that we have there, just that people

1539
03:49:13,640 --> 03:49:21,080
can recreate it step by step or? I just found and copied the Markdown cell from

1540
03:49:21,080 --> 03:49:26,940
that lesson material and now if I run this one we can see different options so

1541
03:49:26,940 --> 03:49:34,440
there's headings, there's links, there's different formatting for the text and

1542
03:49:34,440 --> 03:49:46,640
even equations and images. So this is really nice and the equations work as

1543
03:49:46,640 --> 03:49:51,520
everything that's in between these dollar signs is an equation and the

1544
03:49:51,520 --> 03:49:55,520
syntax is the LaTeX syntax.

1545
03:49:59,280 --> 03:50:07,760
Okay, so some of the shortcuts and navigation.

1546
03:50:07,760 --> 03:50:12,560
If you double click the cell you go to the edit mode

1547
03:50:12,560 --> 03:50:20,080
or you can go with Enter and Esc keys to the edit mode and back.

1548
03:50:20,080 --> 03:50:27,760
you can with arrow keys like from here from the edit mode I run or click ESC

1549
03:50:29,120 --> 03:50:33,920
and then I can with arrow keys navigate the cells back and forth.

1550
03:50:36,560 --> 03:50:42,240
And let's not forget to save.

1551
03:50:42,240 --> 03:50:52,520
Okay. I think we go forward. Is there any questions?

1552
03:50:52,520 --> 03:51:01,960
All is good. So just to summarize, we, you, you have often two, two ways to create cells.

1553
03:51:01,960 --> 03:51:08,720
It can be a code for it, for example, Python, and it can be a markdown cell and markdown.

1554
03:51:08,720 --> 03:51:15,760
we have discussed earlier today markdown is what we see in the in the notes document and

1555
03:51:15,760 --> 03:51:20,200
then you can do more you can do equations and images and then we will build up notebooks

1556
03:51:20,200 --> 03:51:27,760
by putting code and documentation and try to tell a story so what's the example that

1557
03:51:27,760 --> 03:51:39,720
we will show next. Yes. Go next. And there's the first computational notebook example.

1558
03:51:39,720 --> 03:51:45,640
And you mentioned the magic word story. So one of the benefits is there that you can

1559
03:51:45,640 --> 03:51:52,960
have this narrative around the code. And that makes it easier to understand for people that

1560
03:51:52,960 --> 03:51:56,120
are new to your code.

1561
03:51:56,120 --> 03:52:06,600
So in this example, we are creating this code that calculates pi, the value of pi with this

1562
03:52:06,600 --> 03:52:10,440
statistical method.

1563
03:52:10,440 --> 03:52:17,520
And scrolling onward, we first launch the JupyterLab.

1564
03:52:17,520 --> 03:52:20,160
That's what we have here already.

1565
03:52:20,160 --> 03:52:27,840
I'm going to hide those first cells that I can get a clean slate.

1566
03:52:27,840 --> 03:52:35,760
We can also start a new notebook even inside, isn't it?

1567
03:52:35,760 --> 03:52:37,840
Yeah, that's even better.

1568
03:52:37,840 --> 03:52:45,020
So here's this plus button and we get the launcher back and new notebook.

1569
03:52:45,020 --> 03:52:46,720
And again, it's untitled.

1570
03:52:46,720 --> 03:52:59,580
rename it. And here again we are, this is demo only, [name] will type and we will

1571
03:52:59,580 --> 03:53:08,500
check that there are no typos. Yes. And everybody please ask questions. So if you

1572
03:53:08,500 --> 03:53:14,300
don't remember anymore how I did open the Jupyter in a browser that I wanted

1573
03:53:14,300 --> 03:53:19,420
it. Here's the command in this demo.

1574
03:53:19,420 --> 03:53:24,140
And I think now your goal will be to scroll down to the first point and we will build

1575
03:53:24,140 --> 03:53:31,980
up an example notebook by following these points 1, 2, 3, 4, 5, 6, 7, 8. And if people

1576
03:53:31,980 --> 03:53:36,900
later want to try it out on their own, you can, you find everything here.

1577
03:53:36,900 --> 03:53:47,940
So first I copy-paste, it says that add it to a markdown cell, so I copy this line here,

1578
03:53:47,940 --> 03:53:57,340
go to my JupyterLab and I'm using the shortcut M to create this, to change this cell to be

1579
03:53:57,340 --> 03:53:58,340
a markdown cell.

1580
03:53:58,340 --> 03:54:03,220
Of course I can use the option menu here as well.

1581
03:54:03,220 --> 03:54:15,460
I click into the cell and Command V, I'm using Mac, so Command V or Control V to paste.

1582
03:54:15,460 --> 03:54:17,700
Then we go to see what else is there.

1583
03:54:17,700 --> 03:54:24,460
So all the cells that are needed to create this demo, they are included in here.

1584
03:54:24,460 --> 03:54:30,180
So what you basically can do is to copy paste the cells.

1585
03:54:30,180 --> 03:54:40,340
be careful that you use the appropriate cell types. So what happens if I use a code cell for this?

1586
03:54:43,620 --> 03:54:50,100
At first it looks not so great. And if I try to run it, it does not run because that's not

1587
03:54:50,100 --> 03:54:57,940
a code syntax. So that's why... Yeah, it's not Python. It will try to interpret

1588
03:54:57,940 --> 03:55:00,860
that's this with Python and Python is then confused.

1589
03:55:04,640 --> 03:55:07,700
Yes, and then it's again Markdown cell.

1590
03:55:09,740 --> 03:55:11,620
Oh, there's a cool picture.

1591
03:55:11,620 --> 03:55:15,460
So this is now a conceptual explanation

1592
03:55:15,460 --> 03:55:20,340
on the method that we're gonna use on this Pi calculation.

1593
03:55:22,820 --> 03:55:26,740
Again, now this, I took this one, so fourth one.

1594
03:55:26,740 --> 03:55:31,740
Now this is the first code cell, which is there.

1595
03:55:33,000 --> 03:55:35,680
So it imports the modules that we need.

1596
03:55:36,560 --> 03:55:39,640
That's why we don't see an output for this code cell

1597
03:55:39,640 --> 03:55:41,320
because there's no output.

1598
03:55:41,320 --> 03:55:44,120
It just imports the libraries that we want to.

1599
03:55:48,320 --> 03:55:51,920
I will continue copy pasting the cells.

1600
03:55:51,920 --> 03:55:59,120
The point here is not to understand this code or the Python syntax,

1601
03:55:59,120 --> 03:56:06,640
but to figure out why this Jupyter Notebook is

1602
03:56:06,640 --> 03:56:12,040
then a nice way of structuring the code or

1603
03:56:12,040 --> 03:56:20,400
a nice tool to use for this kind of code exercise.

1604
03:56:21,920 --> 03:56:31,620
So now these are the all the cells if I didn't miss any in between and we got

1605
03:56:31,620 --> 03:56:39,760
these plots and they are visualized in here like right after the code cell and

1606
03:56:39,760 --> 03:56:49,880
then there's also the final result here outputted so oh well it's quite close to

1607
03:56:49,880 --> 03:56:51,240
the actual pi value.

1608
03:56:53,400 --> 03:56:56,560
Yeah, and the big picture here,

1609
03:56:56,560 --> 03:56:59,920
like don't worry if all the steps are not clear.

1610
03:56:59,920 --> 03:57:03,240
This is, it's a certain approximate way

1611
03:57:03,240 --> 03:57:05,600
to compute the number pi.

1612
03:57:06,440 --> 03:57:08,440
Here, the big picture, what is really important

1613
03:57:08,440 --> 03:57:13,440
for all of us is that we have documentation and code

1614
03:57:14,220 --> 03:57:18,460
and images in a notebook and the computation,

1615
03:57:18,460 --> 03:57:20,640
it's a series of computations.

1616
03:57:20,640 --> 03:57:23,560
So something that we will try later is,

1617
03:57:23,560 --> 03:57:25,560
what if we run them in the wrong order?

1618
03:57:26,680 --> 03:57:29,000
And what does it mean for us?

1619
03:57:29,000 --> 03:57:30,840
What does it mean for our like good practices

1620
03:57:30,840 --> 03:57:32,400
of how we should use notebooks?

1621
03:57:34,000 --> 03:57:39,000
Yes, and an example of this documentation in between,

1622
03:57:40,080 --> 03:57:43,080
I could add here, for example,

1623
03:57:43,080 --> 03:57:47,060
a subtitle that start plotting,

1624
03:57:47,060 --> 03:58:01,700
I'll start and more explanations, of course, if I have any.

1625
03:58:01,700 --> 03:58:07,460
So going onward from the lesson material, it mentions that there's possibility to use

1626
03:58:07,460 --> 03:58:10,380
other languages.

1627
03:58:10,380 --> 03:58:15,460
So there's R Markdown for R and Pluto for Julia.

1628
03:58:15,460 --> 03:58:20,100
So the workflow there is similar to the JupyterLab.

1629
03:58:20,100 --> 03:58:25,140
So we hope that even if you want to use R,

1630
03:58:25,140 --> 03:58:29,180
you still get the idea of this workflow from this lesson.

1631
03:58:34,180 --> 03:58:36,460
Did we show how to run things in the wrong order?

1632
03:58:36,460 --> 03:58:38,580
I was just a little bit distracted

1633
03:58:38,580 --> 03:58:40,380
here answering questions.

1634
03:58:40,380 --> 03:58:42,340
Right.

1635
03:58:42,340 --> 03:58:51,220
So what I... I can do it now. So what I do is, let's say I want to start over the whole

1636
03:58:52,580 --> 03:58:57,780
calculation. Now the values of all the variables and everything, the code has run,

1637
03:58:58,420 --> 03:59:04,980
the variables are there. So what I do first, I want to demonstrate what if I want to start over.

1638
03:59:04,980 --> 03:59:13,660
I go here and restart the kernel and it says that all variables will be lost

1639
03:59:13,660 --> 03:59:23,500
which is okay because I want to start over and now I will go and run the

1640
03:59:23,500 --> 03:59:30,540
cells one by one with this shift enter but let's say let's say I forget this

1641
03:59:30,540 --> 03:59:38,980
one I grab a cup of coffee and I forget this cell and I continue running from

1642
03:59:38,980 --> 03:59:44,220
here now I get some error message and what should I get from this error

1643
03:59:44,220 --> 03:59:51,700
message yeah now the notebook doesn't know the variable points has never been

1644
03:59:51,700 --> 03:59:55,620
defined it doesn't know what the value is because we never ran the cell so two

1645
03:59:55,620 --> 03:59:58,340
two cells up, three cells up.

1646
03:59:58,340 --> 03:59:59,940
We sort of sell them before.

1647
04:00:01,620 --> 04:00:03,420
All right.

1648
04:00:03,420 --> 04:00:04,260
What's next?

1649
04:00:06,620 --> 04:00:10,900
Actually now, just a new question.

1650
04:00:10,900 --> 04:00:13,180
Is there a search function in here?

1651
04:00:13,180 --> 04:00:16,540
What if I don't find this name points in anywhere?

1652
04:00:16,540 --> 04:00:18,260
Can I do some searching?

1653
04:00:18,260 --> 04:00:20,460
I normally, so maybe there's a clever way.

1654
04:00:20,460 --> 04:00:22,740
What I do is I use the browser search.

1655
04:00:22,740 --> 04:00:23,940
Yeah, okay.

1656
04:00:23,940 --> 04:00:25,660
for these kinds of situations.

1657
04:00:25,660 --> 04:00:29,460
Actually, now that I press command F,

1658
04:00:29,460 --> 04:00:31,540
it actually opens the search inside here.

1659
04:00:31,540 --> 04:00:35,340
So maybe there is, let's see, points.

1660
04:00:35,340 --> 04:00:36,380
Okay.

1661
04:00:36,380 --> 04:00:41,340
Now I can see that this matches to the one in error message.

1662
04:00:41,340 --> 04:00:43,380
So I run this one.

1663
04:00:43,380 --> 04:00:46,860
Now I run the erroneous cell again.

1664
04:00:46,860 --> 04:00:47,860
Now it works.

1665
04:00:50,840 --> 04:00:52,760
So if I run the cells,

1666
04:00:52,760 --> 04:00:57,000
So often when we develop it try things out and then improve and you develop you

1667
04:00:57,000 --> 04:01:01,280
often you when developing you don't run everything every single time you run the

1668
04:01:01,280 --> 04:01:04,600
cell until it works and you go somewhere else you try something else but

1669
04:01:04,600 --> 04:01:08,640
what can then happen is that we can get into a situation where you think

1670
04:01:08,640 --> 04:01:13,880
everything is working but then you give it to the next person or you come to it

1671
04:01:13,880 --> 04:01:17,840
in a week and suddenly it doesn't work anymore because what what the next

1672
04:01:17,840 --> 04:01:21,560
person will do the first thing that the next person will do is they will run

1673
04:01:21,560 --> 04:01:29,160
everything from top to bottom. And so the good practice and the good recommendation is to run

1674
04:01:29,160 --> 04:01:33,320
everything from top to bottom before you save it and before you share it with other people

1675
04:01:34,200 --> 04:01:37,480
to make sure that this is working because this is the first thing they will do.

1676
04:01:38,520 --> 04:01:46,280
Yeah. And in addition, I would also restart kernel and run all cells because then you might

1677
04:01:46,280 --> 04:01:53,400
have saved some variable value somewhere in different sections and it remembers the last

1678
04:01:53,400 --> 04:02:01,880
saved value. So if you restart, you kind of make sure that your code works from top to the bottom.

1679
04:02:04,120 --> 04:02:07,880
Yeah. Should we talk about Git or version control and notebooks?

1680
04:02:07,880 --> 04:02:17,120
Definitely. Before we go into the break. Yeah. Going to the next part in the lesson. Notebooks

1681
04:02:17,120 --> 04:02:25,480
and version control. And this is still a demo demonstration. And let me know if there's any

1682
04:02:25,480 --> 04:02:34,680
questions in or such questions that you should address here.

1683
04:02:34,680 --> 04:02:44,440
So there are tools to do version control on this Jupyter files.

1684
04:02:44,440 --> 04:02:47,880
Underlying format there with the Jupyter files is this JSON.

1685
04:02:47,880 --> 04:02:59,200
So if you only use the basic git diff tool, it may look much more complex than your original

1686
04:02:59,200 --> 04:03:03,520
code and then your face goes like.

1687
04:03:03,520 --> 04:03:11,320
So there are tools to make that easier and which one of these we have in this conda environment

1688
04:03:11,320 --> 04:03:15,440
here?

1689
04:03:15,440 --> 04:03:17,140
JupyterLab, Git and mbdime.

1690
04:03:18,560 --> 04:03:19,400
Checking.

1691
04:03:21,920 --> 04:03:23,080
Yeah.

1692
04:03:23,080 --> 04:03:24,800
So the mbdime we definitely have.

1693
04:03:24,800 --> 04:03:27,800
We have, I think you have some of the Git extensions.

1694
04:03:27,800 --> 04:03:29,400
I'm just verifying here.

1695
04:03:29,400 --> 04:03:30,240
Yeah.

1696
04:03:30,240 --> 04:03:31,880
We have, we have JupyterLab Git.

1697
04:03:33,200 --> 04:03:34,500
We have mbdime in there.

1698
04:03:37,920 --> 04:03:42,120
I think the GitHub web interface nowadays

1699
04:03:42,120 --> 04:03:44,880
can also render the Jupyter.

1700
04:03:44,880 --> 04:03:47,340
Yeah, and maybe this is something we can show,

1701
04:03:47,340 --> 04:03:48,740
but this is something you need to enable.

1702
04:03:48,740 --> 04:03:50,700
So there are these three steps there.

1703
04:03:52,300 --> 04:03:56,520
Okay, so let's first go in JupyterLab interface.

1704
04:03:58,180 --> 04:04:03,180
So yeah, this is what it would look like

1705
04:04:03,340 --> 04:04:04,820
without those tools.

1706
04:04:05,740 --> 04:04:09,620
This is a difference of an image that has been edited.

1707
04:04:10,700 --> 04:04:12,820
It's pretty horrible,

1708
04:04:12,820 --> 04:04:18,140
unless you like the underlying format of a PNG picture.

1709
04:04:18,140 --> 04:04:27,140
But going forward and using these RichDiff tools,

1710
04:04:27,140 --> 04:04:31,660
we can actually see how the picture was previously

1711
04:04:31,660 --> 04:04:33,900
and how it's in the new edited version.

1712
04:04:36,740 --> 04:04:40,420
So let's see if we can do it in here.

1713
04:04:42,820 --> 04:04:47,700
What I need to do first is to initialize the repository.

1714
04:04:47,700 --> 04:04:52,460
So we are in the folder that I have this Jupyter Notebook

1715
04:04:52,460 --> 04:04:53,820
files.

1716
04:04:53,820 --> 04:05:00,120
And I can create a Git repository out of that folder

1717
04:05:00,120 --> 04:05:06,620
without leaving this Jupyter Notebook, which is kind of cool.

1718
04:05:06,620 --> 04:05:09,980
So I click Initialize Repository.

1719
04:05:09,980 --> 04:05:14,980
So now this folder is a git repository.

1720
04:05:15,020 --> 04:05:20,020
It shows that there's untracked files.

1721
04:05:20,780 --> 04:05:24,740
So why there's four files untracked,

1722
04:05:24,740 --> 04:05:26,840
although I have only two files in here?

1723
04:05:33,540 --> 04:05:35,420
And what should I do with this?

1724
04:05:36,500 --> 04:05:37,820
Let's see.

1725
04:05:37,820 --> 04:05:42,780
And these look like the original two notebooks that I created.

1726
04:05:42,780 --> 04:05:44,380
And these are some checkpoint files.

1727
04:05:44,380 --> 04:05:46,780
So what should I do with the checkpoint files?

1728
04:05:46,780 --> 04:05:52,140
So the checkpoints, I think they are directories, maybe checkpoint files, but these are often

1729
04:05:52,140 --> 04:05:54,360
things that I ignore.

1730
04:05:54,360 --> 04:05:55,360
I get ignore.

1731
04:05:55,360 --> 04:06:01,540
I add them to my git ignore, because they are, I see them as temporary local files that

1732
04:06:01,540 --> 04:06:04,580
I don't want to have in my git repository.

1733
04:06:04,580 --> 04:06:05,580
Okay.

1734
04:06:05,580 --> 04:06:10,500
So I right click and ignore that file.

1735
04:06:10,500 --> 04:06:13,700
And it tells me that git ignore does not exist,

1736
04:06:13,700 --> 04:06:15,900
but actually it just creates one.

1737
04:06:16,780 --> 04:06:20,740
And then I can track all the files

1738
04:06:20,740 --> 04:06:23,020
and make my first commit.

1739
04:06:29,260 --> 04:06:32,260
And now this is only going to the local folder.

1740
04:06:32,260 --> 04:06:39,360
So, I run the JupyterLab in a local folder, I created the git repository that's again

1741
04:06:39,360 --> 04:06:41,220
in a local folder.

1742
04:06:41,220 --> 04:06:46,300
Later on, I can upload the folder in GitHub if I want to.

1743
04:06:46,300 --> 04:06:53,420
Now there's the first initial commit done, so there's the snapshot of these notebooks

1744
04:06:53,420 --> 04:06:56,220
as they are now.

1745
04:06:56,220 --> 04:06:57,520
Now let's change something.

1746
04:07:01,760 --> 04:07:03,920
Okay, let's then verify what we will see.

1747
04:07:06,000 --> 04:07:10,040
For instance, you can change the size of the figure.

1748
04:07:10,040 --> 04:07:13,040
So somewhere there is this figure set size inches,

1749
04:07:13,040 --> 04:07:15,480
because maybe make it larger, smaller.

1750
04:07:15,480 --> 04:07:20,080
I'm scrolling to the lowest cell with the, yeah.

1751
04:07:20,080 --> 04:07:23,000
Or change the colors or something like that.

1752
04:07:23,000 --> 04:07:25,200
Yeah, I would love to change the colors,

1753
04:07:25,200 --> 04:07:27,160
but I don't remember how it's done.

1754
04:07:32,080 --> 04:07:33,600
Let's start with the size.

1755
04:07:33,600 --> 04:07:35,120
Yeah, let's go with the size.

1756
04:07:35,120 --> 04:07:37,000
Now it's smaller, this one.

1757
04:07:38,520 --> 04:07:41,920
So basically, it still renders the output

1758
04:07:41,920 --> 04:07:46,920
as a regular size, but I think this went bigger

1759
04:07:46,960 --> 04:07:51,880
so it's actually, the actual image is smaller.

1760
04:07:51,880 --> 04:08:00,680
So now if I would print out or save it to a file it would be smaller in size.

1761
04:08:00,680 --> 04:08:06,880
Now I save and let's see.

1762
04:08:06,880 --> 04:08:11,980
Now the Git extension shows, yeah there's some changes.

1763
04:08:11,980 --> 04:08:21,000
So before I commit the changes I want to show what has been edited.

1764
04:08:21,000 --> 04:08:33,840
So I click this small icon that says Diff and now this is how this Git, Jupyter Git tool

1765
04:08:33,840 --> 04:08:36,220
shows the difference.

1766
04:08:36,220 --> 04:08:43,180
So here's the code that I changed, the lines and the output.

1767
04:08:43,180 --> 04:08:48,600
So this is the old one and here's the new one.

1768
04:08:48,600 --> 04:08:53,800
everything with red is the old one everything is with green is the new one and that's that's good

1769
04:08:54,520 --> 04:09:00,840
and this works because we use this nbdime extension which is notebook diff and merge

1770
04:09:02,520 --> 04:09:08,120
and which helps us to really easily see what was before what was after if we used if you

1771
04:09:08,120 --> 04:09:16,280
try this with a notebook or with a jupyter lab without this extension we might see a difference

1772
04:09:16,280 --> 04:09:17,960
in the underlying source code.

1773
04:09:17,960 --> 04:09:23,160
Can we, so long story short, we recommend to use this extension.

1774
04:09:23,160 --> 04:09:28,920
And also on GitHub, we recommend to enable that extension so that you can see nice differences.

1775
04:09:28,920 --> 04:09:29,920
What is your question?

1776
04:09:29,920 --> 04:09:30,920
Yes.

1777
04:09:30,920 --> 04:09:37,760
I mean, I just click the show source button and this is the horror lying in inside.

1778
04:09:37,760 --> 04:09:43,560
Yeah, I really prefer the nice render here.

1779
04:09:43,560 --> 04:09:44,560
Yeah.

1780
04:09:44,560 --> 04:09:45,560
Great.

1781
04:09:45,560 --> 04:09:52,080
And if you want to try it out on GitHub, we have done on our lesson, we have, we have some

1782
04:09:52,080 --> 04:09:53,440
steps on what you need to do.

1783
04:09:53,440 --> 04:09:59,840
So it's a, you need to go on preview features, enable this rich Jupiter preview, I forgot

1784
04:09:59,840 --> 04:10:00,840
the name.

1785
04:10:00,840 --> 04:10:06,600
So I now wait, but I'm on GitHub, and then some settings.

1786
04:10:06,600 --> 04:10:12,200
So on yours, yes, on your picture there, and then you go on feature preview.

1787
04:10:12,200 --> 04:10:13,200
Nice.

1788
04:10:13,200 --> 04:10:17,320
Yes. And then on the left side, there is rich Jupyter Notebook diffs. I think you have it

1789
04:10:17,320 --> 04:10:18,320
enabled.

1790
04:10:18,320 --> 04:10:25,440
Yes, I have it enabled. So this is basically the same similar looking feature exists in

1791
04:10:25,440 --> 04:10:28,300
GitHub, which is really nice.

1792
04:10:28,300 --> 04:10:34,200
And then if you go back to the lesson, we have an example. So if you click on scroll a little

1793
04:10:34,200 --> 04:10:42,720
bit up, up, yes, there is this sentence that will be down. So on the bottom of your screen,

1794
04:10:42,720 --> 04:10:45,480
You can click on that link.

1795
04:10:45,480 --> 04:10:46,560
It's actually a diff.

1796
04:10:46,560 --> 04:10:51,060
It's a comparison between two versions.

1797
04:10:51,060 --> 04:10:52,340
And you can all try to open it up.

1798
04:10:52,340 --> 04:10:57,940
If you don't have that enable extension enabled, it will look not very understandable.

1799
04:10:57,940 --> 04:11:04,480
But with that extension enabled, we can see what was before what came after.

1800
04:11:04,480 --> 04:11:08,100
Okay, great.

1801
04:11:08,100 --> 04:11:12,540
I guess now we are up to a break, right?

1802
04:11:12,540 --> 04:11:17,140
Yes, we got a couple of interesting questions, but I, I will take the questions.

1803
04:11:17,140 --> 04:11:18,140
Let's take them after the break.

1804
04:11:18,140 --> 04:11:23,300
So after the break, what we should discuss, like, what are the advantages of notebook

1805
04:11:23,300 --> 04:11:28,740
versus script, or script versus VS code VS code versus notebook.

1806
04:11:28,740 --> 04:11:31,340
So that's for after the break.

1807
04:11:31,340 --> 04:11:33,700
I will add here.

1808
04:11:33,700 --> 04:11:35,300
So info box.

1809
04:11:35,300 --> 04:11:36,700
So when should we be back?

1810
04:11:38,340 --> 04:11:39,180
Is it sharp?

1811
04:11:42,820 --> 04:11:44,100
Let's be precise here.

1812
04:11:44,100 --> 04:11:45,620
Zero one.

1813
04:11:45,620 --> 04:11:47,060
Okay, great.

1814
04:11:47,060 --> 04:11:47,900
Thank you.

1815
04:11:47,900 --> 04:11:49,180
And then we'll do more Jupyter.

1816
04:11:49,180 --> 04:11:50,180
See you soon.

1817
04:11:50,180 --> 04:11:51,020
See you.

1818
04:12:03,700 --> 04:12:05,760
you

1819
04:12:33,700 --> 04:12:35,760
you

1820
04:13:03,700 --> 04:13:05,760
you

1821
04:13:33,700 --> 04:13:35,760
you

1822
04:14:03,700 --> 04:14:05,760
you

1823
04:14:33,700 --> 04:14:35,760
you

1824
04:15:03,700 --> 04:15:05,760
you

1825
04:15:33,700 --> 04:15:35,760
you

1826
04:16:03,700 --> 04:16:05,760
you

1827
04:16:33,700 --> 04:16:35,760
you

1828
04:17:03,700 --> 04:17:05,760
you

1829
04:17:33,700 --> 04:17:35,760
you

1830
04:18:03,700 --> 04:18:05,760
you

1831
04:18:33,700 --> 04:18:35,760
you

1832
04:19:03,700 --> 04:19:05,760
you

1833
04:19:33,700 --> 04:19:35,760
you

1834
04:20:03,700 --> 04:20:05,760
you

1835
04:20:33,700 --> 04:20:35,760
you

1836
04:21:03,700 --> 04:21:05,760
you

1837
04:21:33,700 --> 04:22:03,580
Welcome

1838
04:22:03,580 --> 04:22:12,700
Welcome back from the break. We continue with the Jupyter notebooks and a big topic for

1839
04:22:12,700 --> 04:22:24,060
the last half hour or so is the sharing notebooks. But how about if you share the notebook to

1840
04:22:24,060 --> 04:22:33,500
someone who does not use JupyterLab but instead wants to use Visual Studio Code. And for that

1841
04:22:33,500 --> 04:22:38,140
I wanted to show you how it looks like.

1842
04:22:38,140 --> 04:22:43,620
This is the same folder that we used in the previous examples,

1843
04:22:43,620 --> 04:22:48,700
and there we created the Jupyter Notebooks in the JupyterLab.

1844
04:22:48,700 --> 04:22:54,040
Now, the same folder opened in Visual Studio Code.

1845
04:22:54,040 --> 04:22:57,920
I can see that here's actually

1846
04:22:57,920 --> 04:23:06,120
the same notebook that I created as an example there's the same plots and

1847
04:23:06,120 --> 04:23:14,320
everything showing up oh this is smaller because we created it smaller so they

1848
04:23:14,320 --> 04:23:22,800
open up just nicely did you have to install anything other than VS code I'm

1849
04:23:22,800 --> 04:23:37,320
gonna check my extensions. So yes, there is a Jupyter extension installed in, but it's,

1850
04:23:37,320 --> 04:23:46,440
you can find it in the Visual Studio code and extensions and search for Jupyter. Yeah.

1851
04:23:46,440 --> 04:23:52,080
And you personally, if you like write a notebook, do you write it in VS code or do you write

1852
04:23:52,080 --> 04:24:04,680
it in a browser? I really like the JupyterLab interface and the looks. I don't know why,

1853
04:24:04,680 --> 04:24:18,500
but I prefer this one. How about you? Yeah, me too. I use the browser for notebooks. Yeah.

1854
04:24:18,500 --> 04:24:27,600
I use Visual Studio Code for a bunch of other stuff, but yeah, both work, which is nice.

1855
04:24:27,600 --> 04:24:35,340
So then to the sharing of the notebooks, there's many different ways to share and actually

1856
04:24:35,340 --> 04:24:36,900
too many.

1857
04:24:36,900 --> 04:24:39,940
Which one of these you have actually used?

1858
04:24:39,940 --> 04:24:46,060
I mean, they obviously both are all useful, but which one you have used?

1859
04:24:46,060 --> 04:24:51,980
So one, one thing that I'm even sure we listed this one step is to put it on places like

1860
04:24:51,980 --> 04:24:52,980
GitHub.

1861
04:24:52,980 --> 04:24:59,100
Yeah, so there's one way one way to share it and somebody else can view it there.

1862
04:24:59,100 --> 04:25:04,240
It's static because it will it actually you can only see the image of it, you cannot go

1863
04:25:04,240 --> 04:25:05,240
in and change it.

1864
04:25:05,240 --> 04:25:11,700
But we will also show you a way where you can share it in a way that people can really

1865
04:25:11,700 --> 04:25:13,380
run it and change it.

1866
04:25:13,380 --> 04:25:19,940
So which one I've used GitHub, I have used binder. I have also experimented a little

1867
04:25:19,940 --> 04:25:28,020
bit with Jupyter light. I have not tried the other ones. Yeah, I think further further

1868
04:25:28,020 --> 04:25:32,340
down we have also some alternatives that are there are some companies behind it. So I have

1869
04:25:32,340 --> 04:25:42,320
Yes, I've tried to co-calc. Sorry, no, the, is that the one? No, I'm, what I meant is

1870
04:25:42,320 --> 04:25:54,820
the Google collab. Yeah. I have tried. Yeah, some of those. Yeah. And well, if static is

1871
04:25:54,820 --> 04:26:01,620
enough for you, then in JupyterLab, there's this file menu and there's this export options,

1872
04:26:01,620 --> 04:26:09,300
options but some of these might need some extra installation so just so that you know but this

1873
04:26:09,300 --> 04:26:17,060
is of course the probably the easiest way to just share the file but let's go with the

1874
04:26:18,420 --> 04:26:24,020
use case where the people that you want to share the file with want to also

1875
04:26:24,020 --> 04:26:28,500
So experiment on your notebook.

1876
04:26:28,500 --> 04:26:31,460
So this is a demo about that.

1877
04:26:31,460 --> 04:26:38,180
And the use cases you want, you want people to be able to run it without even installing

1878
04:26:38,180 --> 04:26:43,900
any software environment or Jupyter or JupyterLab or anything.

1879
04:26:43,900 --> 04:26:47,380
All they will need is a browser.

1880
04:26:47,380 --> 04:26:49,780
Okay.

1881
04:26:49,780 --> 04:26:54,780
So it says that I should create a new GitHub repository.

1882
04:26:54,780 --> 04:26:55,780
So let's do that.

1883
04:26:55,780 --> 04:27:10,460
I'm going to GitHub and this is a Jupyter Binder demo, and I will, what I will do is

1884
04:27:10,460 --> 04:27:13,940
I will then, once you create it, I will share the link with everybody else so that people

1885
04:27:13,940 --> 04:27:17,040
you can see what we did there.

1886
04:27:19,720 --> 04:27:23,000
So do you want to link to this repository?

1887
04:27:23,000 --> 04:27:25,240
Yes, but I will add it to the document.

1888
04:27:25,240 --> 04:27:27,640
So it's public, just a second, I need to find it.

1889
04:27:34,680 --> 04:27:35,760
It is this one.

1890
04:27:35,760 --> 04:27:47,120
So the next step for me is to add a new file.

1891
04:27:47,120 --> 04:27:55,440
It took me some time to find this button because now it's zoomed in so much that it's in here

1892
04:27:55,440 --> 04:28:01,360
but it's next to this code button, create new file.

1893
04:28:01,360 --> 04:28:10,180
I want to upload a new file right yep because I yes I have the notebook that I

1894
04:28:10,180 --> 04:28:20,180
just created in the previous example and commit message yes we always have to

1895
04:28:20,180 --> 04:28:29,460
write something here it's a difficult to come up with useful ones though don't

1896
04:28:29,460 --> 04:28:36,140
worry we are totally not judging the commit message. Yeah and committing

1897
04:28:36,140 --> 04:28:41,740
directly to the main branch because I know that there's can't be no one else

1898
04:28:41,740 --> 04:28:50,940
doing any editing yet because this is so new thing so new repository I mean. Okay

1899
04:28:50,940 --> 04:28:58,300
now it's there with the readme nice what would be the next step?

1900
04:28:59,460 --> 04:29:04,740
Next step, I need to also navigate to the right place.

1901
04:29:04,740 --> 04:29:06,740
There's this requirements.txt, right?

1902
04:29:06,740 --> 04:29:09,460
Yeah, that's a nice connection to yesterday.

1903
04:29:09,460 --> 04:29:11,140
This is a file.

1904
04:29:11,140 --> 04:29:16,160
So we need to describe the software environment that we need.

1905
04:29:16,160 --> 04:29:18,700
It can be either a requirements.txt file.

1906
04:29:18,700 --> 04:29:21,500
It can also be an environment.yaml file.

1907
04:29:21,500 --> 04:29:25,060
Both were mentioned yesterday in the reproducibility lesson.

1908
04:29:25,060 --> 04:29:28,220
And here we can list what are the libraries that we need.

1909
04:29:28,220 --> 04:29:31,900
And in this case, we will need the matplotlib,

1910
04:29:31,900 --> 04:29:35,540
which is a Python library used for plotting.

1911
04:29:36,660 --> 04:29:37,500
And we-

1912
04:29:37,500 --> 04:29:41,020
So if, how do I know that which libraries,

1913
04:29:41,020 --> 04:29:44,140
which things I need to list in the requirements txt?

1914
04:29:46,820 --> 04:29:47,860
Well, that's a good question.

1915
04:29:47,860 --> 04:29:51,660
If sometimes it's a bit trial and error.

1916
04:29:51,660 --> 04:29:55,620
So it depends a bit how you installed the dependencies

1917
04:29:55,620 --> 04:29:57,060
that you use in the notebook.

1918
04:29:58,220 --> 04:30:07,840
I like to, personally, when I install dependencies, I put them into a file like requirements.txt.

1919
04:30:07,840 --> 04:30:11,560
And then I install from the file, because then I don't have to remember it, I can look

1920
04:30:11,560 --> 04:30:13,140
into the file.

1921
04:30:13,140 --> 04:30:16,940
But if you don't have the file, and maybe you installed this half a year ago, and you

1922
04:30:16,940 --> 04:30:25,680
don't remember anymore, then I go into my notebook, and I see, I look at all the imports.

1923
04:30:25,680 --> 04:30:30,480
And now, yeah, this is at least a starting point here.

1924
04:30:30,480 --> 04:30:31,480
Yeah.

1925
04:30:31,480 --> 04:30:35,000
And with with some Python knowledge, you would know that random is actually not.

1926
04:30:35,000 --> 04:30:38,240
It's a standard library, it's part of Python.

1927
04:30:38,240 --> 04:30:40,720
And but botlib is an external library.

1928
04:30:40,720 --> 04:30:44,640
But this is now about this Python knowledge.

1929
04:30:44,640 --> 04:30:53,800
Right, so we don't need to take this random now, but we have to take sorry, I'm navigating

1930
04:30:53,800 --> 04:31:01,440
back to the GitHub, we have to mention matplotlib and the version.

1931
04:31:01,440 --> 04:31:05,520
If we don't, if we leave out the version, we will get the latest one, okay, which will

1932
04:31:05,520 --> 04:31:07,120
still work today.

1933
04:31:07,120 --> 04:31:11,520
But the question is, will the notebook then still run in five years.

1934
04:31:11,520 --> 04:31:16,320
So depending on what your use case is, you might want to put the version there or not.

1935
04:31:16,320 --> 04:31:21,640
If we forget to put something into the requirements of text, we will notice it.

1936
04:31:21,640 --> 04:31:25,860
Because this is now this will run as an isolated thing.

1937
04:31:25,860 --> 04:31:27,980
And if there are dependencies missing, we will notice.

1938
04:31:27,980 --> 04:31:32,580
So sometimes I do like I add something, I run it, something missing, okay, I add something

1939
04:31:32,580 --> 04:31:35,060
more until it works.

1940
04:31:35,060 --> 04:31:36,540
Yeah.

1941
04:31:36,540 --> 04:31:46,620
So the next step shown in the lesson material is to go to my binder.org.

1942
04:31:46,620 --> 04:31:51,060
And this is just a web page, right?

1943
04:31:51,060 --> 04:31:55,860
How does this help our cause?

1944
04:31:55,860 --> 04:32:03,220
Here it will help that once we have the repository, there is this GitHub field where you can put

1945
04:32:03,220 --> 04:32:05,060
a GitHub repository address.

1946
04:32:05,060 --> 04:32:10,180
And if people want to try it out later, you can notice that it doesn't have to be GitHub.

1947
04:32:10,180 --> 04:32:11,980
The notebook can be on other places.

1948
04:32:11,980 --> 04:32:12,980
Let's see.

1949
04:32:12,980 --> 04:32:22,480
GitLab or it can be on Zenodo or some other places where you can deposit a notebook and

1950
04:32:22,480 --> 04:32:25,000
even get a digital object identifier for a notebook.

1951
04:32:25,000 --> 04:32:28,720
So that would be even better than putting it only on GitHub.

1952
04:32:28,720 --> 04:32:33,400
But here we want to show how to do it when your notebook is on GitHub.

1953
04:32:33,400 --> 04:32:35,740
So you take the address.

1954
04:32:35,740 --> 04:32:44,860
So can I just use the URL the URL from the URL field

1955
04:32:44,860 --> 04:32:51,780
without the tree without the main yeah like this so that will hopefully work

1956
04:32:51,780 --> 04:32:57,060
notice that on the left side it says head it will take the

1957
04:32:57,060 --> 04:33:02,060
it will actually take the main sorry the main branch the default branch you could point

1958
04:33:02,060 --> 04:33:05,940
it to another branch or attack if you have that.

1959
04:33:05,940 --> 04:33:16,220
Yeah. Do I need this path to notebook file? And it says optional. So I guess no.

1960
04:33:16,220 --> 04:33:24,620
And you don't even have to launch it. You can. What we can do is there is this one.

1961
04:33:24,620 --> 04:33:31,340
What you can do is just below the line below there is the launch partner batch and right

1962
04:33:31,340 --> 04:33:36,680
of it is the little arrow, click on that little arrow. And now there is a markdown version

1963
04:33:36,680 --> 04:33:42,920
and RSD version. What you can do is you can copy that markdown badge. Yeah, because that

1964
04:33:42,920 --> 04:33:47,600
will form a nice link to documentation lesson and let's put it into our readme. Okay, so

1965
04:33:47,600 --> 04:33:57,640
I copy this one and go to my repository and to the readme file. And I want to edit it

1966
04:33:57,640 --> 04:34:19,240
it now. And maybe you can zoom in a little bit. Let me see. Yeah. So I copy pasted this

1967
04:34:19,240 --> 04:34:26,760
markdown tag in here. So it's an address to a web server and this web server, which is

1968
04:34:26,760 --> 04:34:30,120
which will be running on my binder.org.

1969
04:34:30,120 --> 04:34:31,980
It will be generated on the fly.

1970
04:34:33,280 --> 04:34:36,620
On the fly, it will create, hopefully, let's see.

1971
04:34:36,620 --> 04:34:40,280
It will create a container for us.

1972
04:34:41,280 --> 04:34:43,360
It will install the dependencies into it,

1973
04:34:43,360 --> 04:34:45,000
the dependencies which we have described

1974
04:34:45,000 --> 04:34:47,600
in requirements.txt.

1975
04:34:47,600 --> 04:34:51,800
And in this container, it will run the notebook, hopefully.

1976
04:34:51,800 --> 04:34:54,000
Yeah, so now I have this party started.

1977
04:34:54,000 --> 04:35:03,920
And now it's a cool looking tag in my readme and it didn't cost anything.

1978
04:35:03,920 --> 04:35:13,660
So I click the tag and now it took me here.

1979
04:35:13,660 --> 04:35:23,220
So it's loading up and while it's loading up it's showing me this static version of

1980
04:35:23,220 --> 04:35:31,220
files. Can I actually click here? Okay, click on it, but it only gives you a static preview

1981
04:35:31,220 --> 04:35:35,340
because now, yeah, now it's installing the dependencies and why it's installing. If we

1982
04:35:35,340 --> 04:35:40,300
are impatient, it will, it at least wants to give us like the preview of how it will

1983
04:35:40,300 --> 04:35:49,980
look. Yeah, it's nice to see at least like, is this what I'm looking for? I mean, if I

1984
04:35:49,980 --> 04:35:54,940
realize here that no this is not that this is not the droids we are looking for no the

1985
04:35:54,940 --> 04:36:00,660
tributor lab that we are looking for then maybe I go away but now I see that this is

1986
04:36:00,660 --> 04:36:10,140
exactly what I want to see so I shall be waiting for the actual binder container to start yeah

1987
04:36:10,140 --> 04:36:18,340
and it's the first time we do that it can take seconds minutes once it is has been set

1988
04:36:18,340 --> 04:36:26,420
up it's faster to to run and this is normally not not a problem because this is really for

1989
04:36:26,420 --> 04:36:31,820
now we imagine that we are the person reading the publication and now we want to reproduce

1990
04:36:31,820 --> 04:36:35,460
the steps and I don't mind waiting waiting three minutes for this thing to start for

1991
04:36:35,460 --> 04:36:40,900
me yeah in the meantime what we can do while this is spinning up we can have a look at

1992
04:36:40,900 --> 04:36:43,300
the questions and discuss some of them.

1993
04:36:44,300 --> 04:36:45,300
Yes.

1994
04:36:45,300 --> 04:36:46,500
Let's open up the notes.

1995
04:36:49,420 --> 04:36:51,020
There are some more detailed question,

1996
04:36:51,020 --> 04:36:53,660
like one more bigger picture question was,

1997
04:36:55,140 --> 04:37:00,140
of what is the advantage of like,

1998
04:37:00,620 --> 04:37:01,740
when should I use a notebook?

1999
04:37:01,740 --> 04:37:03,060
When should I use VS code?

2000
04:37:03,060 --> 04:37:07,260
When should I use Python scripts?

2001
04:37:07,260 --> 04:37:16,500
And it one answer that we gave is that it's also a bit personal preference.

2002
04:37:16,500 --> 04:37:21,140
It's we show you different tools and you can choose the one that feels more comfortable

2003
04:37:21,140 --> 04:37:31,660
for you and for the use case.

2004
04:37:31,660 --> 04:37:32,660
There's a question.

2005
04:37:32,660 --> 04:37:33,660
Oh, yeah.

2006
04:37:33,660 --> 04:37:34,660
Okay.

2007
04:37:34,660 --> 04:37:35,660
Here's answers as well.

2008
04:37:35,660 --> 04:37:43,460
some funny rendering here, just comparing JupyterLab and VS Code. I think VS Code can

2009
04:37:43,460 --> 04:37:51,540
do about the same things. There's also the Git integration right in there, so I guess

2010
04:37:51,540 --> 04:38:00,740
that's all in all easier to start in VS Code. The Git is there already, I think, and you

2011
04:38:00,740 --> 04:38:02,580
you can add the Jupyter extension.

2012
04:38:02,580 --> 04:38:07,580
So maybe there's less overall installation thing,

2013
04:38:07,740 --> 04:38:10,540
maybe less hustling in the terminal

2014
04:38:10,540 --> 04:38:15,160
if you want to avoid that for some reason, like me.

2015
04:38:19,320 --> 04:38:21,740
So it's a question of what people prefer.

2016
04:38:21,740 --> 04:38:24,380
It's also a question of who do you collaborate with?

2017
04:38:24,380 --> 04:38:25,220
Yeah.

2018
04:38:30,740 --> 04:38:35,340
Is there something else?

2019
04:38:35,340 --> 04:38:40,100
So there are interesting questions at the bottom but I need to look it up.

2020
04:38:40,100 --> 04:38:47,620
So one question is that it is definitely possible that you have different environments in different

2021
04:38:47,620 --> 04:38:48,620
directories.

2022
04:38:48,620 --> 04:38:53,700
So you could imagine that if you just move out of a project and move into a different

2023
04:38:53,700 --> 04:38:57,220
project that it automatically switches environment.

2024
04:38:57,220 --> 04:38:58,220
I need to look up the details.

2025
04:38:58,220 --> 04:38:59,220
I know it's possible.

2026
04:38:59,220 --> 04:39:02,700
something called .env, .env,

2027
04:39:02,700 --> 04:39:05,060
but there's just one solution to this,

2028
04:39:05,060 --> 04:39:07,380
which will change your environment

2029
04:39:07,380 --> 04:39:08,620
if you go into a directory

2030
04:39:08,620 --> 04:39:09,860
and it will change it to something else

2031
04:39:09,860 --> 04:39:12,160
if you move out of it, but I need to look it up.

2032
04:39:13,500 --> 04:39:14,540
Yeah.

2033
04:39:14,540 --> 04:39:15,820
Then there is another question

2034
04:39:15,820 --> 04:39:18,980
which connects more to what was discussed yesterday,

2035
04:39:18,980 --> 04:39:21,100
like what is the best tool for managing dependencies?

2036
04:39:21,100 --> 04:39:22,440
I think that's hard to answer

2037
04:39:22,440 --> 04:39:24,040
because there are so many tools.

2038
04:39:24,040 --> 04:39:33,780
Maybe the two most popular ones are Conda or virtual environment, but there are really

2039
04:39:33,780 --> 04:39:38,980
many and, and again, it depends a bit on what you prefer, what your, what your collaborators

2040
04:39:38,980 --> 04:39:41,400
prefer.

2041
04:39:41,400 --> 04:39:48,420
Often these tools can, but the idea of isolating environments to have isolated environments

2042
04:39:48,420 --> 04:39:55,060
per project that's a good idea and any of these tools allow it and often you

2043
04:39:55,060 --> 04:40:04,340
can convert one to the other yeah like for me for example I think I've used

2044
04:40:04,340 --> 04:40:12,660
conda and virtual and but more more in the way that if I have instructions I

2045
04:40:12,660 --> 04:40:17,660
I know how to launch the virtual environment

2046
04:40:17,820 --> 04:40:21,300
and then I can navigate myself around the code

2047
04:40:21,300 --> 04:40:23,500
or run the code.

2048
04:40:23,500 --> 04:40:27,700
So to all those people who might be wondering

2049
04:40:27,700 --> 04:40:30,440
that, oh, this is all too much,

2050
04:40:31,580 --> 04:40:34,780
start, if you have the collaboration case,

2051
04:40:34,780 --> 04:40:37,460
so there's someone who created the environment,

2052
04:40:37,460 --> 04:40:42,140
start from trying to run the code

2053
04:40:42,140 --> 04:40:45,820
and launch the virtual environment and run the code,

2054
04:40:45,820 --> 04:40:50,820
that's already enables you to start the collaboration there.

2055
04:40:52,420 --> 04:40:57,420
So don't worry, although it might feel overwhelming

2056
04:40:59,060 --> 04:41:04,060
discussing all those different virtual environments

2057
04:41:04,060 --> 04:41:05,360
and tools for that.

2058
04:41:08,820 --> 04:41:09,700
Okay.

2059
04:41:09,700 --> 04:41:17,140
So in the context of Binder, it's often a requirements.txt or environment.yaml.

2060
04:41:17,140 --> 04:41:18,140
How are we doing there?

2061
04:41:18,140 --> 04:41:23,500
Is it still in the process of?

2062
04:41:23,500 --> 04:41:29,580
So if you, if you go to that link again from your readme, does it resolve?

2063
04:41:29,580 --> 04:41:31,980
I think I've lost my...

2064
04:41:31,980 --> 04:41:39,660
Did we not commit it?

2065
04:41:39,660 --> 04:41:45,620
Because I can also, you have committed it, what people can do, I can also start it on

2066
04:41:45,620 --> 04:41:46,620
my side.

2067
04:41:46,620 --> 04:41:50,380
No, I mean, I just lost my tabs.

2068
04:41:50,380 --> 04:41:51,380
Yeah.

2069
04:41:51,380 --> 04:41:56,060
But lucky you put this in in there.

2070
04:41:56,060 --> 04:41:57,060
Oh, yeah.

2071
04:41:57,060 --> 04:42:00,980
So you can start it from there.

2072
04:42:00,980 --> 04:42:04,820
And I started it on my side, people can try to but let's not, let's see whether it's overwhelms

2073
04:42:04,820 --> 04:42:06,100
binder.

2074
04:42:06,100 --> 04:42:09,520
So on my on my computer, it started up.

2075
04:42:09,520 --> 04:42:17,100
So it will also soon do it on yours here is now we see the planets orbiting.

2076
04:42:17,100 --> 04:42:19,700
So the moons are orbiting Jupiter and there it is.

2077
04:42:19,700 --> 04:42:22,980
So this is now not running on Matias computer.

2078
04:42:22,980 --> 04:42:27,300
It's on somewhere in the cloud accessible through the browser, you can try to visit

2079
04:42:27,300 --> 04:42:28,580
it too.

2080
04:42:28,580 --> 04:42:32,680
And you can try to run the notebook that we just created.

2081
04:42:32,680 --> 04:42:35,720
And you can even go in and change it.

2082
04:42:35,720 --> 04:42:39,960
So what if I change it? Does it save and where?

2083
04:42:39,960 --> 04:42:48,880
No it's so if you change it and then leave it at some point this this container will vaporize.

2084
04:42:48,880 --> 04:42:54,280
So I can basically I can mess up everything here in this environment if I want to and

2085
04:42:54,280 --> 04:42:56,600
so you can original is there. Yeah.

2086
04:42:56,600 --> 04:43:03,000
If you wanted to change it and keep the changes you would have to save them so you can you

2087
04:43:03,000 --> 04:43:06,000
you can take the notebook and save it onto your computer. So that will be the way to

2088
04:43:06,000 --> 04:43:11,020
preserve them. But here we can all experiment. I mean, go in and try to modify some numbers,

2089
04:43:11,020 --> 04:43:19,660
try to run it. And we have a we have a dynamic notebook. And if we know we could go one step

2090
04:43:19,660 --> 04:43:27,100
further and get a do I for it, and which we will not do but but then we are sure that

2091
04:43:27,100 --> 04:43:32,100
this thing will be available the next 10 years.

2092
04:43:32,320 --> 04:43:34,020
And if we are careful about dependencies

2093
04:43:34,020 --> 04:43:36,840
and about documenting dependencies with versions,

2094
04:43:36,840 --> 04:43:37,880
we can be reasonably sure

2095
04:43:37,880 --> 04:43:40,040
that this thing will still run in 10 years.

2096
04:43:41,280 --> 04:43:42,120
Pretty cool.

2097
04:43:57,100 --> 04:44:07,100
Right, so I made some edits. I wanted to see how close this statistic result was, so I

2098
04:44:07,100 --> 04:44:18,620
compared that result to the actual Pi provided by NumPy library and well it's in two decimals.

2099
04:44:18,620 --> 04:44:19,620
Quite okay.

2100
04:44:19,620 --> 04:44:26,140
Yeah, this is very cool. Binder is a wonderful service. It is non-profit. There are different

2101
04:44:26,140 --> 04:44:30,940
services that do similar things some of them are non-profit some of them are

2102
04:44:30,940 --> 04:44:35,340
for-profit here we wanted to show you a really nice service that is there's a

2103
04:44:35,340 --> 04:44:44,580
lot of good for community and is a non-profit one yeah there are some

2104
04:44:44,580 --> 04:44:52,380
optional exercises about tracking the dependencies which we also discussed a

2105
04:44:52,380 --> 04:44:57,200
a little bit what to put in the requirements and TXT

2106
04:44:57,200 --> 04:44:58,460
and how to find them.

2107
04:44:59,280 --> 04:45:01,780
And then there's an optional exercise

2108
04:45:06,040 --> 04:45:09,920
about sharing an interactive notebook.

2109
04:45:09,920 --> 04:45:13,280
So what does the interactive mean in this case?

2110
04:45:13,280 --> 04:45:16,400
This means, and it will connect to somebody ask a question

2111
04:45:16,400 --> 04:45:18,880
of how can you have interactive images?

2112
04:45:18,880 --> 04:45:20,960
I mean, interactive graphics in a notebook.

2113
04:45:20,960 --> 04:45:23,840
And this is one way of doing that or doing it.

2114
04:45:23,840 --> 04:45:27,160
So you can have a slider for instance,

2115
04:45:27,160 --> 04:45:28,480
that you can slide from left to right

2116
04:45:28,480 --> 04:45:32,120
and then you can make it change values

2117
04:45:32,120 --> 04:45:33,900
and then you can define it

2118
04:45:33,900 --> 04:45:36,100
so that images automatically adapt to it.

2119
04:45:37,720 --> 04:45:38,820
There are many ways to implement this,

2120
04:45:38,820 --> 04:45:41,280
but here we show you one.

2121
04:45:41,280 --> 04:45:45,720
Yeah, so I really encourage you to go to see the,

2122
04:45:45,720 --> 04:45:55,800
like optional exercises that there's a quite a lot of nice material also some

2123
04:45:55,800 --> 04:46:04,800
new things for me also I guess one that I actually would like to advertise here

2124
04:46:04,800 --> 04:46:13,320
now is this shell commands magic and widgets so there are some extra features

2125
04:46:13,320 --> 04:46:21,760
in Jupyter, you can ask it for help about some object, so if you don't know what this

2126
04:46:21,760 --> 04:46:30,080
np.sum() does, you can add a question mark there and apparently it will tell you.

2127
04:46:30,080 --> 04:46:39,880
Scrolling a little bit down, you can run shell or terminal commands in Jupyter by adding

2128
04:46:39,880 --> 04:46:48,840
this exclamation mark. That can be really nice for example in a case that you want to

2129
04:46:48,840 --> 04:46:56,640
know in which folder you are in. Now this is probably going to look curious because

2130
04:46:56,640 --> 04:47:06,240
it's in the binder container, but anyhow.

2131
04:47:06,240 --> 04:47:12,000
And then, oh, there's some magic.

2132
04:47:12,000 --> 04:47:15,120
I think I have never tried this.

2133
04:47:15,120 --> 04:47:23,440
And then the widgets that we mentioned that you can add more interactive elements in the

2134
04:47:23,440 --> 04:47:32,680
JupyterLab. Yeah, do we go to the summary?

2135
04:47:32,680 --> 04:47:40,080
Let's do that. And also, a reminder to everybody else, on the bottom of the notes, I have pasted

2136
04:47:40,080 --> 04:47:47,720
requests for feedback. Please let us know how today went. There are also some questions

2137
04:47:47,720 --> 04:47:51,880
that we can discuss in voice, but I don't know if you wanted to share some summary slide

2138
04:47:51,880 --> 04:47:53,640
or say a few words, [name].

2139
04:47:55,120 --> 04:47:56,560
Yeah, in the lesson material,

2140
04:47:56,560 --> 04:48:00,920
there's this nice summary, more links

2141
04:48:00,920 --> 04:48:05,440
and blog posts and articles.

2142
04:48:05,440 --> 04:48:09,920
And then also, again, mentioned these other tools

2143
04:48:09,920 --> 04:48:13,360
for other languages than Python.

2144
04:48:13,360 --> 04:48:18,360
And like a reminder on the thing

2145
04:48:18,920 --> 04:48:20,940
that we already also mentioned

2146
04:48:20,940 --> 04:48:25,360
that when you start with the JupyterLab or Jupyter notebook,

2147
04:48:25,360 --> 04:48:29,120
you start experimenting and develop more and more.

2148
04:48:29,120 --> 04:48:32,640
At some point you have a really long notebook,

2149
04:48:34,300 --> 04:48:37,720
but then it starts to grow.

2150
04:48:37,720 --> 04:48:42,720
So the one good practice was to,

2151
04:48:43,880 --> 04:48:46,840
every time before you save and share,

2152
04:48:46,840 --> 04:48:48,620
restart kernel, run all cells

2153
04:48:48,620 --> 04:48:57,380
to see that your notebook actually runs in order and there's no errors and then

2154
04:48:57,380 --> 04:49:08,020
also try to organize it and use the subtitles or headlines headings to keep

2155
04:49:08,020 --> 04:49:16,820
the notebook in order so that it's easy also for you after one year to

2156
04:49:16,820 --> 04:49:17,940
get back to it.

2157
04:49:22,700 --> 04:49:23,540
Yeah.

2158
04:49:25,540 --> 04:49:26,780
You mentioned some questions.

2159
04:49:26,780 --> 04:49:29,580
Is there still something that you would like to raise?

2160
04:49:32,580 --> 04:49:36,740
So we can, that was commented.

2161
04:49:36,740 --> 04:49:38,220
Tomorrow we will connect to this.

2162
04:49:38,220 --> 04:49:41,260
We will, when we discuss modular code development,

2163
04:49:41,260 --> 04:49:43,580
we will actually tomorrow start in a notebook

2164
04:49:44,780 --> 04:49:46,300
and we will then experience a moment

2165
04:49:46,300 --> 04:49:51,180
when maybe it feels like, you know, uncomfortable

2166
04:49:51,180 --> 04:49:53,340
and it feels like we want to move out of notebook.

2167
04:49:53,340 --> 04:49:55,020
So we will see that, we will see a situation

2168
04:49:55,020 --> 04:49:57,900
and the situation will be once we start adding tests,

2169
04:49:59,500 --> 04:50:03,180
that, so we will start in notebook

2170
04:50:03,180 --> 04:50:06,180
and maybe move out into scripts.

2171
04:50:08,300 --> 04:50:10,660
We will also tomorrow talk about automated testing.

2172
04:50:10,660 --> 04:50:12,940
So two really exciting lessons coming up.

2173
04:50:13,780 --> 04:50:15,660
We hope to see you all tomorrow again.

2174
04:50:16,300 --> 04:50:19,700
And thanks a lot for giving feedback below.

2175
04:50:19,700 --> 04:50:21,340
Tell us one thing that you liked about today.

2176
04:50:21,340 --> 04:50:24,740
Tell us also one thing that we should change or remove.

2177
04:50:24,740 --> 04:50:33,300
Yeah, I think we've been changing at least something in in every time we have this workshop,

2178
04:50:33,300 --> 04:50:34,580
right?

2179
04:50:34,580 --> 04:50:42,340
Yes, because this the topics they are evolving, so we need to evolve with them.

2180
04:50:42,340 --> 04:50:47,040
And this is this goes more about the content but it also goes it's also about the forum

2181
04:50:47,040 --> 04:50:49,160
and how we present it.

2182
04:50:49,160 --> 04:50:50,160
Yeah.

2183
04:50:50,160 --> 04:50:52,480
So thank you for this lesson.

2184
04:50:52,480 --> 04:50:55,980
Thank you for following and thank you for the feedback.

2185
04:50:55,980 --> 04:50:56,980
Keep it coming.

2186
04:50:56,980 --> 04:50:59,080
And thank you for having me here.

2187
04:50:59,080 --> 04:51:00,080
Yeah.

2188
04:51:00,080 --> 04:51:01,080
Thanks, [name].

2189
04:51:01,080 --> 04:51:02,080
Always pleasure.

2190
04:51:02,080 --> 04:51:19,860
of music. Sure.

2191
04:51:32,080 --> 04:51:34,140
you

2192
04:52:02,080 --> 04:52:04,140
you

2193
04:52:32,080 --> 04:52:34,140
you

2194
04:53:02,080 --> 04:53:04,140
you

2195
04:53:32,080 --> 04:53:34,140
you

2196
04:54:02,080 --> 04:54:04,140
you

2197
04:54:32,080 --> 04:54:34,140
you

2198
04:55:02,080 --> 04:55:04,140
you

2199
04:55:32,080 --> 04:55:34,140
you

2200
04:56:02,080 --> 04:56:04,140
you

2201
04:56:32,080 --> 04:56:34,140
you

2202
04:57:02,080 --> 04:57:04,140
you

2203
04:57:32,080 --> 04:57:34,140
you

2204
04:58:02,080 --> 04:58:04,140
you

