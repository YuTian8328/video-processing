1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:32,060
you

21
00:10:00,000 --> 00:10:25,760
Test one, two, can anyone hear us out there?

22
00:10:25,760 --> 00:10:29,720
I probably need to be louder.

23
00:10:29,720 --> 00:10:35,720
someone else say something good morning everyone okay morning yeah I guess maybe

24
00:10:35,720 --> 00:10:41,880
we're sort of balanced

25
00:10:44,080 --> 00:10:55,880
okay so hello everyone it's our last day is anyone else excited

26
00:10:55,880 --> 00:11:01,400
Sad that it's over.

27
00:11:01,400 --> 00:11:07,180
I will be happy to get my days back.

28
00:11:07,180 --> 00:11:11,320
But I mean, yeah, also sad that it's over.

29
00:11:11,320 --> 00:11:12,320
So anyway.

30
00:11:12,320 --> 00:11:20,440
It has been a nice constant, being here every morning, but before 10.

31
00:11:20,440 --> 00:11:32,160
So we need to do an audio test, and when processing the videos for yesterday, I realized the audio

32
00:11:32,160 --> 00:11:35,720
wasn't quite as balanced as I would have liked.

33
00:11:35,720 --> 00:11:37,640
So how should we do audio tests better?

34
00:11:37,640 --> 00:11:44,920
Someone once said we should say something more in-depth than 1-1-1-2-2-2-3-3-3.

35
00:11:44,920 --> 00:11:48,200
So any ideas?

36
00:11:48,200 --> 00:11:54,840
And someone has reminded me, today is not completely the last day of Code Refinery.

37
00:11:54,840 --> 00:12:02,480
It's the last day of streaming, but the teaching continues with the Bring Your Own Code sessions,

38
00:12:02,480 --> 00:12:12,040
where you can, well, bring your stuff and you ask us questions and we look live at things

39
00:12:12,040 --> 00:12:20,320
and give advice.

40
00:12:20,320 --> 00:12:37,080
So from these icebreakers, what's the worst bug you've seen or experienced?

41
00:12:37,080 --> 00:12:43,720
So anyone want to go first?

42
00:12:43,720 --> 00:12:49,240
The ones that are resolved by restarting your computer.

43
00:12:49,240 --> 00:12:53,440
The ones that you cannot pinpoint why they happen.

44
00:12:53,440 --> 00:12:56,000
They just happen and then they are not there anymore.

45
00:12:56,000 --> 00:13:00,760
And then you're like, okay, is this fine?

46
00:13:00,760 --> 00:13:06,960
So I wrote down my answer, but it was a memory issue in the C code, which is always.

47
00:13:06,960 --> 00:13:11,040
very hard to figure out.

48
00:13:11,040 --> 00:13:24,960
But also at that time, I was not using either version control or tests, so just I was working

49
00:13:24,960 --> 00:13:33,440
on something for a day and something else broke and I have no idea what's going on.

50
00:13:33,440 --> 00:13:36,360
At least with C, I think that's a relatively common experience.

51
00:13:36,360 --> 00:13:44,080
I had something similar once, and the only way I fixed it was by running the code in

52
00:13:44,080 --> 00:13:50,640
a loop a thousand times, which would some sort of reliably cause an error message when

53
00:13:50,640 --> 00:13:56,560
quitting, and then commenting out half my code until I could narrow it down to one

54
00:13:56,560 --> 00:13:57,560
line.

55
00:13:57,560 --> 00:14:04,600
I'm sure there's better ways, but that was what I knew how to do at the time.

56
00:14:04,600 --> 00:14:14,720
Yeah, unfortunately, this was a problem where the code runs from the beginning to the end

57
00:14:14,720 --> 00:14:19,280
and produces incorrect results, but also in a statistical way.

58
00:14:19,280 --> 00:14:25,480
So you have to run it a bunch of times before you can notice that it's slightly off.

59
00:14:25,480 --> 00:14:29,240
It really was the worst kind of problem.

60
00:14:29,240 --> 00:14:30,960
Yeah.

61
00:14:30,960 --> 00:14:42,720
So my worst bugs, or you could say maybe what's been worst to solve, has been things like

62
00:14:42,720 --> 00:14:47,440
I'm editing some code, but that code isn't even running because the bug is somewhere

63
00:14:47,440 --> 00:14:48,440
else.

64
00:14:48,440 --> 00:14:55,440
Like once I made a, was it debugging or testing tutorial or something, and I had the same

65
00:14:55,440 --> 00:15:09,280
code in my same code was in the file twice the same function was defined twice and people were

66
00:15:09,280 --> 00:15:14,640
editing the first one and towards the second definition took precedence and it wasn't even

67
00:15:14,640 --> 00:15:25,200
running and yeah there's another one um that i think is kind of a good lead-in

68
00:15:25,200 --> 00:15:34,720
for today's topics. So this was that I wrote a measurement for a high-performance computing

69
00:15:35,840 --> 00:15:45,440
program that we were spending millions of hours to run, like hundreds of thousands of euros worth

70
00:15:45,440 --> 00:15:51,360
of computing time. And I wrote a measurement that calculates A, B, and C, and then it should

71
00:15:51,360 --> 00:15:56,640
add A, B, and C together and print the result. I added B and C together and printed the result

72
00:15:56,640 --> 00:16:04,640
instead and never printed A anywhere in the program. That wasted some time.

73
00:16:06,240 --> 00:16:11,920
It's also one of those things that no matter how well you test A, it's not going to help.

74
00:16:16,800 --> 00:16:20,000
Properly testing the program before starting to run it would have been

75
00:16:20,000 --> 00:16:21,600
and very helpful.

76
00:16:23,800 --> 00:16:24,640
Yeah.

77
00:16:38,000 --> 00:16:42,400
So, how do you make sure your code continues to work

78
00:16:42,400 --> 00:16:44,040
when collaborating with others?

79
00:16:50,000 --> 00:16:56,000
Like, if it works one day, how does it work tomorrow?

80
00:16:59,000 --> 00:17:09,000
Have you ever had these kind of bugs where something worked, it was nicely tested, but then it got changed and broke, and then everything...

81
00:17:09,000 --> 00:17:24,480
I guess that memory issue in C is one of these things, you can easily break something in

82
00:17:24,480 --> 00:17:38,160
a completely different place of the code.

83
00:17:38,160 --> 00:17:47,120
also just manually running it and printing some variables values brings me quite far.

84
00:17:49,360 --> 00:17:54,080
And I guess that's quite often the starting point of testing,

85
00:17:55,840 --> 00:18:03,040
manually looking at prints. I guess as a spoiler alert, we're going to talk about exactly this

86
00:18:03,040 --> 00:18:10,800
kind of stuff today, and you'll see what we tend to do these days because it's best practice.

87
00:18:15,200 --> 00:18:19,440
So I didn't see a good suggestion for what to say. Someone suggested

88
00:18:20,480 --> 00:18:28,960
Sally Scripps' sleek software solution swiftly, but we need something quick and easy to say,

89
00:18:28,960 --> 00:18:35,040
not that we're gonna trip us up. What if we say fair software? So me, [name], [name],

90
00:18:35,040 --> 00:18:43,600
I'll repeat fair software. Fair software. Fair software. Fair software. Fair software. Fair

91
00:18:43,600 --> 00:18:53,520
software. Fair software. Okay, is it balanced? To me, [name] might have been a little bit louder

92
00:18:53,520 --> 00:18:56,640
than [name].

93
00:18:56,640 --> 00:19:01,880
But I'm only here for a very short time, so it's better that you are balanced.

94
00:19:01,880 --> 00:19:03,920
But it's 10.

95
00:19:03,920 --> 00:19:07,400
Should we start with Jingle?

96
00:19:07,400 --> 00:19:09,400
Yeah.

97
00:19:09,400 --> 00:19:11,400
Yeah.

98
00:19:11,400 --> 00:19:13,400
Okay.

99
00:19:13,400 --> 00:19:17,400
Let's go.

100
00:19:17,400 --> 00:19:19,400
Hello.

101
00:19:19,400 --> 00:19:21,400
Welcome.

102
00:19:21,400 --> 00:19:26,400
Hello. Welcome. And we have [name] for the introduction.

103
00:19:26,400 --> 00:19:37,400
Already here. Okay. Yeah. Hello. And very welcome to this last day of streaming of the Code Refinery workshop.

104
00:19:37,400 --> 00:19:44,460
So we are in the last day of the teaching sessions of this workshop,

105
00:19:44,460 --> 00:19:52,220
and yesterday we looked at documentation and Jupyter and saw some demos.

106
00:19:52,220 --> 00:19:57,820
Today, this goes on and it basically wraps everything up.

107
00:19:57,820 --> 00:20:01,780
So everything comes together again in today's sessions.

108
00:20:01,780 --> 00:20:05,780
Now in the morning, we have a session about automated testing.

109
00:20:05,780 --> 00:20:09,980
So really putting all the Git and GitHub things together,

110
00:20:09,980 --> 00:20:14,660
and implement tests that can check

111
00:20:14,660 --> 00:20:19,260
your code when you are collaborating with others or working by yourself.

112
00:20:19,260 --> 00:20:21,240
Then in the afternoon,

113
00:20:21,240 --> 00:20:25,140
we will have a session on modular code development,

114
00:20:25,140 --> 00:20:31,940
which is a live coding session where we take a code that is right now

115
00:20:31,940 --> 00:20:34,620
in Jupyter and plot something,

116
00:20:34,620 --> 00:20:39,220
and then show live how to make this more modular

117
00:20:39,220 --> 00:20:41,960
so that it can be more easily reused

118
00:20:41,960 --> 00:20:44,180
by you and others in the future.

119
00:20:45,460 --> 00:20:47,100
And this is highly interactive,

120
00:20:47,100 --> 00:20:50,740
so we are kind of dependent a little bit on you there

121
00:20:50,740 --> 00:20:55,060
to give us hints in what to do with the codes

122
00:20:55,060 --> 00:20:56,380
in the collaborative document,

123
00:20:56,380 --> 00:20:58,940
and I'll show in a moment how to do that.

124
00:20:58,940 --> 00:21:05,780
But also, please stay until the end because we will tell you a little bit about what can

125
00:21:05,780 --> 00:21:11,460
come after this Code Refinery workshop and also talk a little bit more about our Bring

126
00:21:11,460 --> 00:21:17,780
Your Own Code sessions, which you might have seen in the schedule already for next week

127
00:21:17,780 --> 00:21:21,340
and the week after, Tuesday afternoon.

128
00:21:21,340 --> 00:21:26,020
So if you're new here, if you're joining us today for the first time, this is a live-streamed

129
00:21:26,020 --> 00:21:33,300
workshop so everyone will watch the live stream here on Twitch and then you can interact with

130
00:21:33,300 --> 00:21:39,380
the instructors and with some people behind the scenes also via our collaborative document.

131
00:21:39,380 --> 00:21:46,580
For that you need to register to this workshop via the Code Refinery web page and then you will

132
00:21:46,580 --> 00:21:51,700
get the link to this document which looks something like this. So here we have some

133
00:21:51,700 --> 00:21:55,940
information for you where you can find all the questions and answers, the workshop web page,

134
00:21:55,940 --> 00:22:02,580
the schedule and the link to the lesson materials and then we also have some icebreaker question

135
00:22:02,580 --> 00:22:10,420
for this morning and the way you can add your answers there is to find this little pen symbol

136
00:22:10,420 --> 00:22:15,940
which might be here or somewhere to the right depending on how you're looking at this page.

137
00:22:15,940 --> 00:22:17,720
So you click the pen symbol,

138
00:22:17,720 --> 00:22:20,800
you switch into edit mode,

139
00:22:20,800 --> 00:22:25,960
and then you can scroll down here to the questions,

140
00:22:25,960 --> 00:22:29,840
what's the worst bug you have seen or experienced,

141
00:22:29,840 --> 00:22:34,400
and then find these little three dot lines

142
00:22:34,400 --> 00:22:37,400
here and add your own answer to the question,

143
00:22:37,400 --> 00:22:41,200
and the same for the next ones that we have here.

144
00:22:41,200 --> 00:22:49,200
And then we will have titles here about each section and underneath here you can ask your question.

145
00:22:49,200 --> 00:23:00,200
Is this the place to ask questions? And then hopefully someone will answer. Yes, there's someone answering.

146
00:23:00,200 --> 00:23:07,200
And we will provide these documents after the course. You can find them on the course web page.

147
00:23:07,200 --> 00:23:11,460
course webpage so you can go back and see what have others asked, what may help

148
00:23:11,460 --> 00:23:18,640
your understanding. We'll also have breaks about 10 minutes every hour and

149
00:23:18,640 --> 00:23:24,800
all the lesson materials that you might see during this day are available and

150
00:23:24,800 --> 00:23:29,920
linked from the workshop page and they will also be available afterwards and

151
00:23:29,920 --> 00:23:36,560
And you can also reuse them to do your own workshops, for example.

152
00:23:36,560 --> 00:23:40,960
The recordings will stay online on Twitch for some days, and then they will also be

153
00:23:40,960 --> 00:23:47,640
available approximately tomorrow or today on the YouTube channel.

154
00:23:47,640 --> 00:23:52,680
If you're interested in certificates, you can find instructions on that also on the

155
00:23:52,680 --> 00:23:53,680
workshop page.

156
00:23:53,680 --> 00:23:55,840
Maybe I can show that briefly.

157
00:23:55,840 --> 00:24:06,640
there's up here this certificates tab where you can find this and all the materials are linked here

158
00:24:07,280 --> 00:24:14,800
behind the schedule. And then yeah the bring your own code sessions we'll talk about

159
00:24:14,800 --> 00:24:23,600
a little bit about this more in the end of today. And now over to our instructors for today

160
00:24:23,600 --> 00:24:30,000
[name] and [name]. Great, thanks [name].

161
00:24:30,640 --> 00:24:34,320
Okay, I will take over the screen share.

162
00:24:34,320 --> 00:24:37,600
I'm also showing the same document. Okay.

163
00:24:37,600 --> 00:24:42,320
Okay, here we go.

164
00:24:43,280 --> 00:24:47,840
Okay, good. And does that look correct? It does.

165
00:24:47,840 --> 00:24:52,720
Yes. Good. Okay, so let's get back. So we already

166
00:24:52,720 --> 00:25:02,880
talked a bit with the icebreakers and people can read those but yeah so where do we start so we

167
00:25:02,880 --> 00:25:12,960
are first lesson is automated testing yeah so um yeah let's get down to it so um or first uh

168
00:25:12,960 --> 00:25:21,120
before you learned automated testing. Can we share the lesson? Yes, we can. So,

169
00:25:21,840 --> 00:25:26,320
the link is in the notes and also in the schedule, and here we go.

170
00:25:29,360 --> 00:25:33,360
Yeah, and I guess this title show is exactly what our icebreakers were asking,

171
00:25:33,360 --> 00:25:36,160
preventing yourself and others from breaking functional code.

172
00:25:36,160 --> 00:25:46,120
So, yeah, so what's the way you do this, like, without automated testing?

173
00:25:46,120 --> 00:25:52,120
What were you doing before you learned and what are people probably doing before learning

174
00:25:52,120 --> 00:25:53,120
about this?

175
00:25:53,120 --> 00:25:54,120
Yeah.

176
00:25:54,120 --> 00:25:57,120
Can we go to motivation, maybe?

177
00:25:57,120 --> 00:25:58,120
I guess.

178
00:25:58,120 --> 00:26:03,160
The first motivation lesson has some...

179
00:26:03,160 --> 00:26:12,840
So yeah, and this first point, if you've ever been an experimental scientist, you probably

180
00:26:12,840 --> 00:26:19,160
know that calibrating your instruments is an important thing you do.

181
00:26:19,160 --> 00:26:28,960
So you have to get there, and anytime you have some microscope or measurement thing,

182
00:26:28,960 --> 00:26:35,000
You run it with a known sample to see if it gives the value you expect.

183
00:26:35,000 --> 00:26:43,280
And we see a quote here that says the same thing should apply to software.

184
00:26:43,280 --> 00:26:50,400
If you haven't done some sort of test to see if it works, then are you really doing science

185
00:26:50,400 --> 00:26:57,280
Or are you just making some hopes or whatever?

186
00:27:01,160 --> 00:27:03,800
So this would be something like checking

187
00:27:03,800 --> 00:27:06,800
that you can reproduce known results.

188
00:27:06,800 --> 00:27:09,320
And essentially, every time you change something,

189
00:27:09,320 --> 00:27:12,880
move the thing around, or just come

190
00:27:12,880 --> 00:27:15,360
into the lab in the morning doing some basic checks

191
00:27:15,360 --> 00:27:16,280
that everything is OK.

192
00:27:16,280 --> 00:27:22,480
So let's give an example, if we scroll down.

193
00:27:22,480 --> 00:27:26,300
So when you're programming, you might have some function.

194
00:27:26,300 --> 00:27:29,840
So here, can the font be made a little bit larger?

195
00:27:29,840 --> 00:27:30,840
Yes.

196
00:27:30,840 --> 00:27:35,500
Okay, that's hopefully good, yeah.

197
00:27:35,500 --> 00:27:37,760
So what do we see here?

198
00:27:37,760 --> 00:27:39,760
Yeah.

199
00:27:39,760 --> 00:27:44,940
So this is Python, there's other examples here, but yeah.

200
00:27:44,940 --> 00:27:54,220
that converts from fahrenheit to celsius which is pretty easy yeah and we can look at it and we

201
00:27:54,220 --> 00:28:01,020
think it works but how would you actually test it in real life like if you're making this function

202
00:28:01,020 --> 00:28:07,740
and you didn't know automatic testing yeah would you so i guess i would run it with some number i

203
00:28:07,740 --> 00:28:15,900
know the result for. I would run it with temperature in Fahrenheit being zero, because I know it

204
00:28:15,900 --> 00:28:22,220
should return 32. Not exactly, because that's the wrong way around. I would give it 32 and

205
00:28:22,220 --> 00:28:24,580
then expect zero, I guess.

206
00:28:24,580 --> 00:28:27,860
Yeah. So you give it the known obvious values.

207
00:28:27,860 --> 00:28:28,860
Yeah.

208
00:28:28,860 --> 00:28:33,520
And since you can probably know your function is linear, if you can test two values, then

209
00:28:33,520 --> 00:28:35,780
it's probably good.

210
00:28:35,780 --> 00:28:42,500
this case that would be enough. But are you sure? I mean I guess it's worth

211
00:28:42,500 --> 00:28:47,940
testing a few more if it's easy and also some special cases like negative

212
00:28:47,940 --> 00:28:56,220
Kelvin does that give you something or null values and so on. Yeah. Integer and

213
00:28:56,220 --> 00:29:03,740
floating-point inputs. But anyway so this is what we're going to see during this

214
00:29:03,740 --> 00:29:09,900
lesson. And this is at the smallest most micro scale testing a single function

215
00:29:09,900 --> 00:29:19,020
but you can also test much more than this. So for example down below we see a

216
00:29:19,020 --> 00:29:28,700
test of a whole program. Not like that far down but just a little. Oh you mean

217
00:29:28,700 --> 00:29:36,220
I mean, we don't see what it actually is, but it shows it looks like it runs with some

218
00:29:36,220 --> 00:29:41,700
sample data and says this is what the output should be.

219
00:29:41,700 --> 00:29:48,300
So it is telling us that it's correct, which is good.

220
00:29:48,300 --> 00:29:54,980
So what else can the test help us do?

221
00:29:54,980 --> 00:30:00,620
I mean, I guess in addition to telling whether it's wrong or right, it would be useful to

222
00:30:00,620 --> 00:30:05,460
know where the problem is or how the test figured out that there's a problem.

223
00:30:05,460 --> 00:30:11,320
Like, this just tells you that it's correct, which I guess is fine as long as it's correct.

224
00:30:11,320 --> 00:30:18,300
But it would be nice to know what it checked, more nice to be reminded what was the check,

225
00:30:18,300 --> 00:30:19,300
what passed.

226
00:30:19,300 --> 00:30:24,600
And if it fails, where did it fail and how?

227
00:30:24,600 --> 00:30:29,200
Can we scroll down a bit to see what else is in, what else it says?

228
00:30:29,200 --> 00:30:31,160
So preserve functionality.

229
00:30:31,160 --> 00:30:36,720
Okay, so that means if it works, it keeps working.

230
00:30:36,720 --> 00:30:39,080
Help users.

231
00:30:39,080 --> 00:30:44,240
So basically, actually this happens often on our computer cluster.

232
00:30:44,240 --> 00:30:50,400
We install some software for a user and we wonder, did the installation work correctly?

233
00:30:50,400 --> 00:31:03,320
If we, the admins, can run a test suite and it says it works, then we have some reasonable

234
00:31:03,320 --> 00:31:09,680
confidence that we didn't completely break the installation.

235
00:31:09,680 --> 00:31:12,000
Help other developers modify it.

236
00:31:12,000 --> 00:31:14,440
What does that mean?

237
00:31:14,440 --> 00:31:22,840
Well, if you're changing something, you can be confident that you didn't break anything.

238
00:31:22,840 --> 00:31:25,560
It also kind of helps with documentation.

239
00:31:25,560 --> 00:31:29,280
It tells you what should work and how it should behave.

240
00:31:29,280 --> 00:31:41,560
Yeah, like for example, if I'm modifying someone else's code and there's tests, then I can run

241
00:31:41,560 --> 00:31:47,400
those tests, and if they pass, then, like, if it's someone else's code, I usually don't

242
00:31:47,400 --> 00:31:51,960
know how the whole thing works. But I might know enough to change just a little bit of

243
00:31:51,960 --> 00:31:58,720
it. But I don't know how my section relates to all the other sections of the code.

244
00:31:58,720 --> 00:32:04,640
So having these tests is really useful, because I can be reasonably sure that I haven't broken

245
00:32:04,640 --> 00:32:10,120
something unexpected. And same for the other developer. If I say, oh, would you like this

246
00:32:10,120 --> 00:32:19,520
change, then they can see if the test still works and not have to read my changes so much.

247
00:32:19,520 --> 00:32:23,640
They can just look locally.

248
00:32:23,640 --> 00:32:28,860
And this complexity is also a good one.

249
00:32:28,860 --> 00:32:35,080
I've written some things before that are really hard to test, and eventually they become hard

250
00:32:35,080 --> 00:32:37,440
to modify and maintain.

251
00:32:37,440 --> 00:32:43,040
And that's just not great.

252
00:32:43,040 --> 00:32:44,040
There's a good question.

253
00:32:44,040 --> 00:32:45,160
Is this about testing code?

254
00:32:45,160 --> 00:32:47,520
What about other things, Python?

255
00:32:47,520 --> 00:32:49,880
This is a really good point.

256
00:32:49,880 --> 00:32:53,760
And for example, the thing that we'll show later on,

257
00:32:53,760 --> 00:32:59,320
GitHub Actions, has exact ways to do this.

258
00:32:59,320 --> 00:33:03,560
You can basically install, like test installing and running

259
00:33:03,560 --> 00:33:08,360
your code your package on different operating systems on different versions of the operating

260
00:33:08,360 --> 00:33:17,480
system and so on yeah yeah that that's really helpful um yeah and if you want to test that

261
00:33:17,480 --> 00:33:23,240
it's installed correctly in your system then hopefully you can also run the tests included

262
00:33:23,240 --> 00:33:32,840
in the package. Yeah. So when's it okay to not add tests? The next section here.

263
00:33:34,120 --> 00:33:45,400
Oh, we should be... I will also add this as a question to the notes. So you can ask is everything

264
00:33:45,400 --> 00:33:54,600
that we do test it? And the answer is probably no. And to me it depends on how important

265
00:33:54,600 --> 00:34:00,940
it is. If it's a small script that I will also always be, there will always be a human

266
00:34:00,940 --> 00:34:08,480
in the loop watching it and verifying it worked, then whatever. But as soon as it gets big

267
00:34:08,480 --> 00:34:19,520
enough, I'll try to have some at least sample data to show.

268
00:34:19,520 --> 00:34:26,980
So often the time when it's really time to start adding tests is when you're going from

269
00:34:26,980 --> 00:34:36,360
a single script or a Jupyter notebook to having some functions and having multiple files and

270
00:34:36,360 --> 00:34:46,360
so on, at least for me. But of course if you have a big untested block of code in a notebook

271
00:34:46,360 --> 00:34:58,280
or a script, then that's maybe not as trustworthy as it could be. And maybe that's fine.

272
00:34:58,280 --> 00:35:06,280
So, what are some examples of things that are easy and hard to test in your own opinion?

273
00:35:06,280 --> 00:35:13,280
Okay, let's move that also to the notes and see what people come up with.

274
00:35:13,280 --> 00:35:18,280
What's hard to test is interactive things.

275
00:35:18,280 --> 00:35:24,280
Something that requires a human in the loop to properly work.

276
00:35:24,280 --> 00:35:30,200
Like, you can simulate a human by some predefined answers, but it's not quite the same thing.

277
00:35:31,240 --> 00:35:37,960
There are also things like testing frameworks, which basically, like for web browsers and so on,

278
00:35:37,960 --> 00:35:46,120
that can go and virtually click on things on a website and see if it works. But

279
00:35:47,720 --> 00:35:52,760
since our audience is probably scientists and researchers, that might be getting a bit deep,

280
00:35:52,760 --> 00:36:00,080
but you can bet for sure that big companies making websites and so on have these kinds of things because

281
00:36:01,720 --> 00:36:06,440
Well, it's better to do it once then need a human to do it all the time

282
00:36:10,560 --> 00:36:12,560
Okay, should we go

283
00:36:15,000 --> 00:36:16,840
On um

284
00:36:16,840 --> 00:36:22,040
There's some other advice here, but I think you'll probably see the types of tests well

285
00:36:22,760 --> 00:36:26,760
You can read that yourself later, we don't really need to go.

286
00:36:26,760 --> 00:36:29,760
I guess the main point there is you can test at different levels.

287
00:36:29,760 --> 00:36:32,760
Like above we saw a test of a single function.

288
00:36:32,760 --> 00:36:37,760
But maybe for your case it's better to get some sample data and test the whole thing.

289
00:36:37,760 --> 00:36:39,760
Like an end-to-end test.

290
00:36:39,760 --> 00:36:41,760
Or whatever.

291
00:36:41,760 --> 00:36:43,760
Often times it's some combination.

292
00:36:43,760 --> 00:36:46,760
I would try some end-to-end test, and then

293
00:36:46,760 --> 00:36:52,040
test of individual functions where it's easy and the risk of breakage is high.

294
00:36:55,640 --> 00:36:56,680
So, where do we start?

295
00:36:59,960 --> 00:37:10,360
Yes, so let's go to the next section, but at this point I think I will move on to my empty

296
00:37:10,360 --> 00:37:16,680
example folder and we can start because the next section is a demonstration.

297
00:37:18,840 --> 00:37:22,200
Yes, so we are at the section testing locally.

298
00:37:25,960 --> 00:37:32,120
Maybe, well, is there anything we need to show from the web browser window?

299
00:37:32,120 --> 00:37:33,960
Maybe I'll show on my screen quickly.

300
00:37:33,960 --> 00:37:48,200
locally. So here we are on testing locally. The link is in the notes. And we will be using

301
00:37:48,200 --> 00:37:56,960
PyTest. So we'll start with some simple code, which Wiz provided to us. And we will slowly

302
00:37:56,960 --> 00:38:06,640
add it to files and make some tests. And this is a really reasonable thing to do. So pytest is what,

303
00:38:07,760 --> 00:38:15,920
at least my default package for testing Python code. It's really common, it's relatively easy to

304
00:38:15,920 --> 00:38:19,440
use. So, yeah, it's a good start.

305
00:38:22,000 --> 00:38:31,440
I actually, I cannot say that I've seen any other framework being used to test Python.

306
00:38:32,400 --> 00:38:38,080
There are other frameworks and people use them, but in Python, it's essentially the only one.

307
00:38:38,080 --> 00:38:47,560
I'll create a new Python file, example.py, and put some code there.

308
00:38:47,560 --> 00:38:50,320
So we start with example.py.

309
00:38:50,320 --> 00:38:53,080
Did you make a new directory to store this stuff?

310
00:38:53,080 --> 00:38:54,080
Yes.

311
00:38:54,080 --> 00:38:58,880
This should be an empty directory, but I did try running pytest to check that it exists.

312
00:38:58,880 --> 00:39:03,280
So there is a pytest cache.

313
00:39:03,280 --> 00:39:05,200
So we're adding example.py.

314
00:39:05,200 --> 00:39:10,080
And it has, and so this is supposed to be a demo.

315
00:39:10,080 --> 00:39:14,660
So you can try to follow along, but we're not giving you time and we're not going slow

316
00:39:14,660 --> 00:39:18,320
enough that we think it's easy to follow.

317
00:39:18,320 --> 00:39:28,240
Okay, so I have this extremely complicated mathematical function and I want to test it.

318
00:39:28,240 --> 00:39:31,520
So what should I do?

319
00:39:31,520 --> 00:39:42,100
So the way PyTest works is it automatically looks for functions that start with test underscore.

320
00:39:42,100 --> 00:39:46,640
It also looks for modules that start with test underscore, but we don't do that yet.

321
00:39:46,640 --> 00:39:52,780
So let's define a function called test add, test underscore add.

322
00:39:52,780 --> 00:40:01,420
So the important thing is that it starts with test underscore, and then I guess I will write

323
00:40:01,420 --> 00:40:04,540
in the function name what I'm testing, so I'm testing the add function.

324
00:40:07,500 --> 00:40:09,420
Let's close the side panel.

325
00:40:11,500 --> 00:40:16,460
Okay, so what does assert mean? I went a bit ahead of my house, sorry.

326
00:40:18,380 --> 00:40:21,100
Assert, what does that do?

327
00:40:25,020 --> 00:40:28,860
Is it self-descriptive? It might be if you speak enough English.

328
00:40:28,860 --> 00:40:37,660
So assert is a Python statement which runs whatever is after it. And if it doesn't evaluate

329
00:40:37,660 --> 00:40:47,180
to true, it prints an error. So PyTest uses this. It uses standard Python statements.

330
00:40:47,180 --> 00:40:55,500
But if there was an assertion error, it would capture that error and then print some extra

331
00:40:55,500 --> 00:40:57,900
debugging information beyond what Python would do.

332
00:40:59,420 --> 00:41:01,420
So what if there's a different kind of an error?

333
00:41:03,100 --> 00:41:04,460
What do you mean by different kind?

334
00:41:06,220 --> 00:41:13,340
Well, I don't know. I gave some parameters that you cannot add together.

335
00:41:14,860 --> 00:41:19,740
Well, I think Python would probably, or PyTest would also capture that and print it well.

336
00:41:19,740 --> 00:41:26,140
Okay, so any error will, PyTest will capture any error essentially,

337
00:41:26,140 --> 00:41:29,420
but assert is a nice way of producing errors when things don't work.

338
00:41:32,700 --> 00:41:39,340
Okay, well let's, should we add something that evaluates to true? So if we add two and three,

339
00:41:41,340 --> 00:41:48,860
that should be equal to five. No, five. Okay, what else? What else would work?

340
00:41:49,740 --> 00:41:52,860
So, what else in Python should be added?

341
00:41:52,860 --> 00:41:56,620
Well, there's this, we see it adds two strings together.

342
00:41:56,620 --> 00:41:59,820
So, yeah, let's try that.

343
00:41:59,820 --> 00:42:08,660
So, the way strings work is if you try to add with the plus operator, two words, space

344
00:42:08,660 --> 00:42:16,980
and ship, and that should return space ship, so it just puts the strings together, concatenates

345
00:42:16,980 --> 00:42:17,980
the strings.

346
00:42:17,980 --> 00:42:18,980
Okay.

347
00:42:18,980 --> 00:42:28,980
So now we have our test function, and notice the test function takes no arguments, so PyTest automatically finds it and runs it.

348
00:42:28,980 --> 00:42:36,980
It has all the test data directly embedded in here, as you can see, and will print any errors it finds.

349
00:42:36,980 --> 00:42:44,160
Open a terminal window.

350
00:42:44,160 --> 00:42:51,320
I will need to activate the code refinery environment.

351
00:42:51,320 --> 00:42:54,720
Can we split the window so we can see?

352
00:42:54,720 --> 00:42:55,880
Yes.

353
00:42:55,880 --> 00:43:00,760
So whoops, looking at the tests and the...

354
00:43:00,760 --> 00:43:02,960
There's not a huge amount of space.

355
00:43:02,960 --> 00:43:06,000
Can you split the window so it's on the bottom?

356
00:43:06,000 --> 00:43:10,640
Right, that's a good idea. It should be possible. Okay.

357
00:43:10,640 --> 00:43:19,680
Okay, yeah, so there's a question in the chat. What are we trying to do here?

358
00:43:19,680 --> 00:43:27,720
So we have some pretend code, which is add A and B. We pretend this is our highly advanced

359
00:43:27,720 --> 00:43:33,840
scientific code, and we want to demonstrate a test for it. So we run this thing called

360
00:43:33,840 --> 00:43:41,760
test add. So we've made a function test add and PyTest will automatically run this for us

361
00:43:41,760 --> 00:43:51,440
with some nice extra stuff. So the simplest way to run this function would be to run

362
00:43:51,440 --> 00:43:57,840
PyTest and that's it. Yeah so we do PyTest. I think we need to tell it example.py.

363
00:43:57,840 --> 00:44:06,200
That's true, because example.py doesn't start with test underscore.

364
00:44:06,200 --> 00:44:08,880
We need to give it the file name.

365
00:44:08,880 --> 00:44:14,800
But let's also add a verbose flag so that it will tell us what it's doing, give some

366
00:44:14,800 --> 00:44:17,280
more information.

367
00:44:17,280 --> 00:44:19,820
Okay.

368
00:44:19,820 --> 00:44:23,560
So we see test session starts, whatever.

369
00:44:23,560 --> 00:44:27,680
So it ran test add and said that it passed.

370
00:44:27,680 --> 00:44:28,680
Yes.

371
00:44:28,680 --> 00:44:34,600
It did tell us that it, yeah, it ran the test add function.

372
00:44:34,600 --> 00:44:35,600
Yeah.

373
00:44:35,600 --> 00:44:36,600
Okay.

374
00:44:36,600 --> 00:44:40,680
So yeah, all it did is run this function and it didn't encounter any errors.

375
00:44:40,680 --> 00:44:42,840
So it passed.

376
00:44:42,840 --> 00:44:49,280
So if we had a hundred times more code here and 20 different test functions, we could run

377
00:44:49,280 --> 00:44:55,840
them all automatically, all at once.

378
00:44:55,840 --> 00:45:02,640
And yes, and in this case the testing function is doing nothing more than running the function

379
00:45:02,640 --> 00:45:05,480
with some real life values.

380
00:45:05,480 --> 00:45:10,320
Of course you can get more advanced, but that's essentially what testing is.

381
00:45:10,320 --> 00:45:14,280
Running stuff with sample values and seeing if it comes out right.

382
00:45:14,280 --> 00:45:18,280
So what happens if something's broken?

383
00:45:18,280 --> 00:45:23,280
Should we do a test and see?

384
00:45:23,280 --> 00:45:24,280
Okay.

385
00:45:24,280 --> 00:45:32,160
Let's make a break the function.

386
00:45:32,160 --> 00:45:35,680
So now it's clearly not adding.

387
00:45:35,680 --> 00:45:36,680
So I will not run it from here.

388
00:45:36,680 --> 00:45:41,140
I will run it from here in the terminal.

389
00:45:41,140 --> 00:45:42,140
So pytest.

390
00:45:42,140 --> 00:45:43,140
Okay.

391
00:45:43,140 --> 00:45:46,260
Okay, so now it gives a lot more information.

392
00:45:46,260 --> 00:45:49,860
Yeah, and we see a really nice error message.

393
00:45:49,860 --> 00:45:54,780
It says, failures test add, def test add,

394
00:45:54,780 --> 00:45:57,520
assert add two, three equals five.

395
00:45:57,520 --> 00:46:00,980
It says that assert minus one equals five

396
00:46:00,980 --> 00:46:04,300
or minus one equals add two comma three.

397
00:46:04,300 --> 00:46:08,160
So if we had a hundred different test functions here,

398
00:46:08,160 --> 00:46:12,380
we could go and know exactly which function failed

399
00:46:12,380 --> 00:46:14,740
and with which arguments.

400
00:46:20,220 --> 00:46:22,860
OK, so that's the basic idea.

401
00:46:22,860 --> 00:46:25,820
And there was some comment in the notes

402
00:46:25,820 --> 00:46:31,740
about how someone was using unit test.

403
00:46:31,740 --> 00:46:35,980
And it seemed really hard and in a lot of boilerplate.

404
00:46:35,980 --> 00:46:37,820
And you notice here, this is really easy.

405
00:46:37,820 --> 00:46:46,180
Yeah, there's not that much boilerplate in here.

406
00:46:46,180 --> 00:46:50,060
Just fixing the code to make the test pass again.

407
00:46:50,060 --> 00:46:51,060
Okay.

408
00:46:51,060 --> 00:46:52,060
Yeah.

409
00:46:52,060 --> 00:46:54,380
These are all one-line tests.

410
00:46:54,380 --> 00:47:01,700
Of course, the function is very simple, so writing one-line tests is easy, but still.

411
00:47:01,700 --> 00:47:08,700
So the next part here is a test in the episode is a test that considers numerical tolerance.

412
00:47:08,700 --> 00:47:14,780
So can we add as a test add 0.1 and 0.2.

413
00:47:14,780 --> 00:47:17,300
So we assert something.

414
00:47:17,300 --> 00:47:23,940
We want 0.1 and 0.2 equal to 0.3.

415
00:47:23,940 --> 00:47:27,700
I'm actually curious if this will work or not.

416
00:47:27,700 --> 00:47:31,240
No, it did not work.

417
00:47:31,240 --> 00:47:33,020
So it does this work?

418
00:47:33,020 --> 00:47:34,320
Yeah.

419
00:47:36,520 --> 00:47:46,440
Adding 0.1 and 0.2 produces 0.300000000000004 because it's a floating point number.

420
00:47:46,440 --> 00:47:48,860
So it goes in powers of 2.

421
00:47:50,040 --> 00:47:53,580
Floating point numbers are never quite exact.

422
00:47:53,580 --> 00:47:57,680
Yeah. So what's the solution here?

423
00:47:57,700 --> 00:48:00,700
What do we do?

424
00:48:00,700 --> 00:48:01,700
Yeah, good question.

425
00:48:01,700 --> 00:48:08,100
I guess we could check that the difference between the result

426
00:48:08,100 --> 00:48:10,700
and 0.3 is small enough.

427
00:48:10,700 --> 00:48:15,000
So basically we would test with numerical tolerance somehow.

428
00:48:15,000 --> 00:48:15,500
Yes.

429
00:48:15,500 --> 00:48:19,700
So should we try that?

430
00:48:19,700 --> 00:48:20,700
Yeah.

431
00:48:20,700 --> 00:48:23,100
Like, is the difference small enough?

432
00:48:23,100 --> 00:48:24,900
So we take the difference.

433
00:48:24,900 --> 00:48:31,700
but now we want the absolute value of the difference because also if it's

434
00:48:31,700 --> 00:48:37,860
negative that is not good but this is some number and it should be smaller

435
00:48:37,860 --> 00:48:42,460
than some arbitrary number let's say

436
00:48:43,500 --> 00:48:52,140
in the notes it's the power of seven is this seven so basically yeah okay does

437
00:48:52,140 --> 00:49:00,940
it pass now? Now it passes. Okay, great. Let's go to the notes. We have some really good

438
00:49:00,940 --> 00:49:19,820
questions there. I'll switch here locally. So towards the bottom. So yeah, so there's

439
00:49:19,820 --> 00:49:23,820
lots of questions about how this works with more advanced code.

440
00:49:23,820 --> 00:49:26,260
So this is simple.

441
00:49:26,260 --> 00:49:33,780
So whenever I'm doing things, okay, there's the classic case.

442
00:49:33,780 --> 00:49:39,840
You have some simple functions, but you're writing code not because you know the answer,

443
00:49:39,840 --> 00:49:43,820
but because you don't know the answer.

444
00:49:43,820 --> 00:49:48,100
So what do you do?

445
00:49:48,100 --> 00:49:53,980
So several things I would do. I'd break down the big complicated code I don't know the

446
00:49:53,980 --> 00:50:01,420
answer to into small pieces and make sure each individual piece is tested and correct.

447
00:50:01,420 --> 00:50:07,940
So that way, known things are simple, but the complicated thing, hopefully it's correct

448
00:50:07,940 --> 00:50:10,220
with the known parts.

449
00:50:10,220 --> 00:50:15,380
Can you get any really simple sample data? So, for example, you make a test function

450
00:50:15,380 --> 00:50:20,380
that processes millions of records from somewhere,

451
00:50:20,740 --> 00:50:23,620
you give it a list of two records

452
00:50:23,620 --> 00:50:27,140
and see, can it average this correctly?

453
00:50:27,140 --> 00:50:29,120
So basically, in your mind,

454
00:50:29,120 --> 00:50:31,140
there's all different ways you can think

455
00:50:31,140 --> 00:50:36,140
and try to simplify things down to a smaller example.

456
00:50:36,700 --> 00:50:39,220
And actually, after the break,

457
00:50:39,220 --> 00:50:41,900
we go to a test design episode

458
00:50:41,900 --> 00:50:44,300
where we'll talk about this a lot more.

459
00:50:44,300 --> 00:50:50,700
So maybe save some of these questions, and let's discuss more there. There'll be lots of time.

460
00:50:56,860 --> 00:50:58,300
Yeah, this is...

461
00:51:01,340 --> 00:51:07,020
Yeah, so many of these test design functions, let's get to in the test design episode and not

462
00:51:07,020 --> 00:51:12,860
now. Do you see a question, can you test a particular test function without running

463
00:51:12,860 --> 00:51:19,500
through all the functions in the file so you can tell pytest run only this particular test

464
00:51:19,500 --> 00:51:26,940
function and so on do you remember the syntax for that or is it something we should just

465
00:51:27,740 --> 00:51:35,180
i think it's dash k someone should check you can look it up as easy as we can look it up yeah um

466
00:51:35,180 --> 00:51:47,860
And we always have a test in the file that we're wishing to test.

467
00:51:47,860 --> 00:51:48,860
Not necessarily.

468
00:51:48,860 --> 00:51:54,060
You can split them into a separate file, and that's something people do often, or even

469
00:51:54,060 --> 00:51:56,500
a separate folder.

470
00:51:56,500 --> 00:52:06,580
Yeah, I guess for big enough projects I usually see the test in separate, yeah, separate files.

471
00:52:06,580 --> 00:52:18,460
Okay, there's a mention of this benefit, this approach versus plain code that can be automated.

472
00:52:18,460 --> 00:52:22,780
I'm not quite sure what that means, but I'll answer what I think it means.

473
00:52:22,780 --> 00:52:31,880
So what do I think it means?

474
00:52:31,880 --> 00:52:38,020
So you could have a separate script, basically a separate Python program that imports this

475
00:52:38,020 --> 00:52:42,520
module and then runs some stuff and says, is it correct or not?

476
00:52:42,520 --> 00:52:45,780
But that's not that different from what we have here.

477
00:52:45,780 --> 00:52:55,060
And PyTest provides some extra, like all these extra debugging error messages that deselect

478
00:52:55,060 --> 00:52:58,260
certain things if you want to test only that.

479
00:52:58,260 --> 00:53:01,020
It will print output if you want to or don't want to.

480
00:53:01,020 --> 00:53:07,820
But that being said, quite often I do basically have a test function that, you know, is just

481
00:53:07,820 --> 00:53:09,660
a plain Python code.

482
00:53:09,660 --> 00:53:13,900
It loads stuff, does an analysis, and prints, is it correct.

483
00:53:13,900 --> 00:53:18,300
So there's times they start that way or have that in addition.

484
00:53:18,300 --> 00:53:20,500
The point isn't to use OmniPyTest.

485
00:53:20,500 --> 00:53:27,660
The point is to see that you actually can make these tests.

486
00:53:27,660 --> 00:53:33,160
And maybe next let's go to automated test and leave more of these questions for the break

487
00:53:33,160 --> 00:53:39,860
and final discussion, because I think a lot might become clear later.

488
00:53:39,860 --> 00:53:47,520
So with that being said, let's see, first I'll come to my screen.

489
00:53:47,520 --> 00:53:51,200
So automated testing.

490
00:53:51,200 --> 00:53:54,020
So we did this ourselves.

491
00:53:54,020 --> 00:53:58,120
So what if you forget to run PyTest?

492
00:53:58,120 --> 00:54:04,400
So the part we did ourselves, well, we did write the tests, but we run PyTest manually,

493
00:54:04,400 --> 00:54:06,960
I guess is what you mean.

494
00:54:06,960 --> 00:54:12,040
If I forget to run it, the tests don't run, and then I can easily make changes that break

495
00:54:12,040 --> 00:54:13,040
something.

496
00:54:13,040 --> 00:54:14,040
Yeah.

497
00:54:14,040 --> 00:54:19,200
The tests don't really do much if they don't run, I guess.

498
00:54:19,200 --> 00:54:23,000
So it is nice to set it up so that they run automatically.

499
00:54:23,000 --> 00:54:25,040
Yeah.

500
00:54:25,040 --> 00:54:26,360
And that's what we're going to see.

501
00:54:26,360 --> 00:54:32,160
So we're going to see how GitHub, on every push and pull request, is able to run all

502
00:54:32,160 --> 00:54:35,080
of the tests that we have defined.

503
00:54:35,080 --> 00:54:40,200
So let's go back to [name]'s screen, if you're ready.

504
00:54:40,200 --> 00:54:41,200
Yes.

505
00:54:41,200 --> 00:54:42,200
Okay.

506
00:54:42,200 --> 00:54:44,800
So what should we do next?

507
00:54:44,800 --> 00:54:49,720
I guess we want to publish this.

508
00:54:49,720 --> 00:54:56,360
So we will take the same exercise repository, or is it the same one?

509
00:54:56,360 --> 00:54:59,560
Well, no, it says make a new one.

510
00:54:59,560 --> 00:55:01,600
Okay, fine.

511
00:55:01,600 --> 00:55:03,540
I guess we can use the same directory though,

512
00:55:03,540 --> 00:55:05,420
because it's pretty simple.

513
00:55:05,420 --> 00:55:07,180
So we do need to make a new repository

514
00:55:07,180 --> 00:55:08,660
because this is not the repository.

515
00:55:08,660 --> 00:55:11,100
This is not using Git.

516
00:55:11,100 --> 00:55:11,940
Okay, yeah.

517
00:55:13,460 --> 00:55:16,260
So I need to go and initialize.

518
00:55:16,260 --> 00:55:19,300
I could directly publish to GitHub as we go.

519
00:55:21,580 --> 00:55:22,420
Yeah.

520
00:55:23,660 --> 00:55:24,820
So let's try that,

521
00:55:24,820 --> 00:55:27,460
because we are going to need to do this at some point.

522
00:55:27,460 --> 00:55:28,300
Yeah.

523
00:55:28,300 --> 00:55:29,120
Right?

524
00:55:29,120 --> 00:55:29,960
Yes.

525
00:55:29,960 --> 00:55:36,280
see us use everything we've learned during the past two weeks. So we will see

526
00:55:36,280 --> 00:55:42,400
using Git from day one. You will see making GitHub repositories from

527
00:55:42,400 --> 00:55:50,400
days two and three. You will see us setting up a GitHub actions like in day

528
00:55:50,400 --> 00:56:05,000
5. And how this can be made social in day 4. So this might be fast, but we'll tell you

529
00:56:05,000 --> 00:56:08,160
and we'll slow down in the important parts.

530
00:56:08,160 --> 00:56:20,640
Okay so and yeah my the user interface here vs code does a good number of steps in one go

531
00:56:20,640 --> 00:56:28,160
when I click here. Okay so yeah what do I want to include not the pytest cache not pycache just

532
00:56:28,160 --> 00:56:34,400
example.py. Okay and there we go.

533
00:56:34,400 --> 00:56:41,720
Open GitHub.

534
00:56:41,720 --> 00:56:43,720
Where should I go next?

535
00:56:43,720 --> 00:56:51,680
Should I keep showing the code or should I go to the new GitHub page?

536
00:56:51,680 --> 00:56:56,040
Maybe let's show what we would really do in real life.

537
00:56:56,040 --> 00:57:00,160
So would you be using VS Code for?

538
00:57:00,160 --> 00:57:06,160
Well, okay, what do I want to do next? What's the next step?

539
00:57:06,160 --> 00:57:12,160
So, what I want to achieve is I want these tests to run automatically

540
00:57:12,160 --> 00:57:17,160
whenever I make a change, or at least often enough that I don't forget.

541
00:57:17,160 --> 00:57:20,160
So, how would you do that?

542
00:57:20,160 --> 00:57:26,160
So, wait, let's back up here.

543
00:57:26,160 --> 00:57:32,960
we're doing the example under automated testing and it gives us some sample code to add to a

544
00:57:32,960 --> 00:57:42,080
repository, a functions.py file. Okay, let's do that. I guess [name] will go and copy

545
00:57:43,600 --> 00:57:47,760
the functions. Yes, so we'll create a functions.py file

546
00:57:47,760 --> 00:57:59,080
This is quite similar, actually, to the example.py in that it has this add function.

547
00:57:59,080 --> 00:58:05,320
But now we also have a subtract function.

548
00:58:05,320 --> 00:58:08,760
It has this comment because I copied it directly from the notes.

549
00:58:08,760 --> 00:58:11,720
But you can also see that comment, so fine.

550
00:58:11,720 --> 00:58:13,880
It has a multiply function.

551
00:58:13,880 --> 00:58:23,720
And we will also have this one I missed, Fahrenheit to Celsius, or convert Fahrenheit to Celsius,

552
00:58:23,720 --> 00:58:25,840
which uses these other functions.

553
00:58:25,840 --> 00:58:26,840
Okay.

554
00:58:26,840 --> 00:58:33,160
So, this code is provided in the exercise, and we will commit it and push it to GitHub

555
00:58:33,160 --> 00:58:34,160
now.

556
00:58:34,160 --> 00:58:35,160
Okay.

557
00:58:35,160 --> 00:58:38,160
So, add it.

558
00:58:38,160 --> 00:58:43,600
And [name] is quickly here doing all the git committing stuff.

559
00:58:43,600 --> 00:58:46,600
We're not explaining it again.

560
00:58:46,600 --> 00:58:47,600
Yes.

561
00:58:47,600 --> 00:58:52,600
Commit message and then push the changes to GitHub.

562
00:58:52,600 --> 00:58:57,600
Okay, there we are.

563
00:58:57,600 --> 00:59:01,480
But now we don't have any tests for this functions module.

564
00:59:01,480 --> 00:59:03,720
But we add that later.

565
00:59:03,720 --> 00:59:05,340
Okay.

566
00:59:05,340 --> 00:59:07,340
Or do we add it later?

567
00:59:07,340 --> 00:59:10,340
Yes, we do add it now.

568
00:59:10,340 --> 00:59:14,340
Yeah, that is, I guess, the next step.

569
00:59:14,340 --> 00:59:15,340
Yes.

570
00:59:15,340 --> 00:59:17,340
Or at least it's a necessary step on the way.

571
00:59:17,340 --> 00:59:20,340
So, what am I doing here?

572
00:59:20,340 --> 00:59:21,340
I should explain as I go.

573
00:59:21,340 --> 00:59:25,340
We add a file test underscore functions.py.

574
00:59:25,340 --> 00:59:34,340
So, as you said, PyTest will also check for files or modules with the name test underscore something.

575
00:59:34,340 --> 00:59:48,180
and now we actually don't directly have access to these functions so we we need to import them

576
00:59:48,900 --> 00:59:56,340
so let's say from functions import add should you copy and paste from the

577
00:59:56,340 --> 01:00:07,840
This is Python and it's also hopefully clear enough.

578
01:00:07,840 --> 01:00:15,420
So I will rename the convert Fahrenheit to Celsius function as I import it into F2C,

579
01:00:15,420 --> 01:00:20,780
but otherwise I'm directly importing the ones we have.

580
01:00:20,780 --> 01:00:25,420
And this first test is what we already saw.

581
01:00:25,420 --> 01:00:31,900
two and three equals five and add space and ship equals spaceship should i include the other test

582
01:00:31,900 --> 01:00:41,980
as well yes copy everything we will uncomment it later okay so we'll keep them commented for now

583
01:00:43,180 --> 01:00:51,340
and i suppose um i feel like i'm done with something so i will add and commit

584
01:00:51,340 --> 01:01:07,540
So, and now [name] is doing the committing, which we pushed for.

585
01:01:07,540 --> 01:01:16,420
Okay, so step two in our exercise, or demo, is to run the test locally.

586
01:01:16,420 --> 01:01:24,900
Okay. So, we did that already. Let's try it. So, now we can just run PyTest and it will

587
01:01:24,900 --> 01:01:32,740
find the test underscore file. This test underscore functions. And it will find one

588
01:01:32,740 --> 01:01:34,780
test and it passed.

589
01:01:34,780 --> 01:01:35,780
Yes.

590
01:01:35,780 --> 01:01:39,540
So, collected one item means there was one test.

591
01:01:39,540 --> 01:01:40,540
Okay.

592
01:01:40,540 --> 01:01:43,180
Okay. So, seems good.

593
01:01:43,180 --> 01:01:49,180
So, next up in our demo is to enable automated testing.

594
01:01:49,180 --> 01:01:53,180
So, now we switch to the GitHub view.

595
01:01:53,180 --> 01:01:58,180
Okay. So, let's go there.

596
01:01:58,180 --> 01:02:01,180
And this is the GitHub repository.

597
01:02:01,180 --> 01:02:06,180
It opened in my browser window when I clicked open.

598
01:02:06,180 --> 01:02:09,180
And it is this PyTest example.

599
01:02:09,180 --> 01:02:12,180
So, it has an example.py.

600
01:02:12,180 --> 01:02:15,660
Um, I need to refresh and it should have more files.

601
01:02:15,820 --> 01:02:16,140
Yes.

602
01:02:16,180 --> 01:02:16,460
Okay.

603
01:02:16,460 --> 01:02:17,820
Functions and test functions.

604
01:02:17,820 --> 01:02:18,100
Good.

605
01:02:18,300 --> 01:02:18,780
Yes.

606
01:02:20,380 --> 01:02:25,340
So we can, now we do, this is the main part, the main point of what we're doing

607
01:02:25,340 --> 01:02:33,580
here, so we will tell GitHub that every time there's a push run pytest on test

608
01:02:33,580 --> 01:02:41,420
functions.py and we do that via GitHub actions, which if you look at the top of

609
01:02:41,420 --> 01:02:54,480
the tab bar. There's actions. So click there. OK. And I don't have any actions yet, so it's

610
01:02:54,480 --> 01:03:01,760
suggesting a number of things I can run. Yes. And one of them is Python application. Yes.

611
01:03:01,760 --> 01:03:09,120
OK. So go there. And it even nicely says create and test a Python application. Yeah. And it

612
01:03:09,120 --> 01:03:13,340
It gives us a bunch of boilerplate.

613
01:03:13,340 --> 01:03:20,080
So this basically is what you need here.

614
01:03:20,080 --> 01:03:23,680
But I think there's some edits that we'll do.

615
01:03:23,680 --> 01:03:24,680
Okay.

616
01:03:24,680 --> 01:03:28,160
What do we need to change?

617
01:03:28,160 --> 01:03:33,960
So it says to modify the highlighted lines.

618
01:03:33,960 --> 01:03:40,840
So we need to say jobs pull requests have write access.

619
01:03:40,840 --> 01:03:47,640
I'd probably copy from the notes.

620
01:03:47,640 --> 01:03:52,760
So it needs write access to pull requests.

621
01:03:52,760 --> 01:03:58,120
Oh, right, to post comments to the pull requests.

622
01:03:58,120 --> 01:04:00,840
And we'll see what these things do later.

623
01:04:00,840 --> 01:04:11,320
is basically lots of different configuration. Yeah okay so let's add um under install dependencies

624
01:04:11,320 --> 01:04:19,160
we need to tell it to install flake 8 pytest and pytest-cov. So this is something called

625
01:04:19,160 --> 01:04:26,840
test coverage which we will talk about later. And then down here below instead of just running

626
01:04:26,840 --> 01:04:32,840
to test, which would work and run the tests, we will also use this coverage report then. Yes,

627
01:04:34,120 --> 01:04:43,080
and let's see, does this match? So, before we leave this window, let's slow down and take a

628
01:04:43,080 --> 01:04:52,040
look at what it does. This is called YAML, and it's a configuration, well, it's a simple markup

629
01:04:52,040 --> 01:05:03,880
language. It defines data. So we see on line 15 there's jobs. There's a job with the name build.

630
01:05:04,520 --> 01:05:11,320
It gives some permissions and steps. And this uses, it says first checkout. It sets up Python.

631
01:05:12,280 --> 01:05:20,360
It installs some things. And if you look at lines 31 to 33, this doesn't look, this is basically

632
01:05:20,360 --> 01:05:26,360
the same kind of stuff you can run in a terminal. So this is basically creating a virtual machine

633
01:05:26,360 --> 01:05:34,120
of some sort and letting you run Python stuff inside. There's lint with flake 8.

634
01:05:35,560 --> 01:05:43,080
Line 42. We see it runs pytest with this extra option coverage report. So

635
01:05:43,080 --> 01:05:49,840
So these options are new to us, but PyTest is not new.

636
01:05:49,840 --> 01:05:54,000
So it's running the same thing we've run before, but automatically.

637
01:05:54,000 --> 01:06:02,280
And if PyTest detects any errors, it will exit with a failure, and then GitHub Actions

638
01:06:02,280 --> 01:06:08,680
will detect PyTest failed, and then give us a warning.

639
01:06:08,680 --> 01:06:10,840
And that's the main point here.

640
01:06:10,840 --> 01:06:22,280
Yeah, so when will it run? It will run whenever we push to the main branch or whenever there's

641
01:06:22,280 --> 01:06:26,600
a pull request to the main branch, which is often enough for me.

642
01:06:26,600 --> 01:06:28,400
Yeah, okay.

643
01:06:28,400 --> 01:06:29,400
Okay.

644
01:06:29,400 --> 01:06:34,080
So, yes, so it says commit changes.

645
01:06:34,080 --> 01:06:39,800
Okay, let's do that.

646
01:06:39,800 --> 01:06:50,800
And testing workflow. And commit. Okay. Did something happen?

647
01:06:50,800 --> 01:07:00,620
Yeah. Can we go back to the code view? Yeah. There's this yellow thing that we saw previously.

648
01:07:00,620 --> 01:07:03,500
So what have we done now?

649
01:07:03,500 --> 01:07:08,020
So we have made some code locally.

650
01:07:08,020 --> 01:07:10,940
We set up PyTest.

651
01:07:10,940 --> 01:07:17,940
And now we've told GitHub to run the test we've made on every push and pull.

652
01:07:17,940 --> 01:07:24,380
And yes, there's been a lot of different code and stuff we've pasted here and there.

653
01:07:24,380 --> 01:07:32,240
you can you don't like we have gone fast you haven't had time to read everything

654
01:07:32,240 --> 01:07:39,520
we've been pasted the point is that now

655
01:07:39,520 --> 01:07:44,240
github is running it as we see from this yellow dot can you click on the yellow

656
01:07:44,240 --> 01:07:53,840
dot yeah so it is actually done okay we can still go take a look what it's done

657
01:07:53,840 --> 01:08:01,200
And here is the section where it runs test.

658
01:08:01,200 --> 01:08:03,800
So it has completed the test.

659
01:08:03,800 --> 01:08:04,800
Yes.

660
01:08:04,800 --> 01:08:05,800
So.

661
01:08:05,800 --> 01:08:06,800
Okay.

662
01:08:06,800 --> 01:08:07,800
Okay.

663
01:08:07,800 --> 01:08:08,800
Sorry.

664
01:08:08,800 --> 01:08:15,280
I out of habit moved back, but is there something else you want to point out there?

665
01:08:15,280 --> 01:08:16,280
Yeah.

666
01:08:16,280 --> 01:08:17,280
Can we go back?

667
01:08:17,280 --> 01:08:18,280
Yeah.

668
01:08:18,280 --> 01:08:22,180
Let's give people time to take a look and see.

669
01:08:22,180 --> 01:08:29,300
So now here, GitHub has run all of the different rules we've defined.

670
01:08:29,300 --> 01:08:37,420
It checked out the repository, set up Python, run PyTest, and PyTest worked.

671
01:08:37,420 --> 01:08:43,420
So it will run it on every commit.

672
01:08:43,420 --> 01:08:47,020
So let's continue.

673
01:08:47,020 --> 01:08:52,440
So we've done this verification that it's run.

674
01:08:52,440 --> 01:08:57,080
So let's add a test that reveals a problem.

675
01:08:57,080 --> 01:09:01,080
So I guess [name] can go back to VS Code.

676
01:09:01,080 --> 01:09:02,080
Yes.

677
01:09:02,080 --> 01:09:03,720
Just move the window here.

678
01:09:03,720 --> 01:09:09,160
So I believe that is this next step.

679
01:09:09,160 --> 01:09:10,160
Test subtract.

680
01:09:10,160 --> 01:09:11,160
Yes.

681
01:09:11,160 --> 01:09:15,200
So first, can you do git pull to get all the updates?

682
01:09:15,200 --> 01:09:16,200
Yes.

683
01:09:16,200 --> 01:09:25,640
that happens by clicking here and now we can see that we have added this workflow here so now

684
01:09:25,640 --> 01:09:32,520
github has the file we added on github is now present in our local repository

685
01:09:32,520 --> 01:09:36,680
so since we're up to date we can do some new things okay

686
01:09:36,680 --> 01:09:41,680
Okay, so let's uncomment this function and save.

687
01:09:44,920 --> 01:09:49,920
And now, given that you said we were uncovering a problem,

688
01:09:50,800 --> 01:09:52,920
I assume this test will fail if we run it.

689
01:09:54,480 --> 01:09:57,200
So should we try it locally or just push

690
01:09:57,200 --> 01:09:58,400
and see what happens?

691
01:09:58,400 --> 01:10:00,240
Commit and push.

692
01:10:00,240 --> 01:10:01,080
Okay.

693
01:10:01,080 --> 01:10:14,680
test subtract so we added a new test for the subtract function and push it to github and

694
01:10:14,680 --> 01:10:23,120
i will show the github view again go to the main view and now it's again running the tests

695
01:10:23,120 --> 01:10:33,440
Okay let's go to the action view instead so it shows the previous one that worked and now there's

696
01:10:33,440 --> 01:10:41,840
a new push that's well the tests for that new push are running let's see it usually doesn't

697
01:10:41,840 --> 01:10:52,000
take very long but we'll see oh you can actually see how far it's progressed

698
01:10:53,120 --> 01:10:57,000
So by clicking on it, it's done.

699
01:10:57,000 --> 01:10:58,800
We see it fixed.

700
01:10:58,800 --> 01:10:59,960
Yes.

701
01:10:59,960 --> 01:11:00,460
OK.

702
01:11:03,400 --> 01:11:06,280
Now I think it's the time I take over the screen share

703
01:11:06,280 --> 01:11:10,920
as your partner and make the fix.

704
01:11:10,920 --> 01:11:16,400
So I will click here.

705
01:11:16,400 --> 01:11:20,400
So can someone, or actually, I can

706
01:11:20,400 --> 01:11:24,960
paste this repository in the notes.

707
01:11:24,960 --> 01:11:29,120
So here I am, I'm logged in.

708
01:11:29,120 --> 01:11:34,080
Why don't I see the dot that shows the failure?

709
01:11:34,080 --> 01:11:37,840
If I click on Action,

710
01:11:38,160 --> 01:11:41,680
I see a test failure.

711
01:11:43,200 --> 01:11:47,760
So what do I do?

712
01:11:47,760 --> 01:11:56,120
So first I'll make an issue about it. So I click on the issues tab, click on new

713
01:11:56,120 --> 01:12:01,840
issue. I'll be quick about it.

714
01:12:01,840 --> 01:12:20,460
So, this issue says there's a bug in test subscrap outwork on it, so basically someone

715
01:12:20,460 --> 01:12:23,740
knows that it's there and it's being fixed.

716
01:12:23,740 --> 01:12:30,040
Of course, if someone was working on your own project, you would just fix it.

717
01:12:30,040 --> 01:12:33,720
But here we're showing if something was bigger, took more time, and we wanted to synchronize

718
01:12:33,720 --> 01:12:37,880
better.

719
01:12:37,880 --> 01:12:39,680
So how do I fix it now?

720
01:12:39,680 --> 01:12:44,960
Well, we go back to day three, and I would make a pull request.

721
01:12:44,960 --> 01:12:50,720
And I guess I will do that through the GitHub web interface.

722
01:12:50,720 --> 01:12:56,200
So I click on code, and we know from, ah, now there's the red X.

723
01:12:56,200 --> 01:13:02,360
So we know from GitHub that I can edit directly here.

724
01:13:02,360 --> 01:13:07,160
So I click on Functions.

725
01:13:07,160 --> 01:13:10,200
And I've identified the problem.

726
01:13:10,200 --> 01:13:16,000
I know that I can click on Edit in GitHub and make the change.

727
01:13:16,000 --> 01:13:18,880
So if this was a big enough project,

728
01:13:18,880 --> 01:13:21,240
I'd be fixing it on my own computer.

729
01:13:21,240 --> 01:13:23,840
But for a demo, this is good.

730
01:13:23,840 --> 01:13:30,080
I need to fork the repository, and notice that [name] hasn't given me any permissions

731
01:13:30,080 --> 01:13:31,080
here.

732
01:13:31,080 --> 01:13:36,400
So for any other code online, I could be doing the same things.

733
01:13:36,400 --> 01:13:42,640
So I fixed the subtract function with one line.

734
01:13:42,640 --> 01:13:47,520
I will commit changes.

735
01:13:47,520 --> 01:13:57,840
So this is all happening quickly, but it's day three kinds of things.

736
01:13:57,840 --> 01:14:08,000
commit message will be, and then the extended descriptions.

737
01:14:08,000 --> 01:14:31,120
So, I'm giving some notes about what it was, and I will propose changes.

738
01:14:31,120 --> 01:14:36,080
So, here we go.

739
01:14:36,080 --> 01:14:40,800
So, again, this is day 3 kind of stuff.

740
01:14:40,800 --> 01:14:51,360
So there's my head repository of RkDarst, and I'm sending it to the other repository.

741
01:14:51,360 --> 01:15:02,640
There I see the changes, I will create pull request, and it's the same things here.

742
01:15:02,640 --> 01:15:11,000
I should include in the description fixes number one, so the issue number, so the issue

743
01:15:11,000 --> 01:15:20,520
will be automatically linked and closed and created.

744
01:15:20,520 --> 01:15:29,880
And now, here's the cool part.

745
01:15:29,880 --> 01:15:35,400
So it says that I cannot update it.

746
01:15:35,400 --> 01:15:46,480
And also, I have a feeling that it's not running the tests because now GitHub doesn't run tests

747
01:15:46,480 --> 01:15:48,060
from new contributors.

748
01:15:48,060 --> 01:15:51,280
So let's switch back to [name]'s screen, if you're ready.

749
01:15:51,280 --> 01:15:52,280
Yes.

750
01:15:52,280 --> 01:15:53,280
I'm ready.

751
01:15:53,280 --> 01:15:54,280
Okay.

752
01:15:54,280 --> 01:15:55,280
Okay.

753
01:15:55,280 --> 01:15:57,320
So if you go to the pull request view.

754
01:15:57,320 --> 01:15:58,320
Yeah.

755
01:15:58,320 --> 01:16:01,040
I noticed I have a new issue and a new pull request.

756
01:16:03,280 --> 01:16:06,960
So if I go to the new pull request, fix the subtract function. Nice.

757
01:16:09,920 --> 01:16:16,480
Yeah, the test hasn't started running because I haven't approved that [name] can run tests

758
01:16:17,520 --> 01:16:21,760
in my repository or can run workflows. So I will approve it.

759
01:16:21,760 --> 01:16:27,600
Okay.

760
01:16:27,600 --> 01:16:28,600
And now they're running.

761
01:16:28,600 --> 01:16:29,600
It's running.

762
01:16:29,600 --> 01:16:33,840
And we just wait a second for it to turn green.

763
01:16:33,840 --> 01:16:39,800
And we will see, does it work?

764
01:16:39,800 --> 01:16:44,000
Okay.

765
01:16:44,000 --> 01:16:49,520
that's happening. It says it fixes, changed plus to one, plus to minus.

766
01:16:51,120 --> 01:16:57,520
Oh, it failed. I wonder why. I was going to go here to see,

767
01:16:57,520 --> 01:17:06,800
so the plus has been changed to minus. That seems fine. Okay, let's take a look at the,

768
01:17:06,800 --> 01:17:10,720
I guess the fastest way is to go through the pull request. Yeah, let's click on details.

769
01:17:10,720 --> 01:17:13,600
What happened?

770
01:17:13,760 --> 01:17:18,560
Ah, the coverage report path failed. So the tests passed, but

771
01:17:18,560 --> 01:17:22,880
something failed here. Resource not accessible by integration.

772
01:17:22,880 --> 01:17:29,200
Well, okay. This is something, well,

773
01:17:29,200 --> 01:17:33,440
no, this is something we added. Yeah. I guess we'll leave it be.

774
01:17:33,440 --> 01:17:36,720
I guess this is what we call the demo effect, so

775
01:17:36,720 --> 01:17:46,160
something in github has changed but okay well the test did pass so i'm fine with merging the pull

776
01:17:46,160 --> 01:17:58,800
request yeah confirm merge here we go and the pull request is automatically closed and the issue is

777
01:17:58,800 --> 01:18:07,840
also automatically closed yes okay now since the main branch has been updated it's actually

778
01:18:07,840 --> 01:18:15,280
again running the test here i'm kind of interested in it whether it will actually work here or not

779
01:18:16,880 --> 01:18:24,160
but we'll see i guess this is because it couldn't write to the pull request or something

780
01:18:24,160 --> 01:18:29,360
or save the data yes now it did work okay um

781
01:18:32,640 --> 01:18:38,880
so actually creating the coverage thing doesn't work from a pull request now yeah

782
01:18:42,080 --> 01:18:49,360
yeah well um we can fix that later but um and we also noticed the issue is closed

783
01:18:49,360 --> 01:19:00,240
Yes. So I guess I will switch back to my screen and let's wrap up and go to the

784
01:19:00,240 --> 01:19:11,220
break. Yeah. Okay. So this was relatively fast work here. We used PyTest. We made

785
01:19:11,220 --> 01:19:26,980
same example. We committed to GitHub. We added a test in GitHub which can run PyTest on every

786
01:19:26,980 --> 01:19:33,700
single commit, whether [name] makes it or whether someone makes the commit in a pull request.

787
01:19:33,700 --> 01:19:46,380
test. And this can really remove the friction in contributing to projects. So I make a project,

788
01:19:46,380 --> 01:19:53,580
I add some tests. Once people start contributing, I'll make sure that the GitHub tests are set

789
01:19:53,580 --> 01:20:00,940
up. So that way, when someone said something, I can see really quickly, has it worked? And

790
01:20:00,940 --> 01:20:10,060
the person submitting can see before and see, okay, like, have I done everything I need before the

791
01:20:11,180 --> 01:20:18,140
original author should take their time to look at it? And this helps a lot.

792
01:20:20,540 --> 01:20:27,180
It works for both the centralized and forking workflows for one repository or multiple

793
01:20:27,180 --> 01:20:35,740
repositories. And GitHub Actions can run on Windows, Mac, Linux operating systems. It has

794
01:20:35,740 --> 01:20:43,100
this marketplace to run different kinds of things easily. Basically it's this thing that automatically

795
01:20:43,100 --> 01:20:52,460
adds things to you. It's completely free for public projects in line with GitHub's normal

796
01:20:52,460 --> 01:21:02,860
philosophy. But this is not only a GitHub thing. So GitLab has a CI kind of thing. There's other

797
01:21:02,860 --> 01:21:14,940
services, some of which provide free time and builds for open source projects. So I propose

798
01:21:14,940 --> 01:21:26,540
now that we go to our break, and we can keep taking questions then. And the next episode,

799
01:21:26,540 --> 01:21:32,300
we will go into test design. And there, a lot of the question people have been asking,

800
01:21:32,860 --> 01:21:38,300
like, how does this apply to a big, complicated project that's not these really simple functions?

801
01:21:38,300 --> 01:21:46,900
we will start discussing them then. So start adding your questions. Anything else for now?

802
01:21:46,900 --> 01:21:56,020
No, I think that's fine. Okay, get to the hard questions in the next section.

803
01:21:56,020 --> 01:22:05,300
So let's go to the break and see you in 10 minutes at 13 past hour. Bye.

804
01:22:05,300 --> 01:22:06,860
Bye.

805
01:22:08,300 --> 01:22:10,360
you

806
01:22:38,300 --> 01:22:40,360
you

807
01:23:08,300 --> 01:23:10,360
you

808
01:23:38,300 --> 01:23:40,360
you

809
01:24:08,300 --> 01:24:10,360
you

810
01:24:38,300 --> 01:24:40,360
you

811
01:25:08,300 --> 01:25:10,360
you

812
01:25:38,300 --> 01:25:40,360
you

813
01:26:08,300 --> 01:26:10,360
you

814
01:26:38,300 --> 01:26:40,360
you

815
01:27:08,300 --> 01:27:10,360
you

816
01:27:38,300 --> 01:27:40,360
you

817
01:28:08,300 --> 01:28:10,360
you

818
01:28:38,300 --> 01:28:40,360
you

819
01:29:08,300 --> 01:29:10,360
you

820
01:29:38,300 --> 01:29:40,360
you

821
01:30:08,300 --> 01:30:10,360
you

822
01:30:38,300 --> 01:30:40,360
you

823
01:31:08,300 --> 01:31:10,360
you

824
01:31:38,300 --> 01:31:40,360
you

825
01:32:08,300 --> 01:32:10,360
you

826
01:32:38,300 --> 01:32:40,360
you

827
01:33:08,300 --> 01:33:17,300
We are back, I hope.

828
01:33:17,300 --> 01:33:28,660
And I see some messages from the streaming software, I hope that's not bad.

829
01:33:28,660 --> 01:33:29,660
So —

830
01:33:29,660 --> 01:33:33,820
Well, is everything okay with people in the stream?

831
01:33:33,820 --> 01:33:34,820
Yeah.

832
01:33:34,820 --> 01:33:36,740
And now we go to test design.

833
01:33:36,740 --> 01:33:42,900
And people have been asking previously, how does this work whenever I have some really

834
01:33:42,900 --> 01:33:43,940
complicated code?

835
01:33:43,940 --> 01:33:47,080
I can't make a two-line function that tests it.

836
01:33:47,080 --> 01:33:52,180
Should I really have a lot of small test functions for everything?

837
01:33:52,180 --> 01:33:55,340
And now is the time to ask those questions.

838
01:33:55,340 --> 01:34:00,940
We probably can't answer everything, but write it in the notes.

839
01:34:00,940 --> 01:34:03,620
And this is really the core here.

840
01:34:03,620 --> 01:34:10,820
It's really easy to give these demos and show usePyTest on a one-line function.

841
01:34:10,820 --> 01:34:19,060
Whenever you're testing a software that uses random numbers and has thousands of lines

842
01:34:19,060 --> 01:34:22,460
and has no one fixed result, how do you even test it?

843
01:34:22,460 --> 01:34:23,980
How do you make sure it's correct?

844
01:34:23,980 --> 01:34:27,820
I mean, you have to have something, right?

845
01:34:27,820 --> 01:34:32,300
Because if you don't even know what the right answer would be, how do you know that it's

846
01:34:32,300 --> 01:34:40,580
it's giving what it should.

847
01:34:40,580 --> 01:34:48,060
So yeah, and for a lot of it, there's a first question that's been asked, do you have a

848
01:34:48,060 --> 01:34:53,900
practical way to test load-level functions that interact with external hardware?

849
01:34:53,900 --> 01:35:01,440
So once I was reading something, and it was like, here's a way you could run the Linux

850
01:35:01,440 --> 01:35:10,000
kernel on custom hardware and it has some network interface which is used for running tests so

851
01:35:11,520 --> 01:35:16,240
when you have questions like this if you say to me okay this is hard to test

852
01:35:16,880 --> 01:35:20,640
do some web searches and i bet someone has figured out how to do it before

853
01:35:23,520 --> 01:35:30,880
just because well yeah yeah i assume this is a common problem i've dealt with it a couple of

854
01:35:30,880 --> 01:35:41,040
times. I guess in practice it ended up being quite similar. It's not exact, so you need

855
01:35:41,040 --> 01:35:49,080
some tolerance. You check that an absolute value is smaller than a number. And of course

856
01:35:49,080 --> 01:35:54,000
the tests run slower because a physical thing needs to move from place to place while it's

857
01:35:54,000 --> 01:35:55,000
running.

858
01:35:55,000 --> 01:36:02,120
And maybe we don't see it here, but a lot of test design is structuring the code so

859
01:36:02,120 --> 01:36:05,000
that it can be tested.

860
01:36:05,000 --> 01:36:11,120
So if you have one 1000 line function, that's really hard to test.

861
01:36:11,120 --> 01:36:19,400
But can you break it down into 800 line functions, which are complicated but can be tested, but

862
01:36:19,400 --> 01:36:28,360
the unknown part is just contained in a very few parts, so what you can't test you can audit

863
01:36:28,360 --> 01:36:35,960
separately. So anyway, this episode we're about to cover is normally an

864
01:36:38,280 --> 01:36:43,240
exercise and we would give you a lot of time to basically...

865
01:36:43,240 --> 01:36:49,620
Well, I'll scroll down quickly here.

866
01:36:49,620 --> 01:36:56,720
You would see there's a lot of different sample functions, and we would challenge you to test

867
01:36:56,720 --> 01:36:57,720
them.

868
01:36:57,720 --> 01:37:03,560
But we're going to do that ourselves.

869
01:37:03,560 --> 01:37:09,760
Do we have time to do all of them, or should we focus on a few?

870
01:37:09,760 --> 01:37:11,920
Or should we just discuss some of them?

871
01:37:11,920 --> 01:37:18,320
do you think? Well I think probably not all of them. We probably don't have time to do

872
01:37:18,320 --> 01:37:31,160
all of them. I guess so if when things come up in the notes it's probably worth discussing

873
01:37:31,160 --> 01:37:39,440
and otherwise we could pick some of these and actually write the tests. So maybe let's

874
01:37:39,440 --> 01:37:47,040
start at the beginning and but depending on what people request we'll jump to

875
01:37:47,040 --> 01:37:55,000
those so I will switch to [name]'s screen. Okay and I'll be doing actual coding

876
01:37:55,000 --> 01:38:07,240
yes so I'll show the VS Code window. So do you make a new file to put these in?

877
01:38:07,240 --> 01:38:14,920
or that would make sense how would we so let's do this what's the first example

878
01:38:14,920 --> 01:38:21,320
the first factorial example the first example is this factorial function so

879
01:38:21,320 --> 01:38:26,920
this factorial dot pi since the solution is basically the same as what we've done

880
01:38:26,920 --> 01:38:33,560
already should we actually do it or should we discuss I'd say let's discuss

881
01:38:33,560 --> 01:38:43,240
yeah maybe it's enough to discuss. So maybe I'll switch back to my screen then.

882
01:38:43,240 --> 01:38:51,320
Okay. So we see here the proposed solution is basically what we've already

883
01:38:51,320 --> 01:39:06,540
already done. It adds, it tests some values. How do we test really big values? Can it even

884
01:39:06,540 --> 01:39:09,740
be tested in this case?

885
01:39:09,740 --> 01:39:19,820
There is a limit to how large a normal integer can be. Is there in modern Python, so there

886
01:39:19,820 --> 01:39:25,540
There is a way you can handle really big integers, but is that built-in in modern Python?

887
01:39:25,540 --> 01:39:26,540
I'm not actually sure.

888
01:39:26,540 --> 01:39:27,540
I think so.

889
01:39:27,540 --> 01:39:36,140
I think Python by default will go to big int.

890
01:39:36,140 --> 01:39:40,660
So I guess in theory this works for anything big.

891
01:39:40,660 --> 01:39:42,340
Are you happy with these tests here?

892
01:39:42,340 --> 01:39:44,000
Do you think this is enough?

893
01:39:44,000 --> 01:39:47,520
What else would you test?

894
01:39:47,520 --> 01:39:50,560
I would like to see some, to test some larger numbers,

895
01:39:50,560 --> 01:39:55,360
because these could easily be hard-coded into the function.

896
01:39:55,360 --> 01:39:56,920
So a larger integer.

897
01:39:57,880 --> 01:40:00,640
So I guess at least one example case

898
01:40:00,640 --> 01:40:04,120
that would go to the big integer realm.

899
01:40:04,120 --> 01:40:05,360
Yeah, that would be nice.

900
01:40:05,360 --> 01:40:06,640
Okay.

901
01:40:06,640 --> 01:40:08,720
And to check that that's correct,

902
01:40:08,720 --> 01:40:12,120
I think you would first compute it somehow by hand

903
01:40:12,120 --> 01:40:13,320
or in a different way.

904
01:40:13,320 --> 01:40:33,320
Another thing is what if you give it an incorrect thing, like something that's not a number or something that's a negative number or a non-integer number.

905
01:40:33,320 --> 01:40:44,140
So, in PyTest, we can actually test if it will raise an exception when you tell it to

906
01:40:44,140 --> 01:40:49,600
do a negative number.

907
01:40:49,600 --> 01:40:54,020
Should we do an example of that, or should we move on to more interesting things?

908
01:40:54,020 --> 01:40:56,980
I think time's ticking, maybe we should go on.

909
01:40:56,980 --> 01:41:05,400
But anyway, the point is, if you search PyTest test raises exception, you'll find an example

910
01:41:05,400 --> 01:41:11,820
and it will tell you how you can check does it actually give value error here.

911
01:41:11,820 --> 01:41:18,820
Okay.

912
01:41:18,820 --> 01:41:20,700
What's the next one?

913
01:41:20,700 --> 01:41:23,980
a function which receives two strings and returns a number.

914
01:41:27,580 --> 01:41:34,940
Okay. Is there any challenge here beyond what we've already done?

915
01:41:39,340 --> 01:41:44,540
I mean, yeah, it is. I could easily come up with a few examples and

916
01:41:44,540 --> 01:41:51,780
and compare them to the correct result that it does not seem like there's a lot of complication

917
01:41:51,780 --> 01:41:52,780
here.

918
01:41:52,780 --> 01:41:53,780
Yeah.

919
01:41:53,780 --> 01:42:02,740
This again, like maybe it's not a string, maybe, maybe it's something different.

920
01:42:02,740 --> 01:42:08,100
But then I think it would raise an error.

921
01:42:08,100 --> 01:42:23,980
Okay, so let's look at the solution quickly and I guess this last one here,

922
01:42:23,980 --> 01:42:35,460
word occurrence. So it tests, does it detect substrings? Which is actually a

923
01:42:35,460 --> 01:42:42,820
very interesting point. So triple a is contained within five a's?

924
01:42:47,620 --> 01:42:48,180
That's true.

925
01:42:51,460 --> 01:42:53,460
So I'm not sure if that test actually...

926
01:42:54,580 --> 01:42:58,260
That is not the result I would expect from a function called word occurrence.

927
01:42:58,260 --> 01:43:01,860
Yeah. So is the test wrong or is the function wrong?

928
01:43:01,860 --> 01:43:10,860
I mean maybe this is the intended result, but then it needs to be documented. I'm a bit surprised.

929
01:43:10,860 --> 01:43:20,860
So the point here is that by making the test, we considered the corner case and realized maybe we need to update our function also.

930
01:43:20,860 --> 01:43:23,860
Which is good.

931
01:43:23,860 --> 01:43:36,140
good. Okay. A function which reads a file and returns a number. Is this worth doing

932
01:43:36,140 --> 01:43:38,260
for real? Or?

933
01:43:38,260 --> 01:43:50,580
There's a lot of places in code where you need to read a file and do something, or where

934
01:43:50,580 --> 01:43:54,500
have a function that reads a file and does something with the contents. You could always

935
01:43:54,500 --> 01:44:00,900
split that into one function that reads the file, another one that only does the work on the contents

936
01:44:00,900 --> 01:44:07,860
and then test the second one separately. But still, yeah, I think occasionally testing,

937
01:44:07,860 --> 01:44:15,780
reading a file is worth the trouble. It's maybe not complicated enough that we want to go through

938
01:44:15,780 --> 01:44:25,060
it in detail. Yeah. The solution, I guess, should I just give the solution? Yeah, I guess.

939
01:44:25,060 --> 01:44:31,380
What I would do is make an example file and the test would be reading that example file

940
01:44:31,380 --> 01:44:41,060
or a number of example files. Yeah, so if you ask me, this is where my opinion would be

941
01:44:41,060 --> 01:44:46,340
this function is doing too many things. The function is both reading the file

942
01:44:46,340 --> 01:44:52,500
and doing some analysis. So doing the analysis is worth testing. Reading the

943
01:44:52,500 --> 01:45:01,540
file is difficult to test. So why doesn't this file... why aren't there two functions?

944
01:45:01,540 --> 01:45:08,420
One which reads the file and returns maybe the file object or the raw data,

945
01:45:08,420 --> 01:45:16,140
and another function which does the counting. And then the one that does the

946
01:45:16,140 --> 01:45:21,060
counting is easy to test because I give it some arguments and it gives the

947
01:45:21,060 --> 01:45:26,100
results out. And the one that reads the file maybe I wouldn't test yet because

948
01:45:26,100 --> 01:45:32,900
it's so simple and not worth my time to do this boilerplate code where I make a

949
01:45:32,900 --> 01:45:42,900
contemporary file, I open the file, I save the data, and then I run it on the file.

950
01:45:42,900 --> 01:45:50,420
Yeah, the file opening function is a built-in Python thing, so it doesn't need to be tested

951
01:45:50,420 --> 01:45:51,420
necessarily.

952
01:45:51,420 --> 01:45:52,420
Yeah.

953
01:45:52,420 --> 01:45:58,260
I mean, if this was a really big program that had thousands of users, then yeah, maybe testing

954
01:45:58,260 --> 01:46:04,260
opening the files would be worth it, but for most of what I do, I don't care that much.

955
01:46:05,140 --> 01:46:11,780
And this is a case where making it easier to test improves the function itself. So,

956
01:46:11,780 --> 01:46:18,900
for example, whenever I was working with someone once, they had a lot of really great

957
01:46:18,900 --> 01:46:30,320
analysis functions and a lot of really great analysis functions but the

958
01:46:30,320 --> 01:46:39,040
functions read a file and then did the analysis instead of doing so instead of

959
01:46:39,040 --> 01:46:45,300
having it separate so that whenever they wanted to apply this to a new case like a

960
01:46:45,300 --> 01:46:51,700
new kind of project, they had to arrange all of their data into exact same format, which didn't

961
01:46:51,700 --> 01:46:58,180
make sense anymore. So making it easier to test makes it more modular, which incidentally we'll

962
01:46:58,180 --> 01:47:13,300
talk about later, and would make the code better overall. Okay. What's next? Something with an

963
01:47:13,300 --> 01:47:19,140
external dependency. Is this worth testing?

964
01:47:20,900 --> 01:47:23,940
I mean a lot of functions will have external dependencies.

965
01:47:23,940 --> 01:47:28,980
It is worth testing unless you are just testing the dependency.

966
01:47:28,980 --> 01:47:33,460
But I mean hopefully the dependency will have its own tests.

967
01:47:33,460 --> 01:47:37,220
I'm not sure about this one though. So what's the point here? There's

968
01:47:37,220 --> 01:47:43,460
It's from reactor import max temperature.

969
01:47:43,460 --> 01:47:50,200
So this seems like it's really testing whether the reactor itself is working correctly.

970
01:47:50,200 --> 01:47:56,360
Although you could also think of it as testing whether you understand the reactor interface

971
01:47:56,360 --> 01:48:02,300
correctly or whether it's working the way you are assuming it should be working for

972
01:48:02,300 --> 01:48:03,300
your code.

973
01:48:03,300 --> 01:48:14,600
So it might be worth testing, but it's an edge case, I probably wouldn't.

974
01:48:14,600 --> 01:48:25,020
So yeah, this is what you said, is it testing if maxTemperature is set correctly, or if

975
01:48:25,020 --> 01:48:29,180
changing maxTemperature changes the function as you expect?

976
01:48:29,180 --> 01:48:37,340
But let's look at the solution and see.

977
01:48:37,340 --> 01:48:42,900
So here, this monkey patch is something from PyTest.

978
01:48:42,900 --> 01:48:49,060
And you might look at this and say, where is the value of monkey patch coming from?

979
01:48:49,060 --> 01:48:51,980
How does PyTest find this?

980
01:48:51,980 --> 01:48:55,780
So the answer is this is PyTest magic.

981
01:48:55,780 --> 01:49:01,500
So if you give it the name of some standard argument, it will pass in something to the

982
01:49:01,500 --> 01:49:07,180
functions and let you do things like this.

983
01:49:07,180 --> 01:49:13,760
So this means monkeypatch—oh, do you know the definition of monkeypatch?

984
01:49:13,760 --> 01:49:17,380
How would you describe it?

985
01:49:17,380 --> 01:49:26,380
I think monkey patch is a coding term, one module like this test function is changing

986
01:49:26,380 --> 01:49:33,020
the value of something on another module reactor when it's really not designed to be changed

987
01:49:33,020 --> 01:49:36,500
this way.

988
01:49:36,500 --> 01:49:46,060
So in plain language, this code means when this runs on reactor, it will set max temperature

989
01:49:46,060 --> 01:49:55,740
to 100, so it's a known value. Then the test can run. And then when the function is over,

990
01:49:55,740 --> 01:50:04,980
it will restore it to the previous value. So this allows us to make sure that maxTemperature

991
01:50:04,980 --> 01:50:12,020
is something known, so we're testing only this function and not the external dependency

992
01:50:12,020 --> 01:50:22,260
of what is max temperature.

993
01:50:22,260 --> 01:50:30,740
Have you ever done things like this?

994
01:50:30,740 --> 01:50:39,260
I can't think of an example, but I, well, yes, in some case, not often.

995
01:50:39,260 --> 01:50:49,720
So essentially replacing something in a library because, for example, I don't have access

996
01:50:49,720 --> 01:50:55,620
to certain hardware that's required to run the library, you just replace a function in

997
01:50:55,620 --> 01:51:02,220
that library with a function of your own and run that instead.

998
01:51:02,220 --> 01:51:06,220
So yeah, it is a useful thing to do.

999
01:51:06,220 --> 01:51:13,220
In most of my cases, the maxTemperature would be a constant, so I would just test the function.

1000
01:51:13,220 --> 01:51:17,740
And if the function fails, I have to see, did the maxTemperature change or did the function

1001
01:51:17,740 --> 01:51:19,060
break?

1002
01:51:19,060 --> 01:51:25,960
And that's a bit unfortunate, but there.

1003
01:51:25,960 --> 01:51:29,940
But in a case where maxTemperature is really defined somewhere else in dynamic, you have

1004
01:51:29,940 --> 01:51:34,180
to do something like this.

1005
01:51:34,180 --> 01:51:39,980
Or maybe the original function could be defined to take two arguments.

1006
01:51:39,980 --> 01:51:43,180
It's up to you.

1007
01:51:43,180 --> 01:51:49,180
Okay, should we continue?

1008
01:51:49,180 --> 01:51:53,940
Yeah.

1009
01:51:53,940 --> 01:52:02,140
Should we do this as the talk about this and then test-driven development, then do that

1010
01:52:02,140 --> 01:52:03,980
as a demo.

1011
01:52:03,980 --> 01:52:10,540
Sorry, so first talk about this and then do test room development as a demo.

1012
01:52:10,540 --> 01:52:11,540
Yeah.

1013
01:52:11,540 --> 01:52:14,060
Yeah, that makes sense.

1014
01:52:14,060 --> 01:52:19,700
So we have a class here, a Python class.

1015
01:52:19,700 --> 01:52:27,360
If you haven't seen this before, then don't worry, but we won't explain it now.

1016
01:52:27,360 --> 01:52:33,960
We see it sets, it models a pet.

1017
01:52:33,960 --> 01:52:40,720
The pet can be initialized with a name and hunger level.

1018
01:52:40,720 --> 01:52:47,460
And when we call this go for a walk function, then hunger gets incremented.

1019
01:52:47,460 --> 01:52:50,320
So how would we test this function?

1020
01:52:50,320 --> 01:52:51,320
What do we have?

1021
01:52:51,320 --> 01:52:52,920
What's the steps you would have to do?

1022
01:52:52,920 --> 01:53:00,700
Yeah, you would definitely have to create the object.

1023
01:53:00,700 --> 01:53:02,600
We have to create the object.

1024
01:53:02,600 --> 01:53:07,400
And then if this is something you wrote yourself, you know that it starts with hunger equals

1025
01:53:07,400 --> 01:53:08,400
zero.

1026
01:53:08,400 --> 01:53:09,400
Mm-hmm.

1027
01:53:09,400 --> 01:53:14,200
So I know one thing you can test is whether the – you can test the init function immediately.

1028
01:53:14,200 --> 01:53:15,200
Okay.

1029
01:53:15,200 --> 01:53:16,200
Yeah.

1030
01:53:16,200 --> 01:53:20,360
And then I suppose you would run go for a walk a few times with different starting values

1031
01:53:20,360 --> 01:53:23,160
and check that it increments by one.

1032
01:53:23,160 --> 01:53:27,760
So by starting value, do you mean we would set hunger to a certain value, then run go

1033
01:53:27,760 --> 01:53:31,360
for a walk, and then check the final hunger value?

1034
01:53:31,360 --> 01:53:32,360
Yes.

1035
01:53:32,360 --> 01:53:33,360
Okay, yeah.

1036
01:53:33,360 --> 01:53:34,360
At least that's one thing.

1037
01:53:34,360 --> 01:53:35,360
Makes sense.

1038
01:53:35,360 --> 01:53:36,360
Yeah.

1039
01:53:36,360 --> 01:53:38,360
Should we check the solution?

1040
01:53:38,360 --> 01:53:40,360
Yeah, let's see.

1041
01:53:40,360 --> 01:53:43,360
So, pet Fido.

1042
01:53:43,360 --> 01:53:48,360
Yes, so we check that it's initialized to the value we expect, zero.

1043
01:53:48,360 --> 01:53:55,160
We walk, and then we test isHunger greater now.

1044
01:53:55,160 --> 01:53:58,840
Okay, that should always work.

1045
01:53:58,840 --> 01:54:04,240
And then we set hunger to minus one, if that makes any sense.

1046
01:54:04,240 --> 01:54:12,080
We run go for a walk, and then we check isHunger zero.

1047
01:54:12,080 --> 01:54:20,200
And I guess what's the lesson here, that whenever we have something that changes state, we have

1048
01:54:20,200 --> 01:54:25,840
to set the state, check or run it, and then check the state after.

1049
01:54:25,840 --> 01:54:28,560
And this is pretty normal to do.

1050
01:54:28,560 --> 01:54:40,640
There was also a couple of questions about, for example, a stochastic thing or a thing

1051
01:54:40,640 --> 01:54:45,360
where you cannot necessarily predict the result, and we did talk about that a bit, but

1052
01:54:46,880 --> 01:54:52,320
I'm just saying it would be good to get there, have time for that as well.

1053
01:54:52,320 --> 01:54:54,480
Should we go straight to testing randomness next?

1054
01:54:55,760 --> 01:54:56,240
Yeah.

1055
01:54:56,240 --> 01:54:58,880
Let's do that. Okay, should we go back to your screen?

1056
01:55:00,160 --> 01:55:00,560
Okay.

1057
01:55:00,560 --> 01:55:01,280
Are you ready?

1058
01:55:01,280 --> 01:55:03,120
So I will get a...

1059
01:55:03,120 --> 01:55:06,320
Actually, first let's look over the thing here.

1060
01:55:06,320 --> 01:55:16,640
So, we want to test randomness. We can try fixed random seeds, so this is where basically

1061
01:55:16,640 --> 01:55:25,680
you pre-know what the value is, or we know what the random number generator would make.

1062
01:55:25,680 --> 01:55:34,520
We can see, does it follow the expected distribution, or we can look at it by eye and think, what's

1063
01:55:34,520 --> 01:55:37,320
the i thing we're looking at, yeah.

1064
01:55:37,320 --> 01:55:41,560
And there are often some hard parameters

1065
01:55:41,560 --> 01:55:44,880
you can test even in a completely random case

1066
01:55:44,880 --> 01:55:46,760
without setting the seed.

1067
01:55:46,760 --> 01:55:51,880
You can test that the value is not outside some boundary.

1068
01:55:51,880 --> 01:55:52,720
Yeah.

1069
01:55:52,720 --> 01:55:55,640
That it makes sense for what it is.

1070
01:55:55,640 --> 01:55:57,600
Yeah, like if I was testing randomness,

1071
01:55:57,600 --> 01:56:01,240
first I would test, well, I can make a test

1072
01:56:01,240 --> 01:56:02,720
and not even look at the value.

1073
01:56:02,720 --> 01:56:05,120
does the function run without errors?

1074
01:56:05,120 --> 01:56:05,640
Yeah.

1075
01:56:05,640 --> 01:56:10,680
Is the answer of a dice rule, if I run it 100 times,

1076
01:56:10,680 --> 01:56:16,120
is it always between 1 and 6 inclusive?

1077
01:56:16,120 --> 01:56:18,560
And if I trust my random number generator,

1078
01:56:18,560 --> 01:56:21,960
then that's better than nothing.

1079
01:56:21,960 --> 01:56:24,200
And we get better from there.

1080
01:56:24,200 --> 01:56:28,600
So if we're testing Yahtzee, do you know how Yahtzee even works?

1081
01:56:28,600 --> 01:56:40,000
Roughly, I mean, you throw dice and then you check if the dice match certain predefined

1082
01:56:40,000 --> 01:56:41,000
sets.

1083
01:56:41,000 --> 01:56:42,000
Yeah.

1084
01:56:42,000 --> 01:56:47,360
I guess we can look at the code in more detail.

1085
01:56:47,360 --> 01:56:52,840
Should I just copy paste the entire code to my file?

1086
01:56:52,840 --> 01:57:04,280
So in yatsi.py, okay, so what do we have here?

1087
01:57:04,280 --> 01:57:05,280
Can you explain?

1088
01:57:05,280 --> 01:57:12,280
We have a rollDice function, which it seems, oh, it rolls number of dice.

1089
01:57:12,280 --> 01:57:26,160
So it returns a list of a random choice between one and six inclusive integers and yeah, in

1090
01:57:26,160 --> 01:57:29,120
the parameters, you can set the number of dice you want to roll.

1091
01:57:29,120 --> 01:57:30,120
Okay.

1092
01:57:30,120 --> 01:57:31,120
Yeah.

1093
01:57:31,120 --> 01:57:32,120
Okay.

1094
01:57:32,120 --> 01:57:33,120
And then Yahtzee.

1095
01:57:33,120 --> 01:57:38,560
And then Yahtzee itself, play with five six-sided dice and three draws.

1096
01:57:38,560 --> 01:57:39,560
Okay.

1097
01:57:39,560 --> 01:57:46,600
So first, you roll some dice and you check.

1098
01:57:46,600 --> 01:57:51,560
I'm not exactly sure how this will end up playing Yahtzee, but let's see.

1099
01:57:51,560 --> 01:57:57,560
What's the most common number visible in the dice, I suppose.

1100
01:57:57,560 --> 01:57:59,980
That's the most common side.

1101
01:57:59,980 --> 01:58:03,060
And then how many of those do you have?

1102
01:58:03,060 --> 01:58:07,240
So if you have like three fours, this would be four and this would be three.

1103
01:58:07,240 --> 01:58:15,240
Yeah, I would expect the most common side is called the target side.

1104
01:58:15,240 --> 01:58:18,120
Number of same sides is how often.

1105
01:58:18,120 --> 01:58:20,360
So how many of those you have.

1106
01:58:20,360 --> 01:58:22,560
If it's equal to five, you return five.

1107
01:58:22,560 --> 01:58:23,560
Okay.

1108
01:58:23,560 --> 01:58:27,200
I guess you get five points from that.

1109
01:58:27,200 --> 01:58:35,120
If you get five of the same, then that matches something.

1110
01:58:35,120 --> 01:58:47,480
you can try again. Okay. Throw a second and a third time and do the same thing again.

1111
01:58:47,480 --> 01:58:55,820
Okay. And then it returns the number of same. So this is counting how in tree throws how

1112
01:58:55,820 --> 01:59:07,700
many of the same number you can get. And if you're rolling five dice, right? Yes. Okay.

1113
01:59:07,700 --> 01:59:13,460
So if you get five of the same, then you don't need to roll again. That's the best result

1114
01:59:13,460 --> 01:59:17,260
you can have. So then you just immediately return that.

1115
01:59:17,260 --> 01:59:21,860
Can we try running and see what it says?

1116
01:59:21,860 --> 01:59:22,860
Okay.

1117
01:59:22,860 --> 01:59:29,560
But to be honest, looking at all this stuff, it doesn't quite make sense, but we can use

1118
01:59:29,560 --> 01:59:31,240
it as a code.

1119
01:59:31,240 --> 01:59:33,280
It's not a standard Yahtzee game.

1120
01:59:33,280 --> 01:59:38,040
It's a much simpler version of Yahtzee.

1121
01:59:38,040 --> 01:59:47,480
This is running a number of games and then printing how many times you got five.

1122
01:59:47,480 --> 01:59:51,080
Okay, so back to the terminal.

1123
01:59:51,080 --> 01:59:56,840
So let's run the code.

1124
01:59:56,840 --> 02:00:00,400
It did not do anything.

1125
02:00:00,400 --> 02:00:04,280
If name equals main, why doesn't it print something?

1126
02:00:04,280 --> 02:00:05,280
Did you save the file?

1127
02:00:05,280 --> 02:00:06,280
Good question.

1128
02:00:06,280 --> 02:00:07,280
Okay.

1129
02:00:07,280 --> 02:00:09,000
I did not.

1130
02:00:09,000 --> 02:00:10,000
Okay.

1131
02:00:10,000 --> 02:00:11,000
That makes more sense.

1132
02:00:11,000 --> 02:00:12,000
Okay.

1133
02:00:12,000 --> 02:00:13,000
So six guys.

1134
02:00:13,000 --> 02:00:20,480
So it ran 100 games, and on six of those games, we got five dice showing the same number.

1135
02:00:20,480 --> 02:00:27,480
which is called a Yahtzee, I guess.

1136
02:00:27,480 --> 02:00:32,480
So, what are the different levels we could test it at?

1137
02:00:32,480 --> 02:00:34,480
Should we test just the dice roll first?

1138
02:00:34,480 --> 02:00:43,480
Yes, that makes sense. It's not a completely trivial function, so it makes sense to test it.

1139
02:00:43,480 --> 02:00:46,160
In practice, we always throw five dice,

1140
02:00:46,160 --> 02:00:48,640
but I guess since it's general enough,

1141
02:00:48,640 --> 02:00:51,800
you can test it in different ways.

1142
02:00:51,800 --> 02:00:54,680
Should I just write test directly into this?

1143
02:00:54,680 --> 02:00:58,440
Yeah, I'd say just throw it right in there.

1144
02:00:59,520 --> 02:01:03,240
Maybe just directly after the function I'm testing.

1145
02:01:03,240 --> 02:01:05,600
Yeah, let's do that.

1146
02:01:05,600 --> 02:01:08,280
So in the solution,

1147
02:01:08,280 --> 02:01:19,120
says test roll dice with no arguments and the solution suggests we set the

1148
02:01:19,120 --> 02:01:26,800
random number generator seed to zero and then we test the actual value. So this

1149
02:01:26,800 --> 02:01:32,440
function random dot seed it's so in random number generators there's

1150
02:01:32,440 --> 02:01:38,040
something called a seed and if you start with the same seed the generator will

1151
02:01:38,040 --> 02:01:44,920
always give the same values out. So that by giving the seed, we should be able to predict

1152
02:01:44,920 --> 02:02:05,400
what comes out. So we can assert RollDice5 equals the list, and from the solution the

1153
02:02:05,400 --> 02:02:15,800
values are 44135. So what's the problem here? Or what could be a problem here?

1154
02:02:17,880 --> 02:02:22,280
What if Python's random number generator has changed since we last did this workshop?

1155
02:02:24,120 --> 02:02:30,280
Yeah, well, then the numbers would be different. And I guess this test doesn't really tell you

1156
02:02:30,280 --> 02:02:36,760
whether the rollDice function has broken or whether the random has just changed in some way.

1157
02:02:40,360 --> 02:02:43,080
Yeah, should we try running it and let's see if this works?

1158
02:02:43,800 --> 02:02:44,040
Yeah.

1159
02:02:48,200 --> 02:02:49,800
So pytest.yatsi.py.

1160
02:02:51,640 --> 02:02:54,840
It didn't find a test because I didn't save it.

1161
02:02:54,840 --> 02:02:55,240
Okay.

1162
02:02:55,240 --> 02:02:58,440
Okay, trying again and it passed.

1163
02:02:58,440 --> 02:02:59,560
Okay, so it didn't change.

1164
02:03:00,280 --> 02:03:09,280
So this actually works pretty well for testing this function, I guess, so what's the disadvantage though?

1165
02:03:09,280 --> 02:03:18,280
If the function changes, these outputs would change, so it will verify it's always giving the same output,

1166
02:03:18,280 --> 02:03:28,280
but it doesn't give you any flexibility for changing how the dice are rolled, because then it would give something different.

1167
02:03:28,280 --> 02:03:44,700
Should we go to next? So there's test Yahtzee. So maybe this one you should copy from the

1168
02:03:44,700 --> 02:03:56,380
notes okay so basically in this test it will play Yahtzee 1 million times and

1169
02:03:56,380 --> 02:04:07,180
we'll check did we win approximately 4.6 percent of these million games okay this

1170
02:04:07,180 --> 02:04:15,900
also sets a random seed. Yeah, so this time we don't have the problem that if random changes

1171
02:04:15,900 --> 02:04:23,820
then the result will change because actually with any seed it should be roughly the same,

1172
02:04:23,820 --> 02:04:31,180
approximately the same result. If you're running it enough times it should work. Yeah, okay.

1173
02:04:31,180 --> 02:04:32,180
Okay.

1174
02:04:32,180 --> 02:04:35,500
The downside is that it takes a while.

1175
02:04:35,500 --> 02:04:36,500
Yeah.

1176
02:04:36,500 --> 02:04:37,500
Okay.

1177
02:04:37,500 --> 02:04:38,500
Okay.

1178
02:04:38,500 --> 02:04:39,500
It's done.

1179
02:04:39,500 --> 02:04:42,020
And now it says two tests passed.

1180
02:04:42,020 --> 02:04:43,180
Good.

1181
02:04:43,180 --> 02:04:48,700
So it was the correct number of wins.

1182
02:04:48,700 --> 02:04:51,140
Yes.

1183
02:04:51,140 --> 02:04:54,380
So I guess this is in the category of testing distributions.

1184
02:04:54,380 --> 02:05:00,580
We check that the, we set up a specific version of whatever random process is running and

1185
02:05:00,580 --> 02:05:09,580
And it needs to, given some correct number, plus, minus, whatever random error.

1186
02:05:09,580 --> 02:05:11,580
Yeah.

1187
02:05:11,580 --> 02:05:23,700
Okay, let's go back to my screen and see what is next.

1188
02:05:23,700 --> 02:05:30,460
So we did this testing randomness with Yahtzee.

1189
02:05:30,460 --> 02:05:35,700
Designing an end-to-end test. Maybe we should go to discussion now and let's see what people

1190
02:05:35,700 --> 02:05:42,780
say. So please start asking your hard testing questions.

1191
02:05:42,780 --> 02:05:48,860
So we'll get something. Designing an end-to-end test.

1192
02:05:48,860 --> 02:05:56,900
So this is basically... This is a bit hard to read quickly.

1193
02:05:56,900 --> 02:06:02,980
So it's basically some shell function, the unique command, and how would you test that?

1194
02:06:02,980 --> 02:06:09,000
And basically you give it some input data, and you check is the output what you expect.

1195
02:06:09,000 --> 02:06:14,620
And this is also a pretty reasonable way to test some things.

1196
02:06:14,620 --> 02:06:21,620
So, instead of each individual function, just run the whole thing on some known data.

1197
02:06:28,620 --> 02:06:30,620
Do you have any comments here?

1198
02:06:30,620 --> 02:06:37,620
Well, I mean, this is something that's very common with my projects.

1199
02:06:37,620 --> 02:06:48,660
So, they include some test data and you run some full process of, you take some actual

1200
02:06:48,660 --> 02:06:53,820
processing steps and it should always produce the same expected result.

1201
02:06:53,820 --> 02:07:00,020
As long as there's no randomness involved, this is a very useful test, very useful type

1202
02:07:00,020 --> 02:07:04,380
of test.

1203
02:07:04,380 --> 02:07:07,820
The downside is that it doesn't give you a lot of detail.

1204
02:07:07,820 --> 02:07:12,020
If it fails, you only know that your process fails.

1205
02:07:12,020 --> 02:07:15,820
So hopefully you also have a unit test failing at that point.

1206
02:07:15,820 --> 02:07:20,220
But if not, you kind of need to go digging and figure out what's going on.

1207
02:07:20,220 --> 02:07:21,220
Yeah.

1208
02:07:21,220 --> 02:07:29,700
I mean, my philosophy would be if the end-to-end test failed, at least I know and I'm in the

1209
02:07:29,700 --> 02:07:36,220
same place I would be otherwise, which is go down and debug it.

1210
02:07:36,220 --> 02:07:40,980
And maybe I would use the opportunity to guess where it is and make some unit tests now that

1211
02:07:40,980 --> 02:07:46,820
I know how it can't fail, or what's likely.

1212
02:07:46,820 --> 02:07:47,820
Let's go on.

1213
02:07:47,820 --> 02:07:53,220
More end-to-end testing, create an actual end-to-end test.

1214
02:07:53,220 --> 02:07:55,540
I think we don't have time for this.

1215
02:07:55,540 --> 02:08:04,540
Let's go to the notes and see what good questions people have.

1216
02:08:04,540 --> 02:08:11,640
So down to test design, there was this good question, do you have a practical way to test

1217
02:08:11,640 --> 02:08:14,800
low-level functions that interact with external hardware?

1218
02:08:14,800 --> 02:08:20,740
I think that's probably answered there well enough.

1219
02:08:20,740 --> 02:08:28,180
think we talked about something like that. Yeah, yeah. How to design a test without running a

1220
02:08:28,180 --> 02:08:43,940
whole solver whenever it's very complex like this? Hmm. I guess, yeah, can you break it down to

1221
02:08:43,940 --> 02:08:51,780
several small subroutines. Can you give it a, what's the simplest problem that has a known

1222
02:08:51,780 --> 02:09:02,420
non-trivial value? So this is not exactly answering this question, but some of the tests

1223
02:09:02,420 --> 02:09:08,740
that I was most proud of, it was during my postdoc, I was had to generate random graphs

1224
02:09:08,740 --> 02:09:14,660
according to some particular algorithm. And the algorithm was in fact the thing that

1225
02:09:15,700 --> 02:09:23,700
the research was about. So I had nothing to compare to. So how would I test this kind of thing?

1226
02:09:25,300 --> 02:09:29,460
Well of course I ran it and looked at it by eye, but is there some glaring bug here?

1227
02:09:30,420 --> 02:09:36,420
So here's what I did. My algorithm took some parameters. Basically the problem,

1228
02:09:36,420 --> 02:09:42,660
their probability of making links in certain forms. So I set this probability to zero,

1229
02:09:43,300 --> 02:09:49,700
and then I should get an empty graph out of it. And then I did it again, and I set the probability

1230
02:09:49,700 --> 02:09:55,220
to one, and I should get a complete graph. And since there were two or three different

1231
02:09:55,220 --> 02:09:59,700
parameters going in, I could do different combinations of these parameters,

1232
02:10:02,100 --> 02:10:12,100
0, 0, 1, 0, 1, 0, 1, 0, 0, with different probabilities that are 1 and 0, and C is the

1233
02:10:12,100 --> 02:10:18,180
graph that comes out what I expect, which is usually either a complete graph or an incomplete

1234
02:10:18,180 --> 02:10:27,460
graph or some known number of edges in there. And this actually let me define some bugs

1235
02:10:27,460 --> 02:10:40,460
in my code that I couldn't see by eye. And I was really happy with figuring this out.

1236
02:10:40,460 --> 02:10:48,460
think that's a good example of end-to-end. Is it end-to-end or is it integration? I'm not sure

1237
02:10:48,460 --> 02:10:54,060
what kind of test it is, but in the end the name doesn't matter. The point is it worked.

1238
02:10:54,700 --> 02:11:02,380
I guess that's an end-to-end test. It's not checking whether multiple libraries work together.

1239
02:11:02,380 --> 02:11:14,100
Okay, a good workflow in Python. What's this question? If I do a test, it will apply to

1240
02:11:14,100 --> 02:11:23,140
a version of the code. I need to add a test to a new function. Do I new test? This is

1241
02:11:23,140 --> 02:11:28,540
a really good point. So, test-driven design. This is something we skipped in the previous

1242
02:11:28,540 --> 02:11:37,980
lesson. You can, in fact, write a test before you write the function itself. So, this is,

1243
02:11:37,980 --> 02:11:43,420
is it extreme programming or something like that, test-driven development? Anyway, once I saw it

1244
02:11:43,420 --> 02:11:49,580
written this way, you want to add some new functionality. You make the test for it, and

1245
02:11:49,580 --> 02:11:55,340
then you run the test code and you see it fails because the function isn't defined. Good. Now,

1246
02:11:55,340 --> 02:12:03,100
you write code until that test passes. So this ensures that everything you do has a test

1247
02:12:03,740 --> 02:12:07,340
and you think about how you want to use the function before you write it.

1248
02:12:11,500 --> 02:12:19,980
So this is basically defining what the functionality should be

1249
02:12:20,620 --> 02:12:24,300
before you start writing it and first writing down what the function should do.

1250
02:12:25,340 --> 02:12:31,340
and only then writing the function, which makes sense.

1251
02:12:31,340 --> 02:12:44,340
But it really depends on how you want to do things.

1252
02:12:44,340 --> 02:12:51,340
So I've used all kinds of strategies, and I don't think I've ever done anything that's pure test-driven development.

1253
02:12:51,340 --> 02:12:59,660
I guess test-driven development does – it requires that you can define what the end

1254
02:12:59,660 --> 02:13:06,140
result is, that you know what the end result is before you start working on it.

1255
02:13:06,140 --> 02:13:14,300
And that works in small steps, but it usually almost never works for an entire new feature

1256
02:13:14,300 --> 02:13:20,420
or a new code base, especially in a new research software.

1257
02:13:20,420 --> 02:13:24,820
are unlikely to stay, the requirements are unlikely to stay the same.

1258
02:13:30,260 --> 02:13:35,540
This next question, some kind of research test which determines how successful the proposed

1259
02:13:35,540 --> 02:13:48,340
approach is. If you can define an overall success as a test then I would definitely do that

1260
02:13:48,340 --> 02:13:54,420
and probably start with that. It's relatively easy and probably high

1261
02:13:54,420 --> 02:13:58,420
impact because you can quickly run it to see where your errors are.

1262
02:14:03,300 --> 02:14:03,800
Yeah.

1263
02:14:07,060 --> 02:14:13,460
Yeah, again it relies on you knowing what the result should be. So you can probably

1264
02:14:13,460 --> 02:14:24,260
know some features of it like a range or errors or how fast it should be, but often not exactly

1265
02:14:24,260 --> 02:14:28,580
what the number is at the end because if you knew that then probably you wouldn't write the code.

1266
02:14:32,100 --> 02:14:33,140
This next question.

1267
02:14:33,140 --> 02:14:43,140
I have no tests working with images.

1268
02:14:43,140 --> 02:14:51,140
This idea of getting some test images with easy cases manually annotating and comparing,

1269
02:14:51,140 --> 02:14:54,060
I mean, yeah, that sounds exactly like what I would do.

1270
02:14:54,060 --> 02:15:04,060
Of course it can be difficult to make the initial images, but if you don't have some

1271
02:15:04,060 --> 02:15:07,980
test data for something like this, you're going to be looking at some images to see

1272
02:15:07,980 --> 02:15:09,940
if it's correct anyway.

1273
02:15:09,940 --> 02:15:17,300
So why not make an image that doesn't have any confidential data and is small, add it

1274
02:15:17,300 --> 02:15:24,620
to your repository and then it saves you a lot of looking separately every time

1275
02:15:24,620 --> 02:15:37,140
you make a change. Do you consider...should we look at this screenshot here?

1276
02:15:38,420 --> 02:15:46,180
Example of how a research test is formulated, can we comment? Um, question

1277
02:15:46,180 --> 02:15:50,180
Ideally, parameters shouldn't be hard-coded but uploaded over a file.

1278
02:15:50,180 --> 02:15:58,180
I mean, if it's easy to hard-code, then why not start with that?

1279
02:15:58,180 --> 02:16:03,180
So, is it a test?

1280
02:16:03,180 --> 02:16:09,180
If it's a test, then hard-coding parameters often make sense.

1281
02:16:09,180 --> 02:16:19,820
You will change them much less often than in when you're running an actual code.

1282
02:16:19,820 --> 02:16:23,340
So hard coding is much less of a problem.

1283
02:16:23,340 --> 02:16:24,340
Yeah.

1284
02:16:24,340 --> 02:16:38,060
So it looks like so, yeah, so there's different use cases depending on the parameter.

1285
02:16:38,060 --> 02:16:42,260
it will either run the first use case or the second use case.

1286
02:16:42,260 --> 02:16:48,020
And then it will see, does it give the right output?

1287
02:16:50,900 --> 02:16:53,820
This is better than the check.

1288
02:16:53,820 --> 02:16:55,780
Where's the check?

1289
02:16:55,780 --> 02:16:59,060
Or is it checking if it runs?

1290
02:16:59,060 --> 02:17:01,980
Is this a check here?

1291
02:17:01,980 --> 02:17:03,580
Oh, it's an equal sign.

1292
02:17:03,580 --> 02:17:06,020
Would that be a comparison?

1293
02:17:06,020 --> 02:17:10,820
Or maybe the test is below, lower, and we don't see it.

1294
02:17:10,820 --> 02:17:12,700
Yeah.

1295
02:17:12,700 --> 02:17:17,540
But I mean, as a starting point, I would start here.

1296
02:17:17,540 --> 02:17:19,600
And if there get to be so many test cases,

1297
02:17:19,600 --> 02:17:21,620
I can't keep track of them, then I'd probably

1298
02:17:21,620 --> 02:17:24,340
start splitting them out.

1299
02:17:24,340 --> 02:17:29,420
So one small thing here is that which test cases run

1300
02:17:29,420 --> 02:17:31,140
is hardcoded here.

1301
02:17:31,140 --> 02:17:34,540
So I guess what I would do is turn this into a function

1302
02:17:34,540 --> 02:17:41,020
and then run it with two different input parameters, either use case equals one or

1303
02:17:41,020 --> 02:17:46,780
first use case equals zero and then use case equals one. Of course, then you could instead of

1304
02:17:49,500 --> 02:17:54,220
use case as only single parameter, you could include all of those numbers,

1305
02:17:54,220 --> 02:17:58,140
all of those parameters into the function parameters.

1306
02:17:58,140 --> 02:18:02,300
It makes sense.

1307
02:18:02,300 --> 02:18:07,740
Then you could easily run both cases, post-test cases, in a single script.

1308
02:18:07,740 --> 02:18:08,740
Yeah.

1309
02:18:08,740 --> 02:18:09,740
Okay.

1310
02:18:09,740 --> 02:18:15,900
If a test fails, how does it fail?

1311
02:18:15,900 --> 02:18:19,140
Will it be printed, or what?

1312
02:18:19,140 --> 02:18:21,500
So it depends on the frame...

1313
02:18:21,500 --> 02:18:22,500
Wait.

1314
02:18:22,500 --> 02:18:25,100
Ah, this is commenting on that.

1315
02:18:25,100 --> 02:18:26,380
I think there's a lot there.

1316
02:18:26,380 --> 02:18:30,740
So let's go to the last question before lunch break.

1317
02:18:30,740 --> 02:18:33,300
Does a big project include test codes in source code

1318
02:18:33,300 --> 02:18:35,260
or C only final?

1319
02:18:35,260 --> 02:18:38,620
So for every good open source project I know of,

1320
02:18:38,620 --> 02:18:44,500
the test code is included in with the actual code itself.

1321
02:18:44,500 --> 02:18:48,540
There's little reason not to.

1322
02:18:48,540 --> 02:18:52,860
And it really improves confidence of things

1323
02:18:52,860 --> 02:18:57,820
if you want people to be modifying it and improving it and if not well

1324
02:18:59,740 --> 02:19:06,220
i mean yeah i guess someone could release the code without the test code but then don't expect

1325
02:19:06,220 --> 02:19:09,580
other people to be able to contribute to it that well

1326
02:19:11,580 --> 02:19:16,780
um yeah if um if the tests are not included then you cannot check that you installed it correctly

1327
02:19:17,740 --> 02:19:20,780
or at least it's not easy to check that you installed it correctly so

1328
02:19:20,780 --> 02:19:23,940
So also for that reason, it's good to include the tests.

1329
02:19:28,620 --> 02:19:32,940
So did we miss anything?

1330
02:19:32,940 --> 02:19:37,740
I'm not seeing many chat messages or other questions,

1331
02:19:37,740 --> 02:19:38,540
hopefully.

1332
02:19:44,060 --> 02:19:46,500
So should we?

1333
02:19:46,500 --> 02:19:48,260
Well, what's the overall summary here?

1334
02:19:48,260 --> 02:19:58,740
So, we've seen different ways to write code which ensures other code works.

1335
02:19:59,460 --> 02:20:04,660
And by making it automatic, you can run it much more often than you could otherwise.

1336
02:20:05,700 --> 02:20:09,540
And it will hopefully make your code more correct.

1337
02:20:10,580 --> 02:20:13,860
But more importantly, it makes your development easier.

1338
02:20:13,860 --> 02:20:19,620
Like, the few times that I've started with tests really early for some research code

1339
02:20:19,620 --> 02:20:26,460
where I didn't even know what the answer should be, I've been really happy because I run this,

1340
02:20:26,460 --> 02:20:34,140
I can see all my really simple syntax errors and debugging syntax errors and so on much

1341
02:20:34,140 --> 02:20:36,900
faster than I could otherwise.

1342
02:20:36,900 --> 02:20:42,620
then I could use my brain, do manual effort for tests

1343
02:20:42,620 --> 02:20:46,180
and checks, which are not easy to automate

1344
02:20:46,180 --> 02:20:54,340
and actually are difficult. So with that said,

1345
02:20:54,340 --> 02:20:55,940
do you have any other final wrap ups?

1346
02:20:59,500 --> 02:21:02,300
Well, having to test run automatically

1347
02:21:02,300 --> 02:21:04,980
is super helpful because you will forget to run them

1348
02:21:04,980 --> 02:21:13,060
otherwise. So we've seen how to do it. But yeah, it's just automating it, making it as easy as

1349
02:21:13,060 --> 02:21:20,260
possible is an important thing. And it's also useful for others because, of course, it's much

1350
02:21:20,260 --> 02:21:26,580
easier to get everyone else to run the tests when they don't actually even need to run them.

1351
02:21:26,580 --> 02:21:28,020
They will just run automatically.

1352
02:21:39,620 --> 02:21:44,020
I guess we should go now. At least I need to get or go out quickly.

1353
02:21:45,300 --> 02:21:47,620
So thank you and see you in about an hour.

1354
02:21:48,900 --> 02:21:50,420
Have a good lunch break.

1355
02:21:50,420 --> 02:21:51,220
Okay, thank you.

1356
02:21:51,780 --> 02:21:52,500
Bye.

1357
02:21:52,500 --> 02:21:54,020
Bye.

1358
02:21:56,580 --> 02:21:58,640
you

1359
02:22:26,580 --> 02:22:28,640
you

1360
02:22:56,580 --> 02:22:58,640
you

1361
02:23:26,580 --> 02:23:28,640
you

1362
02:23:56,580 --> 02:23:58,640
you

1363
02:24:26,580 --> 02:24:28,640
you

1364
02:24:56,580 --> 02:24:58,640
you

1365
02:25:26,580 --> 02:25:28,640
you

1366
02:25:56,580 --> 02:25:58,640
you

1367
02:26:26,580 --> 02:26:28,640
you

1368
02:26:56,580 --> 02:26:58,640
you

1369
02:27:26,580 --> 02:27:28,640
you

1370
02:27:56,580 --> 02:27:58,640
you

1371
02:28:26,580 --> 02:28:28,640
you

1372
02:28:56,580 --> 02:28:58,640
you

1373
02:29:26,580 --> 02:29:28,640
you

1374
02:29:56,580 --> 02:29:58,640
you

1375
02:30:26,580 --> 02:30:28,640
you

1376
02:30:56,580 --> 02:30:58,640
you

1377
02:31:26,580 --> 02:31:28,640
you

1378
02:31:56,580 --> 02:31:58,640
you

1379
02:32:26,580 --> 02:32:28,640
you

1380
02:32:56,580 --> 02:32:58,640
you

1381
02:33:26,580 --> 02:33:28,640
you

1382
02:33:56,580 --> 02:33:58,640
you

1383
02:34:26,580 --> 02:34:28,640
you

1384
02:34:56,580 --> 02:34:58,640
you

1385
02:35:26,580 --> 02:35:28,640
you

1386
02:35:56,580 --> 02:35:58,640
you

1387
02:36:26,580 --> 02:36:28,640
you

1388
02:36:56,580 --> 02:36:58,640
you

1389
02:37:26,580 --> 02:37:28,640
you

1390
02:37:56,580 --> 02:37:58,640
you

1391
02:38:26,580 --> 02:38:28,640
you

1392
02:38:56,580 --> 02:38:58,640
you

1393
02:39:26,580 --> 02:39:28,640
you

1394
02:39:56,580 --> 02:39:58,640
you

1395
02:40:26,580 --> 02:40:28,640
you

1396
02:40:56,580 --> 02:40:58,640
you

1397
02:41:26,580 --> 02:41:28,640
you

1398
02:41:56,580 --> 02:41:58,640
you

1399
02:42:26,580 --> 02:42:28,640
you

1400
02:42:56,580 --> 02:42:58,640
you

1401
02:43:26,580 --> 02:43:28,640
you

1402
02:43:56,580 --> 02:43:58,640
you

1403
02:44:26,580 --> 02:44:28,640
you

1404
02:44:56,580 --> 02:44:58,640
you

1405
02:45:26,580 --> 02:45:28,640
you

1406
02:45:56,580 --> 02:45:58,640
you

1407
02:46:26,580 --> 02:46:28,640
you

1408
02:46:56,580 --> 02:46:58,640
you

1409
02:47:26,580 --> 02:47:28,640
you

1410
02:47:56,580 --> 02:47:58,640
you

1411
02:48:26,580 --> 02:48:28,640
you

1412
02:48:56,580 --> 02:48:58,640
you

1413
02:49:26,580 --> 02:49:28,640
you

1414
02:49:56,580 --> 02:49:58,640
you

1415
02:50:26,580 --> 02:50:28,640
you

1416
02:50:56,580 --> 02:50:58,640
you

1417
02:51:26,580 --> 02:51:28,640
you

1418
02:51:56,580 --> 02:51:58,640
you

1419
02:52:26,580 --> 02:52:28,640
you

1420
02:52:56,580 --> 02:52:58,640
you

1421
02:53:26,580 --> 02:53:28,640
you

1422
02:53:56,580 --> 02:53:58,640
you

1423
02:54:26,580 --> 02:54:28,640
you

1424
02:54:56,580 --> 02:54:58,640
you

1425
02:55:26,580 --> 02:55:28,640
you

1426
02:55:56,580 --> 02:55:58,640
you

1427
02:56:26,580 --> 02:56:28,640
you

1428
02:56:56,580 --> 02:56:58,640
you

1429
02:57:26,580 --> 02:57:28,640
you

1430
02:57:56,580 --> 02:57:58,640
you

1431
02:58:26,580 --> 02:58:28,640
you

1432
02:58:56,580 --> 02:58:58,640
you

1433
02:59:26,580 --> 02:59:28,640
you

1434
02:59:56,580 --> 02:59:58,640
you

1435
03:00:26,580 --> 03:00:28,640
you

1436
03:00:56,580 --> 03:00:58,640
you

1437
03:01:26,580 --> 03:01:28,640
you

1438
03:01:56,580 --> 03:01:58,640
you

1439
03:02:26,580 --> 03:02:28,640
you

1440
03:02:56,580 --> 03:02:58,640
you

1441
03:03:26,580 --> 03:03:28,640
you

1442
03:03:56,580 --> 03:03:58,640
you

1443
03:04:26,580 --> 03:04:28,640
you

1444
03:04:56,580 --> 03:04:58,640
you

1445
03:05:26,580 --> 03:05:28,640
you

1446
03:05:56,580 --> 03:05:58,640
you

1447
03:06:26,580 --> 03:06:28,640
you

1448
03:06:56,580 --> 03:06:58,640
you

1449
03:07:26,580 --> 03:07:28,640
you

1450
03:07:56,580 --> 03:07:58,640
you

1451
03:08:26,580 --> 03:08:28,640
you

1452
03:08:56,580 --> 03:08:58,640
you

1453
03:09:26,580 --> 03:09:28,640
you

1454
03:09:56,580 --> 03:09:58,640
you

1455
03:10:26,580 --> 03:10:28,640
you

1456
03:10:56,580 --> 03:10:58,640
you

1457
03:11:26,580 --> 03:11:28,640
you

1458
03:11:56,580 --> 03:11:58,640
you

1459
03:12:26,580 --> 03:12:28,640
you

1460
03:12:56,580 --> 03:12:58,640
you

1461
03:13:26,580 --> 03:13:28,640
you

1462
03:13:56,580 --> 03:13:58,640
you

1463
03:14:26,580 --> 03:14:28,640
you

1464
03:14:56,580 --> 03:14:58,640
you

1465
03:15:26,580 --> 03:15:28,640
you

1466
03:15:56,580 --> 03:15:58,640
you

1467
03:16:26,580 --> 03:16:28,640
you

1468
03:16:56,580 --> 03:16:58,640
you

1469
03:17:26,580 --> 03:17:28,640
you

1470
03:17:56,580 --> 03:17:58,640
you

1471
03:18:26,580 --> 03:18:55,180
Hello, hello, can you hear us?

1472
03:18:55,180 --> 03:18:59,860
So should I go to [name]'s screen, I guess?

1473
03:18:59,860 --> 03:19:02,940
Yes, let's do that.

1474
03:19:02,940 --> 03:19:08,420
OK, so this next section is a type-along or something,

1475
03:19:08,420 --> 03:19:11,460
not a type-along, but a demo, but something

1476
03:19:11,460 --> 03:19:16,500
between us doing things in the stream and an exercise.

1477
03:19:16,500 --> 03:19:23,220
So it works best when there's a lot of active participation

1478
03:19:23,220 --> 03:19:31,800
the notes document. So this is about modular code development and just to get

1479
03:19:31,800 --> 03:19:39,540
started in the document we have a few questions so please go and take a look

1480
03:19:39,540 --> 03:19:45,460
at those and answer those.

1481
03:19:45,460 --> 03:19:48,900
Yes, we see them here.

1482
03:19:48,900 --> 03:20:01,460
Yeah, so there's also some answers given away in this image that is linked from the materials.

1483
03:20:01,460 --> 03:20:13,380
So we'll quickly show that, but we're also already getting some answers, which is good.

1484
03:20:13,380 --> 03:20:17,520
So to you, what does modular code development mean?

1485
03:20:17,520 --> 03:20:20,020
What does modular even mean?

1486
03:20:20,020 --> 03:20:22,780
Yeah, what is modular?

1487
03:20:22,780 --> 03:20:27,340
The first thing that comes to my mind when I think of what is modular is the International

1488
03:20:27,340 --> 03:20:35,640
space station, because I think I learned the word from there, but it consists of this kind

1489
03:20:35,640 --> 03:20:40,840
of a central structure, but that's also kind of a module of its own.

1490
03:20:40,840 --> 03:20:47,160
The main thing is different groups have made these sections to the station and you can

1491
03:20:47,160 --> 03:20:48,160
plug them together.

1492
03:20:48,160 --> 03:20:49,440
They're like Legos.

1493
03:20:49,440 --> 03:20:56,820
You can take one piece and plug it into another piece, and the idea is that all the wiring

1494
03:20:56,820 --> 03:21:02,280
should work and that there's some sort of interface between the two that helps all the

1495
03:21:02,280 --> 03:21:06,840
parts work in all of these sections.

1496
03:21:06,840 --> 03:21:16,520
So basically you can ship up one new module and connect it and that works.

1497
03:21:16,520 --> 03:21:21,480
Like you can add and remove things, you can understand each part separately.

1498
03:21:21,480 --> 03:21:29,480
Yeah and someone can design one part of a bigger whole and then as long as the interface makes

1499
03:21:29,480 --> 03:21:35,640
sense you can plug it into a bigger thing and out of those smaller modules then make something even

1500
03:21:36,360 --> 03:21:41,400
something bigger and more complicated and it's still kind of it remains understandable and

1501
03:21:41,400 --> 03:21:49,400
manageable. Yeah so why do we have a lesson on modular code development? Like what's the

1502
03:21:49,400 --> 03:22:01,560
big point here. Well yeah, so a software project can get really big and it can get and in fact it

1503
03:22:01,560 --> 03:22:06,120
does get so big that or software gets so big that it's hard to understand. Like if you have

1504
03:22:06,120 --> 03:22:11,640
the whole thing written down in one section it is very hard to continue developing it.

1505
03:22:11,640 --> 03:22:19,160
it. Plus, when you make something modular, it's not just easier to understand the modules

1506
03:22:19,160 --> 03:22:25,520
and then understand the whole that the modules make up, it's also easier to split up the

1507
03:22:25,520 --> 03:22:32,720
work. So you can split the different sections, the different modules between different developers,

1508
03:22:32,720 --> 03:22:39,280
different people in your team, and someone from the outside can come and write a module

1509
03:22:39,280 --> 03:22:42,860
for the thing you designed.

1510
03:22:42,860 --> 03:22:46,380
So it makes development easier, it makes testing easier,

1511
03:22:48,100 --> 03:22:50,980
and it makes it easier to share your work.

1512
03:22:50,980 --> 03:22:54,020
It kind of pulls together a lot of what we've done

1513
03:22:54,020 --> 03:22:55,500
in the past two weeks.

1514
03:22:55,500 --> 03:22:57,380
So at least in Python,

1515
03:22:57,380 --> 03:23:00,260
the things you import are called modules.

1516
03:23:00,260 --> 03:23:04,740
Does modular code development have to be about these modules

1517
03:23:04,740 --> 03:23:06,380
or is that what this is about?

1518
03:23:06,380 --> 03:23:09,380
It's not exactly.

1519
03:23:09,380 --> 03:23:13,380
Modular code development is also about functions.

1520
03:23:13,380 --> 03:23:21,380
Small functions that do individual things that you can pluck out of a code,

1521
03:23:21,380 --> 03:23:25,380
then move into another code and will still work.

1522
03:23:25,380 --> 03:23:30,380
So making your, first of all, writing functions,

1523
03:23:30,380 --> 03:23:34,380
but then also writing functions that are in themselves modular,

1524
03:23:34,380 --> 03:23:43,940
They are independent of the whole project in some way.

1525
03:23:43,940 --> 03:23:49,040
But it is also organizing those then into modules, so organizing them into separate

1526
03:23:49,040 --> 03:23:56,060
files that could be depending on the language, could be Python modules, could be libraries,

1527
03:23:56,060 --> 03:24:01,060
could be shared objects and so on, depending on packages.

1528
03:24:01,060 --> 03:24:06,740
different languages or different programming languages have different words for these but

1529
03:24:06,740 --> 03:24:08,500
the structure is roughly the same.

1530
03:24:11,380 --> 03:24:16,500
What about this last question? Would you prefer your code to be two times slower if it was easier

1531
03:24:16,500 --> 03:24:26,900
to read and understand? That depends a lot on the situation. Yeah, if it's a high performance

1532
03:24:26,900 --> 03:24:34,660
computing thing, then the main code of course should be as fast as you can make it.

1533
03:24:34,660 --> 03:24:41,940
But in most cases, the code should be first understandable and then maybe also efficient

1534
03:24:41,940 --> 03:24:43,540
if that's necessary.

1535
03:24:43,540 --> 03:24:49,140
But first you should have a code that works and then you can try to make it faster.

1536
03:24:49,140 --> 03:24:57,860
But that's actually something I didn't mention in testing, but one very useful idea is to

1537
03:24:57,860 --> 03:25:00,500
write two implementations of something.

1538
03:25:00,500 --> 03:25:06,360
So you have a slower algorithm, and then you also write a faster algorithm.

1539
03:25:06,360 --> 03:25:13,180
And if those produce the same results, then probably both of them work.

1540
03:25:13,180 --> 03:25:15,180
The more different they are, the better.

1541
03:25:15,180 --> 03:25:16,180
Yeah.

1542
03:25:16,180 --> 03:25:20,180
I did that once to, like, verify something.

1543
03:25:20,180 --> 03:25:24,180
I've done a lot of high performance computing work

1544
03:25:24,180 --> 03:25:28,180
and that's a very useful approach.

1545
03:25:28,180 --> 03:25:32,180
Because things you write for the main thing need to be really fast.

1546
03:25:32,180 --> 03:25:36,180
But then they are not readable. So you also

1547
03:25:36,180 --> 03:25:40,180
write a slower version.

1548
03:25:40,180 --> 03:25:44,180
So does modularity always make it slower?

1549
03:25:44,180 --> 03:25:51,260
or no I don't actually it's an interesting question because I can't actually think why

1550
03:25:51,260 --> 03:25:59,080
it would make anything slower okay that's good principle I mean code that's easier to

1551
03:25:59,080 --> 03:26:06,420
understand is unlikely to be really fast just because it's a different you're optimizing

1552
03:26:06,420 --> 03:26:14,460
for a different thing. So they don't have a lot of overlap. And I guess making something

1553
03:26:14,460 --> 03:26:18,420
more modular might also make it slower just because you are optimizing for a different

1554
03:26:18,420 --> 03:26:20,860
thing when you're writing it.

1555
03:26:20,860 --> 03:26:28,140
So I guess this question F, would you prefer your code to be twice, two times slower if

1556
03:26:28,140 --> 03:26:32,540
it's easier to read and understand? That's not exactly the trade-off we're making here

1557
03:26:32,540 --> 03:26:33,540
then.

1558
03:26:33,540 --> 03:26:41,660
Yeah, not exactly, but I mean that it's still a good question to think about and it is kind

1559
03:26:41,660 --> 03:26:45,460
of related to this lesson because modular code development is ultimately about making

1560
03:26:45,460 --> 03:26:49,740
it understandable and manageable.

1561
03:26:49,740 --> 03:26:54,820
Taking a really big complex system and making it manageable is, I guess, mainly what we're

1562
03:26:54,820 --> 03:26:55,820
talking about.

1563
03:26:55,820 --> 03:27:02,900
Well, understandability and being able to reuse it is definitely things I want.

1564
03:27:02,900 --> 03:27:05,060
So what do we do next?

1565
03:27:05,060 --> 03:27:07,980
I'll pop back to your screen.

1566
03:27:07,980 --> 03:27:09,980
Yes.

1567
03:27:09,980 --> 03:27:17,780
So yeah, here is one answer or some answers that you could have copied from if you were

1568
03:27:17,780 --> 03:27:18,780
looking at the notes.

1569
03:27:18,780 --> 03:27:21,500
But this is a link from the notes.

1570
03:27:21,500 --> 03:27:22,500
Okay.

1571
03:27:22,500 --> 03:27:30,420
So yeah, there's a lot of things that do go wrong with research software development, like

1572
03:27:30,420 --> 03:27:38,180
long functions and overcomplicated design that's kind of a maze of problems in the code that you

1573
03:27:38,180 --> 03:27:46,420
have to get through. So is this sort of like if you have bad code design non-modular code

1574
03:27:46,980 --> 03:27:52,340
maybe it works in the short term but in the long term you're going to have a major problem?

1575
03:27:52,340 --> 03:28:01,100
Yeah, that's the idea. So it becomes complex and something that is complex is hard to maintain

1576
03:28:01,100 --> 03:28:06,860
and hard to take care of in the long run. Gets to the point where you don't understand

1577
03:28:06,860 --> 03:28:10,260
the code you wrote a week ago very easily.

1578
03:28:10,260 --> 03:28:11,260
That's good.

1579
03:28:11,260 --> 03:28:18,460
Okay, so here are the questions we already talked about. Just skipping through that section.

1580
03:28:18,460 --> 03:28:22,300
I will not go through the learning examples in a lot of detail either because we partly

1581
03:28:22,300 --> 03:28:30,620
already talked about that, but this is taking a lot from the past two weeks, maybe slightly

1582
03:28:30,620 --> 03:28:35,980
different point of view than in the testing lesson where we took a lot of this social coding and

1583
03:28:37,340 --> 03:28:44,460
sharing things aspect of it, but now we're mostly working locally by trying to make

1584
03:28:44,460 --> 03:28:52,380
a local code better. So let's just get to the task itself.

1585
03:28:53,900 --> 03:29:02,780
Okay, so what do we do? So here's an example task and now this is much closer to real scientific code

1586
03:29:02,780 --> 03:29:12,140
than the add function in the testing lesson. So it's hopefully somewhat readable if you go

1587
03:29:12,140 --> 03:29:19,980
go through it, you can see what's happening. But it could be made a lot more modular, a

1588
03:29:19,980 --> 03:29:27,860
lot better. So let's just start by copying this into a Jupyter notebook. And can you

1589
03:29:27,860 --> 03:29:32,060
switch to your screen if you have the notebook ready?

1590
03:29:32,060 --> 03:29:40,780
There is my screen. Let's adjust the size of stuff. I've made a new directory for this

1591
03:29:40,780 --> 03:29:44,060
I will start a Python 3 kernel.

1592
03:29:44,060 --> 03:29:47,220
Should I just copy and paste from?

1593
03:29:47,220 --> 03:29:49,660
Yeah, let's just start by copying and pasting here so that

1594
03:29:49,660 --> 03:29:51,940
we can all see the code in the same way.

1595
03:29:51,940 --> 03:29:53,340
Okay.

1596
03:29:54,740 --> 03:29:58,340
Then we'll see what it does.

1597
03:29:58,340 --> 03:30:00,140
Should I run it?

1598
03:30:00,140 --> 03:30:03,580
Yeah, why not? Can you make

1599
03:30:03,580 --> 03:30:08,140
this screen either wider or show the entire lines?

1600
03:30:08,140 --> 03:30:10,860
Or what do you call it? Wrap the lines?

1601
03:30:10,860 --> 03:30:12,940
Okay, so now it's visible.

1602
03:30:12,940 --> 03:30:13,940
Okay.

1603
03:30:13,940 --> 03:30:16,300
We need the temperatures file.

1604
03:30:16,300 --> 03:30:18,980
So you need to download some files.

1605
03:30:18,980 --> 03:30:22,020
So should we actually just go through, like, how did we know that?

1606
03:30:22,020 --> 03:30:23,020
Yeah.

1607
03:30:23,020 --> 03:30:25,260
What is happening here?

1608
03:30:25,260 --> 03:30:28,740
What do we see?

1609
03:30:28,740 --> 03:30:37,900
So it says read CSV temperatures dot CSV.

1610
03:30:37,900 --> 03:30:41,980
if I scroll down, no such file or directory.

1611
03:30:41,980 --> 03:30:43,820
And it gives the file name, hopefully.

1612
03:30:43,820 --> 03:30:45,660
So we are missing a file.

1613
03:30:45,660 --> 03:30:48,480
And if we start looking at the code,

1614
03:30:48,480 --> 03:30:50,820
if we had started looking at the code before running it,

1615
03:30:50,820 --> 03:30:52,940
we would have realized that it's reading a file.

1616
03:30:52,940 --> 03:30:58,300
So why don't we just download the file?

1617
03:30:58,300 --> 03:30:59,980
Do you have the link?

1618
03:30:59,980 --> 03:31:02,860
Should I do it from Jupyter?

1619
03:31:02,860 --> 03:31:05,340
Yeah, why not?

1620
03:31:05,340 --> 03:31:06,420
Let's see if it works.

1621
03:31:06,420 --> 03:31:12,760
I know on my computer I have a program called wgit installed that will download a file and

1622
03:31:12,760 --> 03:31:15,360
save it in the current directory.

1623
03:31:15,360 --> 03:31:18,240
So I will run this.

1624
03:31:18,240 --> 03:31:20,360
And it says temperatures.csv saved.

1625
03:31:20,360 --> 03:31:23,760
Okay, so now we should have the file.

1626
03:31:23,760 --> 03:31:25,320
And I will delete this row.

1627
03:31:25,320 --> 03:31:26,320
Yeah.

1628
03:31:26,320 --> 03:31:27,320
Okay.

1629
03:31:27,320 --> 03:31:28,320
Okay.

1630
03:31:28,320 --> 03:31:29,320
So now we should have the file.

1631
03:31:29,320 --> 03:31:30,320
Yeah.

1632
03:31:30,320 --> 03:31:31,320
Yeah.

1633
03:31:31,320 --> 03:31:32,320
Okay.

1634
03:31:32,320 --> 03:31:33,320
Let's do what we were thinking of doing.

1635
03:31:33,320 --> 03:31:43,640
what it does first. It's taking a while to run. Well, at the meantime, we can look at the line.

1636
03:31:43,640 --> 03:31:50,520
It is importing pandas and matplotlib. Matplotlib is a plotting library and pandas is for data

1637
03:31:50,520 --> 03:31:56,120
processing. Then we define the number of measurements is 25, whatever that means,

1638
03:31:56,120 --> 03:32:01,120
and we read in some data from a CSV file.

1639
03:32:01,120 --> 03:32:04,120
We do have this in the notes.

1640
03:32:04,120 --> 03:32:08,120
It's data provided by the Finnish Meteorological Institute

1641
03:32:08,120 --> 03:32:20,120
about observations of air temperature at the Helsinki-Vantaa airport in 2022.

1642
03:32:20,120 --> 03:32:23,120
Okay, so there's another error somewhere.

1643
03:32:23,120 --> 03:32:25,480
Well, let's see.

1644
03:32:27,200 --> 03:32:30,360
Key error, air temperature.

1645
03:32:30,800 --> 03:32:34,800
Well, let's walk through the code and hopefully it will be-

1646
03:32:34,800 --> 03:32:36,800
Yeah. Should we look at the file,

1647
03:32:36,800 --> 03:32:39,200
like open it and see?

1648
03:32:39,200 --> 03:32:43,240
Okay. So what we're doing here is we're reading this data from

1649
03:32:43,240 --> 03:32:47,960
the CSV file and taking this number of measurements,

1650
03:32:47,960 --> 03:32:50,200
number of rows, so we're taking

1651
03:32:50,200 --> 03:33:01,000
25 measurements from this data file, and then the temperatures should be a column from this

1652
03:33:01,000 --> 03:33:07,200
CSV file with this name. So, yeah, I guess it doesn't have a column with that name. It's

1653
03:33:07,200 --> 03:33:12,160
probably the structure of the data has changed between the Code Refinery workshop, so maybe

1654
03:33:12,160 --> 03:33:15,840
we should take a look at what the CSV file contains.

1655
03:33:15,840 --> 03:33:18,520
Should I open it through the file browser?

1656
03:33:18,520 --> 03:33:25,760
Yeah, I mean, oh, you mean the one in Jupyter, that makes sense.

1657
03:33:25,760 --> 03:33:29,000
So it seems a bit broken.

1658
03:33:29,000 --> 03:33:34,080
It did not download.

1659
03:33:34,080 --> 03:33:37,200
It links, it doesn't link to the raw data.

1660
03:33:37,200 --> 03:33:43,320
So this is, okay, it should be raw data from GitHub, there's a mistake in the link.

1661
03:33:43,320 --> 03:33:44,320
Okay.

1662
03:33:44,320 --> 03:33:47,160
So I can send you the correct link.

1663
03:33:47,160 --> 03:33:49,200
I have the correct link here.

1664
03:33:49,200 --> 03:33:51,040
OK.

1665
03:33:51,040 --> 03:33:55,520
So now I'm again using Jupyter to remove the temperatures.csv

1666
03:33:55,520 --> 03:33:58,040
file.

1667
03:33:58,040 --> 03:34:05,760
And now I will paste raw data, raw.githubusercontent.

1668
03:34:05,760 --> 03:34:08,280
So this should be raw.

1669
03:34:08,280 --> 03:34:10,240
Yeah.

1670
03:34:10,240 --> 03:34:12,760
And now it says it's saved.

1671
03:34:12,760 --> 03:34:13,680
Should we try again?

1672
03:34:13,680 --> 03:34:19,680
Yeah. Let's see what happens.

1673
03:34:19,680 --> 03:34:21,680
Okay. That looks better.

1674
03:34:21,680 --> 03:34:22,680
Okay.

1675
03:34:22,680 --> 03:34:31,680
Okay. So we're reading 25 rows of the data and plotting something, but it's calculating some statistics here.

1676
03:34:31,680 --> 03:34:36,680
So it's calculating the mean of the temperature measurements.

1677
03:34:37,640 --> 03:34:43,240
and then it's plotting the temperatures oh and it's adding this dashed line for the mean

1678
03:34:43,240 --> 03:34:49,480
of those temperatures okay and i guess this is the first 25 days of the year so we're talking

1679
03:34:49,480 --> 03:34:56,920
january so the temperatures range from minus 2 to minus 12 or so yeah so it makes sense it

1680
03:34:56,920 --> 03:35:07,480
actually looks okay. Okay, so what could we do to make this better or specifically more modular?

1681
03:35:09,240 --> 03:35:15,800
How is it not modular now? I mean, I can see some immediate problems.

1682
03:35:16,920 --> 03:35:24,200
This notebook has to have a file with one certain name, one certain output, and runs everything at

1683
03:35:24,200 --> 03:35:35,480
once. So please go to the notes and add any suggestions on what should we do, what we can

1684
03:35:35,480 --> 03:35:43,000
do to make this code more modular specifically or just better in some way. And yeah, we can

1685
03:35:43,000 --> 03:35:51,160
spot a few problems here immediately. Yeah. We do have a couple of goals in mind though

1686
03:35:51,160 --> 03:35:58,880
So, as we start working on this, we want to be able to create a plot, create several different

1687
03:35:58,880 --> 03:35:59,880
plots.

1688
03:35:59,880 --> 03:36:03,600
We want a plot with 25 measurements, but we also want a plot with 100 measurements and

1689
03:36:03,600 --> 03:36:10,040
with 500 measurements.

1690
03:36:10,040 --> 03:36:17,520
And I guess, so then just, well, let's start with that.

1691
03:36:17,520 --> 03:36:25,680
We have some suggestions here. Don't load the data when creating the plot,

1692
03:36:27,520 --> 03:36:33,120
load it separately. Separate the plotting and loading to data. That's a good idea.

1693
03:36:34,400 --> 03:36:39,440
Separate to read data from file and compute statistics and plot results into different

1694
03:36:39,440 --> 03:36:45,840
functions. Yes, that is a very good idea. Three different functions.

1695
03:36:45,840 --> 03:36:53,880
okay so three functions yeah let's let's do that and should they be in three

1696
03:36:53,880 --> 03:37:03,840
separate cells in Jupiter I mean yeah that that works I don't have a

1697
03:37:03,840 --> 03:37:10,600
preference on whether to split functions into cells or not so what

1698
03:37:10,600 --> 03:37:14,720
should I do can you okay well the situation now is related into three

1699
03:37:14,720 --> 03:37:23,560
different cells. So let's make a cell for a read data from file function. Okay. And

1700
03:37:23,560 --> 03:37:35,500
copy split the cell there. Yeah. Should I split the measurement cell? Yeah. So the number

1701
03:37:35,500 --> 03:37:42,500
of measurements needs to be set here, so yeah, split it out.

1702
03:37:42,500 --> 03:37:43,500
Okay.

1703
03:37:43,500 --> 03:37:50,260
But now I make these functions, so can you give me some advice?

1704
03:37:50,260 --> 03:37:51,260
Yeah.

1705
03:37:51,260 --> 03:37:56,420
Well, okay, so to make the, so how to split it into functions, yes.

1706
03:37:56,420 --> 03:38:04,220
Okay, so the suggestion was to make a read data from file, so I guess that would be running

1707
03:38:04,220 --> 03:38:09,060
this pandas.readcsv, but we probably also want to keep the temperatures equals something

1708
03:38:09,060 --> 03:38:16,220
because we don't want to write a function that is just the pandas read from csv function.

1709
03:38:16,220 --> 03:38:23,580
We wanted to do a little bit more. So, let's do read these two lines, readcsv and then

1710
03:38:23,580 --> 03:38:30,420
temperatures equals column. Okay. So, yeah, define a function and it could be just read

1711
03:38:30,420 --> 03:38:40,420
temperatures or get temperatures is fine yeah okay and then we need to call that in the original

1712
03:38:40,420 --> 03:38:47,940
cell right right good idea return temperatures that's right i almost forgot that yeah and then

1713
03:38:47,940 --> 03:38:54,740
we need to call that in the original cell to get the temperatures uh variable set so temperatures

1714
03:38:54,740 --> 03:39:05,460
equals. Now, actually, the read data from file comment has become unnecessary.

1715
03:39:05,460 --> 03:39:08,340
Yeah. Or has it?

1716
03:39:08,980 --> 03:39:11,380
Does get temperatures tell you that it's from file?

1717
03:39:11,380 --> 03:39:12,980
You can make it a doc string.

1718
03:39:14,900 --> 03:39:22,020
It could also be the function name directly could be something like read temperatures from file or

1719
03:39:24,740 --> 03:39:28,180
what would be read data.

1720
03:39:28,900 --> 03:39:32,580
Sorry can you say that again? Something like read data or read data

1721
03:39:32,580 --> 03:39:36,660
from or read temperatures from file. If that's the function name then it's

1722
03:39:36,660 --> 03:39:39,780
clear what it's doing. Yeah.

1723
03:39:39,940 --> 03:39:42,980
Get temperatures

1724
03:39:43,460 --> 03:39:51,700
like this. Yeah that that works. Okay yeah. Then we want two other functions

1725
03:39:51,700 --> 03:39:55,940
So, should we give this function arguments?

1726
03:39:59,140 --> 03:40:06,340
Well, do we do that later? Yeah, so that has not been suggested yet, although I'm not sure if they

1727
03:40:06,340 --> 03:40:12,500
thought about it. Okay. They didn't write it down in the suggestion. That's another thing that's

1728
03:40:13,220 --> 03:40:19,300
important, of course, in modularity, modular code development. But let's do it as it,

1729
03:40:19,300 --> 03:40:24,420
let's stick to this now. So then the other one would be for compute statistics.

1730
03:40:24,420 --> 03:40:27,460
Okay, so maybe I'll split here.

1731
03:40:49,300 --> 03:40:55,700
Wait. Okay.

1732
03:40:58,820 --> 03:41:05,620
Okay, so this returns the mean. Well, it should return the mean. It currently doesn't.

1733
03:41:08,340 --> 03:41:13,140
It's missing the return. Okay, so it returns the mean temperature value.

1734
03:41:13,140 --> 03:41:22,300
you. Should we get temperatures inside that function? I guess it's fine. I also don't

1735
03:41:22,300 --> 03:41:29,140
want to make too many suggestions that are not yet in the discussion. Okay. So let's

1736
03:41:29,140 --> 03:41:35,300
keep it as it is. But we need to no, we actually we do need to keep the temperatures. We need

1737
03:41:35,300 --> 03:41:40,500
temperatures to be defined in the main part of the code.

1738
03:41:40,500 --> 03:41:41,780
Okay. Yeah.

1739
03:41:41,780 --> 03:41:48,500
we we need to do mean temperatures equals get temperatures in the main code so i copied this

1740
03:41:48,500 --> 03:41:55,380
to here but then we do need we need to pass the temperatures variable to compute statistics

1741
03:41:55,380 --> 03:42:02,500
okay so mean so i guess we need to do mean equals compute statistics and then yeah pass the

1742
03:42:02,500 --> 03:42:16,340
temperatures there okay okay um there was one more suggested function was plot results

1743
03:42:19,460 --> 03:42:25,540
would that would be i guess um everything below this mean equals would go into computer plot

1744
03:42:25,540 --> 03:42:35,140
results. Yeah, and I guess I should make the cell above this. Yeah, so I will copy and paste it here.

1745
03:42:48,180 --> 03:42:52,820
Okay. Okay, that doesn't need to return anything, but we do need to call it.

1746
03:42:52,820 --> 03:42:59,380
and we need to pass temperatures to it it's a not defined inside the function

1747
03:42:59,380 --> 03:43:07,980
otherwise so the temperatures and the mean also I guess yes true it need

1748
03:43:07,980 --> 03:43:13,020
unless we call well like let's not call compute statistics inside plot and the

1749
03:43:13,020 --> 03:43:21,020
plot results. It's probably this way and then we need to give it this argument.

1750
03:43:24,380 --> 03:43:36,460
Okay. Okay. Now what else? So I mentioned that in the long run we want to create three different

1751
03:43:36,460 --> 03:43:41,020
plots with three different numbers of measurements.

1752
03:43:41,980 --> 03:43:51,260
So, what could we do about that? Right now, we are actually, so we have hard-coded a good number

1753
03:43:51,260 --> 03:43:59,820
of parameters directly into these functions. And I think the, well, the number of measurements

1754
03:43:59,820 --> 03:44:04,360
actually is kind of semi-hard-coded into all of them.

1755
03:44:04,360 --> 03:44:05,880
Right. That's just-

1756
03:44:05,880 --> 03:44:08,960
So we define the number of measurements there.

1757
03:44:08,960 --> 03:44:12,520
So we should make it a parameter in

1758
03:44:12,520 --> 03:44:15,480
some one way or another of all of these functions.

1759
03:44:15,480 --> 03:44:16,720
Okay.

1760
03:44:16,720 --> 03:44:20,840
So yeah, let's start with getTemperature from file.

1761
03:44:20,840 --> 03:44:23,240
That should get just

1762
03:44:23,240 --> 03:44:26,960
numMeasurements directly as a parameter.

1763
03:44:26,960 --> 03:44:29,960
And I can delete the cell then?

1764
03:44:29,960 --> 03:44:30,960
Yeah.

1765
03:44:30,960 --> 03:44:31,960
Because it's not hard-coded anymore.

1766
03:44:31,960 --> 03:44:33,960
Then we can just call it with 25.

1767
03:44:33,960 --> 03:44:35,960
Compute statistics.

1768
03:44:35,960 --> 03:44:38,960
Should compute statistics get num measurements?

1769
03:44:38,960 --> 03:44:39,960
It can.

1770
03:44:39,960 --> 03:44:45,960
The other option is to use the length of the temperatures column.

1771
03:44:45,960 --> 03:44:50,960
So doing len temperatures works directly.

1772
03:44:50,960 --> 03:44:53,960
And because it's actually a pandas data frame,

1773
03:44:53,960 --> 03:44:55,960
it doesn't even take any time to calculate.

1774
03:44:55,960 --> 03:44:59,440
It's already calculated, so we can just use it directly.

1775
03:44:59,440 --> 03:45:00,440
Yeah.

1776
03:45:00,440 --> 03:45:10,240
I guess, since this is pandas in a more real project, we would just use the mean, but this

1777
03:45:10,240 --> 03:45:15,240
is pretending that some big pandas could do a mean for us.

1778
03:45:15,240 --> 03:45:16,240
But anyway, okay.

1779
03:45:16,240 --> 03:45:17,240
Yeah, that's true.

1780
03:45:17,240 --> 03:45:18,240
Good.

1781
03:45:18,240 --> 03:45:20,280
And actually, I mean, that is a good suggestion.

1782
03:45:20,280 --> 03:45:23,760
Using pandas functions directly is better than writing your own.

1783
03:45:23,760 --> 03:45:27,320
But yeah, let's stick to this for now.

1784
03:45:27,320 --> 03:45:33,200
And then in the plot results, we have a few options.

1785
03:45:33,200 --> 03:45:39,080
I don't know, there's nothing in the notes right now about this, but how should we do

1786
03:45:39,080 --> 03:45:40,080
this?

1787
03:45:40,080 --> 03:45:41,080
Well, actually, there is.

1788
03:45:41,080 --> 03:45:44,240
Pass the file name as input is a suggestion.

1789
03:45:44,240 --> 03:45:50,040
So should it be the first or last argument?

1790
03:45:50,040 --> 03:45:59,400
I would make it the last one, because it could, in principle, be optional.

1791
03:45:59,400 --> 03:46:05,400
Should we make it possible to do it without a filename?

1792
03:46:05,400 --> 03:46:08,840
So you wouldn't save the figure then, I guess.

1793
03:46:08,840 --> 03:46:12,280
That would make sense.

1794
03:46:12,280 --> 03:46:19,680
So basically, we can plot it only in Jupyter, or we can plot it and save it?

1795
03:46:19,680 --> 03:46:28,600
On that note, later we'll want to move this into a script and there we will not have,

1796
03:46:28,600 --> 03:46:30,560
we will not be able to show it in Jupyter.

1797
03:46:30,560 --> 03:46:34,840
So that could also be an option maybe.

1798
03:46:34,840 --> 03:46:38,600
So but I'm not exactly sure what would be the best way of doing that.

1799
03:46:38,600 --> 03:46:41,160
I don't know if people have suggestions.

1800
03:46:41,160 --> 03:46:45,640
So let's just leave that for now.

1801
03:46:45,640 --> 03:46:49,080
We do need to fix all of these function calls now.

1802
03:46:49,080 --> 03:46:52,440
Yeah, so getTemperatures needs a number of measurements.

1803
03:46:53,560 --> 03:46:55,000
So that was 25.

1804
03:46:55,960 --> 03:46:57,960
Compute statistics actually doesn't.

1805
03:46:57,960 --> 03:46:58,680
It doesn't?

1806
03:46:58,680 --> 03:46:59,320
Okay, yeah.

1807
03:46:59,880 --> 03:47:05,800
And then plotResults needs a file name, which previously was 25.png.

1808
03:47:07,080 --> 03:47:07,580
Okay.

1809
03:47:08,600 --> 03:47:10,440
Okay, so let's see that it runs.

1810
03:47:13,160 --> 03:47:14,040
getTemperatures.

1811
03:47:14,040 --> 03:47:17,720
Ah, so yeah, I have to run everything in the notebook.

1812
03:47:17,720 --> 03:47:18,220
Yeah.

1813
03:47:19,080 --> 03:47:24,520
I will do restart and run all.

1814
03:47:24,520 --> 03:47:29,400
I wish it would just automatically rerun everything with the click run.

1815
03:47:29,400 --> 03:47:30,400
Get temperatures.

1816
03:47:30,400 --> 03:47:31,600
Did I misspell it?

1817
03:47:31,600 --> 03:47:33,600
No, we renamed it.

1818
03:47:33,600 --> 03:47:34,600
Oh, right.

1819
03:47:34,600 --> 03:47:35,600
Get temperatures.

1820
03:47:35,600 --> 03:47:36,600
File.

1821
03:47:36,600 --> 03:47:41,000
There we go.

1822
03:47:41,000 --> 03:47:45,040
So one suggestion is we could add some styling arguments to plot results.

1823
03:47:45,040 --> 03:47:46,040
That's true.

1824
03:47:46,040 --> 03:47:47,040
Okay.

1825
03:47:47,040 --> 03:47:48,600
I think it's a bit out of the scope here.

1826
03:47:48,600 --> 03:47:51,600
So, do you mean we would add them here?

1827
03:47:51,600 --> 03:47:53,600
Okay, let's do a couple of things.

1828
03:47:53,600 --> 03:47:54,600
Okay.

1829
03:47:54,600 --> 03:47:56,600
So, first of all, there's this hard-coded arguments.

1830
03:47:56,600 --> 03:48:01,600
There's this R minus and color equals B, blue.

1831
03:48:01,600 --> 03:48:02,600
So, there's red.

1832
03:48:04,600 --> 03:48:09,600
What this R minus means is red and connected line.

1833
03:48:09,600 --> 03:48:13,600
And the B is for blue, color is blue.

1834
03:48:13,600 --> 03:48:17,600
And then the line style with two dashes is, well, a dashed line.

1835
03:48:17,600 --> 03:48:21,600
So those could all be optional arguments for this function.

1836
03:48:21,600 --> 03:48:23,600
Yeah. So should we do that?

1837
03:48:23,600 --> 03:48:25,600
Let's do that.

1838
03:48:25,600 --> 03:48:32,600
One thing to think about here though is how much reuse does this function have?

1839
03:48:32,600 --> 03:48:37,600
And if this is for just producing plots for your paper, how much options do you want to add?

1840
03:48:37,600 --> 03:48:41,600
But optional parameters are generally always fine.

1841
03:48:41,600 --> 03:48:46,600
You don't need to give those parameters.

1842
03:48:46,600 --> 03:48:55,160
So we can say, yeah, OK, good, temp color is R.

1843
03:48:55,160 --> 03:48:59,080
And I guess mean color, maybe.

1844
03:49:04,040 --> 03:49:14,560
OK, so what's the benefit of doing it this way?

1845
03:49:14,560 --> 03:49:18,760
Well, it makes it easier to go and change the colors in your,

1846
03:49:20,160 --> 03:49:22,880
when we have a script that plots all of these,

1847
03:49:22,960 --> 03:49:24,920
that creates all of these plots for our paper,

1848
03:49:25,400 --> 03:49:28,200
it's easier to go and change a,

1849
03:49:29,120 --> 03:49:32,800
the color of say all of the temperature plots.

1850
03:49:33,520 --> 03:49:37,360
And I guess if we wanted to plot some with different colors, depending on,

1851
03:49:37,360 --> 03:49:39,320
like what it was.

1852
03:49:40,600 --> 03:49:44,120
So the one thing I mentioned that we want to do in the long run is to plot at

1853
03:49:44,120 --> 03:49:48,880
these three different ways.

1854
03:49:48,880 --> 03:49:49,440
Let's do that.

1855
03:49:49,440 --> 03:49:52,880
The easiest way to do it here is with a for loop.

1856
03:49:52,880 --> 03:49:54,600
So let's start with that.

1857
03:49:54,600 --> 03:49:56,120
Should I do it here?

1858
03:49:56,120 --> 03:49:59,240
Yeah, let's do it here. So let's do a for loop

1859
03:49:59,240 --> 03:50:03,960
of four n measurements in,

1860
03:50:03,960 --> 03:50:08,800
and we want the 25, 50, and 100.

1861
03:50:08,800 --> 03:50:20,440
Okay and we need to indent these things so what else needs to be changed this

1862
03:50:20,440 --> 03:50:25,860
should be end measurements. Yeah and then we probably also want to change the

1863
03:50:25,860 --> 03:50:32,480
file name. Should this be, we used a Python F string thing. Yeah F string for a format

1864
03:50:32,480 --> 03:50:37,000
of formatted strings. All right useful way of doing that. All right okay nice

1865
03:50:37,000 --> 03:50:48,760
looking way. So one suggestion is, should the color and font markers be global variables?

1866
03:50:48,760 --> 03:50:57,400
What do you think? I mean, that would make it less modular in the sense that the function

1867
03:50:57,400 --> 03:51:05,160
would depend on things that are defined outside it. So it would make it harder to take out

1868
03:51:05,160 --> 03:51:11,400
of this specific notebook and use somewhere else.

1869
03:51:11,400 --> 03:51:17,720
But the upside also is if you want to enforce a uniform style across your paper with of

1870
03:51:17,720 --> 03:51:28,880
course users, some function calls could also use this current optional parameters to change

1871
03:51:28,880 --> 03:51:29,880
them.

1872
03:51:29,880 --> 03:51:39,640
could do that with global parameters. Although even then I would suggest making it a Python module

1873
03:51:40,520 --> 03:51:47,000
and then using this space, the global space in quotation marks inside that Python module.

1874
03:51:49,640 --> 03:51:56,040
So yeah, it depends on the situation. There's upsides and downsides. But we want to make

1875
03:51:56,040 --> 03:52:01,800
things as modular as possible here because, well, this is the modular code development lesson.

1876
03:52:03,720 --> 03:52:08,360
So let's try to reduce global variables as much as possible.

1877
03:52:09,480 --> 03:52:12,360
Do we actually have any global variables left? I guess not.

1878
03:52:13,320 --> 03:52:15,000
No. Okay.

1879
03:52:15,000 --> 03:52:15,800
That's fine.

1880
03:52:15,800 --> 03:52:17,480
So everything's controllable here.

1881
03:52:18,440 --> 03:52:24,200
And now I think we also, so one thing we haven't, we've been talking about,

1882
03:52:24,200 --> 03:52:30,920
we haven't mentioned the word or the expression is side effects so previously these functions

1883
03:52:30,920 --> 03:52:37,000
did have some side effects and that means they changed things in a global scope

1884
03:52:38,200 --> 03:52:45,160
so some global variables depended on whether these functions were run or not and now

1885
03:52:45,160 --> 03:52:53,040
Now we pretty much don't have side effects anymore.

1886
03:52:53,040 --> 03:53:01,760
The plotting thing might be changing default axis, but otherwise, yeah.

1887
03:53:01,760 --> 03:53:02,760
Should we run it?

1888
03:53:02,760 --> 03:53:06,320
Yeah, let's run the whole thing.

1889
03:53:06,320 --> 03:53:07,320
I'm curious to see.

1890
03:53:07,320 --> 03:53:10,680
And now let's see what people say.

1891
03:53:10,680 --> 03:53:14,300
Is there something we can do to improve these plots?

1892
03:53:14,300 --> 03:53:21,520
it look different? I guess, yes. So, it's... Yeah, it has a bit more data. But why does

1893
03:53:21,520 --> 03:53:30,080
the first one have... Oh, sorry. There is a 25 there as well. Okay. Yeah. So, it's very

1894
03:53:30,080 --> 03:53:36,880
hard from... So, okay. We don't have access labels. So, it's a bit hard to tell these

1895
03:53:36,880 --> 03:53:42,280
plots apart from each other if you just see one of them. And if we put them in a paper,

1896
03:53:42,280 --> 03:53:47,960
should have access labels yeah so where should we do that

1897
03:53:50,600 --> 03:53:55,000
in the plot function or in here

1898
03:53:55,480 --> 03:53:59,320
is the cell function only going to be used for temperatures and means in the

1899
03:53:59,320 --> 03:54:04,120
future or multiple things i would think so

1900
03:54:04,120 --> 03:54:07,320
it takes a temperatures and means mean argument

1901
03:54:07,320 --> 03:54:14,440
in making it too general might not be a good idea because then

1902
03:54:17,000 --> 03:54:21,160
we kind of end up just coding in the parameters instead of coding in the code.

1903
03:54:24,120 --> 03:54:26,600
But also we want to make it somewhat general.

1904
03:54:29,000 --> 03:54:35,240
So of course, in order to avoid side effects, the label should be set in the plot function

1905
03:54:35,240 --> 03:54:43,940
but also we can we can make the labels in the parameters oh one good suggestion

1906
03:54:43,940 --> 03:54:51,060
is to set the a global y-axis I'll set the same y-axis to each of these plots

1907
03:54:51,060 --> 03:54:56,340
so that we can directly compare them okay

1908
03:54:56,340 --> 03:55:12,260
So now we are how do I the X label needs a closing quotation mark okay how do you

1909
03:55:12,260 --> 03:55:17,620
actually so it's Y limit right is it PLD dot Y limit or do you need to get the

1910
03:55:17,620 --> 03:55:28,140
axis from the plot. ylim or set ylim let's see do we have a okay yes someone

1911
03:55:28,140 --> 03:55:35,100
says this so do I call it with zero and the upper limit yeah and first a lower

1912
03:55:35,100 --> 03:55:41,100
limit and the upper limit should I have a hard-coded upper limit or as an

1913
03:55:41,100 --> 03:55:48,260
argument it I think it should be an argument because it would depend on the

1914
03:55:48,260 --> 03:55:57,500
data but then we probably so we need to pass it as an argument okay we can do

1915
03:55:57,500 --> 03:55:59,740
that

1916
03:56:03,820 --> 03:56:10,820
should there be a default value yeah we're not something like 20 degrees or

1917
03:56:10,820 --> 03:56:20,580
oh wait this is yes okay mm-hmm but that means the lower value should be lower

1918
03:56:20,580 --> 03:56:23,980
yeah okay the lower value definitely shouldn't be zero because we're actually

1919
03:56:23,980 --> 03:56:33,660
always below zero yeah so what would you reckon well it should probably be

1920
03:56:33,660 --> 03:56:42,540
variable. I guess this also should be a variable. Minus 15 probably is a good default value here.

1921
03:56:42,540 --> 03:56:47,020
Okay, this is not maximation. This is max temperature.

1922
03:56:47,020 --> 03:57:09,620
Okay, so we have 20 minutes, so I think it would be good to move to the part where we

1923
03:57:09,620 --> 03:57:15,620
make this a script. Let's just try running it first, though.

1924
03:57:15,620 --> 03:57:16,620
Okay.

1925
03:57:16,620 --> 03:57:19,620
Yeah, okay, well.

1926
03:57:19,620 --> 03:57:27,740
Well, okay, now I'm a bit unsatisfied by the fact that the lower limit is not a parameter,

1927
03:57:27,740 --> 03:57:28,740
but the higher limit is.

1928
03:57:28,740 --> 03:57:29,740
Yeah.

1929
03:57:29,740 --> 03:57:33,060
They should both be parameters.

1930
03:57:33,060 --> 03:57:37,300
Should I reparse, pass them together as a...

1931
03:57:37,300 --> 03:57:44,300
Yeah, okay, like temperature range or Wylim I guess is good enough.

1932
03:57:44,300 --> 03:57:48,300
What was the lower one? Minus 20, minus 15.

1933
03:57:48,300 --> 03:58:05,300
It was minus 15, but minus... I mean, given what we know about the range actually, you can just pass the, yeah, you can just pass the tuple directly.

1934
03:58:05,300 --> 03:58:14,580
like you're just wilding oh well that also works uh like this it works yeah yeah okay i'll try it

1935
03:58:16,580 --> 03:58:25,700
yes okay okay and um for measurements from january i guess we probably don't need to go as far as plus

1936
03:58:25,700 --> 03:58:33,780
15 but um yeah i find it interesting that i know that this is a higher average temperature

1937
03:58:35,300 --> 03:58:37,300
Okay, but yeah, so we got it

1938
03:58:37,700 --> 03:58:41,700
Yeah, so okay. It works now. It does what we want. Um

1939
03:58:43,220 --> 03:58:45,380
Why would we want to move it to a script?

1940
03:58:47,380 --> 03:58:50,740
Well, I mean, I guess we'll have different input files

1941
03:58:52,660 --> 03:59:00,100
And yeah in jupyter I have to go actually edit it every time I change the value

1942
03:59:01,940 --> 03:59:03,940
Yeah, and

1943
03:59:05,300 --> 03:59:16,500
With the script, I can somehow, like, basically, we can make another script that will run this

1944
03:59:16,500 --> 03:59:18,460
with different parameters automatically.

1945
03:59:18,460 --> 03:59:19,460
Yeah.

1946
03:59:19,460 --> 03:59:24,420
And you can, so we can add parameters to the script that you can then from the command

1947
03:59:24,420 --> 03:59:30,400
line, you can pass parameters to the script and different temperature, different Y ranges

1948
03:59:30,400 --> 03:59:34,700
or different numbers of measurements and so on.

1949
03:59:34,700 --> 03:59:45,780
Okay, so to do that, do you want to move the command line or, well, yeah, should I, whatever

1950
03:59:45,780 --> 03:59:48,260
text editor you want to open, that's a.

1951
03:59:48,260 --> 03:59:56,220
Should I create a new Python file from Jupyter so I can make a text file and we can call

1952
03:59:56,220 --> 03:59:57,220
this.

1953
03:59:57,220 --> 04:00:00,220
I should give these names.

1954
04:00:00,220 --> 04:00:11,020
Temp analysis.py Descriptive name is good.

1955
04:00:11,020 --> 04:00:17,980
So one thing that happened when we were moving things in the functions is that we essentially

1956
04:00:17,980 --> 04:00:22,820
removed the comments and the function names became the comments and the same goes for

1957
04:00:22,820 --> 04:00:23,820
file names.

1958
04:00:23,820 --> 04:00:27,420
So a good file name is in itself a comment.

1959
04:00:27,420 --> 04:00:29,420
Makes sense.

1960
04:00:29,420 --> 04:00:35,020
So the first thing to do to make it a script is to copy everything that runs all the Python

1961
04:00:35,020 --> 04:00:39,660
code into the script and in the correct order.

1962
04:00:39,660 --> 04:00:42,540
Actually should I export it as something?

1963
04:00:42,540 --> 04:00:43,540
Yeah.

1964
04:00:43,540 --> 04:00:46,540
Okay, let's try that.

1965
04:00:46,540 --> 04:00:49,700
Is there an...

1966
04:00:49,700 --> 04:00:55,660
Save and export notebook as executable script.

1967
04:00:55,660 --> 04:00:56,660
Okay.

1968
04:00:56,660 --> 04:00:57,660
Okay.

1969
04:00:57,660 --> 04:00:59,660
Okay, well, it downloaded it.

1970
04:01:02,980 --> 04:01:07,460
I'll go to the command line now, if that's okay.

1971
04:01:08,060 --> 04:01:09,700
Yeah.

1972
04:01:09,700 --> 04:01:11,700
New Terminal.

1973
04:01:12,900 --> 04:01:15,260
Let's see, can I move this down? Yes.

1974
04:01:15,260 --> 04:01:33,660
I saw it was called untitled one. So I'm using Linux command line commands here

1975
04:01:33,660 --> 04:01:43,500
to copy a file from the default download location to the current place and

1976
04:01:43,500 --> 04:01:48,860
and replacing the temp analysis script. I guess I should open it again.

1977
04:01:51,100 --> 04:01:52,140
Yes, I guess it didn't.

1978
04:01:55,260 --> 04:02:02,700
Yeah. Okay, here we go. Okay, so now there's some extra comments. The good thing is that there's a

1979
04:02:03,500 --> 04:02:09,420
comment in the beginning that actually is a useful thing to have. So that tells most

1980
04:02:09,420 --> 04:02:16,060
operating systems that this is a Python script so you could run it directly

1981
04:02:16,060 --> 04:02:23,940
without calling Python script name but yeah it's not 100% necessary but I mean

1982
04:02:23,940 --> 04:02:30,180
it's a nice thing to have, nice thing to know. Should I show that? Yeah, why not.

1983
04:02:30,180 --> 04:02:38,340
So we need to make it an executable so we need to change the permissions.

1984
04:02:38,340 --> 04:02:41,260
So this is a Linux command.

1985
04:02:41,260 --> 04:02:55,940
It says make this like chmod, change mode, and now I can run like this.

1986
04:02:55,940 --> 04:02:56,940
It doesn't work.

1987
04:02:56,940 --> 04:02:59,380
Does the graphical plotting even work?

1988
04:02:59,380 --> 04:03:01,820
I actually don't know.

1989
04:03:01,820 --> 04:03:07,900
It probably is actually stuck in the show statement.

1990
04:03:07,900 --> 04:03:09,460
So let's go to the plotting.

1991
04:03:09,460 --> 04:03:10,420
OK, it did open.

1992
04:03:10,420 --> 04:03:11,940
It popped it up.

1993
04:03:11,940 --> 04:03:12,620
OK.

1994
04:03:12,620 --> 04:03:16,380
And if I close it, it does another one.

1995
04:03:16,380 --> 04:03:17,900
And then another one.

1996
04:03:17,900 --> 04:03:20,220
So yeah, for the script, we probably

1997
04:03:20,220 --> 04:03:25,540
want to remove the plot.show line.

1998
04:03:25,540 --> 04:03:26,860
OK.

1999
04:03:26,860 --> 04:03:29,380
Or at least make it optional.

2000
04:03:29,380 --> 04:03:31,580
Let's make it a parameter so we can

2001
04:03:31,580 --> 04:03:34,940
add a parameter that says show plot or something like that.

2002
04:03:34,940 --> 04:03:38,260
and then if show plot, plot.show.

2003
04:03:39,260 --> 04:03:41,140
Maybe default it to false.

2004
04:03:41,140 --> 04:03:42,860
Yeah, yeah, default to false.

2005
04:03:45,620 --> 04:03:46,460
Okay.

2006
04:03:46,460 --> 04:03:47,340
One very good question.

2007
04:03:47,340 --> 04:03:49,180
How about version control?

2008
04:03:49,180 --> 04:03:51,220
We are pretty far with our code

2009
04:03:51,220 --> 04:03:53,700
and we haven't started using version control.

2010
04:03:53,700 --> 04:03:55,340
Should I start with that?

2011
04:03:55,340 --> 04:03:57,100
Yeah, let's start version control.

2012
04:03:57,100 --> 04:04:02,100
So git init and then I guess we'll commit the script

2013
04:04:02,100 --> 04:04:09,920
the script and why not the why not the notebook as well should I give the

2014
04:04:09,920 --> 04:04:18,780
notebook a better name first yeah really what should it be called why not temp

2015
04:04:18,780 --> 04:04:26,460
analysis temp analysis.ipy and b okay yeah

2016
04:04:31,020 --> 04:04:39,980
okay so there is a very good suggestion to include tests but since the previous lesson was tests

2017
04:04:41,580 --> 04:04:45,660
i think we will prioritize adding a command line interface

2018
04:04:45,660 --> 04:04:52,660
Another suggestion is to add a command line interface using ArcParse.

2019
04:04:52,660 --> 04:04:59,660
Do you remember off the top of your head how to do that?

2020
04:04:59,660 --> 04:05:03,660
Because if not, I suggest we use Qlik instead of ArcParse.

2021
04:05:03,660 --> 04:05:08,660
So, I can do it with ArcParse.

2022
04:05:08,660 --> 04:05:12,660
I think I could do that off the top of my head.

2023
04:05:12,660 --> 04:05:16,860
but I'm new to Qlik, so maybe we should do that

2024
04:05:16,860 --> 04:05:18,980
and you can teach me something.

2025
04:05:18,980 --> 04:05:20,380
Okay, let's use Qlik.

2026
04:05:22,660 --> 04:05:24,700
So Qlik is built into Python 3,

2027
04:05:24,700 --> 04:05:26,940
at least most latest versions.

2028
04:05:26,940 --> 04:05:30,180
So you probably don't need to install anything.

2029
04:05:30,180 --> 04:05:33,040
You can just import Qlik at the top of the script.

2030
04:05:34,180 --> 04:05:37,140
We probably should remove the cell name comments as well.

2031
04:05:38,020 --> 04:05:39,620
That's not useful information.

2032
04:05:42,660 --> 04:05:47,700
So, yeah, click as it sounds.

2033
04:05:47,700 --> 04:05:58,700
And then at the bottom where we have this main section, we make that into a function.

2034
04:05:58,700 --> 04:05:59,700
Okay.

2035
04:05:59,700 --> 04:06:03,020
Should I call it main?

2036
04:06:03,020 --> 04:06:04,020
Yeah.

2037
04:06:04,020 --> 04:06:05,620
That makes sense.

2038
04:06:05,620 --> 04:06:12,020
usually the thing you run as a script in a Python script is often called main.

2039
04:06:13,060 --> 04:06:18,820
Now, to keep this as a script, though, we should add the standard Python boilerplate of

2040
04:06:19,380 --> 04:06:24,980
if __name__. That's without the...

2041
04:06:28,340 --> 04:06:34,980
On the left side, it's without quotation marks on the right side with. Okay. Then run main.

2042
04:06:35,620 --> 04:06:39,620
Okay, what does this do?

2043
04:06:39,620 --> 04:06:48,620
Okay, so if you are running this as a script, then the name will be main, otherwise it will

2044
04:06:48,620 --> 04:06:49,960
be the file name.

2045
04:06:49,960 --> 04:06:53,220
So if you're running this as a script, it will run the main function.

2046
04:06:53,220 --> 04:06:57,900
If you are just importing it, it will not run the main function, it will just define

2047
04:06:57,900 --> 04:07:01,180
all the functions that are in this file.

2048
04:07:01,180 --> 04:07:07,940
So this is useful if you think you might ever want to import the functions we have defined

2049
04:07:07,940 --> 04:07:08,940
here.

2050
04:07:08,940 --> 04:07:19,100
It's something you usually just do when you write a Python script, at least at some point.

2051
04:07:19,100 --> 04:07:22,780
So now we need to change the main function a little bit.

2052
04:07:22,780 --> 04:07:26,340
So what parameters should we add?

2053
04:07:26,340 --> 04:07:29,500
Let's do at least the number of measurements.

2054
04:07:29,500 --> 04:07:41,220
So the first thing we add though is we add a decorator above main that's at click.command

2055
04:07:41,220 --> 04:07:44,860
and parenthesis open and close.

2056
04:07:44,860 --> 04:07:51,460
And then below that at click.option.

2057
04:07:51,460 --> 04:07:57,200
And in the parenthesis, we need to first add the name of the option, the command and argument.

2058
04:07:57,200 --> 04:08:05,760
So it would be minus minus measurements or dash dash measurements or num measurements

2059
04:08:05,760 --> 04:08:11,680
maybe.

2060
04:08:11,680 --> 04:08:14,340
And then let's make it a required parameter.

2061
04:08:14,340 --> 04:08:19,640
So comma space required equals true.

2062
04:08:19,640 --> 04:08:21,520
Let's say type.

2063
04:08:21,520 --> 04:08:26,520
So another argument type equals int and at a help text.

2064
04:08:27,100 --> 04:08:30,440
So another parameter help equals

2065
04:08:32,400 --> 04:08:34,020
number of measurements to plot.

2066
04:08:36,920 --> 04:08:39,860
This though, this is not a list.

2067
04:08:39,860 --> 04:08:43,020
Now we're just plotting one number of measurements.

2068
04:08:44,240 --> 04:08:45,640
So remove the for loop.

2069
04:08:45,640 --> 04:08:47,900
Yeah, remove the for loop.

2070
04:08:47,900 --> 04:08:52,060
And now we need to add an argument to the main function

2071
04:08:52,060 --> 04:08:55,940
called num underscore measurements.

2072
04:08:55,940 --> 04:08:58,800
So the dash becomes an underscore.

2073
04:09:00,100 --> 04:09:01,520
Okay, that looks good.

2074
04:09:02,700 --> 04:09:06,020
So now it gets num measurements as a,

2075
04:09:07,620 --> 04:09:10,880
this function gets num measurements as an argument.

2076
04:09:10,880 --> 04:09:11,940
Oh, yeah, good catch.

2077
04:09:11,940 --> 04:09:24,940
Yeah. We can also add an input file. Oh, this is something we didn't do yet. So let's add

2078
04:09:24,940 --> 04:09:26,940
an input file parameter.

2079
04:09:26,940 --> 04:09:30,940
Okay. Could it be before or after numMeasurements?

2080
04:09:30,940 --> 04:09:38,900
Well, it should be after, but the order only needs to be the same as the order of arguments

2081
04:09:38,900 --> 04:09:41,620
in the function.

2082
04:09:41,620 --> 04:09:46,420
So let's call this in file of minus minus in file.

2083
04:09:49,900 --> 04:09:52,940
And then the required is true.

2084
04:09:52,940 --> 04:09:59,620
And the help text is something like file name or file

2085
04:09:59,620 --> 04:10:00,940
name for reading data.

2086
04:10:03,660 --> 04:10:07,100
OK, that makes sense.

2087
04:10:07,100 --> 04:10:10,580
OK, and we're going to remind people it's CSV.

2088
04:10:10,580 --> 04:10:13,060
But now, and now we need to add it as an argument.

2089
04:10:13,060 --> 04:10:18,780
So may needs to take in the file argument.

2090
04:10:18,780 --> 04:10:19,900
Before or after?

2091
04:10:19,900 --> 04:10:23,140
It should be after the number of measurements.

2092
04:10:25,940 --> 04:10:27,540
OK.

2093
04:10:27,540 --> 04:10:31,340
But now, we are not actually using this in getTemperature.

2094
04:10:31,340 --> 04:10:34,540
So let's pass it to getTemperatures.

2095
04:10:34,540 --> 04:10:36,420
Maybe the file name should be before,

2096
04:10:36,420 --> 04:10:39,580
or well, I guess it doesn't matter that much, but.

2097
04:10:39,580 --> 04:10:42,140
To my brain, before makes the most sense,

2098
04:10:42,140 --> 04:10:43,060
like most important.

2099
04:10:43,060 --> 04:10:45,460
Yeah, it's the, yeah, the most important

2100
04:10:45,460 --> 04:10:47,580
for first modifiers later.

2101
04:10:47,580 --> 04:10:48,500
Okay.

2102
04:10:48,500 --> 04:10:50,180
Okay, so then we go up,

2103
04:10:50,180 --> 04:10:52,460
look up to the get temperatures function

2104
04:10:52,460 --> 04:10:54,480
and add file name parameter.

2105
04:11:00,580 --> 04:11:02,780
And this has a different file name

2106
04:11:02,780 --> 04:11:04,460
or different name of the argument,

2107
04:11:04,460 --> 04:11:06,060
but I guess that doesn't matter.

2108
04:11:06,420 --> 04:11:08,420
Yeah, that doesn't matter.

2109
04:11:08,420 --> 04:11:09,420
Okay.

2110
04:11:09,420 --> 04:11:10,420
Okay.

2111
04:11:12,420 --> 04:11:15,420
Should we add an output file argument as well?

2112
04:11:15,420 --> 04:11:17,420
And then try running it.

2113
04:11:17,420 --> 04:11:19,420
Okay, so I will save.

2114
04:11:20,420 --> 04:11:23,420
And actually we haven't run it yet.

2115
04:11:25,420 --> 04:11:27,420
Python.

2116
04:11:29,420 --> 04:11:33,420
Okay, now we have two required arguments.

2117
04:11:33,420 --> 04:11:34,420
So let's just see what happens

2118
04:11:34,420 --> 04:11:37,380
when we run without the required arguments.

2119
04:11:37,540 --> 04:11:41,300
So it tells you that number of measurements is missing,

2120
04:11:41,300 --> 04:11:42,860
and it also tells you that you can get

2121
04:11:42,860 --> 04:11:46,620
more information by writing dash-dash help.

2122
04:11:46,620 --> 04:11:48,980
Should I do dash-dash help?

2123
04:11:48,980 --> 04:11:51,340
Yeah. Let's do dash-dash help.

2124
04:11:51,340 --> 04:11:54,700
So that will print each possible argument

2125
04:11:54,700 --> 04:11:59,540
and the help text we have added to these arguments.

2126
04:11:59,540 --> 04:12:01,380
So we need to add a number of measurements,

2127
04:12:01,380 --> 04:12:02,980
which is an integer,

2128
04:12:03,620 --> 04:12:05,220
and we need to add an input file.

2129
04:12:08,260 --> 04:12:09,940
So how many measurements should we do?

2130
04:12:11,620 --> 04:12:14,740
Not 25. 25 is standard when we started.

2131
04:12:17,220 --> 04:12:18,020
And in file is...

2132
04:12:20,500 --> 04:12:21,780
What was the file name?

2133
04:12:21,780 --> 04:12:22,740
temperatures.csv

2134
04:12:22,740 --> 04:12:24,020
temperatures.csv, okay.

2135
04:12:25,380 --> 04:12:31,860
And it saves it to the standard 25.png still, right?

2136
04:12:31,860 --> 04:12:37,540
yes yes so we didn't add an output file argument so the output file is numberofmeasurements.png

2137
04:12:38,340 --> 04:12:46,180
which works for now but we could also make it an optional argument okay yeah so let's run this

2138
04:12:49,380 --> 04:12:57,620
and it should have created the plot file we have created them a number of times so well

2139
04:12:57,620 --> 04:13:10,260
six seconds ago. Okay, the other ones are older. So, yeah, it clearly worked. Yeah. Okay,

2140
04:13:10,260 --> 04:13:16,820
let's do an optional argument and give it a default value. So, it's almost the same

2141
04:13:18,180 --> 04:13:25,620
as the infile. Sorry. Does infile need the two dashes here? Can we make it a positional argument?

2142
04:13:27,620 --> 04:13:30,620
If it's always there.

2143
04:13:30,620 --> 04:13:35,620
I am not actually sure how you can or whether you can do that with click.

2144
04:13:35,620 --> 04:13:40,620
But I mean, there is usually a way of making using.

2145
04:13:40,620 --> 04:13:41,620
Yeah.

2146
04:13:41,620 --> 04:13:43,620
Creating positional arguments.

2147
04:13:43,620 --> 04:13:45,620
Let's try it and see.

2148
04:13:45,620 --> 04:13:48,620
So what's the other option?

2149
04:13:48,620 --> 04:13:51,620
We need to add a file.

2150
04:13:51,620 --> 04:14:03,100
Maybe this could be optional, equals, it's optional, right?

2151
04:14:03,100 --> 04:14:04,100
Yeah.

2152
04:14:04,100 --> 04:14:09,820
Required is false by default, you don't have to give it the required, but you can give

2153
04:14:09,820 --> 04:14:12,540
it the default value.

2154
04:14:12,540 --> 04:14:17,660
So it's not required, you probably should give it the default value.

2155
04:14:17,660 --> 04:14:22,580
But in this case, I guess the default should be none.

2156
04:14:22,580 --> 04:14:26,500
And then we can construct the filename from the number of measurements.

2157
04:14:26,500 --> 04:14:27,500
Okay.

2158
04:14:27,500 --> 04:14:28,500
Yeah.

2159
04:14:28,500 --> 04:14:44,140
Non-output filename default, or no, default, how do you do?

2160
04:14:44,140 --> 04:14:55,660
So then we need to check if outfile needs to be a parameter of the main function.

2161
04:14:55,660 --> 04:14:59,740
It should be the last parameter of the main function.

2162
04:14:59,740 --> 04:15:02,540
Do I need to set a default to none?

2163
04:15:02,540 --> 04:15:05,500
I don't think so.

2164
04:15:05,500 --> 04:15:07,500
I don't think it makes a difference.

2165
04:15:07,700 --> 04:15:08,700
Yeah.

2166
04:15:12,660 --> 04:15:13,660
OK.

2167
04:15:15,500 --> 04:15:16,500
So

2168
04:15:17,700 --> 04:15:19,500
should I try something here?

2169
04:15:20,700 --> 04:15:21,700
If.

2170
04:15:23,780 --> 04:15:26,540
If outfile is none, outfile

2171
04:15:26,580 --> 04:15:27,580
equals.

2172
04:15:30,260 --> 04:15:32,620
This thing based on the number of measurements.

2173
04:15:32,660 --> 04:15:33,660
Yeah.

2174
04:15:33,660 --> 04:15:40,140
and then we can use that out file and I guess I could do more complicated things

2175
04:15:40,140 --> 04:15:45,540
here like also include the input file name as one of the options and so on

2176
04:15:45,540 --> 04:15:51,020
yeah but well I mean I guess this is good enough yeah okay

2177
04:15:51,020 --> 04:15:57,660
save it and give it a try yeah let's do that okay so I come back to my

2178
04:15:57,660 --> 04:16:06,300
terminal. And now, if this works as I hope, since there's not the dashes here,

2179
04:16:07,180 --> 04:16:11,740
so there's two kinds of arguments. There's optional arguments that have dashes,

2180
04:16:12,540 --> 04:16:19,260
and traditionally they can be in any order. And there's positional arguments like this,

2181
04:16:19,260 --> 04:16:24,220
which have to be in a certain order, but you don't need to give the name of them.

2182
04:16:24,220 --> 04:16:33,980
So, oftentimes, the important arguments that are always required become positional, and

2183
04:16:33,980 --> 04:16:39,300
you give them by order, and optional ones, well, they're like that.

2184
04:16:39,300 --> 04:16:40,300
Should I try running?

2185
04:16:40,300 --> 04:16:41,300
Yeah, let's see.

2186
04:16:41,300 --> 04:16:42,300
Let's see if it works.

2187
04:16:42,300 --> 04:16:43,300
Default none.

2188
04:16:43,300 --> 04:16:44,300
Ah.

2189
04:16:44,300 --> 04:16:45,300
Okay.

2190
04:16:45,300 --> 04:16:46,300
Default equals none.

2191
04:16:46,300 --> 04:16:47,300
Syntax error.

2192
04:16:47,300 --> 04:16:48,300
There's a comma missing.

2193
04:16:48,300 --> 04:16:49,300
Yes.

2194
04:16:49,300 --> 04:16:55,300
No options name.

2195
04:16:55,300 --> 04:16:58,300
Okay, so I guess it has to be.

2196
04:16:58,300 --> 04:17:01,300
Dash dash file.

2197
04:17:01,300 --> 04:17:07,300
So it should be possible to have an option or maybe it's an argument then.

2198
04:17:07,300 --> 04:17:10,300
Could it be argument?

2199
04:17:10,300 --> 04:17:15,300
Well, let's see. Yes, it needs to be an argument.

2200
04:17:15,300 --> 04:17:22,300
So, it's a click.argument and then just a name for the argument, and it can be required.

2201
04:17:22,300 --> 04:17:23,300
Oh.

2202
04:17:23,300 --> 04:17:24,300
Oh.

2203
04:17:24,300 --> 04:17:25,300
Oh.

2204
04:17:25,300 --> 04:17:26,300
Oh.

2205
04:17:26,300 --> 04:17:27,300
Oh.

2206
04:17:27,300 --> 04:17:28,300
Oh.

2207
04:17:28,300 --> 04:17:29,300
Oh.

2208
04:17:29,300 --> 04:17:30,300
Oh.

2209
04:17:30,300 --> 04:17:31,300
Oh.

2210
04:17:31,300 --> 04:17:32,300
Oh.

2211
04:17:32,300 --> 04:17:33,300
Oh.

2212
04:17:33,300 --> 04:17:34,300
Oh.

2213
04:17:34,300 --> 04:17:35,300
Oh.

2214
04:17:35,300 --> 04:17:36,300
Oh.

2215
04:17:36,300 --> 04:17:37,300
Oh.

2216
04:17:37,300 --> 04:17:38,300
Oh.

2217
04:17:38,300 --> 04:17:39,300
Oh.

2218
04:17:39,300 --> 04:17:40,300
Oh.

2219
04:17:40,300 --> 04:17:41,300
Oh.

2220
04:17:41,300 --> 04:17:42,300
Oh.

2221
04:17:42,300 --> 04:17:43,300
Oh.

2222
04:17:43,300 --> 04:17:44,300
Oh.

2223
04:17:44,300 --> 04:17:49,300
making an argument instead of option has probably failed somehow.

2224
04:17:49,300 --> 04:17:55,300
It might be that it needs to be before the options. I'm not sure.

2225
04:17:55,300 --> 04:18:02,300
Okay. Well, let's go back to option.

2226
04:18:02,300 --> 04:18:07,300
Yeah.

2227
04:18:07,300 --> 04:18:13,300
So we have to give it the infile. Let's see. What else?

2228
04:18:13,300 --> 04:18:17,540
So yeah, someone asks if the click.option lines need to match the order

2229
04:18:17,540 --> 04:18:22,340
in the function arguments. And yeah, that is how click works.

2230
04:18:23,700 --> 04:18:24,580
So it doesn't go by name.

2231
04:18:24,580 --> 04:18:27,620
They always need to be the same order. No, yeah, it doesn't go by name.

2232
04:18:27,620 --> 04:18:28,120
Okay.

2233
04:18:31,620 --> 04:18:36,100
Yeah, there we go. So it worked. I guess we don't need to look at the plot again.

2234
04:18:36,100 --> 04:18:38,660
But can we try saving to a different file name?

2235
04:18:38,660 --> 04:18:41,020
Yeah, let's try that.

2236
04:18:41,020 --> 04:18:43,580
And then I think it's time for a break.

2237
04:18:43,580 --> 04:18:44,580
Yes.

2238
04:18:44,580 --> 04:18:53,100
Because we have a couple of good questions and a few other things to do after the break.

2239
04:18:53,100 --> 04:18:54,100
How many can we plot?

2240
04:18:54,100 --> 04:18:59,940
Can we plot 500?

2241
04:18:59,940 --> 04:19:03,740
I don't know how many measurements there are in the file.

2242
04:19:03,740 --> 04:19:07,180
There are not 500 days in a year.

2243
04:19:07,180 --> 04:19:19,420
might fail well let's do 200 okay I'm gonna do it now I push enter and it

2244
04:19:19,420 --> 04:19:27,380
worked okay so there should be a new file with a name called 200 plot 200 and

2245
04:19:27,380 --> 04:19:35,980
yep it worked yeah it's probably not one measurement per day because otherwise

2246
04:19:35,980 --> 04:19:39,820
stay number 175 you wouldn't expect to go below minus 15.

2247
04:19:39,820 --> 04:19:41,100
Right, yeah, yeah.

2248
04:19:42,780 --> 04:19:50,700
So it would make sense to add more arguments and make the script more general, like adding

2249
04:19:51,500 --> 04:19:56,140
the option of giving three different numbers of measurements if we actually want these three

2250
04:19:56,140 --> 04:20:01,980
different plots in our paper, or just write another script that does that instead.

2251
04:20:01,980 --> 04:20:02,980
Yeah.

2252
04:20:02,980 --> 04:20:03,980
Okay.

2253
04:20:03,980 --> 04:20:04,980
But otherwise...

2254
04:20:04,980 --> 04:20:05,980
Yeah.

2255
04:20:05,980 --> 04:20:13,040
Let's go to the break end, I guess.

2256
04:20:13,040 --> 04:20:20,580
So there's a correction that says click is not in the Python default library.

2257
04:20:20,580 --> 04:20:22,580
I'm actually not 100% sure about this.

2258
04:20:22,580 --> 04:20:24,460
Maybe it's not.

2259
04:20:24,460 --> 04:20:29,220
I have the impression that it is in some of the latest versions of Python.

2260
04:20:29,220 --> 04:20:36,580
At least I generally don't install it, but maybe I just have it somewhere.

2261
04:20:36,580 --> 04:20:43,780
But it is good to include it as a dependency anyway.

2262
04:20:43,780 --> 04:20:44,780
So yeah.

2263
04:20:44,780 --> 04:20:45,780
Okay.

2264
04:20:45,780 --> 04:20:49,620
It's not a part of the standard library.

2265
04:20:49,620 --> 04:20:53,220
So yeah, it needs to be a dependency, which we'll do after the break.

2266
04:20:53,220 --> 04:20:54,220
Yes.

2267
04:20:54,220 --> 04:20:57,060
So see you at 12 past.

2268
04:20:57,060 --> 04:21:01,060
Sounds good. Bye.

2269
04:21:27,060 --> 04:21:29,120
you

2270
04:21:57,060 --> 04:21:59,120
you

2271
04:22:27,060 --> 04:22:29,120
you

2272
04:22:57,060 --> 04:22:59,120
you

2273
04:23:27,060 --> 04:23:29,120
you

2274
04:23:57,060 --> 04:23:59,120
you

2275
04:24:27,060 --> 04:24:29,120
you

2276
04:24:57,060 --> 04:24:59,120
you

2277
04:25:27,060 --> 04:25:29,120
you

2278
04:25:57,060 --> 04:25:59,120
you

2279
04:26:27,060 --> 04:26:29,120
you

2280
04:26:57,060 --> 04:26:59,120
you

2281
04:27:27,060 --> 04:27:29,120
you

2282
04:27:57,060 --> 04:27:59,120
you

2283
04:28:27,060 --> 04:28:29,120
you

2284
04:28:57,060 --> 04:28:59,120
you

2285
04:29:27,060 --> 04:29:29,120
you

2286
04:29:57,060 --> 04:29:59,120
you

2287
04:30:27,060 --> 04:30:29,120
you

2288
04:30:57,060 --> 04:31:12,060
Hello, we're back.

2289
04:31:12,060 --> 04:31:13,060
Hello.

2290
04:31:13,060 --> 04:31:15,060
Or so we hope.

2291
04:31:15,060 --> 04:31:20,060
So where were we now? We had just done this command line.

2292
04:31:20,060 --> 04:31:31,580
So, [name], for this command line thing, how is it better than making a notebook I can rerun?

2293
04:31:33,500 --> 04:31:42,380
Yeah, so one thing is that it could be a utility that you share to many people,

2294
04:31:42,380 --> 04:31:48,780
that people just install and can run without knowing any Python. But really for a lot of

2295
04:31:48,780 --> 04:31:55,100
people also a notebook is something that's easier to run than a command from the command line.

2296
04:31:55,980 --> 04:32:01,980
So that's actually a bit hard to say which one is better. So I added a question in the notes

2297
04:32:01,980 --> 04:32:08,940
actually. So please vote and give your opinions on what's actually better. Which one would you

2298
04:32:09,820 --> 04:32:17,180
rather get if someone's sharing a project with you. But the big upside in a command line interface

2299
04:32:17,180 --> 04:32:24,300
is that you can then use it to script an entire workflow from downloading the files

2300
04:32:25,100 --> 04:32:32,540
to producing the plots and maybe producing tables for your paper, plots for your paper.

2301
04:32:32,540 --> 04:32:40,300
Like you can go from raw data to a finished paper in a single command once you write the script.

2302
04:32:40,300 --> 04:32:48,860
Yeah. And I guess for the computing clusters and so on, that's very relevant, isn't it?

2303
04:32:50,460 --> 04:32:55,660
Yeah. Yeah, it is. Usually you don't get an interactive environment for command,

2304
04:32:55,660 --> 04:33:01,580
so you don't get a Jupyter notebook or a computing cluster.

2305
04:33:02,140 --> 04:33:07,260
This actually happens pretty often when people come to us. They have a Jupyter notebook and says,

2306
04:33:07,260 --> 04:33:14,740
says, I need to run this on the cluster for 10,000 different values.

2307
04:33:14,740 --> 04:33:22,860
And well, if it's a loop in a Jupyter notebook, you can only run it on one processor.

2308
04:33:22,860 --> 04:33:31,060
But once it is as a command line, it's really easy to write another interface, like whether

2309
04:33:31,060 --> 04:33:37,860
it's using state make or your own script or whatever that will go and run it 10,000 separate

2310
04:33:37,860 --> 04:33:47,340
times on 10,000 different computer processors and then combine them later.

2311
04:33:47,340 --> 04:33:54,460
Okay, so we have some time rather limited I think.

2312
04:33:54,460 --> 04:34:01,020
One thing we probably should do is move a bit closer to a package and also this is something

2313
04:34:01,020 --> 04:34:10,780
that also helps answer this question. So what I'm thinking of is taking the functions from

2314
04:34:10,780 --> 04:34:16,940
this file that could be used in a different project and turning them into a module that

2315
04:34:16,940 --> 04:34:22,620
you could share with other people. So one question is, do you think the plotting function

2316
04:34:22,620 --> 04:34:34,420
is too specific, or should we just include all of these three functions?

2317
04:34:34,420 --> 04:34:40,220
Should we pretend the plotting function is too specific and the other ones are the general

2318
04:34:40,220 --> 04:34:41,220
code?

2319
04:34:41,220 --> 04:34:46,740
So let's say the plotting function is something we wrote to have a uniform plotting thing

2320
04:34:46,740 --> 04:34:52,220
for a single project or for a paper, and the other two are something that could easily

2321
04:34:52,220 --> 04:34:58,780
be used in other projects as well. So let's take the first two functions and create a

2322
04:34:58,780 --> 04:35:02,700
new file or a new Python module.

2323
04:35:02,700 --> 04:35:09,700
Okay. So to the browser, new, new text file.

2324
04:35:09,700 --> 04:35:21,700
So this could be something like temperature utilities, that's pi.

2325
04:35:21,700 --> 04:35:24,060
And then we need to paste these functions here.

2326
04:35:24,060 --> 04:35:29,140
So these two get moved.

2327
04:35:29,140 --> 04:35:31,660
Yeah.

2328
04:35:31,660 --> 04:35:34,580
Does this need any other dependencies?

2329
04:35:34,580 --> 04:35:41,360
it does depend on no it's not doing any plotting does it it depends on only on

2330
04:35:41,360 --> 04:35:49,360
pandas I guess okay so that we need to import pandas is panda still needed here

2331
04:35:49,360 --> 04:35:53,360
I don't think so.

2332
04:35:53,360 --> 04:35:57,360
I will move it.

2333
04:35:57,360 --> 04:36:01,360
Okay.

2334
04:36:01,360 --> 04:36:05,360
And now what do I have to do?

2335
04:36:05,360 --> 04:36:09,360
Okay, so now we need to import the functions

2336
04:36:09,360 --> 04:36:13,360
from this temputils.

2337
04:36:13,360 --> 04:36:17,360
One way to do it without having to change any of the code below is to import

2338
04:36:17,360 --> 04:36:22,360
from TempUtils, but then this maybe depends a bit more on,

2339
04:36:27,160 --> 04:36:30,720
oh, sorry, this makes it a bit less readable

2340
04:36:30,720 --> 04:36:35,720
because now if you import specific functions

2341
04:36:36,540 --> 04:36:38,360
and then you're looking at the code below,

2342
04:36:38,360 --> 04:36:40,040
nothing about that function name

2343
04:36:40,040 --> 04:36:42,040
tells you that it came from TempUtils

2344
04:36:43,760 --> 04:36:47,320
and not from Pandas, for example, or Matplotlib.

2345
04:36:47,320 --> 04:36:48,240
So yeah.

2346
04:36:48,240 --> 04:36:51,200
So maybe import temputils.

2347
04:36:51,200 --> 04:36:55,400
And you can give it a shorter name if you want to.

2348
04:36:55,400 --> 04:36:58,280
But it's fine as it is.

2349
04:36:58,280 --> 04:37:00,080
And then when we call the functions,

2350
04:37:00,080 --> 04:37:03,320
it needs to be temputils dot something.

2351
04:37:06,240 --> 04:37:08,000
And compute statistics also.

2352
04:37:12,840 --> 04:37:14,320
OK.

2353
04:37:14,320 --> 04:37:16,160
OK.

2354
04:37:16,160 --> 04:37:19,680
Now it should work again.

2355
04:37:19,680 --> 04:37:22,240
And then for distributing this code,

2356
04:37:22,240 --> 04:37:24,600
one very important thing that we haven't done yet

2357
04:37:24,600 --> 04:37:28,760
is keeping track of dependencies.

2358
04:37:28,760 --> 04:37:33,440
So in our original notebook, we didn't really

2359
04:37:33,440 --> 04:37:35,120
have any way of doing that.

2360
04:37:35,120 --> 04:37:38,760
I mean, you can always create a requirements.txt file

2361
04:37:38,760 --> 04:37:39,400
and have a list.

2362
04:37:39,400 --> 04:37:53,140
So, okay, so how would you, let's think if this is a bigger project, let's imagine that

2363
04:37:53,140 --> 04:37:58,040
you have more than two files in the project that import things.

2364
04:37:58,040 --> 04:38:01,040
How would you figure out what the dependencies are?

2365
04:38:01,040 --> 04:38:05,960
Well, what I usually do.

2366
04:38:05,960 --> 04:38:06,960
What I usually do.

2367
04:38:06,960 --> 04:38:07,960
Yeah, what would you do?

2368
04:38:07,960 --> 04:38:13,320
You don't actually have to do it to show it, but what would you do?

2369
04:38:13,320 --> 04:38:17,560
So I'd make a new virtual environment with nothing installed in it.

2370
04:38:17,560 --> 04:38:22,800
I would try running my things.

2371
04:38:22,800 --> 04:38:26,440
I would see what fails with import errors.

2372
04:38:26,440 --> 04:38:32,700
I would add that to requirements.txt in the virtual environment and then repeat until

2373
04:38:32,700 --> 04:38:35,360
it's done.

2374
04:38:35,360 --> 04:38:40,520
That would be basically exactly my answer as well.

2375
04:38:40,520 --> 04:38:47,720
We would create an empty environment and then install packages until it works and put all

2376
04:38:47,720 --> 04:38:51,180
of those package names into requirements.txt.

2377
04:38:51,180 --> 04:38:56,080
But now we do know what we want, so we can just write a requirements.txt file for this

2378
04:38:56,080 --> 04:38:58,440
project.

2379
04:38:58,440 --> 04:39:04,500
Another way of doing it, of course, is you start a requirements.txt when you still can

2380
04:39:04,500 --> 04:39:09,700
track all the dependencies in your head when they are just in a couple of files and then

2381
04:39:09,700 --> 04:39:14,180
you write them down and when the project grows you keep adding stuff to the requirements.

2382
04:39:16,180 --> 04:39:20,900
Because it just pandas and click that's required. And matplotlib.plotlib.

2383
04:39:27,460 --> 04:39:31,220
How do you make sure that we got this correct and that it hasn't become

2384
04:39:31,220 --> 04:39:34,500
doesn't go off after a time.

2385
04:39:34,500 --> 04:39:39,900
Well, I mean, basically the same trick.

2386
04:39:39,900 --> 04:39:44,260
You create an empty environment, you install the stuff in requirements.txt, and then you

2387
04:39:44,260 --> 04:39:45,660
see if it runs.

2388
04:39:45,660 --> 04:39:54,180
But actually, since we just set up tests in the previous session, what our test workflow

2389
04:39:54,180 --> 04:39:59,580
on GitHub did is install all the requirements and then run the tests.

2390
04:39:59,580 --> 04:40:05,460
So if the tests succeed, clearly the requirements were sufficient.

2391
04:40:05,460 --> 04:40:11,220
So that means not only when we have the test, it's validating our code, it validates all

2392
04:40:11,220 --> 04:40:12,220
the requirements.

2393
04:40:12,220 --> 04:40:17,940
So if someone else wants to use the code, we can be reasonably sure that it has all

2394
04:40:17,940 --> 04:40:22,060
they need and there's not something obvious being left out of it.

2395
04:40:22,060 --> 04:40:23,540
Yeah, exactly.

2396
04:40:23,540 --> 04:40:28,980
So that's a great thing about these test workflows, because they don't run on your machine.

2397
04:40:28,980 --> 04:40:34,000
If the test succeeds, then it runs on at least two different machines.

2398
04:40:34,000 --> 04:40:40,180
It runs on your machine, but it also runs on this cloud system that's just installed

2399
04:40:40,180 --> 04:40:46,660
from scratch with only the dependencies you specified.

2400
04:40:46,660 --> 04:40:49,740
So that's a lot better than just running on one machine.

2401
04:40:49,740 --> 04:40:50,740
Yeah.

2402
04:40:50,740 --> 04:40:51,740
Okay.

2403
04:40:51,740 --> 04:40:52,740
So requirements.

2404
04:40:52,740 --> 04:40:58,380
I guess we already have the Conda environment, so there's – well, and we shouldn't be

2405
04:40:58,380 --> 04:41:03,740
too specific about how things are done in Python. We have another course for that, actually.

2406
04:41:03,740 --> 04:41:08,780
Yeah, so that's fine. So yeah, now we have specified the requirements and should be

2407
04:41:08,780 --> 04:41:14,540
installable by anyone. I mean, we don't really have a lot of time. We could just move to wrap up.

2408
04:41:17,100 --> 04:41:19,100
One option would be to add tests to

2409
04:41:19,100 --> 04:41:33,540
to all the functions we defined, but how complicated would that get? Yeah, compute statistics is

2410
04:41:33,540 --> 04:41:47,620
easier to test, we can just test that one.

2411
04:41:47,620 --> 04:41:57,860
One more thing that we touched on, but we didn't, I guess, quite finish. What do you

2412
04:41:57,860 --> 04:42:04,500
think about the function name compute statistics that's a bit general for what

2413
04:42:04,500 --> 04:42:13,460
it does yeah but it computes one specific statistic it it just computes

2414
04:42:13,460 --> 04:42:19,280
the mean yeah so maybe we should change it to compute mean yeah should I do it

2415
04:42:19,280 --> 04:42:25,420
or yeah yeah let's do that but that's that's these I was about to say last

2416
04:42:25,420 --> 04:42:32,860
step, that's the second to last step, then we commit the changes to git and give it a

2417
04:42:32,860 --> 04:42:35,660
nice name, or give it a nice commit message.

2418
04:42:35,660 --> 04:42:39,460
compute statistics, compute mean.

2419
04:42:39,460 --> 04:42:46,780
Now we probably did too many changes between commits, so we're going to have a big commit

2420
04:42:46,780 --> 04:42:48,180
that changes a lot of things.

2421
04:42:48,180 --> 04:42:49,180
Yeah.

2422
04:42:49,180 --> 04:42:52,660
Should I try running it to verify it works?

2423
04:42:52,660 --> 04:42:55,300
Yeah, yeah, let's do.

2424
04:42:55,300 --> 04:43:04,740
Okay. And you could also run PyTest on test and you need the name of the file.

2425
04:43:04,740 --> 04:43:06,700
So it's temputils.

2426
04:43:06,700 --> 04:43:11,660
Name error compute.

2427
04:43:11,660 --> 04:43:13,580
Ah, of course.

2428
04:43:13,580 --> 04:43:15,700
Yes.

2429
04:43:15,700 --> 04:43:21,300
So I forgot to rename it.

2430
04:43:21,300 --> 04:43:24,460
Compute.

2431
04:43:24,460 --> 04:43:28,460
I typed the name wrong.

2432
04:43:32,220 --> 04:43:38,100
Assert to, I did the test wrong.

2433
04:43:39,620 --> 04:43:42,260
Hey, it worked finally.

2434
04:43:42,260 --> 04:43:42,620
Great.

2435
04:43:42,620 --> 04:43:43,660
Okay.

2436
04:43:43,660 --> 04:43:47,740
Now, there were a bunch of things wrong with the test.

2437
04:43:47,740 --> 04:43:48,900
Now that it works,

2438
04:43:48,900 --> 04:43:51,180
are we sure that it's correct?

2439
04:43:51,180 --> 04:43:54,140
You shouldn't stop thinking if the test is right,

2440
04:43:54,140 --> 04:43:56,380
just because you get the correct result.

2441
04:43:56,380 --> 04:43:58,460
Yeah.

2442
04:43:58,460 --> 04:44:03,020
But yeah, I think the mean of 1, 2, and 3 is, in fact, 2.

2443
04:44:03,020 --> 04:44:04,300
That's correct.

2444
04:44:04,300 --> 04:44:11,580
So from the command line, I will git add temp analysis,

2445
04:44:11,580 --> 04:44:16,460
temp utils, requirements.

2446
04:44:16,460 --> 04:44:21,780
From before, we have learned git status to see what's missing.

2447
04:44:21,780 --> 04:44:23,500
We have the plots that are generated.

2448
04:44:23,500 --> 04:44:25,180
Should we make a gitignore file?

2449
04:44:29,500 --> 04:44:30,340
Maybe we can...

2450
04:44:30,340 --> 04:44:32,980
That kind of, well, that would eat up the time

2451
04:44:32,980 --> 04:44:36,460
of the, well, the wrap up and discussion.

2452
04:44:36,460 --> 04:44:41,460
But it's a useful thing to remind people of though.

2453
04:44:44,380 --> 04:44:45,220
Yeah.

2454
04:44:46,660 --> 04:44:48,060
Should we go to notes then?

2455
04:44:48,060 --> 04:44:50,780
Okay, yeah, let's go to notes.

2456
04:44:50,780 --> 04:44:56,700
And yeah, just please continue to have a conversation about it.

2457
04:44:56,700 --> 04:44:58,420
How could we still make this better?

2458
04:45:01,260 --> 04:45:11,020
What else would you do to in this project?

2459
04:45:11,020 --> 04:45:12,220
Did you think it was useful?

2460
04:45:17,140 --> 04:45:19,380
I thought of another benefit of the command line.

2461
04:45:19,380 --> 04:45:21,940
So let's say we send this analysis,

2462
04:45:21,940 --> 04:45:26,740
and it's some reasonably complicated thing, to someone,

2463
04:45:26,740 --> 04:45:29,140
and they want to run it on their own data.

2464
04:45:30,900 --> 04:45:34,060
It's easier for them to have this defined interface

2465
04:45:34,060 --> 04:45:37,060
that says, here's how you give the input file

2466
04:45:37,060 --> 04:45:39,120
and how you configure it,

2467
04:45:39,120 --> 04:45:42,180
than to have to go figure out your code,

2468
04:45:42,180 --> 04:45:45,080
modify it, and whatever.

2469
04:45:45,080 --> 04:45:55,080
If we run several different analysis, so let's say we have a different input file that we are testing,

2470
04:45:55,080 --> 04:46:02,080
then we don't have to modify our main code for every individual task,

2471
04:46:02,080 --> 04:46:06,080
and have to remember how to go back to the tasks we had before.

2472
04:46:06,080 --> 04:46:16,080
How similar is this to what you would do in your own work?

2473
04:46:16,080 --> 04:46:28,080
It depends a bit. Often I don't start from Jupyter.

2474
04:46:28,080 --> 04:46:35,880
I often start from scripts, but if there's a lot of plotting involved then I would start from Jupyter.

2475
04:46:35,880 --> 04:46:38,880
And then it would pretty much follow this workflow.

2476
04:46:38,880 --> 04:46:39,880
Yeah.

2477
04:46:39,880 --> 04:46:48,040
I think at some point, certain parts get complicated enough that they make more sense as a separate

2478
04:46:48,040 --> 04:46:49,760
utility module.

2479
04:46:49,760 --> 04:46:54,160
And then that might become a package of its own.

2480
04:46:54,160 --> 04:46:59,280
That's just the dependency of the script.

2481
04:46:59,280 --> 04:47:07,160
And yeah, if the end result is something other than displaying plots in Jupyter, then it

2482
04:47:07,160 --> 04:47:13,260
would become a script at some point or a command line interface.

2483
04:47:13,260 --> 04:47:19,640
But Jupyter is pretty good at displaying plots and running a relatively simple Python script.

2484
04:47:19,640 --> 04:47:24,520
So one option here would have been kind of to go back to Jupyter.

2485
04:47:24,520 --> 04:47:30,080
If you want to give this analysis to someone who finds Jupyter more comfortable than the

2486
04:47:30,080 --> 04:47:37,840
command line, then you could import this utility functions into Jupyter, import all the functions

2487
04:47:37,840 --> 04:47:46,960
needed into Jupyter, then just call them in the Jupyter notebook in a single cell, basically.

2488
04:47:46,960 --> 04:47:51,920
So we might have the Jupyter notebook that's used for development and testing and exploring

2489
04:47:51,920 --> 04:47:58,920
new data, in addition to the command line which runs known analysis on existing data.

2490
04:47:58,920 --> 04:47:59,920
Yeah.

2491
04:47:59,920 --> 04:48:00,920
Okay.

2492
04:48:00,920 --> 04:48:01,920
Yeah.

2493
04:48:01,920 --> 04:48:02,920
Um.

2494
04:48:02,920 --> 04:48:03,920
Hmm.

2495
04:48:03,920 --> 04:48:04,920
Okay.

2496
04:48:04,920 --> 04:48:13,920
Well, this is our time limit.

2497
04:48:13,920 --> 04:48:16,920
Yeah.

2498
04:48:16,920 --> 04:48:20,920
Um, so people are already filling in the feedback form.

2499
04:48:20,920 --> 04:48:26,040
But yeah, please do.

2500
04:48:26,040 --> 04:48:28,960
We'd like to get feedback for today.

2501
04:48:28,960 --> 04:48:31,720
So we do have a little bit more, so don't leave yet.

2502
04:48:31,720 --> 04:48:33,960
We have an outro session.

2503
04:48:33,960 --> 04:48:40,000
And also, we plan on talking.

2504
04:48:40,000 --> 04:48:43,520
There are some requests to talk a little bit about AI code

2505
04:48:43,520 --> 04:48:44,960
generation and things like that.

2506
04:48:44,960 --> 04:48:53,640
that. Should we talk about the AI code stuff first? So what are the specific

2507
04:48:53,640 --> 04:49:00,520
questions? Maybe we can add a section? Yeah.

2508
04:49:02,520 --> 04:49:07,560
Let's see, what do people think here?

2509
04:49:07,560 --> 04:49:12,240
What should we talk about, if anything?

2510
04:49:12,240 --> 04:49:15,680
So who uses AI to make code?

2511
04:49:15,680 --> 04:49:18,560
I must say that I do not right now.

2512
04:49:18,560 --> 04:49:28,000
I have now started using it all the time, since my employer is providing the license,

2513
04:49:28,000 --> 04:49:29,960
and then why not?

2514
04:49:29,960 --> 04:49:32,760
So yeah, GitHub Copilot.

2515
04:49:32,760 --> 04:49:35,720
So how does it work?

2516
04:49:35,720 --> 04:49:41,800
It essentially makes suggestions based on the code you have right now.

2517
04:49:41,800 --> 04:49:47,000
There is a chat interface as well, so you can ask it to write some code that does X.

2518
04:49:47,000 --> 04:49:56,480
But the interface that works better actually is usually the code completions.

2519
04:49:56,480 --> 04:50:04,000
It's mainly like there's always been this code completion systems that try to guess

2520
04:50:04,000 --> 04:50:12,240
the kind of code you would want to add and allow you to, for example, write in languages

2521
04:50:12,240 --> 04:50:19,200
that have more boilerplate code, create a class, like write all the boilerplate code

2522
04:50:19,200 --> 04:50:31,080
for a class with a couple of, typing a couple of keystrokes, and Copilot is doing a lot

2523
04:50:31,080 --> 04:50:38,520
of that for me. I see. It's like all the standard ARC parse stuff that I'd always be making. Yeah.

2524
04:50:38,520 --> 04:50:44,680
Yeah. Okay. But it goes a little bit beyond, but it cannot do anything

2525
04:50:45,640 --> 04:50:53,160
really new or really complicated. So it's just this basic, relatively basic things.

2526
04:50:54,840 --> 04:51:00,760
It will usually have a suggestion for even more complicated things, but it's more often than not

2527
04:51:00,760 --> 04:51:05,960
not that you just have to go and change a lot of things. It's only the basic structure

2528
04:51:05,960 --> 04:51:13,600
that's correct. But it's still doing a lot of work, though. I don't know, how would

2529
04:51:13,600 --> 04:51:28,160
I evaluate? How much time is it saving? 50% or a bit more of actual coding time?

2530
04:51:28,160 --> 04:51:33,600
Yeah. What's the license of the generated code?

2531
04:51:36,320 --> 04:51:43,520
For Copilot it's essentially they just give you the copyright as long as you know

2532
04:51:44,960 --> 04:51:53,840
as the usual warning is it might in some I think relatively rare cases output code that is an exact

2533
04:51:53,840 --> 04:51:58,800
copy of something that already is out there. In fact, it will do that very often if you

2534
04:51:58,800 --> 04:52:02,640
take something really simple, but that's just like you would type it out by hand in exactly

2535
04:52:02,640 --> 04:52:09,040
the same way anyway. So that code is very structured. So there's a lot of exact copies

2536
04:52:09,040 --> 04:52:13,840
out there. But yeah, I mean, at some point when it gets complicated enough, you have to

2537
04:52:13,840 --> 04:52:17,840
You have to know yourself that it's not a copy of something.

2538
04:52:17,840 --> 04:52:23,840
And that's a big caveat.

2539
04:52:23,840 --> 04:52:30,840
But yeah, otherwise, usually they just give you the copyright,

2540
04:52:30,840 --> 04:52:35,840
because otherwise the service model wouldn't really make a lot of sense.

2541
04:52:35,840 --> 04:52:44,840
So, I heard that we should do the outro before this discussion, too, before people leave.

2542
04:52:44,840 --> 04:52:46,840
So, okay, mix that up.

2543
04:52:46,840 --> 04:52:54,840
So, [name], would you like to grab the screen and summarize everything for us and tell us what we should do next?

2544
04:52:57,840 --> 04:52:58,840
Yes, hello.

2545
04:52:58,840 --> 04:52:59,840
Okay.

2546
04:52:59,840 --> 04:53:01,840
Hello, hello. Can you hear me all right?

2547
04:53:01,840 --> 04:53:02,840
Yes.

2548
04:53:02,840 --> 04:53:10,600
and can you see my screen? Yes I can see it's now also on the stream. Okay thank

2549
04:53:10,600 --> 04:53:16,240
you very much [name] and [name] for this very interesting session. So this was now

2550
04:53:16,240 --> 04:53:22,320
the very last session of our workshop but it's not the very last thing

2551
04:53:22,320 --> 04:53:27,920
that you can join for this course. So stay with me for a moment to tell you

2552
04:53:27,920 --> 04:53:35,840
more about that. So this was the Code Refinery workshop for this spring. We would like to

2553
04:53:35,840 --> 04:53:41,800
thank you, the participants, very much for participating, putting so many questions and

2554
04:53:41,800 --> 04:53:48,720
so good feedback after each day in our collaborative document and discussing the questions and like

2555
04:53:48,720 --> 04:53:55,140
being very active there. We'd also like to thank our team leaders and hosts that have

2556
04:53:55,140 --> 04:54:03,700
made this possible to spread to even more people and provide more personal support to some of our

2557
04:54:03,700 --> 04:54:11,140
participants here. Then also a very big thank you to all of our instructors of this workshop. It was

2558
04:54:11,780 --> 04:54:20,020
a quite big group this time. I think it went all in all very well. Then we also had some

2559
04:54:20,020 --> 04:54:27,140
Some people working in the background that have so far never appeared on stream that

2560
04:54:27,140 --> 04:54:35,500
were answering the questions in the collaborative document in addition to the instructors.

2561
04:54:35,500 --> 04:54:42,560
And then we also had some local partners that hosted the rooms there and answered questions.

2562
04:54:42,560 --> 04:54:46,060
So you all make these workshops possible and so enjoyable.

2563
04:54:46,060 --> 04:54:47,500
Thank you very much.

2564
04:54:47,500 --> 04:54:55,100
[name] and [name] have already told you about the feedback section, so if you go to the

2565
04:54:55,100 --> 04:55:01,660
collaborative document and in the very bottom we have our feedback, a little bit about today

2566
04:55:01,660 --> 04:55:07,220
and then you can also let us know what you thought overall about this workshop, no matter

2567
04:55:07,220 --> 04:55:13,700
if you joined all the days or just a few of them, like let us know how you like this workshop,

2568
04:55:13,700 --> 04:55:19,220
you like this format, things that we can do better, things that you really much like

2569
04:55:19,220 --> 04:55:22,640
that we should not get rid of, and all these kind of things.

2570
04:55:22,640 --> 04:55:29,020
And if you come up with something later, you can also send us an email to support.coderefinery.org.

2571
04:55:29,020 --> 04:55:35,620
Or you can also, and you are all very welcome to, also without feedback, join our chat.

2572
04:55:35,620 --> 04:55:38,060
It's on Zulip.

2573
04:55:38,060 --> 04:55:40,300
So you can find this behind the link.

2574
04:55:40,300 --> 04:55:43,200
Actually, is this document linked from the collaborative document?

2575
04:55:43,200 --> 04:55:49,120
If not, I would like to ask one of my colleagues here to link that so that you can click those

2576
04:55:49,120 --> 04:55:52,720
links also.

2577
04:55:52,720 --> 04:55:57,880
Then if you have struggled with some of the exercise instructions or found some broken

2578
04:55:57,880 --> 04:56:04,720
links or have some update suggestions for our lesson material, now during the first

2579
04:56:04,720 --> 04:56:09,600
week of this course, you have learned how to do issues, pull requests, so you can practice

2580
04:56:09,600 --> 04:56:18,160
that on our lesson material and we are very happy to get also like feedback that way and we are

2581
04:56:18,160 --> 04:56:25,840
always at least trying to develop this workshop materials further latest before the next workshop

2582
04:56:25,840 --> 04:56:32,640
so we are really relying on your feedback here and also we will take a look at the

2583
04:56:32,640 --> 04:56:38,000
questions that you ask and see if we can improve the material to make these things more clear.

2584
04:56:39,600 --> 04:56:51,600
At some point in the future you will likely receive a post-workshop survey that is then about how your work in the long run has been affected by visiting this workshop.

2585
04:56:51,600 --> 04:57:00,600
So we know that there is like a lot of topics here and it's a lot of things to take in at such a short time.

2586
04:57:00,600 --> 04:57:10,600
But maybe after like a few weeks, you may get back to some of the topics and you may get an understanding to where these topics can help you in your work.

2587
04:57:10,600 --> 04:57:14,600
So that's why it will take some time before you will get this workshop, but it will come.

2588
04:57:14,600 --> 04:57:23,600
And if you get it, then please answer it. That helps us a lot to continue the work that we are doing.

2589
04:57:23,600 --> 04:57:31,640
Yeah, because it has been a lot of material, a lot of possibly new concepts for you.

2590
04:57:31,640 --> 04:57:38,000
This is just a starting point and there is so much more to learn and dig into.

2591
04:57:38,000 --> 04:57:42,240
You may have noticed in this week too that we tried to show some of the exercises on

2592
04:57:42,240 --> 04:57:47,760
stream, but there were also in many lessons, many more exercises that we did not go through.

2593
04:57:47,760 --> 04:57:52,640
So you can go back to the material, look through them, try to do them yourself.

2594
04:57:52,640 --> 04:57:57,920
And if you do that within the next two weeks and you have some trouble with this, you can

2595
04:57:57,920 --> 04:58:01,380
also come to our bring your own code sessions.

2596
04:58:01,380 --> 04:58:07,880
And this is also if you have some more questions like we had this morning, for example, for

2597
04:58:07,880 --> 04:58:12,760
the automated testing, many people were asking something about like how to do this, how to

2598
04:58:12,760 --> 04:58:14,800
apply this to your own code.

2599
04:58:14,800 --> 04:58:19,160
If you have questions like this, then this bring your own code sessions are a very good

2600
04:58:19,160 --> 04:58:20,160
place to come.

2601
04:58:20,160 --> 04:58:26,780
Many of our instructors will be there, and we will try to help you further with the topics

2602
04:58:26,780 --> 04:58:29,180
discussed in this workshop.

2603
04:58:29,180 --> 04:58:41,100
So it's the next Tuesdays, 1, 2, 3, and the link will be sent to all registered participants.

2604
04:58:41,100 --> 04:58:46,620
As mentioned many times already, our materials are publicly available.

2605
04:58:46,620 --> 04:58:52,380
are all open source and will continue to be updated. You can also reuse them for your

2606
04:58:53,180 --> 04:59:00,220
own workshops and this link leads you to the main overview of all the lessons. So there's not just

2607
04:59:01,500 --> 04:59:05,900
the lessons that we went through here in this workshop, but there's also a few more there.

2608
04:59:05,900 --> 04:59:11,420
So you can go and take a look. The videos will stay on YouTube, you can always like re-watch

2609
04:59:11,420 --> 04:59:17,900
them. They also have these little nice section tags that you can jump around to the topics that

2610
04:59:17,900 --> 04:59:29,260
are of interest to you. And then we have a lot of local partners that provide support

2611
04:59:30,380 --> 04:59:38,860
with the topics around this workshop. And you can find the list of the partners here

2612
04:59:38,860 --> 04:59:45,740
for Finland, Sweden, Norway and Denmark. Many also with their link to the training calendar

2613
04:59:45,740 --> 04:59:52,060
where there is like further training going more into high performance computing or

2614
04:59:53,020 --> 04:59:57,660
I don't know what we other have, scientific computing with Python and these kind of things.

2615
04:59:57,660 --> 05:00:03,980
So you can check them out and some of them are also not necessarily only for the group for example

2616
05:00:03,980 --> 05:00:09,500
at Aalto University in Finland, but some of these trainings are also open for all.

2617
05:00:10,300 --> 05:00:16,460
So even if you are not in these areas, I would recommend to check out the training calendars of

2618
05:00:16,460 --> 05:00:25,740
these institutions. And then again, a reminder about the certificates. If you want one,

2619
05:00:25,740 --> 05:00:34,540
check out the course web page, you can do that briefly. Up top you can find this tab to

2620
05:00:34,540 --> 05:00:40,460
certificates, if you click that there's instructions on what you can do to get a certificate for this

2621
05:00:40,460 --> 05:00:53,980
course. And then how you can support us, so we are a project and it always helps to like tell

2622
05:00:53,980 --> 05:00:59,980
everyone about us, tell your friends if you like this course, tell them about our materials,

2623
05:00:59,980 --> 05:01:07,900
our webpage, use our social media handles. We have been trying to post a little bit about this

2624
05:01:07,900 --> 05:01:14,460
workshop too, so use those to re-share your experience about it. We are also eagerly reading

2625
05:01:14,460 --> 05:01:23,660
these posts, so please make use of that. And we will probably have more workshops of this type

2626
05:01:23,660 --> 05:01:30,220
further developed in some way, so you can always come back as a team leader, for example,

2627
05:01:30,220 --> 05:01:35,420
so you can bring your colleagues, sit together in a room and watch the stream together and then do

2628
05:01:35,420 --> 05:01:41,020
the exercises together, for example, like some of you have already done. And then you can also

2629
05:01:41,900 --> 05:01:48,620
become part of the Code Refinery team. In general, the project lives currently still from

2630
05:01:48,620 --> 05:01:54,940
in-kind contributions by the organizations, meaning that our organizations sponsor our time

2631
05:01:54,940 --> 05:01:59,340
for the project. So if that is something that sounds interesting to you and especially your

2632
05:01:59,340 --> 05:02:07,180
organization, please get in touch. As mentioned, we live in the chat, so that's where really

2633
05:02:07,180 --> 05:02:13,180
everything goes, where we also have a nice help channel where you can add your questions that you

2634
05:02:13,180 --> 05:02:19,260
have for example surrounding this workshop or also later when you implement these things you can

2635
05:02:19,260 --> 05:02:25,900
go and ask for help there's a lot of so-called research software engineers especially around that

2636
05:02:25,900 --> 05:02:34,620
really enjoy helping people with their computational research challenges and then we also have a

2637
05:02:34,620 --> 05:02:42,380
newsletter about once or twice a year where we update about upcoming workshops or this we recently

2638
05:02:42,380 --> 05:02:49,020
switched our newsletter provider, so let's hope this goes well. You can find the link

2639
05:02:49,020 --> 05:02:55,620
on our webpage behind the newsletter. And then I mentioned already this research software

2640
05:02:55,620 --> 05:03:02,720
engineers, so many of our instructors are actually research software engineers and we

2641
05:03:02,720 --> 05:03:11,120
also have an association, the Nordic Research Software Engineers, where you can find the

2642
05:03:11,120 --> 05:03:24,800
link behind this one here. I think it's just nordic-rse.org. Let's see. And so the research

2643
05:03:24,800 --> 05:03:31,520
software engineers, they are like these people that are between the researchers and the software

2644
05:03:31,520 --> 05:03:38,880
developers that combine this experience of both of these worlds. And basically, the code refinery

2645
05:03:38,880 --> 05:03:45,440
workshop could be also called like a introduction to research software engineering. So if you liked

2646
05:03:45,440 --> 05:03:50,960
what you learned here and would like to go further in that, then the Nordic RSE community is a very

2647
05:03:50,960 --> 05:03:56,960
nice place to be in. Basically we live also in the same chat as Code Refinery

2648
05:03:58,400 --> 05:04:04,480
in the Nordic RSE channel. We sometimes have some like seminar series and upcoming now also

2649
05:04:04,480 --> 05:04:11,920
So a conference in Espoo in Finland in the end of May that you can still submit contributions

2650
05:04:11,920 --> 05:04:16,560
to that you can still come and join us for.

2651
05:04:16,560 --> 05:04:22,200
And we are also on Twitter X, sorry.

2652
05:04:22,200 --> 05:04:24,840
And that was it with the wrap up.

2653
05:04:24,840 --> 05:04:31,640
Do my fellow colleagues here on call still have to add something to this?

2654
05:04:31,640 --> 05:04:39,720
other upcoming courses do we have? Someone commented on that in the feedback.

2655
05:04:39,720 --> 05:04:49,920
Yes, I guess the next one that is by some of the code refinery community is the

2656
05:04:49,920 --> 05:04:55,000
tools and techniques, Tuesday's tools and techniques for HPC, but we don't have a

2657
05:04:55,000 --> 05:05:00,880
event page for that yet. It will come up in April and you can probably find these

2658
05:05:00,880 --> 05:05:07,880
information soon on the Aalto training page, I would guess.

2659
05:05:07,880 --> 05:05:17,920
So, the other courses of the similar form, in the beginning of June, we have a live stream

2660
05:05:17,920 --> 05:05:25,480
kickstart course, mainly hosted by Aalto University, but each year some others join.

2661
05:05:25,480 --> 05:05:32,480
And it's about scaling your work from your local things to a computer cluster.

2662
05:05:32,480 --> 05:05:45,360
And, ah, okay, I'm under attack.

2663
05:05:45,360 --> 05:05:54,520
So okay, well at least you get some entertainment

2664
05:05:54,520 --> 05:06:02,920
Yeah, and then in the autumn, we have a yearly Python for Scientific Computing course,

2665
05:06:02,920 --> 05:06:08,840
which is quite similar to what we're doing here. And who knows, maybe more in the future.

2666
05:06:12,440 --> 05:06:16,280
Through Code Refinery, sometimes we advertise other courses by partners,

2667
05:06:16,280 --> 05:06:18,040
which should be of similar quality.

2668
05:06:18,040 --> 05:06:30,240
Should we go back to the notes? Yes. What other? So one of the biggest changes we've had is we

2669
05:06:30,240 --> 05:06:37,560
made the second week more demo-based rather than exercise-based, and we'd like your comments on

2670
05:06:37,560 --> 05:06:44,240
that. So part of the reason was that we didn't have as many exercises the second week anyway,

2671
05:06:44,240 --> 05:06:49,840
So when people came prepared for exercises, then there were not enough

2672
05:06:49,840 --> 05:06:56,000
and helpers, the people who were prepared to help with the exercises, didn't have

2673
05:06:56,000 --> 05:07:03,360
enough to do. So, yeah.

2674
05:07:03,360 --> 05:07:15,480
Yeah.

2675
05:07:15,480 --> 05:07:16,480
Any other comments?

2676
05:07:16,480 --> 05:07:29,600
Do any other instructors want to join here and give general questions and answers?

2677
05:07:29,600 --> 05:07:41,920
Yeah. Should we? Oh, [name] is here. Do you have any thoughts on AI coding?

2678
05:07:41,920 --> 05:07:50,040
Yeah, first of all, thanks for today. I was watching it and I was typing. Really enjoyed

2679
05:07:50,040 --> 05:07:56,120
the many questions. I had to really type a lot. It was really cool today. Yeah, I mean,

2680
05:07:56,120 --> 05:07:58,560
AI coding exists, it's an important tool.

2681
05:08:02,560 --> 05:08:05,440
Do you use AI coding much?

2682
05:08:05,440 --> 05:08:06,400
Yes, I do.

2683
05:08:06,400 --> 05:08:07,640
Okay.

2684
05:08:07,640 --> 05:08:09,600
I do, so AI-assisted coding.

2685
05:08:11,200 --> 05:08:13,840
Sometimes I write comments and then it tries to code,

2686
05:08:13,840 --> 05:08:16,960
or I write a code and it tries the comments for me,

2687
05:08:16,960 --> 05:08:18,720
or I ask it to write a test,

2688
05:08:19,840 --> 05:08:22,320
or I write the test first and ask it to write the code

2689
05:08:22,320 --> 05:08:23,440
that matches the test.

2690
05:08:26,120 --> 05:08:28,120
It saves a lot of time.

2691
05:08:28,120 --> 05:08:33,120
There were a few questions and points about translating.

2692
05:08:33,120 --> 05:08:39,120
And that's kind of one way of thinking about what these AI models are really good at.

2693
05:08:39,120 --> 05:08:44,120
It's essentially, well, I guess there's two big things.

2694
05:08:44,120 --> 05:08:47,120
And one is translating from one format to another.

2695
05:08:47,120 --> 05:08:52,120
So that would include also taking a code

2696
05:08:53,760 --> 05:08:54,960
and writing tests for it,

2697
05:08:54,960 --> 05:08:58,400
or taking a test and writing code that fulfills that test.

2698
05:08:58,400 --> 05:09:03,040
And like sort of trying to go from one type

2699
05:09:03,040 --> 05:09:05,320
of information to another,

2700
05:09:05,320 --> 05:09:07,480
or just going from one language to another.

2701
05:09:09,560 --> 05:09:10,840
Yeah, and that works really well.

2702
05:09:10,840 --> 05:09:13,560
So I, for instance, I'm now learning R.

2703
05:09:13,560 --> 05:09:15,360
So I'm a beginner in R.

2704
05:09:15,360 --> 05:09:16,680
So what I've tried a few times

2705
05:09:16,680 --> 05:09:19,080
is that I have a Python code and I ask it to translate it

2706
05:09:19,080 --> 05:09:21,280
to R and then I have a really good starting point.

2707
05:09:21,280 --> 05:09:24,440
So it can help me actually learn the language.

2708
05:09:25,800 --> 05:09:28,480
I can see like, okay, this is something that works

2709
05:09:28,480 --> 05:09:30,200
and I can study it and I can improve it

2710
05:09:30,200 --> 05:09:31,560
and maybe it's not perfect,

2711
05:09:33,600 --> 05:09:36,440
but I believe that it can also help beginners

2712
05:09:37,880 --> 05:09:40,000
to get started and learn coding.

2713
05:09:42,320 --> 05:09:44,160
So the other big thing that it's really good at

2714
05:09:44,160 --> 05:09:46,480
is just remembering stuff.

2715
05:09:46,480 --> 05:09:49,920
So it's like, in principle, Google also is useful

2716
05:09:49,920 --> 05:09:51,760
for finding any, or any web search is good

2717
05:09:51,760 --> 05:09:55,060
for finding all of the same information

2718
05:09:55,060 --> 05:10:00,060
but this is more integrated to the actual coding workflow.

2719
05:10:00,320 --> 05:10:05,280
So it can not just find the documentation for some library

2720
05:10:05,280 --> 05:10:10,280
but actually suggest how to use it in your code.

2721
05:10:10,540 --> 05:10:13,920
Although the information does tend to be old pretty quickly.

2722
05:10:13,920 --> 05:10:15,820
So you have to take that into account.

2723
05:10:16,480 --> 05:10:29,240
Yeah.

2724
05:10:29,240 --> 05:10:36,440
So from the whole workshop, what are your main takeaway messages that you'd like people

2725
05:10:36,440 --> 05:10:40,720
to carry with them.

2726
05:10:46,040 --> 05:10:59,520
Anyone? Version control is super useful. It makes everything possible. Yeah.

2727
05:10:59,520 --> 05:11:09,380
Everything runs on top of version control and publishing your code as early as possible

2728
05:11:09,380 --> 05:11:20,720
is relatively, it's easy and it enables a lot of useful things.

2729
05:11:20,720 --> 05:11:23,000
What do you mean by publishing as soon as possible?

2730
05:11:23,000 --> 05:11:28,680
You mean putting on, like making it available by GitHub or similar?

2731
05:11:28,680 --> 05:11:33,680
Yeah, or at least putting it online somewhere, and preferably with a license.

2732
05:11:33,680 --> 05:11:43,680
Yeah, because GitHub and many of these platforms, they provide free stuff to public projects, usually.

2733
05:11:43,680 --> 05:11:48,680
So the sooner you go public, the sooner you can start using these.

2734
05:11:48,680 --> 05:12:04,600
Okay, does anyone else have any other comments in the notes?

2735
05:12:04,600 --> 05:12:07,920
Or should we wrap it up?

2736
05:12:07,920 --> 05:12:14,880
I see a question from earlier, where to find more resources and examples on modular development

2737
05:12:14,880 --> 05:12:19,360
in testing for research?

2738
05:12:19,360 --> 05:12:26,760
What would you say there?

2739
05:12:26,760 --> 05:12:29,520
It's a great question.

2740
05:12:29,520 --> 05:12:32,520
I'm not sure there is this like one resource for it.

2741
05:12:32,520 --> 05:12:33,520
Yeah.

2742
05:12:33,520 --> 05:12:34,520
I would study.

2743
05:12:34,520 --> 05:12:38,080
Have a look at the code that you are using.

2744
05:12:38,080 --> 05:12:39,360
And how do they do testing?

2745
05:12:39,360 --> 05:12:42,200
How do they structure their code?

2746
05:12:42,200 --> 05:12:44,360
But it can be a little bit too big.

2747
05:12:44,360 --> 05:12:47,440
So maybe look at the smaller projects.

2748
05:12:47,440 --> 05:12:50,040
Have a look at other projects, how they do it.

2749
05:12:50,040 --> 05:12:57,000
I'm not aware of one book that will discuss this in one place.

2750
05:12:57,000 --> 05:13:03,880
Are you aware of any other things that cover these topics specifically for research in

2751
05:13:03,880 --> 05:13:08,720
this much or more detail?

2752
05:13:08,720 --> 05:13:21,720
Did most researchers sort of figure this out themselves, or how does it go?

2753
05:13:21,720 --> 05:13:22,720
I mean, I really don't know.

2754
05:13:22,720 --> 05:13:29,760
I learned this sort of by following other projects and having to figure it out myself.

2755
05:13:29,760 --> 05:13:37,000
So that's why I like this course so much, because it can save other people that effort.

2756
05:13:37,000 --> 05:13:43,560
I have a feeling that still a lot of it is figuring it out yourself, but at least you

2757
05:13:43,560 --> 05:13:50,180
see the vision and, well, if our audience is researchers, then you're good at figuring

2758
05:13:50,180 --> 05:13:51,180
out new things.

2759
05:13:51,180 --> 05:14:05,360
So as long as you know what to look for, you can find and adapt.

2760
05:14:05,360 --> 05:14:11,440
There are a couple of papers that are nice, which is this Ten Simple Rules to etc. etc.

2761
05:14:11,440 --> 05:14:14,360
Ten Simple Rules to Make Your Code More.

2762
05:14:14,360 --> 05:14:19,320
Oh, they are nice.

2763
05:14:19,320 --> 05:14:20,320
They are good summaries.

2764
05:14:20,320 --> 05:14:21,320
Yeah.

2765
05:14:21,320 --> 05:14:27,760
And I guess it would be nice if we made a collection and listed all of them.

2766
05:14:27,760 --> 05:14:32,120
There's a link to a book called The Turing Way, which I know about.

2767
05:14:32,120 --> 05:14:40,440
it cover the details of coding? I see chapters on code testing, code review, and so on. So

2768
05:14:45,240 --> 05:14:49,320
I guess that would be a good thing to look at that goes into some good depth.

2769
05:14:49,320 --> 05:15:04,160
Yeah, okay, should we call it good then?

2770
05:15:04,160 --> 05:15:06,960
We're almost at the hour now.

2771
05:15:06,960 --> 05:15:12,880
So thanks to everyone who attended.

2772
05:15:12,880 --> 05:15:24,080
Yeah, I can just say we will send an email to everybody with some summary. We don't forget

2773
05:15:24,080 --> 05:15:30,600
that in a week. So next Tuesday, the Tuesday after, you can show up at the sessions, bring

2774
05:15:30,600 --> 05:15:36,200
your code, bring your questions, it will be on zoom, it will not be recorded, not streamed.

2775
05:15:36,200 --> 05:15:42,320
We will email you the connection details. And I hope people show up and that we can

2776
05:15:42,320 --> 05:15:44,320
and show up with questions.

2777
05:15:44,320 --> 05:15:45,320
Yes.

2778
05:15:45,320 --> 05:15:46,320
Okay.

2779
05:15:46,320 --> 05:15:47,320
Well.

2780
05:15:47,320 --> 05:15:55,840
Should I hang it up then?

2781
05:15:55,840 --> 05:16:02,320
Thanks a lot and good luck in your future research.

2782
05:16:02,320 --> 05:16:03,320
Thanks everybody.

2783
05:16:03,320 --> 05:16:04,320
See you soon.

2784
05:16:04,320 --> 05:16:05,320
Thank you.

2785
05:16:05,320 --> 05:16:06,320
Thank you.

2786
05:16:06,320 --> 05:16:07,320
Bye.

2787
05:16:07,320 --> 05:16:08,320
Bye.

2788
05:16:08,320 --> 05:16:08,820
Bye.

2789
05:16:12,320 --> 05:16:14,380
you

2790
05:16:42,320 --> 05:16:44,380
you

2791
05:17:12,320 --> 05:17:14,380
you

2792
05:17:42,320 --> 05:17:44,380
you

2793
05:18:12,320 --> 05:18:14,380
you

2794
05:18:42,320 --> 05:18:44,380
you

2795
05:19:12,320 --> 05:19:14,380
you

