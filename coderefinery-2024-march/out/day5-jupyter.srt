1
00:00:00,000 --> 00:00:09,920
Hello, we are back.

2
00:00:09,920 --> 00:00:16,600
And if you didn't notice, that was a live jingle done by [name] here, who also made

3
00:00:16,600 --> 00:00:19,600
our long one.

4
00:00:19,600 --> 00:00:22,760
Hello, everyone.

5
00:00:22,760 --> 00:00:24,040
Yeah.

6
00:00:24,040 --> 00:00:29,960
So um, and you know, I just realized that whisper

7
00:00:29,960 --> 00:00:35,320
is probably going to get desynced with the speed transcription after that happened, but

8
00:00:36,360 --> 00:00:41,960
it's okay. Yeah, so we're back from the break. Hopefully everyone had a good lunch.

9
00:00:41,960 --> 00:00:50,440
I'm still eating mine here. But what do we have now? So it's the Jupyter lesson, and with us is

10
00:00:51,080 --> 00:00:59,400
[name] and [name]. So I guess I will head out and let them introduce it. So bye for now.

11
00:00:59,400 --> 00:01:08,040
Hello everyone. Yeah, my name is [name]. I work at CSC Finland and happy to go through

12
00:01:08,040 --> 00:01:12,120
the Jupyter lesson with you today.

13
00:01:12,120 --> 00:01:18,000
And hi from Norway, [name] here, University of TromsÃ¸. I'm so much looking forward to

14
00:01:18,000 --> 00:01:22,960
discuss Jupyter notebooks together with [name]. Thanks also for the wonderful music. And our

15
00:01:22,960 --> 00:01:26,240
Our plan will be and we have one and a half hours.

16
00:01:26,240 --> 00:01:31,480
We will take a break in circa 50 minutes, we will take a 10 minute break.

17
00:01:31,480 --> 00:01:35,160
And the best way to participate will be to watch what we do.

18
00:01:35,160 --> 00:01:39,500
We will demonstrate a few things, but we will follow the material.

19
00:01:39,500 --> 00:01:43,240
So if you want to try it later on your on your own, you can.

20
00:01:43,240 --> 00:01:51,120
And the best way to make this really interactive is to interact through the notes document.

21
00:01:51,120 --> 00:01:54,440
So please ask, comment, give suggestions.

22
00:01:54,440 --> 00:02:00,040
I'm here, [name], and I will try, I will watch the document, ask questions and

23
00:02:00,040 --> 00:02:03,000
keep trying to keep a conversation going.

24
00:02:03,000 --> 00:02:04,000
Yeah.

25
00:02:04,000 --> 00:02:06,280
Okay, forward.

26
00:02:06,280 --> 00:02:07,680
Okay.

27
00:02:07,680 --> 00:02:12,840
So start from the lesson material.

28
00:02:12,840 --> 00:02:16,160
I have the screen share.

29
00:02:16,160 --> 00:02:19,080
Is it visible in the stream?

30
00:02:19,080 --> 00:02:20,080
Great.

31
00:02:20,080 --> 00:02:33,920
Great. So what is Jupyter Notebooks or JupyterLab? This episode mentions

32
00:02:33,920 --> 00:02:38,720
Jupyter Notebooks many times but I think we actually demonstrate

33
00:02:38,720 --> 00:02:46,920
JupyterLab. They are tools for writing especially code but

34
00:02:46,920 --> 00:02:57,000
other stuff as well. So we are now talking about a tool which we really like and whether

35
00:02:57,000 --> 00:03:06,340
you are using it for coding Python, coding R or just writing documentation or other text,

36
00:03:06,340 --> 00:03:16,540
it doesn't matter. This is basically a tool to write some nicely structured text and code.

37
00:03:16,540 --> 00:03:23,880
The purpose of this lesson is to get an idea what to use Jupyter for and we want to show

38
00:03:23,880 --> 00:03:30,420
some examples and let's get it started.

39
00:03:30,420 --> 00:03:36,520
[name], do you use Jupyter in a daily basis or how?

40
00:03:36,520 --> 00:03:43,480
Yeah, not daily basis, but maybe weekly basis.

41
00:03:43,480 --> 00:03:53,120
And I use it often to I use it personally if for data analysis, yeah, data visualization.

42
00:03:53,120 --> 00:03:59,560
So if I want to visualize something, plot something, or do some statistics on data,

43
00:03:59,560 --> 00:04:01,200
that's when I use it.

44
00:04:01,200 --> 00:04:08,280
Or when I want to try out a little prototype, at some point, if the if the code gets bigger

45
00:04:08,280 --> 00:04:12,600
and more complex, often I move outside of a notebook, and I do something else.

46
00:04:12,600 --> 00:04:15,760
but it's often a starting point for coding.

47
00:04:15,760 --> 00:04:16,680
Yeah, I think so too.

48
00:04:16,680 --> 00:04:19,760
So when starting to develop,

49
00:04:19,760 --> 00:04:21,200
you want to test ideas

50
00:04:21,200 --> 00:04:25,320
and like figure out different ways to do something,

51
00:04:25,320 --> 00:04:28,240
then I really like Jupyter as a tool.

52
00:04:28,240 --> 00:04:32,000
And what we now see here is a screenshot.

53
00:04:32,000 --> 00:04:34,160
So there are two examples,

54
00:04:34,160 --> 00:04:39,160
one on the left with just code in one block.

55
00:04:39,160 --> 00:04:47,560
one block basically this can be a script file and then there's the output showing and in the right

56
00:04:47,560 --> 00:04:57,160
side there is a same code same functionality but in smaller blocks and this is what Jupyter

57
00:04:57,880 --> 00:05:06,920
can do so you have one line of code and the output of that line of code and then you continue

58
00:05:06,920 --> 00:05:19,000
you. So it's a way to really structurize the code and also what I like is that you can

59
00:05:19,000 --> 00:05:27,040
in the middle of your code you can see for example output of one variable like in this

60
00:05:27,040 --> 00:05:38,000
case, let me actually zoom in a little bit, so there's this variable data frame that has been

61
00:05:38,000 --> 00:05:47,360
used in this code and in the middle of this whole script I check what's the value of that data frame

62
00:05:47,360 --> 00:05:54,640
and then I continue with the code. So that kind of functionality makes it easier to develop in

63
00:05:54,640 --> 00:05:56,940
in a Jupyter Notebook.

64
00:05:56,940 --> 00:05:59,280
So is it so that you sometimes like to run

65
00:06:00,480 --> 00:06:03,240
a portion of a code at a time just to test it?

66
00:06:03,240 --> 00:06:05,240
And I think for this it might be good.

67
00:06:05,240 --> 00:06:08,200
Also, if you want to have something like a lab book,

68
00:06:08,200 --> 00:06:13,200
like a log book of code, ideas, images, documentation,

69
00:06:14,100 --> 00:06:19,040
everything in like one story, it can be a nice solution.

70
00:06:19,040 --> 00:06:20,200
Yeah.

71
00:06:20,200 --> 00:06:23,540
So yeah, can you put images in JupyterLab

72
00:06:23,540 --> 00:06:24,780
for Jupyter Notebook?

73
00:06:24,780 --> 00:06:25,940
Yes.

74
00:06:25,940 --> 00:06:27,020
Right.

75
00:06:27,020 --> 00:06:29,420
We have an example later where we will do that.

76
00:06:29,420 --> 00:06:34,420
Images, equations, text, tables, what else?

77
00:06:37,460 --> 00:06:38,860
Code.

78
00:06:38,860 --> 00:06:40,100
Yeah, obviously, yeah.

79
00:06:41,860 --> 00:06:42,940
Right.

80
00:06:42,940 --> 00:06:47,260
And if you are already using Visual Studio Code,

81
00:06:47,260 --> 00:06:52,260
for example, and you don't want to learn a new tool,

82
00:06:52,260 --> 00:06:55,740
I think you should still follow this lecture through,

83
00:06:55,740 --> 00:07:01,340
because you can actually run Jupyter Notebooks in Visual Studio Code,

84
00:07:01,340 --> 00:07:03,340
like shown in here,

85
00:07:03,340 --> 00:07:09,500
and Google Colab and GitHub Codespaces also mentioned.

86
00:07:10,780 --> 00:07:16,020
We can do an example of that as well.

87
00:07:16,340 --> 00:07:20,620
Here, scrolling down the lesson material,

88
00:07:20,620 --> 00:07:30,520
There's a couple of case examples that you can go and see and these are particular examples

89
00:07:30,520 --> 00:07:42,380
of how Jupyter can help researchers to create code that is reusable to other people in like

90
00:07:42,380 --> 00:07:44,600
one glance.

91
00:07:44,600 --> 00:07:55,860
So there's the code and there's explanations around the code so that a person who has never

92
00:07:55,860 --> 00:08:01,740
seen your code before can open it and read through the explanations and then run the

93
00:08:01,740 --> 00:08:07,620
code and see the results.

94
00:08:07,620 --> 00:08:10,980
Do we have time to check some of these?

95
00:08:10,980 --> 00:08:13,200
I think we have time.

96
00:08:13,200 --> 00:08:14,920
Cool.

97
00:08:14,920 --> 00:08:18,720
So I click the one of this quick look

98
00:08:18,720 --> 00:08:21,800
at short segments of data, quick view.

99
00:08:21,800 --> 00:08:25,040
It opens this GitHub page.

100
00:08:25,040 --> 00:08:29,280
And here, there are two options offered.

101
00:08:29,280 --> 00:08:34,400
You can use this binder, which we will do a better

102
00:08:34,400 --> 00:08:35,480
example also later.

103
00:08:35,480 --> 00:08:38,120
But then there's also this Colab.

104
00:08:38,120 --> 00:08:41,480
And both of these work.

105
00:08:41,480 --> 00:08:46,360
I assume that Colab maybe opens a little bit more quickly.

106
00:08:46,360 --> 00:08:49,640
So I, yeah, really nice.

107
00:08:49,640 --> 00:08:52,680
So now I can see the same notebook

108
00:08:52,680 --> 00:08:56,520
that those researchers did and created.

109
00:08:56,520 --> 00:09:00,800
And let's see if I can also run these cells.

110
00:09:00,800 --> 00:09:04,280
Oh, it needs a Google sign in.

111
00:09:04,280 --> 00:09:09,280
That's the downside of this Google product.

112
00:09:11,560 --> 00:09:13,840
But yes, in principle,

113
00:09:13,840 --> 00:09:18,840
it's possible to run this whole notebook here.

114
00:09:19,120 --> 00:09:21,920
So you can test around, maybe tweak something

115
00:09:21,920 --> 00:09:24,480
if you want to understand how this works.

116
00:09:24,480 --> 00:09:27,840
And you can see the plots, for example,

117
00:09:27,840 --> 00:09:32,840
here in the same file where the code is.

118
00:09:34,280 --> 00:09:41,520
Really nice. Yeah, that's really reproducibility right here. It's, this can be a nice, really

119
00:09:41,520 --> 00:09:47,120
nice way of sharing supporting information that should go along with the manuscript.

120
00:09:47,120 --> 00:09:52,580
So the manuscript has to has to summary but then if I want to verify it or to understand

121
00:09:52,580 --> 00:09:58,460
it or I want to reuse it. I have all the steps here available really a wonderful solution

122
00:09:58,460 --> 00:10:06,220
to share. So instead of just putting graphics, I mean images and tables into the manuscript,

123
00:10:06,220 --> 00:10:10,800
it can be a nice way to put images and tables into the manuscript, but then put all the

124
00:10:10,800 --> 00:10:16,880
steps into a notebook. And here we show you Jupyter Notebook, but maybe if you are developing

125
00:10:16,880 --> 00:10:24,880
R, maybe you're using R Markdown. And that's a similar idea. So here's more about the idea

126
00:10:24,880 --> 00:10:29,080
And again, then really, it's more about the why than the how.

127
00:10:29,080 --> 00:10:30,080
Yeah.

128
00:10:30,080 --> 00:10:41,720
So basically, in RStudio, can you do the similar thing in R Markdown?

129
00:10:41,720 --> 00:10:45,240
I have never used it, but I think it's possible.

130
00:10:45,240 --> 00:10:46,240
Yes, yes.

131
00:10:46,240 --> 00:10:50,800
Sorry, I was just, I will answer one question in the notes, but it's the same idea that

132
00:10:50,800 --> 00:10:59,360
you can interleave code and markdown text in the same document.

133
00:10:59,360 --> 00:11:07,400
And please, all the comments and questions as usual in the collaborative document, especially

134
00:11:07,400 --> 00:11:15,520
[name] is now checking out them and can raise something out loud if we find something that

135
00:11:15,520 --> 00:11:21,480
we particularly want to share in the stream also.

136
00:11:21,480 --> 00:11:26,240
Scrolling onwards to the lesson material, there's use cases and pitfalls.

137
00:11:26,240 --> 00:11:36,000
So as with any tool, Jupyter is good for something and then not so good for some occasions.

138
00:11:36,000 --> 00:11:47,940
Here we try to have some overall view of the good stuff and then the not so good stuff.

139
00:11:47,940 --> 00:11:54,280
The basic use case is this kind of linear workflow.

140
00:11:54,280 --> 00:12:00,440
How I understand the linear workflow is that it starts from a point and goes forward from

141
00:12:00,440 --> 00:12:05,240
there, not doing any branches and so on.

142
00:12:05,240 --> 00:12:08,960
Do you agree, [name]?

143
00:12:08,960 --> 00:12:09,960
Exactly.

144
00:12:09,960 --> 00:12:16,840
It's really an excellent fit for when you have this step-by-step workflow and at the

145
00:12:16,840 --> 00:12:20,200
end comes a figure, an image.

146
00:12:20,200 --> 00:12:23,040
Yeah, you mentioned data analysis.

147
00:12:23,040 --> 00:12:30,520
So you start from reading a data in and then some data manipulations, cleaning up and then

148
00:12:30,520 --> 00:12:33,400
doing the plots and there you go.

149
00:12:33,400 --> 00:12:35,920
So that kind of thing Jupyter is really good.

150
00:12:35,920 --> 00:12:40,420
And as mentioned also, if you want to experiment and test,

151
00:12:41,380 --> 00:12:43,100
it's really easy to experiment

152
00:12:43,100 --> 00:12:47,300
because you can have the different versions there

153
00:12:47,300 --> 00:12:50,680
next to each other and run them as you like.

154
00:12:52,220 --> 00:12:56,460
And there's many, yeah.

155
00:12:56,460 --> 00:12:58,140
So the service that [name] has shown,

156
00:12:58,140 --> 00:12:59,820
and we will later demonstrate,

157
00:12:59,820 --> 00:13:02,500
it allows people to run the codes

158
00:13:03,400 --> 00:13:05,080
without like installing anything,

159
00:13:05,080 --> 00:13:06,160
they can run it in the browser.

160
00:13:06,160 --> 00:13:08,120
So we will come back to that.

161
00:13:08,120 --> 00:13:09,640
And maybe if we have time,

162
00:13:09,640 --> 00:13:11,920
if it's easy for you to open up the notes,

163
00:13:11,920 --> 00:13:14,720
we are getting a couple of really good questions.

164
00:13:14,720 --> 00:13:16,960
And I want to encourage more.

165
00:13:16,960 --> 00:13:17,800
So at the bottom,

166
00:13:17,800 --> 00:13:20,340
there are two that we can briefly discuss now.

167
00:13:20,340 --> 00:13:24,240
One is how does it work with privacy and sensitive data?

168
00:13:24,240 --> 00:13:29,240
And what we will later show is that

169
00:13:29,680 --> 00:13:32,600
it can be a good idea to put your notebook onto GitHub

170
00:13:33,400 --> 00:13:37,080
and make it runnable for everybody, and make that part of your paper.

171
00:13:38,120 --> 00:13:42,520
But now, how about privacy and sensitive data? So what can you do there? I mean,

172
00:13:42,520 --> 00:13:47,880
you don't want to put the actual sensitive data then on GitHub and make it publicly visible.

173
00:13:49,000 --> 00:13:57,320
Yeah, never a good idea to put sensitive data in GitHub. But like, I would like to start from

174
00:13:57,320 --> 00:14:05,000
the fact that Jupyter runs, if you want to do locally, you can run Jupyter locally on your

175
00:14:05,000 --> 00:14:13,080
computer. So you don't have to share anything anywhere if you don't want to. And then

176
00:14:15,160 --> 00:14:23,560
considering GitHub and sharing and reusability, you can share your code, but not the data.

177
00:14:23,560 --> 00:14:29,320
And I think that's the case, regardless of the tool that you are using to write the code.

178
00:14:29,320 --> 00:14:32,160
But it's still nice to share some data so that people can actually run it.

179
00:14:32,160 --> 00:14:35,920
But then you don't have to share the actual sensitive data, you can show you can share

180
00:14:35,920 --> 00:14:42,840
an example data set with John Doe, Jane Doe, example person, and so that people can still

181
00:14:42,840 --> 00:14:47,400
verify this is working, they can still replace it by the actual data.

182
00:14:47,400 --> 00:14:53,500
But then the sensitive data can be then protected on a dedicated server.

183
00:14:53,500 --> 00:14:56,080
So that can be a good solution.

184
00:14:56,080 --> 00:15:00,220
Similar solution is if your data is big, gigantic, what if you have terabytes of data and it's

185
00:15:00,220 --> 00:15:04,380
difficult for you to share it, it can still be nice to share a small example data set

186
00:15:04,380 --> 00:15:10,460
so then people can still run your notebook, but then replace it by the real gigantic data.

187
00:15:10,460 --> 00:15:15,100
How about Git and Git and notebooks, I just want to say that we will come back to that.

188
00:15:15,100 --> 00:15:20,860
Yeah, in before in the next half an hour, we will show you what are some of the challenges

189
00:15:20,860 --> 00:15:24,140
when working with Git because we still want to work with Git.

190
00:15:24,140 --> 00:15:27,060
We still didn't forget what we taught last week.

191
00:15:27,060 --> 00:15:29,620
We want to use Git, but there are some challenges,

192
00:15:29,620 --> 00:15:32,820
but we will show you that there are really nice solutions

193
00:15:32,820 --> 00:15:35,220
to use all the tools from last week

194
00:15:35,220 --> 00:15:36,380
in combination with notebooks.

195
00:15:36,380 --> 00:15:38,620
So we will get there and keep the questions coming.

196
00:15:38,620 --> 00:15:39,520
This is wonderful.

197
00:15:41,580 --> 00:15:44,660
Yeah, and there's a upcoming question

198
00:15:44,660 --> 00:15:48,020
about the privacy in Google Colab.

199
00:15:48,020 --> 00:15:53,020
So I think in there, it's the question of Google's privacy

200
00:15:53,260 --> 00:15:57,020
and should refer to the privacy statement

201
00:15:57,020 --> 00:15:59,100
of the Google Colab service.

202
00:15:59,100 --> 00:15:59,940
Yes.

203
00:15:59,940 --> 00:16:03,100
And if I would run them the notebook with sensitive data,

204
00:16:03,100 --> 00:16:08,100
I would run it on the infrastructure made for it.

205
00:16:08,180 --> 00:16:10,420
And maybe that's my own computer.

206
00:16:10,420 --> 00:16:11,260
Yeah.

207
00:16:11,260 --> 00:16:16,260
And you can run also JupyterLab in many HPC clusters.

208
00:16:16,260 --> 00:16:23,540
many HPC clusters, so then the data can be in your cluster, but you can still use Jupyter

209
00:16:23,540 --> 00:16:29,220
if that's what you like for your workflow.

210
00:16:29,220 --> 00:16:37,100
Some of the pitfalls in Jupyter, especially when there's this non-linear code flow, would

211
00:16:37,100 --> 00:16:42,180
you like to elaborate on that a little bit right away?

212
00:16:42,180 --> 00:16:49,580
So if it starts to, if you have, if you write a program that has lots of modules, and it's

213
00:16:49,580 --> 00:16:55,180
not first we do this, then we do this, then we do that, then we do the other thing.

214
00:16:55,180 --> 00:17:00,180
But sometimes we have a code that maybe we go in here into this module, or maybe not

215
00:17:00,180 --> 00:17:06,160
maybe into the other module, then it, it doesn't really fit into a notebook and notebook is

216
00:17:06,160 --> 00:17:10,180
really like a recipe of do these series of steps.

217
00:17:10,180 --> 00:17:17,220
If it doesn't fit into a series of steps, then maybe notebook is not the right thing.

218
00:17:17,220 --> 00:17:21,540
But you can use modules also in Jupyter.

219
00:17:21,540 --> 00:17:26,480
You can so the and we will get back to that tomorrow, we will actually show how to do it.

220
00:17:26,480 --> 00:17:32,060
So you can if you have reusable code blocks, and you realize that while I'm using the same

221
00:17:32,060 --> 00:17:36,560
code block in all of my notebooks, and I'm tired of copy pasting it.

222
00:17:36,560 --> 00:17:41,960
You can put these into a module and you can include modules in a notebook, but it should

223
00:17:41,960 --> 00:17:44,440
be this series of steps.

224
00:17:44,440 --> 00:17:48,080
If it's a series of steps, then yes.

225
00:17:48,080 --> 00:17:57,640
And mentioned some good practices, Jupyter, the basic Jupyter usually renames that uses

226
00:17:57,640 --> 00:18:00,500
the default naming of untitled.

227
00:18:00,500 --> 00:18:07,220
So when you start a new notebook, it's a good idea to always have your own name so that

228
00:18:07,220 --> 00:18:11,620
you later know what the notebook is about.

229
00:18:11,620 --> 00:18:15,700
And also run all cells before saving.

230
00:18:15,700 --> 00:18:20,020
I think that's something that we can show in the example later.

231
00:18:20,020 --> 00:18:23,780
Yeah, let's demonstrate the good practices.

232
00:18:23,780 --> 00:18:25,220
Yes.

233
00:18:25,220 --> 00:18:34,260
So the notebook interface and how to actually start the whole JupyterLab.

234
00:18:34,260 --> 00:18:45,740
So I will go into a terminal here and get it started.

235
00:18:45,740 --> 00:18:49,340
Let's see where I am.

236
00:18:49,340 --> 00:18:56,240
And typically, so we everybody else than [name], we should watch and ask, but I just wanted

237
00:18:56,240 --> 00:19:00,240
to comment here that typically we want to start the notebook, you are often inside some

238
00:19:00,240 --> 00:19:01,240
environment.

239
00:19:01,240 --> 00:19:05,560
So now we are in an insider software environment.

240
00:19:05,560 --> 00:19:09,720
And often you have a specific environment for each of your projects.

241
00:19:09,720 --> 00:19:12,660
This is something that we have recommended yesterday.

242
00:19:12,660 --> 00:19:17,960
And in there, we will now start up a notebook and the notebook will then open up.

243
00:19:17,960 --> 00:19:21,960
We start it, but then we, we interact with it through the browser.

244
00:19:21,960 --> 00:19:22,960
Yes.

245
00:19:22,960 --> 00:19:32,320
So, as mentioned in the material, I create a new folder and I go there and then it says

246
00:19:32,320 --> 00:19:36,400
I have to launch the JupyterLab.

247
00:19:36,400 --> 00:19:43,240
But first I need the Codefinery Conda environment, right?

248
00:19:43,240 --> 00:19:50,840
Yes, so here you activate your programming environment that we have set up with all the

249
00:19:50,840 --> 00:19:53,960
dependencies that we need.

250
00:19:53,960 --> 00:20:00,640
For this example, if people later want to try it on their own, like you can, you can

251
00:20:00,640 --> 00:20:04,060
create an environment that this looks exactly like ours.

252
00:20:04,060 --> 00:20:07,760
And in this you can run this around the JupyterLab.

253
00:20:07,760 --> 00:20:12,360
Is it the JupyterLab with minus in or is it Jupyter SpaceLab?

254
00:20:12,360 --> 00:20:17,000
Both work actually, with or without the minus.

255
00:20:17,000 --> 00:20:24,560
And I wanted to mention that you actually can, if you don't want to mess up with Code

256
00:20:24,560 --> 00:20:32,400
Refinery and Conda environment stuff, you might be unsure how the Conda works or something.

257
00:20:32,400 --> 00:20:35,440
We encourage you to try and ask for help if needed.

258
00:20:35,440 --> 00:20:42,280
But if you don't want to, there is also a version of JupyterLab as a desktop app.

259
00:20:42,280 --> 00:20:50,200
not sure which platforms it supports but that exists at least. So here now I'm launching the

260
00:20:50,200 --> 00:20:57,720
JupyterLab in the terminal. I'm using this no browser option because I want to decide where

261
00:20:57,720 --> 00:21:04,760
in which browser I open it. There's a lot of text coming up but we don't need to

262
00:21:04,760 --> 00:21:13,020
to care about that. Only thing we do is we copy paste this URL in the end.

263
00:21:13,020 --> 00:21:16,540
So if you would, if you would have left out this no browser, it would open up your default

264
00:21:16,540 --> 00:21:21,120
browser somewhere. But if you want to have more control of which browser it is, I also

265
00:21:21,120 --> 00:21:25,640
do the same thing as you I'll I take it into my browser, then then I decide where this

266
00:21:25,640 --> 00:21:27,680
is opened.

267
00:21:27,680 --> 00:21:33,720
So I copy paste this to a browser into URL field and it opens.

268
00:21:33,720 --> 00:21:36,720
So now the...

269
00:21:36,720 --> 00:21:42,480
Actually let's go to see how this Jupyter is structured.

270
00:21:42,480 --> 00:21:50,200
So in the core there's this kernel and notebook server and they are now running in the terminal

271
00:21:50,200 --> 00:21:52,200
here.

272
00:21:52,200 --> 00:22:00,440
And then the browser is what shows you the user interface, and then you can happily use

273
00:22:00,440 --> 00:22:02,100
it.

274
00:22:02,100 --> 00:22:14,140
So now we have the user interface in the browser, and now we should go to see what's around

275
00:22:14,140 --> 00:22:19,580
the Jupyter interface, right?

276
00:22:19,580 --> 00:22:26,460
So in the material, there's this screenshot that you can refer to whenever you want to.

277
00:22:26,460 --> 00:22:30,900
If you forget something, yeah.

278
00:22:30,900 --> 00:22:33,300
Is it easy for you to zoom in a little bit?

279
00:22:33,300 --> 00:22:35,100
Yes, I think so.

280
00:22:35,100 --> 00:22:36,820
Yeah, great.

281
00:22:36,820 --> 00:22:37,900
Thanks.

282
00:22:37,900 --> 00:22:46,140
So we have this toolbar containing some tabs.

283
00:22:46,140 --> 00:22:54,260
Then there's some buttons, some menus and the file view in the right side.

284
00:22:54,260 --> 00:23:06,520
So the toolbar contains the file explorer and open kernels and the git integration

285
00:23:06,520 --> 00:23:11,400
and this works if you have used the CodeRefinery Conda environment because this is an extension

286
00:23:11,400 --> 00:23:14,000
and it's there installed.

287
00:23:14,000 --> 00:23:23,080
That's why we recommend trying the CodeRefinery Conda environment and other extensions in

288
00:23:23,080 --> 00:23:24,200
here.

289
00:23:24,200 --> 00:23:33,880
But we focus on the file browser and later on in the Git extension.

290
00:23:33,880 --> 00:23:40,600
So now what we do, we create a new Jupyter notebook.

291
00:23:40,600 --> 00:23:45,400
And the launcher in here is the place to go.

292
00:23:45,400 --> 00:23:47,460
The first option is Notebook.

293
00:23:47,460 --> 00:23:48,800
There are other options.

294
00:23:48,800 --> 00:23:53,800
You can open a terminal or text file or markdown file here if you want to.

295
00:23:53,800 --> 00:23:58,960
But as we are in Jupyter, let's go with the Notebook option.

296
00:23:58,960 --> 00:24:03,080
I'm going to zoom out just a little bit.

297
00:24:03,080 --> 00:24:07,640
And as I mentioned, it creates a new file and it's untitled.

298
00:24:07,640 --> 00:24:18,200
So what I do first is rename the file, right?

299
00:24:18,200 --> 00:24:20,960
Is there questions or something?

300
00:24:20,960 --> 00:24:21,960
Should I just go on?

301
00:24:21,960 --> 00:24:23,640
All is good.

302
00:24:23,640 --> 00:24:26,240
Yep, great.

303
00:24:26,240 --> 00:24:34,720
So now in the Jupyter notebook file, there are different types of cells.

304
00:24:34,720 --> 00:24:41,600
I can create more cells and I can delete cells.

305
00:24:41,600 --> 00:24:47,840
I can reorganize cells and this is some keyboards or how it looks very fast.

306
00:24:47,840 --> 00:24:48,840
Yes.

307
00:24:48,840 --> 00:24:53,160
And I can say that the way I do it often is that I click on these symbols.

308
00:24:53,160 --> 00:24:57,520
So also if you if you move the mouse over the over the cell, there is a symbol like

309
00:24:57,520 --> 00:25:00,720
I want one more cell above or below.

310
00:25:00,720 --> 00:25:02,160
Yes.

311
00:25:02,160 --> 00:25:07,440
quickly mention that I'm going to explain from the material I'm going to explain these

312
00:25:08,480 --> 00:25:17,440
cells but afterwards there is the list of keyboard shortcuts and as with any tool if you want to

313
00:25:19,760 --> 00:25:24,800
use a tool quickly and effectively I really recommend to learn

314
00:25:24,800 --> 00:25:28,320
the shortcuts. It applies to any tool basically.

315
00:25:28,320 --> 00:25:32,320
Okay.

316
00:25:32,320 --> 00:25:36,320
Everything is of course like credible mentioned it's it's all here you can

317
00:25:36,320 --> 00:25:44,960
Yeah, I meant to the symbols in the cell like if you yeah this you know the third cell from

318
00:25:44,960 --> 00:25:51,640
the top and then the symbols to the right there I use those yeah

319
00:25:51,640 --> 00:26:01,800
you can reorder, you can add cells below, above and delete cells. I use the keyboard shortcuts,

320
00:26:01,800 --> 00:26:09,000
there's an A for, actually it shows the keyboard shortcuts in here, so you can

321
00:26:09,640 --> 00:26:16,440
hover your mouse and start to learn. Nice, I didn't know. That's a handy one.

322
00:26:16,440 --> 00:26:19,960
So they are different.

323
00:26:19,960 --> 00:26:22,000
Now these are all code cells.

324
00:26:22,000 --> 00:26:26,760
I'm going to remove all but two.

325
00:26:26,760 --> 00:26:33,760
And what would be the first cell if you start a new notebook?

326
00:26:33,760 --> 00:26:37,120
Would you start with the code cell?

327
00:26:37,120 --> 00:26:41,240
In reality, yes, but later I would like to have a title there, but maybe I will come

328
00:26:41,240 --> 00:26:44,000
up with the title later, but let's start with the title.

329
00:26:44,000 --> 00:26:45,000
Yeah.

330
00:26:45,000 --> 00:26:53,080
So here's a small menu that you can open and see all the different types of cells that

331
00:26:53,080 --> 00:26:54,400
you can have.

332
00:26:54,400 --> 00:27:01,680
Usually I use Markdown and of course Code4Code, but then there are certain cases you might

333
00:27:01,680 --> 00:27:09,280
want to use raw, that means it shows you the raw text, nothing fancy there.

334
00:27:09,280 --> 00:27:19,920
But we want the fancy thing, so let's go with Markdown.

335
00:27:19,920 --> 00:27:30,640
The point there is that it renders nicely, so it looks fancier than just the plain text.

336
00:27:30,640 --> 00:27:32,840
How did I get it to render?

337
00:27:32,840 --> 00:27:44,200
I use this run command, and it tells you that shift-enter is the shortcut there.

338
00:27:44,200 --> 00:27:56,940
This is now the start of my cool coding project, and then I can start the coding stuff.

339
00:27:56,940 --> 00:27:58,940
What should I import there?

340
00:27:58,940 --> 00:28:15,380
Sounds good. Yeah. Right. So there are markdown cells and there's code cells. What else you

341
00:28:15,380 --> 00:28:21,840
can put in the markdown cells than just text?

342
00:28:21,840 --> 00:28:28,080
I'm wondering whether we should, whether we should follow the example that we have there

343
00:28:28,080 --> 00:28:31,560
just that people can recreate it step by step or?

344
00:28:31,560 --> 00:28:35,840
I just found and copied the Markdown cell

345
00:28:35,840 --> 00:28:37,680
from that lesson material.

346
00:28:37,680 --> 00:28:41,800
And now if I run this one, we can see different options.

347
00:28:41,800 --> 00:28:45,900
So there's headings, there's links,

348
00:28:45,900 --> 00:28:48,120
there's different formatting for the text

349
00:28:49,060 --> 00:28:53,500
and even equations and images.

350
00:28:54,580 --> 00:28:55,880
So this is really nice.

351
00:28:55,880 --> 00:29:06,120
The equations work as everything that's in between these dollar signs is an equation

352
00:29:06,120 --> 00:29:18,400
and the syntax is the LaTeX syntax.

353
00:29:18,400 --> 00:29:22,980
Some of the shortcuts and navigation.

354
00:29:22,980 --> 00:29:30,860
If you double click the cell, you go to the edit mode, or you can go with Enter and Esc

355
00:29:30,860 --> 00:29:35,240
keys to the edit mode and back.

356
00:29:35,240 --> 00:29:44,420
You can, with arrow keys, like from here, from the edit mode, I run or click Esc, and

357
00:29:44,420 --> 00:29:52,100
then I can, with arrow keys, navigate the cells back and forth.

358
00:29:52,100 --> 00:29:59,540
And let's not forget to save.

359
00:29:59,540 --> 00:30:06,100
Okay, I think we go forward.

360
00:30:06,100 --> 00:30:07,100
Is there any questions

361
00:30:07,100 --> 00:30:10,600
All is good.

362
00:30:10,600 --> 00:30:16,940
So just to summarize, we, you, you have often two, two ways to create cells.

363
00:30:16,940 --> 00:30:21,700
It can be a code, for example, Python,

364
00:30:21,700 --> 00:30:23,140
and it can be a Markdown cell.

365
00:30:23,140 --> 00:30:25,860
And Markdown, we have discussed earlier today,

366
00:30:25,860 --> 00:30:29,460
Markdown is what we see in the notes document.

367
00:30:30,700 --> 00:30:31,540
And then you can do more.

368
00:30:31,540 --> 00:30:33,940
You can do equations and images.

369
00:30:33,940 --> 00:30:35,340
And then we will build up notebooks

370
00:30:35,340 --> 00:30:40,020
by putting code and documentation and try to tell a story.

371
00:30:41,900 --> 00:30:44,140
So what's the example that we will show next?

372
00:30:44,140 --> 00:30:54,780
Yes, go next and there's the first computational notebook example and you

373
00:30:54,780 --> 00:31:00,620
mentioned the magic word story so one of the benefits is is there that you can

374
00:31:00,620 --> 00:31:06,780
have this narrative around the code and that makes it easier to understand for

375
00:31:06,780 --> 00:31:15,780
people that are new to your code. So in this example we are creating this code

376
00:31:15,780 --> 00:31:26,540
that calculates pi, the value of pi with this statistical method and

377
00:31:26,540 --> 00:31:33,540
scrolling onward we first launch the JupyterLab. That's what we have here

378
00:31:33,540 --> 00:31:42,260
already. I'm going to hide those first cells so that I can get a clean slate.

379
00:31:46,020 --> 00:31:48,660
We can also start a new notebook inside.

380
00:31:50,820 --> 00:31:58,180
Yeah, that's even better. So here is this plus button and we get the launcher back

381
00:31:58,180 --> 00:32:02,340
and new notebook. And again, it's untitled. Let's rename it.

382
00:32:09,860 --> 00:32:15,700
And here again, we are, this is demo only. [name] will type and we will check that

383
00:32:16,980 --> 00:32:20,420
there are no typos. Yes. And everybody please ask questions.

384
00:32:20,420 --> 00:32:29,620
So if you don't remember anymore how I did open the Jupyter in a browser that I wanted

385
00:32:29,620 --> 00:32:34,380
here's the command in this and this demo.

386
00:32:34,380 --> 00:32:39,120
And I think now your goal will be to scroll down to the first point and we will build

387
00:32:39,120 --> 00:32:47,440
up an example notebook by following these points or 12345678 and if people later want

388
00:32:47,440 --> 00:32:54,880
to try it out on their own you can you find everything here. Yeah so first I

389
00:32:54,880 --> 00:33:01,960
copy paste it says that add it to a markdown cell so I copy this line here

390
00:33:01,960 --> 00:33:11,400
and go to my JupyterLab and I'm using the shortcut M to create this to change

391
00:33:11,400 --> 00:33:17,240
this cell to be a markdown cell of course I can use the option menu here as

392
00:33:17,240 --> 00:33:27,640
well. I click into the cell and Command V, I'm using Mac, so Command V or Control V to paste.

393
00:33:30,120 --> 00:33:37,560
Then we go to see what else is there. So all the cells that are needed to create this demo,

394
00:33:37,560 --> 00:33:43,960
they are included in here. So what you basically can do is to copy paste the cells.

395
00:33:43,960 --> 00:33:48,960
is just be careful that you use the appropriate cell types.

396
00:33:51,840 --> 00:33:56,240
So what happens if I use a code cell for this?

397
00:33:56,240 --> 00:34:01,200
It, at first it looks not so great.

398
00:34:01,200 --> 00:34:04,280
And if I try to run it, it does not run

399
00:34:04,280 --> 00:34:06,760
because that's not a code syntax.

400
00:34:06,760 --> 00:34:09,560
So that's why.

401
00:34:09,560 --> 00:34:15,400
It's not Python. It will try to interpret this with Python and Python is then confused.

402
00:34:19,480 --> 00:34:22,280
Yes and then it's again markdown cell.

403
00:34:24,520 --> 00:34:28,360
Oh there's a cool picture. So this is now a conceptual

404
00:34:29,480 --> 00:34:34,920
explanation on the method that we're gonna use on this pi calculation.

405
00:34:34,920 --> 00:34:48,040
Again now this I took this one so fourth one now this is the first code cell which is there

406
00:34:48,040 --> 00:34:54,040
so it imports the modules that we need that's why we don't we don't see an output for this

407
00:34:54,040 --> 00:35:03,260
code cell because there's no output it just imports the libraries that we want to.

408
00:35:03,260 --> 00:35:11,860
I will continue copy pasting the cells and the point here is not to understand this code

409
00:35:11,860 --> 00:35:24,300
or the Python syntax, but to figure out why this Jupyter notebook is then a nice way of

410
00:35:24,300 --> 00:35:32,460
structuring the code a nice tool to to use for this kind of

411
00:35:33,260 --> 00:35:36,140
code exercise.

412
00:35:37,740 --> 00:35:41,100
So now these are the all the cells if I didn't

413
00:35:41,100 --> 00:35:48,460
miss any in between and we got these plots

414
00:35:48,460 --> 00:35:55,740
and they are visualized in here like right after the code cell and then

415
00:35:57,100 --> 00:36:05,900
there's also the final result here outputted so oh well it's quite close to the actual pi value

416
00:36:08,220 --> 00:36:14,780
yeah and the the big picture here like don't worry if all the steps are not clear

417
00:36:14,780 --> 00:36:22,460
this is, it's a certain approximate way to compute the number pi. Here, the big picture

418
00:36:22,460 --> 00:36:29,420
what is really important for all of us is that we, we have documentation and code and

419
00:36:29,420 --> 00:36:36,060
images in a notebook, and the computation, it's a series of computations. So something

420
00:36:36,060 --> 00:36:42,380
that we will try later is, what if we run them in the wrong order? And what does it

421
00:36:42,380 --> 00:36:46,380
mean for us what does it mean for our like good practices of how we should use

422
00:36:46,380 --> 00:36:55,780
notebooks yes and and an example of this documentation in between I could add

423
00:36:55,780 --> 00:37:07,740
here for example a subtitle that start plotting I'll start and more

424
00:37:07,740 --> 00:37:12,300
explanations of course if I have any.

425
00:37:16,460 --> 00:37:21,340
So going onward from the lesson material it mentions that there's

426
00:37:21,340 --> 00:37:27,420
possibility to use other languages. So there's a R Markdown for R and

427
00:37:27,420 --> 00:37:32,220
Pluto for Julia. So the workflow there is

428
00:37:32,220 --> 00:37:42,140
similar to the JupyterLab. So we hope that even if you want to use R, you still get the idea of

429
00:37:42,140 --> 00:37:44,060
this workflow from this lesson.

430
00:37:48,940 --> 00:37:52,940
Did we show how to run things in the wrong order? I was just a little bit

431
00:37:52,940 --> 00:37:54,220
distracted here answering questions.

432
00:37:54,220 --> 00:38:05,220
right so what I can do it now so what I do is let's say I want to start

433
00:38:05,220 --> 00:38:11,460
over the whole calculation now that the values of the all the variables and

434
00:38:11,460 --> 00:38:17,140
everything the code has run the variables are there so what I do first I

435
00:38:17,140 --> 00:38:25,820
want to demonstrate what if I want to start over. I go here and restart the

436
00:38:25,820 --> 00:38:31,840
kernel and it says that all variables will be lost which is okay because I

437
00:38:31,840 --> 00:38:40,100
want to start over and now I will go and run the cells one by one with this

438
00:38:40,100 --> 00:38:45,100
shift enter, but let's say, let's say I forget this one.

439
00:38:48,300 --> 00:38:52,460
I grab a cup of coffee and I forget this cell

440
00:38:52,460 --> 00:38:54,640
and I continue running from here.

441
00:38:55,780 --> 00:38:57,100
Now I get some error message

442
00:38:57,100 --> 00:39:00,020
and what should I get from this error message?

443
00:39:01,860 --> 00:39:05,220
Yeah, now the notebook doesn't know the variable points

444
00:39:06,220 --> 00:39:07,100
has never been defined.

445
00:39:07,100 --> 00:39:08,180
It doesn't know what the value is

446
00:39:08,180 --> 00:39:10,320
because we never ran the cell.

447
00:39:10,320 --> 00:39:13,340
So two cells up, or three cells up,

448
00:39:13,340 --> 00:39:14,920
we saw the cell number four.

449
00:39:16,600 --> 00:39:18,400
Oh, right.

450
00:39:18,400 --> 00:39:19,240
Was never defined.

451
00:39:21,600 --> 00:39:25,880
Actually now, just a new question.

452
00:39:25,880 --> 00:39:28,160
Is there a search function in here?

453
00:39:28,160 --> 00:39:31,520
What if I don't find this name points in anywhere?

454
00:39:31,520 --> 00:39:33,240
Can I do some searching?

455
00:39:33,240 --> 00:39:35,460
I normally, so maybe there's a clever way.

456
00:39:35,460 --> 00:39:37,740
What I do is I use the browser search.

457
00:39:37,740 --> 00:39:38,740
Yeah.

458
00:39:38,740 --> 00:39:39,740
Okay.

459
00:39:39,740 --> 00:39:41,020
For these kinds of situations.

460
00:39:41,020 --> 00:39:46,580
Actually now that I press command F, it actually opens the search inside here.

461
00:39:46,580 --> 00:39:50,500
So maybe there is, let's see, points.

462
00:39:50,500 --> 00:39:51,500
Okay.

463
00:39:51,500 --> 00:39:56,180
Now I can see that this matches to the one in error message.

464
00:39:56,180 --> 00:39:58,460
So I run this one.

465
00:39:58,460 --> 00:40:05,900
Now I run the erroneous cell again, now it works.

466
00:40:05,900 --> 00:40:11,300
So if I'm if I run the cells, so often when we develop it, try things out and then improve

467
00:40:11,300 --> 00:40:15,900
and develop you often you when developing you don't run everything every single time

468
00:40:15,900 --> 00:40:19,620
you run the cell until it works and you go somewhere else you try something else.

469
00:40:19,620 --> 00:40:23,980
But what can then happen is that we can get into a situation where you think everything

470
00:40:23,980 --> 00:40:25,620
is working.

471
00:40:25,620 --> 00:40:28,220
But then you give it to the next person.

472
00:40:28,220 --> 00:40:30,100
Or you come to it in a week.

473
00:40:30,100 --> 00:40:31,540
And suddenly it doesn't work anymore.

474
00:40:31,540 --> 00:40:34,300
Because what what the next person will do.

475
00:40:34,300 --> 00:40:37,380
The first thing that the next person will do is they will run everything from top to

476
00:40:37,380 --> 00:40:44,860
bottom and so the good practice and the good recommendation is to run everything from top

477
00:40:44,860 --> 00:40:50,480
to bottom before you save it and before you share it with other people to make sure that

478
00:40:50,480 --> 00:40:53,580
this is working because this is the first thing they will do.

479
00:40:53,580 --> 00:40:54,660
Yeah.

480
00:40:54,660 --> 00:41:01,500
And in addition, I would also restart kernel and run all cells because then you might have

481
00:41:01,500 --> 00:41:10,520
saved some variable value somewhere in different sections and it remembers the last saved value.

482
00:41:10,520 --> 00:41:18,160
So if you restart, you kind of make sure that your code works from top to the bottom.

483
00:41:18,160 --> 00:41:25,440
Yep. Should we talk about Git, version control and notebooks? Definitely. Before we go into

484
00:41:25,440 --> 00:41:34,560
a break. Yeah, going to the next part in the lesson. Notebooks and version control. And

485
00:41:34,560 --> 00:41:43,000
this is still a demo demonstration. And let me know if there's any questions in or such

486
00:41:43,000 --> 00:41:55,040
questions that you should address here. So there are tools to do version control on this

487
00:41:55,040 --> 00:42:03,880
Jupyter files. Underlying format there with the Jupyter files is this JSON so if

488
00:42:03,880 --> 00:42:13,720
you only use the basic git diff tool it may look much more complex that your

489
00:42:13,720 --> 00:42:20,320
original code and then your face goes like. So there are tools to make that

490
00:42:20,320 --> 00:42:31,240
easier and which one of these we have in this conda environment here to be the lab kit and

491
00:42:31,240 --> 00:42:42,160
MB time checking yeah so the MB time we definitely have we have I think you have some of the get

492
00:42:42,160 --> 00:42:48,960
extensions I'm just verifying here yeah we have we have Jupyter lab kit we have MB diamond

493
00:42:48,960 --> 00:43:00,640
there. I think the GitHub web interface nowadays can also render the Jupyter. Yeah. And maybe

494
00:43:00,640 --> 00:43:04,080
this is something we can show, but this is something you need to enable. So there are

495
00:43:04,080 --> 00:43:16,100
these three steps there. Okay. So let's first go in, in a JupyterLab interface. So, yeah,

496
00:43:16,100 --> 00:43:20,940
This is what it would look like without those tools.

497
00:43:20,940 --> 00:43:25,920
This is a difference of an image that has been edited.

498
00:43:25,920 --> 00:43:33,380
It's pretty horrible, unless you like the underlying format of a PNG picture.

499
00:43:33,380 --> 00:43:45,520
But going forward and using these RichDiff tools, we can actually see how the picture

500
00:43:45,520 --> 00:43:50,800
once previously and how it's in the new edited version.

501
00:43:51,600 --> 00:43:57,280
So let's see if we can do it in here.

502
00:43:57,680 --> 00:44:04,160
What I need to do first is to initialize the repository. So we are in

503
00:44:04,160 --> 00:44:08,640
in the folder that I have distributed notebook files

504
00:44:08,640 --> 00:44:14,960
and I can create a git repository out of that folder

505
00:44:14,960 --> 00:44:21,520
without leaving this Jupyter notebook, which is kind of cool.

506
00:44:21,520 --> 00:44:26,800
So I click initialize repository. So now this

507
00:44:26,800 --> 00:44:33,040
folder is a git repository. It shows that there's

508
00:44:33,520 --> 00:44:38,320
untracked files. So why there's four files

509
00:44:38,320 --> 00:44:43,520
untracked although I have only two files in here?

510
00:44:44,960 --> 00:44:56,360
And what should I do with this? Let's see. These look like the original two notebooks

511
00:44:56,360 --> 00:45:00,880
that I created. And these are some checkpoint files. So what should I do with the checkpoint

512
00:45:00,880 --> 00:45:01,880
files?

513
00:45:01,880 --> 00:45:07,120
So the checkpoints, I think they are directories, maybe checkpoint files, but these are often

514
00:45:07,120 --> 00:45:13,800
things that I ignore. I get ignore, I add them to my get ignore because they are I see

515
00:45:13,800 --> 00:45:19,000
as temporary local files that I don't want to have in my git repository.

516
00:45:20,040 --> 00:45:28,760
Okay so I right click and ignore that file and it tells me that git ignore does not exist but

517
00:45:28,760 --> 00:45:37,640
actually it just creates one and then I can track all the files and make my first commit.

518
00:45:43,800 --> 00:45:47,200
And now this is only going to the local folder.

519
00:45:48,200 --> 00:45:51,880
So I run the JupyterLab in a local folder.

520
00:45:51,880 --> 00:45:53,600
I created the Git repository,

521
00:45:53,600 --> 00:45:56,000
that's again in the local folder.

522
00:45:56,000 --> 00:45:59,340
Later on, I can upload the folder in GitHub if I want to.

523
00:46:00,920 --> 00:46:04,560
But now there's the first initial commit done.

524
00:46:04,560 --> 00:46:08,400
So there's the snapshot of these notebooks

525
00:46:08,400 --> 00:46:09,800
as they are now.

526
00:46:09,800 --> 00:46:14,280
And now let's change something.

527
00:46:14,280 --> 00:46:21,120
Okay, let's then verify what we will see.

528
00:46:21,120 --> 00:46:25,100
For instance, you can change the size of the figure.

529
00:46:25,100 --> 00:46:30,640
So somewhere there is this figure set size inches, because maybe make it larger, smaller,

530
00:46:30,640 --> 00:46:37,560
or link to the lowest cell with the Yeah, or change the colors or something like that.

531
00:46:37,560 --> 00:46:47,160
Yeah, I would love to change the colors, but I don't remember how it's done.

532
00:46:47,160 --> 00:46:48,160
Let's start with the size.

533
00:46:48,160 --> 00:46:50,200
Yeah, let's go with the size.

534
00:46:50,200 --> 00:46:53,600
Now it's smaller, this one.

535
00:46:53,600 --> 00:47:02,000
So basically, it still renders the output as a regular size, but I think this went bigger,

536
00:47:02,000 --> 00:47:06,960
so it's actually, the actual image is smaller.

537
00:47:06,960 --> 00:47:15,680
So now if I would print out or save it to a file it would be smaller in size.

538
00:47:15,680 --> 00:47:21,880
Now I save and let's see.

539
00:47:21,880 --> 00:47:26,960
Now the Git extension shows, yeah there's some changes.

540
00:47:26,960 --> 00:47:36,000
So before I commit the changes I want to show what has been edited.

541
00:47:36,000 --> 00:47:48,820
I click this small icon that says Diff and now this is how this Git, Jupyter Git tool

542
00:47:48,820 --> 00:47:51,200
shows the difference.

543
00:47:51,200 --> 00:47:58,160
So here's the code that I changed, the lines and the output.

544
00:47:58,160 --> 00:48:03,580
So this is the old one and here's the new one.

545
00:48:03,580 --> 00:48:08,780
everything with red is the old one everything is with green is the new one and that's that's good

546
00:48:09,500 --> 00:48:15,820
and this works because we use this nbdime extension which is notebook diff and merge

547
00:48:17,500 --> 00:48:23,100
and which helps us to really easily see what was before what was after if we used if you

548
00:48:23,100 --> 00:48:31,260
try this with a notebook or with a jupyter lab without this extension we might see a difference

549
00:48:31,260 --> 00:48:37,940
in the underlying source code can we so long story short we recommend to use this extension

550
00:48:37,940 --> 00:48:43,780
and also on github we recommend to enable that extension so that you can see nice differences

551
00:48:43,780 --> 00:48:50,420
what is your question yes i mean i just clicked the show source button and this is the horror

552
00:48:50,420 --> 00:48:59,420
lying in inside yeah i really prefer the the nice render here yeah great thanks

553
00:48:59,420 --> 00:49:07,060
And if you want to try it out on GitHub, we have done on our lesson, we have we have some

554
00:49:07,060 --> 00:49:08,420
steps on what you need to do.

555
00:49:08,420 --> 00:49:14,820
So it's all you need to go on preview features, enable this rich Jupiter preview, I forgot

556
00:49:14,820 --> 00:49:15,820
the name.

557
00:49:15,820 --> 00:49:21,600
So I now wait, but I'm on GitHub, and then some settings.

558
00:49:21,600 --> 00:49:27,180
So on the hours, yes, on your picture there, and then you go on feature preview.

559
00:49:27,180 --> 00:49:28,180
Nice.

560
00:49:28,180 --> 00:49:32,220
Yes. And then on the left side, there is which should be to notebook diffs. I think you have

561
00:49:32,220 --> 00:49:33,220
it enabled.

562
00:49:33,220 --> 00:49:40,420
Yes, I have it enabled. So this is basically the same similar looking feature exists in

563
00:49:40,420 --> 00:49:43,300
GitHub, which is really nice.

564
00:49:43,300 --> 00:49:49,180
And then if you go back to the lesson, we have an example. So if you click on, scroll a little

565
00:49:49,180 --> 00:49:57,700
bit up, up. Yes, there is this sentence that will be down. So on the bottom of your screen,

566
00:49:57,700 --> 00:50:00,460
You can click on that link.

567
00:50:00,460 --> 00:50:01,540
It's actually a diff.

568
00:50:01,540 --> 00:50:06,040
It's a comparison between two versions.

569
00:50:06,040 --> 00:50:07,320
And you can all try to open it up.

570
00:50:07,320 --> 00:50:12,920
If you don't have that enable extension enabled, it will look not very understandable.

571
00:50:12,920 --> 00:50:19,460
But with that extension enabled, we can see what was before what came after.

572
00:50:19,460 --> 00:50:23,100
Okay, great.

573
00:50:23,100 --> 00:50:29,580
I guess now we are up to a break. Right? Yes, we got a couple of interesting questions.

574
00:50:29,580 --> 00:50:33,860
But I, I will take the questions. Let's take them after the break. So after the break,

575
00:50:33,860 --> 00:50:40,780
what we should discuss, like, what are the advantages of notebook versus script, or script

576
00:50:40,780 --> 00:50:47,100
versus VS code VS code versus notebook. So that's for after the break. I will add here

577
00:50:47,100 --> 00:50:59,260
info box so when should we be back sharp until let's do let's be precise here 0

578
00:50:59,260 --> 00:51:06,580
0 1 okay great thank you and then we'll do more more Jupiter see you soon

579
00:51:06,580 --> 00:51:20,660
Welcome back from the break. We continue with the Jupyter notebooks, and a big topic for

580
00:51:20,660 --> 00:51:32,060
the last half hour or so is the sharing notebooks. But how about if you share the notebook to

581
00:51:32,060 --> 00:51:39,180
someone who does not use JupyterLab but instead wants to use Visual Studio Code.

582
00:51:40,220 --> 00:51:48,300
And for that I wanted to show you how it looks like. So this is the same folder

583
00:51:49,020 --> 00:51:55,900
that we used in the previous examples and there we created the Jupyter notebooks in the JupyterLab

584
00:51:55,900 --> 00:52:02,060
up and now the same folder opened in Visual Studio Code.

585
00:52:02,060 --> 00:52:05,940
I can see that here's actually

586
00:52:05,940 --> 00:52:11,780
the same notebook that I created as an example.

587
00:52:11,780 --> 00:52:16,060
There's the same plots and everything showing up.

588
00:52:16,060 --> 00:52:20,060
This is smaller because we created it smaller.

589
00:52:20,060 --> 00:52:23,940
So they open up just nicely.

590
00:52:23,940 --> 00:52:27,460
Did you have to install anything other than VS code?

591
00:52:29,460 --> 00:52:32,580
I'm gonna check my extensions.

592
00:52:35,620 --> 00:52:43,700
So yes, there is a Jupyter extension installed in, but it's,

593
00:52:45,060 --> 00:52:50,500
you can find it in the Visual Studio code and extensions and search for Jupyter.

594
00:52:50,500 --> 00:52:54,420
Yeah.

595
00:52:54,420 --> 00:53:00,060
And you personally, if you like write a notebook, do you write it in VS code or do you write

596
00:53:00,060 --> 00:53:03,980
it in a browser?

597
00:53:03,980 --> 00:53:10,960
I really like the JupyterLab interface and the looks.

598
00:53:10,960 --> 00:53:17,540
I don't know why, but I prefer this one.

599
00:53:17,540 --> 00:53:18,540
How about you?

600
00:53:18,540 --> 00:53:28,820
Yeah me too. I use the browser for notebooks. Yeah I use Visual Studio Code for a bunch

601
00:53:28,820 --> 00:53:37,580
of other stuff but yeah both work which is nice. So then to the sharing of the notebooks

602
00:53:37,580 --> 00:53:46,720
there's many different ways to share and actually too many. Which one of these you have actually

603
00:53:46,720 --> 00:53:54,060
used. I mean, they're obviously both are all useful, but which one you have used.

604
00:53:54,060 --> 00:53:59,760
So one, one thing that I'm not even sure we listed is one step is to put it on places

605
00:53:59,760 --> 00:54:07,100
like GitHub. Yeah, so that's one way one way to share it and somebody else can view it there.

606
00:54:07,100 --> 00:54:12,240
It's static because it will it actually you can only see the image of it. You cannot go

607
00:54:12,240 --> 00:54:17,440
in and change it. But we will also show you a way where you can share it in a way that

608
00:54:17,440 --> 00:54:26,480
people can really run it and change it. So which one I've used GitHub, I have used binder.

609
00:54:26,480 --> 00:54:34,240
I have also experimented a little bit with JupyterLite. I have not tried the other ones.

610
00:54:34,240 --> 00:54:39,160
Yeah, I think further further down, we have also some alternatives that are there are

611
00:54:39,160 --> 00:54:48,160
some companies behind it. So I have, yes, I have tried to co-calc. Sorry, no, the, is

612
00:54:48,160 --> 00:54:56,080
that the one? No, I'm, what I meant is the Google collab. Yeah. I have tried. Yeah. Some

613
00:54:56,080 --> 00:55:06,600
of those. Yeah. And well, if static is enough for you, then in JupyterLab, there's this

614
00:55:06,600 --> 00:55:12,120
file menu and there's this export options but some of these might need

615
00:55:12,120 --> 00:55:18,520
some extra installation so just so that you know but this is of course the

616
00:55:18,520 --> 00:55:27,080
probably the easiest way to just share the file but let's go with the use case

617
00:55:27,080 --> 00:55:34,200
where the people that you want to share the file with want to also experiment

618
00:55:34,200 --> 00:55:39,480
on on your notebook. So this is a demo about that.

619
00:55:39,480 --> 00:55:46,200
And the use case is you want you want people to be able to run it without even installing

620
00:55:46,200 --> 00:55:52,460
any any software environment or Jupyter or JupyterLab or anything. All they will need

621
00:55:52,460 --> 00:55:55,400
is a browser.

622
00:55:55,400 --> 00:56:04,000
Okay. So it says that I should create a new GitHub repository. So let's do that. I'm going

623
00:56:04,000 --> 00:56:19,280
to GitHub. And this is a JupyterBinder demo. And what I will do is I will then once you

624
00:56:19,280 --> 00:56:27,760
create it, I will share the link with everybody else so that people can see what we did there.

625
00:56:27,760 --> 00:56:33,320
So do you want to link to this repository? Yes, but I will add it to the document. So

626
00:56:33,320 --> 00:56:45,520
it's public it is this one

627
00:56:50,200 --> 00:56:56,720
so the next step for me is to add a new file it took me some time to find this

628
00:56:56,720 --> 00:57:04,360
button because now it's zoomed in so much that it's in here but it's behind

629
00:57:04,360 --> 00:57:12,120
next to this code button create new file now I want to upload a new file right

630
00:57:12,120 --> 00:57:19,340
yep because I the notebook yes I have the notebook that I just created in the

631
00:57:19,340 --> 00:57:29,180
previous example and commit message yes we always have to write something here

632
00:57:29,180 --> 00:57:38,500
it's a difficult to come up with useful ones though don't worry we are totally

633
00:57:38,500 --> 00:57:46,780
not judging yeah and committing directly to the main branch because I know that

634
00:57:46,780 --> 00:57:54,940
there's can't be no one else doing any editing yet because this is so new thing

635
00:57:54,940 --> 00:58:03,460
so new repository I mean okay now it's there with the readme nice what would be

636
00:58:03,460 --> 00:58:06,300
the next step

637
00:58:08,860 --> 00:58:14,420
next step I need to also navigate to the right place there's this requirements

638
00:58:14,420 --> 00:58:17,460
That's a nice connection to yesterday.

639
00:58:17,460 --> 00:58:19,120
This is a file.

640
00:58:19,120 --> 00:58:24,140
So we need to describe the software environment that we need.

641
00:58:24,140 --> 00:58:26,700
It can be either a requirements.txt file.

642
00:58:26,700 --> 00:58:29,500
It can also be an environment.yaml file.

643
00:58:29,500 --> 00:58:33,060
Both were mentioned yesterday in the reproducibility lesson.

644
00:58:33,060 --> 00:58:36,180
And here we can list what are the libraries that we need.

645
00:58:36,180 --> 00:58:43,780
And in this case, we will need the matplotlib, which is a Python library used for plotting.

646
00:58:43,780 --> 00:58:51,460
So, how do I know that which libraries, which things I need to list in the requirements

647
00:58:51,460 --> 00:58:52,460
txt?

648
00:58:52,460 --> 00:58:57,580
Well, that's a good question.

649
00:58:57,580 --> 00:58:59,780
Sometimes it's a bit trial and error.

650
00:58:59,780 --> 00:59:06,780
So depends a bit how you installed the dependencies that you use in the notebook.

651
00:59:06,780 --> 00:59:10,420
I like to personally when I install dependencies,

652
00:59:10,420 --> 00:59:15,420
I put them into a file like requirements.txt

653
00:59:15,740 --> 00:59:17,860
and then I install from the file

654
00:59:17,860 --> 00:59:19,100
because then I don't have to remember it,

655
00:59:19,100 --> 00:59:21,060
I can look into the file.

656
00:59:21,060 --> 00:59:22,900
But if you don't have to file

657
00:59:22,900 --> 00:59:24,820
and maybe you installed this a half a year ago

658
00:59:24,820 --> 00:59:27,140
and you don't remember anymore,

659
00:59:27,140 --> 00:59:30,540
then I go into my notebook and I see,

660
00:59:30,540 --> 00:59:34,820
I look at all the imports and now...

661
00:59:34,820 --> 00:59:38,420
Yeah, this is at least a starting point here.

662
00:59:38,420 --> 00:59:39,420
Yeah.

663
00:59:39,420 --> 00:59:42,980
And with with some Python knowledge, you would know that random is actually not.

664
00:59:42,980 --> 00:59:46,220
It's a standard library is part of Python.

665
00:59:46,220 --> 00:59:48,700
And but but lip is an external library.

666
00:59:48,700 --> 00:59:52,660
But this is now about is Python knowledge.

667
00:59:52,660 --> 01:00:01,780
Right, so we don't need to take this random now, but we have to take sorry, I'm navigating

668
01:00:01,780 --> 01:00:09,420
back to the GitHub, we have to mention matplotlib and the version.

669
01:00:09,420 --> 01:00:13,740
If we don't, if we leave out the version, we will get the latest one, which will still

670
01:00:13,740 --> 01:00:19,620
work today. But the question is, will the notebook then still run in five years. So

671
01:00:19,620 --> 01:00:24,420
depending on what your use case is, you might want to put the version there or not. If we

672
01:00:24,420 --> 01:00:30,020
forget to put something into the requirements or text, we will notice it. Because this is

673
01:00:30,020 --> 01:00:35,820
now this will run as an isolated thing and if there are dependencies missing we will notice

674
01:00:35,820 --> 01:00:40,540
so sometimes I do like I add something I run it uh-huh something missing okay I had something

675
01:00:40,540 --> 01:00:49,860
more until it works yeah so the next step shown in the lesson material is to go to my

676
01:00:49,860 --> 01:01:03,860
mindbinder.org. And this is just a web page, right? How does this help our cause?

677
01:01:03,860 --> 01:01:09,780
Here it will help that we once we have the repository, we there is this GitHub field.

678
01:01:09,780 --> 01:01:15,580
Yes, we can put a GitHub repository address. And if people want to try it out later, you

679
01:01:15,580 --> 01:01:19,980
notice that it doesn't have to be GitHub. The notebook can be on other places. Let's

680
01:01:19,980 --> 01:01:29,860
see it can be on GitLab or it can be on Zenodo or some other places where you can deposit

681
01:01:29,860 --> 01:01:33,980
a notebook and even get a digital object identifier for a notebook. So that would be even better

682
01:01:33,980 --> 01:01:39,700
than putting in putting it only on GitHub. But here we want to show how how to do it

683
01:01:39,700 --> 01:01:48,260
when you're on GitHub. So you take the address. So can I just use the URL, the URL from the

684
01:01:48,260 --> 01:01:59,740
URL field without the tree without the main? Yeah, like this. So that will hopefully work.

685
01:01:59,740 --> 01:02:05,780
Notice that on the left side, it says head, it will take the it will actually take the

686
01:02:05,780 --> 01:02:11,340
main, sorry, the main branch, the default branch, you could point it to another branch

687
01:02:11,340 --> 01:02:13,740
or attack if you have that.

688
01:02:13,740 --> 01:02:15,740
Yeah.

689
01:02:15,740 --> 01:02:18,900
Do I need this path to notebook file?

690
01:02:18,900 --> 01:02:24,220
I mean, it says optional, so I guess no.

691
01:02:24,220 --> 01:02:32,620
And you don't even have to launch it, you can, what we can do is, there is this one.

692
01:02:32,620 --> 01:02:39,340
What you can do is just below the line below there is the launch binder badge, and right

693
01:02:39,340 --> 01:02:43,340
of it is the little arrow, click on that little arrow.

694
01:02:43,340 --> 01:02:45,660
And now there is a markdown version and an RSD version.

695
01:02:45,660 --> 01:02:48,900
What you can do is you can copy that markdown badge.

696
01:02:48,900 --> 01:02:53,840
Yeah, because that will form a nice link to the documentation lesson and let's put it

697
01:02:53,840 --> 01:02:54,840
into our readme.

698
01:02:54,840 --> 01:03:04,200
Okay so I copy this one and go to my repository and to the readme file and I

699
01:03:04,200 --> 01:03:22,680
want to edit it now and maybe you can zoom in a little bit but let me see yeah

700
01:03:22,680 --> 01:03:32,280
so I copy pasted this markdown tag in here so it's an address to a web server

701
01:03:32,280 --> 01:03:38,520
and this web server which is which will be running on my binder org it will be

702
01:03:38,520 --> 01:03:44,880
generated on the fly on the fly it will create hopefully let's see it will

703
01:03:44,880 --> 01:03:51,440
create a container for us it will install the dependencies into it the

704
01:03:51,440 --> 01:03:56,040
dependencies which we have described in requirements or text and in this

705
01:03:56,040 --> 01:04:01,200
container it will run the notebook hopefully yeah so now I have this party

706
01:04:01,200 --> 01:04:08,800
started yeah now it's cool cool looking tag in my read me and didn't cost

707
01:04:08,800 --> 01:04:23,240
anything so I click the tag and now it took me here so it's loading up and

708
01:04:23,240 --> 01:04:33,040
while it's loading up it's showing me this static version of the files can I

709
01:04:33,040 --> 01:04:39,520
actually click here. Okay, click on it, but it only gives you a static preview because

710
01:04:39,520 --> 01:04:44,480
now yeah, now it's installing the dependencies and why it's installing if we are impatient,

711
01:04:44,480 --> 01:04:49,920
it will it at least wants to give us like the preview of how it will look.

712
01:04:49,920 --> 01:04:58,360
Yeah, it's nice to see at least like, is this what I'm looking for? I mean, if I realize

713
01:04:58,360 --> 01:05:02,680
here that no this is not the this is not the droids we are looking for no the

714
01:05:02,680 --> 01:05:08,400
Jupiter lab that we are looking for then maybe I go away but now I see that this

715
01:05:08,400 --> 01:05:15,880
is exactly what I want to see so I shall be waiting for the actual binder

716
01:05:15,880 --> 01:05:21,200
container to start yeah and it's the first time that we do that it can take

717
01:05:21,200 --> 01:05:31,800
seconds, minutes. Once it is has been set up, it's faster to run. And this is normally

718
01:05:31,800 --> 01:05:36,080
not not a problem because this is really for now we imagine that we are the person reading

719
01:05:36,080 --> 01:05:42,080
the publication and now we want to reproduce the steps and I don't mind waiting waiting

720
01:05:42,080 --> 01:05:46,280
three minutes for this thing to start for me. Yeah, in the meantime, what we can do

721
01:05:46,280 --> 01:05:50,880
while this is spinning up, we can have a look at the questions and discuss some of them

722
01:05:50,880 --> 01:05:57,480
Yes, let's open up the notes.

723
01:05:57,480 --> 01:06:03,360
There are some more detailed question like one more bigger picture question was.

724
01:06:03,360 --> 01:06:10,960
What is the advantage of, like, when should I use a notebook when should I use VS code

725
01:06:10,960 --> 01:06:17,040
when should I use Python scripts.

726
01:06:17,040 --> 01:06:24,480
And it one answer that we gave is that it's also a bit personal preference.

727
01:06:24,480 --> 01:06:29,120
It's we show you different tools and you can choose the one that feels more comfortable

728
01:06:29,120 --> 01:06:39,640
for you and for the use case.

729
01:06:39,640 --> 01:06:40,640
There's a question.

730
01:06:40,640 --> 01:06:41,640
Oh, yeah.

731
01:06:41,640 --> 01:06:42,640
Okay.

732
01:06:42,640 --> 01:06:43,640
Here's answers as well.

733
01:06:43,640 --> 01:06:51,440
some funny rendering here, just comparing JupyterLab and VS Code. I think VS Code can

734
01:06:51,440 --> 01:06:59,520
do about the same things. There's also the Git integration right in there, so I guess

735
01:06:59,520 --> 01:07:08,640
that's all in all easier to start in VS Code. I mean, the Git is there already, I think,

736
01:07:08,640 --> 01:07:10,560
and you can add the Jupyter extension.

737
01:07:10,560 --> 01:07:15,560
So maybe there's less overall installation thing,

738
01:07:15,740 --> 01:07:18,520
maybe less hustling in the terminal

739
01:07:18,520 --> 01:07:23,160
if you want to avoid that for some reason, like me.

740
01:07:27,320 --> 01:07:29,720
So it's a question of what people prefer.

741
01:07:29,720 --> 01:07:32,360
It's also a question of who do you collaborate with?

742
01:07:32,360 --> 01:07:33,200
Yeah.

743
01:07:38,640 --> 01:07:43,280
Is there something else?

744
01:07:43,280 --> 01:07:48,120
So there are interesting questions at the bottom but I need to look it up.

745
01:07:48,120 --> 01:07:55,480
So one question is that it is definitely possible that you have different environments in different

746
01:07:55,480 --> 01:07:56,480
directories.

747
01:07:56,480 --> 01:08:01,680
So you could imagine that if you just move out of a project and move into a different

748
01:08:01,680 --> 01:08:05,200
project that it automatically switches environment.

749
01:08:05,200 --> 01:08:06,200
I need to look up the details.

750
01:08:06,200 --> 01:08:13,120
I know it's possible there is something called .env but there's just one solution to this

751
01:08:13,120 --> 01:08:17,240
which will change your environment if you go into a directory and it will change it

752
01:08:17,240 --> 01:08:22,640
to something else if you move out of it but I need to look it up.

753
01:08:22,640 --> 01:08:27,040
Then there is another question which connects more to what was discussed yesterday like

754
01:08:27,040 --> 01:08:30,800
what is the best tool for managing dependencies I think that's hard to answer because there

755
01:08:30,800 --> 01:08:40,600
are so many tools. Maybe the two most popular ones are Conda or virtual

756
01:08:40,600 --> 01:08:44,480
environment but there are really many and and again it depends a bit on you

757
01:08:44,480 --> 01:08:49,800
what you prefer what your what your collaborators prefer. Often these tools

758
01:08:49,800 --> 01:08:55,800
can but the idea of isolating environments to have isolated

759
01:08:55,800 --> 01:09:00,760
environments per project. That's a good idea. And any of these tools allow it.

760
01:09:02,440 --> 01:09:12,040
And often you can convert one to the other. Yeah, like for me, for example, I think I've

761
01:09:12,040 --> 01:09:23,080
used Conda and virtualenv, but more in the way that if I have instructions, I know how to launch

762
01:09:23,080 --> 01:09:31,600
the virtual environment and then I can navigate myself around the code or run the code.

763
01:09:31,600 --> 01:09:41,160
So to all those people who might be wondering that this is all too much, if you have the

764
01:09:41,160 --> 01:09:48,420
collaboration case, so there's someone who created the environment, start from trying

765
01:09:48,420 --> 01:09:56,980
to run the code and launch the virtual environment and run the code, that already enables you

766
01:09:57,620 --> 01:10:05,460
to start the collaboration there. So don't worry, although it might feel overwhelming,

767
01:10:07,060 --> 01:10:12,980
discussing all those different virtual environments and tools for that.

768
01:10:12,980 --> 01:10:23,500
Okay, so in the context of binder, it's often a requirement for text or environment with

769
01:10:23,500 --> 01:10:24,500
yaml.

770
01:10:24,500 --> 01:10:25,860
How are we doing there?

771
01:10:25,860 --> 01:10:34,180
Is it still in the process of so if you if you go to that link again from your readme

772
01:10:34,180 --> 01:10:39,180
Yeah, I think I've lost my

773
01:10:39,180 --> 01:10:47,640
Did we not commit it

774
01:10:47,640 --> 01:10:53,380
Because I can also Oh, well, you have committed it. What people can do. Oh, I can also start

775
01:10:53,380 --> 01:10:54,380
it on my side.

776
01:10:54,380 --> 01:11:03,940
No, I mean, I just lost my tabs. Yeah. But lucky you put this in there.

777
01:11:03,940 --> 01:11:10,620
Oh, yeah. So you can start it from there. And I started it on my side, people can try

778
01:11:10,620 --> 01:11:16,420
to but let's not let's see whether it's overwhelms binder. So on my, on my computer, it started

779
01:11:16,420 --> 01:11:25,140
up. So it will also soon do it on yours. Here it is. Now we see the planets orbiting. So

780
01:11:25,140 --> 01:11:30,980
the moons are orbiting Jupiter and there it is. So this is now not running on [name] computer.

781
01:11:30,980 --> 01:11:35,300
It's on somewhere in the cloud, accessible through the browser, you can try to visit

782
01:11:35,300 --> 01:11:41,340
it too. And you can try to run the notebook that we just created. And you can even go

783
01:11:41,340 --> 01:11:47,340
in and change it. So what if I change it? Does it save and where?

784
01:11:47,340 --> 01:11:53,560
No, it's so if you change it, and then leave it at some point, this, this container will

785
01:11:53,560 --> 01:12:01,560
vaporize. So I can basically, I can mess up everything here in this environment if I want

786
01:12:01,560 --> 01:12:09,280
to and so you can original is there. Yeah. If you wanted to change it and keep the changes,

787
01:12:09,280 --> 01:12:12,520
you would have to save them. So you can you can take the notebook and save it onto your

788
01:12:12,520 --> 01:12:17,080
computer. So that will be the way to preserve them. But here we can all experiment. I mean,

789
01:12:17,080 --> 01:12:22,920
go in and try to modify some numbers, try to run it. And we have a we have a dynamic

790
01:12:22,920 --> 01:12:31,320
notebook. And if we know we could go one step further and get the DOI for it, and which

791
01:12:31,320 --> 01:12:34,920
which we will not do, but then we are sure

792
01:12:34,920 --> 01:12:39,920
that this thing will be available the next 10 years.

793
01:12:40,320 --> 01:12:42,000
And if we are careful about dependencies

794
01:12:42,000 --> 01:12:44,840
and about documenting dependencies with versions,

795
01:12:44,840 --> 01:12:45,880
we can be reasonably sure

796
01:12:45,880 --> 01:12:48,040
that this thing will still run in 10 years.

797
01:12:49,280 --> 01:12:50,120
Pretty cool.

798
01:13:01,320 --> 01:13:15,060
Right, so I made some edits. I wanted to see how close this statistic result was, so I

799
01:13:15,060 --> 01:13:26,580
compared that result to the actual Pi provided by NumPy library and well it's in two decimals.

800
01:13:26,580 --> 01:13:27,580
Quite okay.

801
01:13:27,580 --> 01:13:34,120
Yeah, this is really cool. Binder is a wonderful service. It is nonprofit. There are different

802
01:13:34,120 --> 01:13:40,100
services that do similar things. Some of them are nonprofit, some of them are for profit.

803
01:13:40,100 --> 01:13:44,460
Here we wanted to show you a really nice service that is does a lot of good for community and

804
01:13:44,460 --> 01:13:47,380
is a nonprofit one.

805
01:13:47,380 --> 01:14:00,300
There are some optional exercises about tracking the dependencies which we also discussed a

806
01:14:00,300 --> 01:14:07,500
little bit what to put in the requirements in TXT and how to find them.

807
01:14:07,500 --> 01:14:18,000
And then there's an optional exercise about sharing an interactive notebook.

808
01:14:18,000 --> 01:14:21,320
So what does the interactive mean in this case?

809
01:14:21,320 --> 01:14:25,880
This means, and it will connect to somebody ask a question of how can you have interactive

810
01:14:25,880 --> 01:14:26,880
images?

811
01:14:26,880 --> 01:14:30,400
I mean, interactive graphics in a notebook, and this is one way of doing that or doing

812
01:14:30,400 --> 01:14:31,400
it.

813
01:14:31,400 --> 01:14:32,400
Yeah.

814
01:14:32,400 --> 01:14:38,760
slider, for instance, that you can slide from left to right and then you can make it change

815
01:14:38,760 --> 01:14:45,800
values and then you can define it so that images automatically add up to it.

816
01:14:45,800 --> 01:14:49,000
There are many ways to implement this but here we show you one.

817
01:14:49,000 --> 01:14:50,000
Yeah.

818
01:14:50,000 --> 01:15:01,560
So I really encourage you to go to see the like optional exercises that there's a quite

819
01:15:01,560 --> 01:15:10,760
a lot of nice material. Also some new things for me also I guess. One that I

820
01:15:10,760 --> 01:15:17,120
actually would like to advertise here now is this shell commands magic and

821
01:15:17,120 --> 01:15:25,200
widgets. So there are some extra features in Jupyter you can you can ask

822
01:15:25,200 --> 01:15:32,420
it for help about some object. So if you don't know what this npSum does, you can

823
01:15:32,420 --> 01:15:38,860
add a question mark there and apparently it will tell you. Scrolling a little bit

824
01:15:38,860 --> 01:15:48,020
down, you can run shell or terminal commands in Jupyter by adding this

825
01:15:48,020 --> 01:15:56,860
exclamation mark. That can be really nice for example in a case that you want to

826
01:15:56,860 --> 01:16:03,420
know in which which folder you are in. Now this is probably going to look

827
01:16:03,420 --> 01:16:17,020
curious because it's in the binder container but anyhow. And then oh there's

828
01:16:17,020 --> 01:16:27,100
some magic. I think I have never tried this. And then the widgets that we mentioned, that

829
01:16:27,100 --> 01:16:38,140
you can add more interactive elements in the JupyterLab. Yeah, do we go to the summary?

830
01:16:38,140 --> 01:16:41,960
Let's do that.

831
01:16:41,960 --> 01:16:48,060
And also a reminder to everybody else, on the bottom of the notes, I have pasted requests

832
01:16:48,060 --> 01:16:49,060
for feedback.

833
01:16:49,060 --> 01:16:55,020
Please let us know how today went.

834
01:16:55,020 --> 01:16:58,100
There are also some questions that we can discuss in voice, but I don't know if you

835
01:16:58,100 --> 01:17:03,180
wanted to share some summary slide or say a few words, [name].

836
01:17:03,180 --> 01:17:13,980
in the lesson material there's this nice summary, more links and blog posts and articles and then

837
01:17:13,980 --> 01:17:25,580
also again mentioned these other tools for other languages than Python and like a reminder on the

838
01:17:26,460 --> 01:17:32,940
thing that we already also mentioned that when you start with the JupyterLab or JupyterNotebook

839
01:17:32,940 --> 01:17:40,140
You start experimenting and and develop more and more at some point you have a really long notebook

840
01:17:41,920 --> 01:17:43,920
But then

841
01:17:43,920 --> 01:17:45,920
It starts to grow so

842
01:17:47,240 --> 01:17:50,520
The one good practice was to

843
01:17:51,680 --> 01:17:53,760
every time before you save and share

844
01:17:54,680 --> 01:17:59,840
restart kernel run all cells to see that your notebook actually runs in order and

845
01:18:00,640 --> 01:18:02,640
There's no errors

846
01:18:02,640 --> 01:18:25,640
And then also try to organize it and use the subtitles or headlines, headings to keep the notebook in order so that it's easy also for you after one year to get back to it.

847
01:18:25,640 --> 01:18:33,600
Yeah.

848
01:18:33,600 --> 01:18:34,780
You mentioned some questions.

849
01:18:34,780 --> 01:18:40,620
Is there still something that you would like to raise?

850
01:18:40,620 --> 01:18:46,220
So we can comment that tomorrow we will connect to this.

851
01:18:46,220 --> 01:18:52,820
We will when we discuss modular code development, we will actually tomorrow start in a notebook

852
01:18:52,820 --> 01:18:59,100
And we will then experience a moment when maybe it feels like, you know, uncomfortable

853
01:18:59,100 --> 01:19:01,380
and it feels like we want to move out of notebook.

854
01:19:01,380 --> 01:19:05,100
So we will see that we will see a situation and the situation will be once we start adding

855
01:19:05,100 --> 01:19:10,180
tests that

856
01:19:10,180 --> 01:19:16,340
So we will start in notebook and maybe move out into scripts.

857
01:19:16,340 --> 01:19:18,700
We will also tomorrow talk about automated testing.

858
01:19:18,700 --> 01:19:21,780
So two really exciting lessons coming up.

859
01:19:21,780 --> 01:19:25,140
We hope to see you all tomorrow again.

860
01:19:25,140 --> 01:19:27,700
And thanks a lot for giving feedback below.

861
01:19:27,700 --> 01:19:29,180
Tell us one thing that you liked about today.

862
01:19:29,180 --> 01:19:32,820
Tell us also one thing that we should change or remove.

863
01:19:32,820 --> 01:19:41,140
Yeah, I think we've been changing at least something in in every time we have this workshop,

864
01:19:41,140 --> 01:19:42,380
right?

865
01:19:42,380 --> 01:19:50,340
Yes, because this the topics they are evolving, so we need to evolve with them.

866
01:19:50,340 --> 01:19:55,180
And this goes more about the content, but it also goes, it's also about the forum and

867
01:19:55,180 --> 01:19:57,100
how we present it.

868
01:19:57,100 --> 01:19:58,100
Yeah.

869
01:19:58,100 --> 01:20:00,460
So, thank you for this lesson.

870
01:20:00,460 --> 01:20:03,980
Thank you for following and thank you for the feedback.

871
01:20:03,980 --> 01:20:04,980
Keep it coming.

872
01:20:04,980 --> 01:20:07,020
And thank you [name] for having me here.

873
01:20:07,020 --> 01:20:08,020
Yeah.

874
01:20:08,020 --> 01:20:09,020
Thanks [name].

875
01:20:09,020 --> 01:20:10,020
Always pleasure.

876
01:20:10,020 --> 01:20:30,580
the music. Sure.

