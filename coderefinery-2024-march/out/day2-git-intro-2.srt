1
00:00:00,000 --> 00:00:00,160
Thanks everybody helping also in the document.

2
00:00:01,220 --> 00:00:04,460
Maybe we should start with introducing the instructors.

3
00:00:04,460 --> 00:00:05,860
So my name is [Name],

4
00:00:06,860 --> 00:00:09,480
teaching here today from TromsÃ¸, Northern Norway.

5
00:00:11,460 --> 00:00:14,460
Really looking forward to talk more about Git.

6
00:00:14,460 --> 00:00:16,160
Git is one of my really favorite tools.

7
00:00:16,160 --> 00:00:17,220
I use it every day.

8
00:00:18,060 --> 00:00:20,900
And this workshop is one of my favorite things in the year.

9
00:00:22,420 --> 00:00:24,460
And with me is [Name] from [location].

10
00:00:24,460 --> 00:00:27,580
Hello, my name is [Name].

11
00:00:27,580 --> 00:00:29,300
I'm working at NTNU.

12
00:00:29,300 --> 00:00:31,620
So I've been with the Code Refinery project

13
00:00:31,620 --> 00:00:33,420
almost from the start.

14
00:00:33,420 --> 00:00:36,120
So I'm looking forward to teach today.

15
00:00:39,180 --> 00:00:41,880
And what I should do is I should take the screen share.

16
00:00:43,000 --> 00:00:44,140
Give me a second.

17
00:00:45,540 --> 00:00:47,980
And we will start with a little bit of recap

18
00:00:48,980 --> 00:00:51,200
before we go into the first exercise.

19
00:00:51,200 --> 00:00:54,660
We have today three exercises planned.

20
00:00:58,980 --> 00:01:01,860
And I will just arrange my screens.

21
00:01:01,860 --> 00:01:06,860
This page that I'm sharing is the introduction to Git

22
00:01:08,700 --> 00:01:10,140
where we started yesterday.

23
00:01:10,140 --> 00:01:11,740
If you joined today, no problem.

24
00:01:13,180 --> 00:01:14,580
We will get you up to speed.

25
00:01:16,140 --> 00:01:18,940
You can navigate the page either on the left side.

26
00:01:20,700 --> 00:01:22,820
Now, just for the readability, I will zoom in

27
00:01:22,820 --> 00:01:26,820
and I will tell you what did we do yesterday.

28
00:01:26,820 --> 00:01:29,780
Yesterday, we started with motivation

29
00:01:29,780 --> 00:01:34,720
And then we did three episodes, three exercises.

30
00:01:34,720 --> 00:01:39,200
One was to copy and browse an existing project.

31
00:01:39,200 --> 00:01:41,400
And if you don't have it, no problem,

32
00:01:41,400 --> 00:01:43,460
you can copy it today.

33
00:01:43,460 --> 00:01:46,740
We have then instructions on how you create this copy,

34
00:01:46,740 --> 00:01:49,140
what you have to create the fork.

35
00:01:49,140 --> 00:01:53,420
And then we practiced creating commits

36
00:01:53,420 --> 00:01:55,180
and creating branches.

37
00:01:55,180 --> 00:02:07,060
And finally, yesterday, we practiced how to combine these changes in through merging.

38
00:02:07,060 --> 00:02:16,780
And many of you have even sent so called pull requests towards the upstream repository.

39
00:02:16,780 --> 00:02:22,140
And this was a start to so you have seen how collaboration essentially works.

40
00:02:22,140 --> 00:02:24,540
and we will return to collaborating tomorrow.

41
00:02:26,140 --> 00:02:29,460
The plan for today is we have three sessions planned.

42
00:02:29,460 --> 00:02:31,500
Again, three episodes, three exercises.

43
00:02:31,500 --> 00:02:34,180
One will start in 15 minutes.

44
00:02:36,340 --> 00:02:41,340
And here today, we will move from the web to our computer.

45
00:02:43,860 --> 00:02:48,580
We will clone a repository to our computer and work locally.

46
00:02:49,500 --> 00:02:51,860
And then you can choose your favorite track.

47
00:02:51,860 --> 00:02:55,820
you can work with VS Code, RStudio, Command Line,

48
00:02:56,780 --> 00:02:59,680
and hopefully in the future, we can offer even more tracks.

49
00:03:01,020 --> 00:03:02,500
In order to work locally,

50
00:03:02,500 --> 00:03:07,500
you will need to have an editor,

51
00:03:07,740 --> 00:03:09,300
and we have recommended in doubt,

52
00:03:09,300 --> 00:03:13,740
go for VS Code or the Command Line configured.

53
00:03:13,740 --> 00:03:16,180
So this is something that you have hopefully done

54
00:03:17,140 --> 00:03:18,480
before the workshop.

55
00:03:18,480 --> 00:03:20,620
If not, not a big problem.

56
00:03:20,620 --> 00:03:23,260
you can then during the exercise sessions,

57
00:03:23,260 --> 00:03:24,360
look at the section,

58
00:03:25,260 --> 00:03:29,020
how to configure Git for your command line

59
00:03:29,020 --> 00:03:30,660
or for your editor.

60
00:03:30,660 --> 00:03:33,020
If you use VS Code, there is very little to do.

61
00:03:33,940 --> 00:03:38,160
Basically download, install, and you are ready to go.

62
00:03:41,540 --> 00:03:42,900
So I will not go through this episode,

63
00:03:42,900 --> 00:03:45,440
but you know that it is there if you need it.

64
00:03:45,440 --> 00:03:47,540
And you might need it in the first exercise.

65
00:03:47,540 --> 00:03:50,300
we will, so then we will clone, work locally.

66
00:03:51,740 --> 00:03:55,180
Some of you, those of you who yesterday worked

67
00:03:55,180 --> 00:03:57,740
in a command line or in an editor,

68
00:03:57,740 --> 00:03:59,900
you have already worked locally.

69
00:03:59,900 --> 00:04:02,220
So there will be a little bit of repetition,

70
00:04:03,980 --> 00:04:05,260
but there will also be new things.

71
00:04:05,260 --> 00:04:09,740
So then try to focus on the new things that come up.

72
00:04:09,740 --> 00:04:11,860
Try to focus on seeing the difference

73
00:04:11,860 --> 00:04:14,060
between what is a local branch,

74
00:04:14,060 --> 00:04:16,100
what is a remote branch, how does it work?

75
00:04:17,540 --> 00:04:20,860
And then we will do a little bit more archaeology.

76
00:04:20,860 --> 00:04:28,740
We will give you a puzzle to do archaeology in somebody else's repository.

77
00:04:28,740 --> 00:04:33,860
And there we will practice some of the history inspection commands that we have already seen

78
00:04:33,860 --> 00:04:36,860
yesterday.

79
00:04:36,860 --> 00:04:38,880
Then we will take a longer break.

80
00:04:38,880 --> 00:04:43,320
And in the third session, we will take a different project.

81
00:04:43,320 --> 00:04:44,840
It can be your own project,

82
00:04:44,840 --> 00:04:49,080
or it can be your own new fantasy small project,

83
00:04:50,200 --> 00:04:52,080
which is not on Git.

84
00:04:52,080 --> 00:04:54,720
And we will practice how do we turn,

85
00:04:54,720 --> 00:04:56,000
make it a Git repository,

86
00:04:56,000 --> 00:04:59,240
and how do we share it on services like GitHub,

87
00:05:00,200 --> 00:05:03,480
which is incredibly important that we all know how to do it

88
00:05:04,400 --> 00:05:07,580
in order to make our code findable,

89
00:05:07,580 --> 00:05:09,240
but also in order to have backup.

90
00:05:09,240 --> 00:05:19,240
And as always, the instructors, we are watching these collaborative notes.

91
00:05:19,240 --> 00:05:22,480
The more questions we get, the better it will be.

92
00:05:22,480 --> 00:05:27,080
I have a different screen where I have it open at all times.

93
00:05:27,080 --> 00:05:30,760
And the best way to interact then is to ask questions and comments at the bottom of the

94
00:05:30,760 --> 00:05:32,040
document.

95
00:05:32,040 --> 00:05:37,400
And [Name] and me will watch this and some of the questions we will then also discuss

96
00:05:37,400 --> 00:05:47,080
see on stream. We really look forward to that. So please keep them coming.

97
00:05:47,080 --> 00:05:51,640
And now I recommend that let's go into this part here, cloning our git repository and

98
00:05:51,640 --> 00:05:57,440
working locally. And let's start with our let's get you started there. And also a little

99
00:05:57,440 --> 00:06:04,880
with a little recap. So I will go in here and you find the link at the bottom of the

100
00:06:04,880 --> 00:06:13,160
collaborative nodes. Our objectives are we are able to clone a repository from

101
00:06:13,160 --> 00:06:19,640
the web and modify it locally. We can do the same things we did before, like

102
00:06:19,640 --> 00:06:24,440
committing, branching, merging, but locally. But those of you who have done

103
00:06:24,440 --> 00:06:30,920
that already, we will also get a feeling for what are remote branches and remote

104
00:06:30,920 --> 00:06:33,520
repositories.

105
00:06:34,880 --> 00:06:37,640
And little recap, what is a git repository?

106
00:06:37,640 --> 00:06:39,120
What are we cloning?

107
00:06:39,120 --> 00:06:42,000
A git repository contains all the files

108
00:06:43,200 --> 00:06:44,720
and directories of a project.

109
00:06:44,720 --> 00:06:47,560
It has a complete history of all the changes

110
00:06:48,720 --> 00:06:51,000
to these files and directories.

111
00:06:51,000 --> 00:06:55,400
And each commit is a snapshot of the entire project

112
00:06:56,480 --> 00:06:57,880
at a certain point in time.

113
00:06:59,120 --> 00:07:03,320
And it has this unique identifier and we call it the hash.

114
00:07:03,320 --> 00:07:08,260
So if I go into, this is my practice repository

115
00:07:08,260 --> 00:07:11,100
from yesterday, and if you don't have it yet,

116
00:07:11,100 --> 00:07:13,160
no problem, you can then create it later.

117
00:07:14,540 --> 00:07:19,540
And what I meant with hash are these, this thing here,

118
00:07:19,540 --> 00:07:22,260
this is my latest commit, and it has the identifier

119
00:07:22,260 --> 00:07:25,420
9C2A7E6, et cetera, et cetera, et cetera.

120
00:07:25,420 --> 00:07:26,260
It's unique.

121
00:07:27,600 --> 00:07:30,160
And now if I wanted to publish my work in an article,

122
00:07:30,160 --> 00:07:33,840
I could say that I have used this repository

123
00:07:33,840 --> 00:07:36,220
and I have used this particular version.

124
00:07:39,240 --> 00:07:41,200
But you will probably tag it

125
00:07:42,080 --> 00:07:45,700
and not use the hash, I guess.

126
00:07:47,000 --> 00:07:50,680
Great point, because for humans,

127
00:07:50,680 --> 00:07:52,200
for computers, this is nice,

128
00:07:53,200 --> 00:07:56,300
but for humans, it's hard to remember these characters.

129
00:07:56,300 --> 00:08:01,180
So, we often like to create so-called stack or a release.

130
00:08:01,180 --> 00:08:02,480
So, what I would probably have done,

131
00:08:02,480 --> 00:08:04,180
and let's just, let me just do it.

132
00:08:04,180 --> 00:08:05,920
So, this is not something you need to do.

133
00:08:05,920 --> 00:08:07,800
You can try it later on your own repository,

134
00:08:07,800 --> 00:08:10,480
but what I will do here, I will create a so-called,

135
00:08:10,480 --> 00:08:12,020
what GitHub calls release.

136
00:08:14,580 --> 00:08:17,720
But from the Git perspective, it's really a tag.

137
00:08:17,720 --> 00:08:20,400
And here, it's nothing else than creating

138
00:08:20,400 --> 00:08:24,580
a little sticky note with something that humans understand,

139
00:08:24,580 --> 00:08:27,920
which sticks to that commit.

140
00:08:27,920 --> 00:08:28,900
Let me create it quick.

141
00:08:28,900 --> 00:08:29,940
So create a new release.

142
00:08:29,940 --> 00:08:33,320
I'm here with my mouse on the right side of the screen.

143
00:08:34,580 --> 00:08:35,940
Create a new release.

144
00:08:39,260 --> 00:08:41,660
Here I can decide from where.

145
00:08:41,660 --> 00:08:42,660
If it's from main,

146
00:08:42,660 --> 00:08:45,460
it means it will be from the latest commit

147
00:08:45,460 --> 00:08:46,760
that is currently on main.

148
00:08:48,020 --> 00:08:49,140
How should I call it?

149
00:08:49,140 --> 00:08:50,860
I don't know, version 1.0.

150
00:08:54,580 --> 00:09:09,780
First version of my project, first working version of my project with many nice recipes.

151
00:09:09,780 --> 00:09:12,780
Okay.

152
00:09:12,780 --> 00:09:17,220
I can give it a title if I want to.

153
00:09:17,220 --> 00:09:22,820
Publish release.

154
00:09:22,820 --> 00:09:29,860
But now this is what humans can remember more easily, and this is what I can put in my manuscript.

155
00:09:29,860 --> 00:09:35,660
But it's really just a sticky note with a little bit of metadata that points to a particular

156
00:09:35,660 --> 00:09:37,740
commit.

157
00:09:37,740 --> 00:09:44,060
And the typical metadata would be release notes, a short summary of what has changed

158
00:09:44,060 --> 00:09:47,100
in 1.0 compared to 0.9.

159
00:09:47,100 --> 00:09:49,580
The source code is easily available now

160
00:09:49,580 --> 00:09:52,380
since it's a zip door.

161
00:09:54,220 --> 00:09:55,060
Yeah, that's nice.

162
00:09:55,060 --> 00:09:58,940
So it creates this archive for me,

163
00:09:58,940 --> 00:10:00,220
which people can download.

164
00:10:00,220 --> 00:10:03,060
So they don't even have to know how to use Git.

165
00:10:03,060 --> 00:10:05,020
They don't have to know how to clone.

166
00:10:05,020 --> 00:10:05,860
We will learn that now,

167
00:10:05,860 --> 00:10:08,960
but they can download this directly.

168
00:10:10,660 --> 00:10:13,780
Now, whether this is enough to be findable

169
00:10:13,780 --> 00:10:15,300
and reproducible for the next 10 years

170
00:10:15,300 --> 00:10:16,460
is a different question.

171
00:10:17,100 --> 00:10:20,220
So what we will do next week is we will show you

172
00:10:20,220 --> 00:10:21,780
how you can go a step further,

173
00:10:21,780 --> 00:10:24,900
because I could publish my work,

174
00:10:24,900 --> 00:10:26,980
but I could still delete this repository

175
00:10:26,980 --> 00:10:28,680
and then it will be hard to find.

176
00:10:29,660 --> 00:10:33,300
A nice next step could be to make this citable,

177
00:10:33,300 --> 00:10:36,780
create a digital object identifier and make it persistent

178
00:10:37,740 --> 00:10:40,860
to make sure that this never disappears.

179
00:10:40,860 --> 00:10:42,500
But we will learn that next week.

180
00:10:42,500 --> 00:10:50,980
[Name], how do you use Git in your work?

181
00:10:50,980 --> 00:11:02,300
I use it for almost everything. I try to be totally text based, just only use simple text

182
00:11:02,300 --> 00:11:10,340
and simple text editors. And then it is very useful for taking versions of what they produce.

183
00:11:10,340 --> 00:11:14,420
It goes for written text, configuration files, and code.

184
00:11:16,920 --> 00:11:20,400
What do you find, or what did you find difficult

185
00:11:20,400 --> 00:11:21,700
with Git when you started?

186
00:11:22,820 --> 00:11:25,160
What was the most surprising, difficult thing?

187
00:11:27,000 --> 00:11:30,820
The more, I think branching and merging,

188
00:11:31,780 --> 00:11:36,780
getting a readable graph out of the branches

189
00:11:36,780 --> 00:11:41,780
of the branches and then be at the right place to merge.

190
00:11:43,140 --> 00:11:46,580
So I've done a little bit of backtracking

191
00:11:46,580 --> 00:11:51,580
for getting graphs that are more readable.

192
00:11:56,820 --> 00:11:57,780
What about you?

193
00:11:57,780 --> 00:11:59,020
Yeah, thanks.

194
00:11:59,020 --> 00:12:01,420
What I found difficult at the start

195
00:12:01,420 --> 00:12:03,240
was it was never so clear to me.

196
00:12:04,700 --> 00:12:06,100
Okay, I learned how to make omits

197
00:12:06,100 --> 00:12:07,580
and I could create commits and branches,

198
00:12:07,580 --> 00:12:12,220
but I didn't know whether they stay on my computer

199
00:12:12,220 --> 00:12:14,120
or whether they travel somewhere else.

200
00:12:15,420 --> 00:12:17,400
No, that was never very clear to me.

201
00:12:17,400 --> 00:12:19,260
And I think we will clarify that today.

202
00:12:19,260 --> 00:12:20,260
So we will create commits,

203
00:12:20,260 --> 00:12:23,380
but we will see that everything we do locally

204
00:12:23,380 --> 00:12:25,560
stays locally on the computer,

205
00:12:25,560 --> 00:12:30,560
unless you tell it to go somewhere else.

206
00:12:32,260 --> 00:12:33,180
So something we will see

207
00:12:33,180 --> 00:12:35,540
is that we will have to actively push changes

208
00:12:35,540 --> 00:12:37,620
if I want to publish them from my computers

209
00:12:37,620 --> 00:12:38,500
to somewhere else.

210
00:12:39,500 --> 00:12:44,500
And also if the GitHub repository gets new changes,

211
00:12:45,220 --> 00:12:48,700
they don't automatically magically travel to my computer,

212
00:12:48,700 --> 00:12:51,600
I have to actively pull them.

213
00:12:51,600 --> 00:12:55,920
So we will learn about pulling changes, pushing changes.

214
00:12:57,780 --> 00:13:00,140
And in a little bit, we will do a clone.

215
00:13:00,140 --> 00:13:02,460
And maybe one thing we could try is that

216
00:13:02,460 --> 00:13:09,280
And just to show you what, how this works, maybe one of us could do it in the terminal

217
00:13:09,280 --> 00:13:13,900
and the other person could try it in VS code.

218
00:13:13,900 --> 00:13:24,260
And where we clone our, or I can show both, it doesn't matter, where we clone the exercise

219
00:13:24,260 --> 00:13:27,700
from yesterday so that you have a starting point on your computer.

220
00:13:27,700 --> 00:13:33,680
And then the rest will be, there'll be an exercise with a couple of steps.

221
00:13:33,680 --> 00:13:39,880
And like yesterday, there is no expectation that just by reading the exercise, you know,

222
00:13:39,880 --> 00:13:44,320
the solution, the solution and the walkthrough is part of the exercise.

223
00:13:44,320 --> 00:13:51,720
And then also in the solution and walkthrough, you then find also discussions and some thoughts.

224
00:13:51,720 --> 00:13:57,500
I'm also looking here at the questions, anything we should lift to general discussion.

225
00:13:57,500 --> 00:14:02,100
So there are some questions about releases,

226
00:14:02,100 --> 00:14:03,300
but they are answered.

227
00:14:07,620 --> 00:14:09,820
Should I show how to clone just to get us started?

228
00:14:09,820 --> 00:14:12,700
How to do a clone in the terminal

229
00:14:12,700 --> 00:14:14,460
and how to do it in VS Code?

230
00:14:14,460 --> 00:14:15,900
Yeah, I think that's a good idea.

231
00:14:15,900 --> 00:14:18,860
Then we'll get a good start.

232
00:14:18,860 --> 00:14:21,780
Yeah, so that is, you don't have to do it now.

233
00:14:21,780 --> 00:14:25,180
So for those listening now, it's part of the exercise,

234
00:14:25,180 --> 00:14:30,740
but to show you what, what that means and what's going on.

235
00:14:30,740 --> 00:14:31,740
And I will take

236
00:14:31,740 --> 00:14:39,660
I will take the, my example from yesterday. If you don't have it, no problem. You can,

237
00:14:39,660 --> 00:14:46,540
it is forked from another repository. And if you don't, you can fork it again. If you,

238
00:14:46,540 --> 00:14:51,420
if you haven't done it yesterday, you can, there is a step that shows you how to do that.

239
00:14:51,420 --> 00:14:55,100
and I want to now clone it to my computer.

240
00:14:55,100 --> 00:14:56,700
Cloning means copying everything,

241
00:14:56,700 --> 00:15:01,340
but this time not from one user space

242
00:15:01,340 --> 00:15:03,380
into another user space,

243
00:15:04,380 --> 00:15:09,140
but cloning means copying everything from now GitHub

244
00:15:10,060 --> 00:15:13,140
down to my computer here.

245
00:15:13,140 --> 00:15:18,140
I will show you first terminal in the command line,

246
00:15:18,140 --> 00:15:20,500
terminal in the command line.

247
00:15:20,500 --> 00:15:22,420
And then I will show you that in VS code.

248
00:15:22,420 --> 00:15:25,380
And I will be a little bit clumsy in VS code.

249
00:15:25,380 --> 00:15:26,900
It's not something I use every day.

250
00:15:26,900 --> 00:15:29,280
I use the command line every day, but that is good.

251
00:15:29,280 --> 00:15:30,980
It will slow me down a little bit.

252
00:15:32,300 --> 00:15:33,660
I will show you how I clone.

253
00:15:35,020 --> 00:15:38,500
And down here, hopefully you can see my command history.

254
00:15:40,500 --> 00:15:43,300
The way I clone is that there is this green button here.

255
00:15:43,300 --> 00:15:48,300
And here you can decide how you want to clone.

256
00:15:49,540 --> 00:15:50,820
And if you are unsure,

257
00:15:52,920 --> 00:15:56,080
that's, but then you can find the answer in this,

258
00:15:58,560 --> 00:16:01,060
whoops, zooming out up here,

259
00:16:01,060 --> 00:16:02,840
configuring git command line and editor.

260
00:16:02,840 --> 00:16:04,700
So this is part of the configuration.

261
00:16:09,000 --> 00:16:13,040
In my case, I have done that and I will choose SSH.

262
00:16:13,040 --> 00:16:14,960
it's a way for me to authenticate that.

263
00:16:19,480 --> 00:16:22,680
If you are in for this first exercise,

264
00:16:22,680 --> 00:16:24,040
this one will work as well.

265
00:16:25,920 --> 00:16:27,240
Sure, it doesn't matter which of the two.

266
00:16:27,240 --> 00:16:28,840
What I do is I copy this address

267
00:16:30,440 --> 00:16:32,240
and then on the command line,

268
00:16:32,240 --> 00:16:34,560
and we have the instructions, it's git clone,

269
00:16:36,680 --> 00:16:39,120
git clone the address.

270
00:16:39,120 --> 00:16:41,640
And then where do you want to clone into?

271
00:16:41,640 --> 00:16:49,400
For instance, recipe book, and this would create a new directory on my computer called

272
00:16:49,400 --> 00:16:50,800
recipe book.

273
00:16:50,800 --> 00:17:01,280
If I leave it out, then it will create a directory called the with the same name as the git repository.

274
00:17:01,280 --> 00:17:05,920
I will show you that on the command line, you can practice later if you want to, but

275
00:17:05,920 --> 00:17:09,040
you can choose your own journey.

276
00:17:09,040 --> 00:17:13,680
Here, okay, I received lots of objects and deltas.

277
00:17:18,280 --> 00:17:22,680
It's just, and now I have a new directory

278
00:17:22,680 --> 00:17:24,880
on my computer called recipe book recorded.

279
00:17:27,040 --> 00:17:28,480
And in that directory,

280
00:17:31,040 --> 00:17:33,240
git log one line,

281
00:17:33,240 --> 00:17:40,400
I have a, I have a git repository.

282
00:17:40,400 --> 00:17:42,440
All the commits are there.

283
00:17:42,440 --> 00:17:45,440
All the branches are there.

284
00:17:45,440 --> 00:17:51,600
One interesting thing you can try later is that if I type git branch to see which branches

285
00:17:51,600 --> 00:17:56,660
do I have on my computer, I only see main.

286
00:17:56,660 --> 00:18:05,940
That might be surprising because on GitHub, zooming out, on the GitHub, I have four branches.

287
00:18:05,940 --> 00:18:09,300
But part of the exercise is to find out what's going on there.

288
00:18:09,300 --> 00:18:14,780
They are all four branches are actually on my computer, but I don't want to spoil it.

289
00:18:14,780 --> 00:18:18,300
So in the exercise, you will see the difference between what is a local branch and what is

290
00:18:18,300 --> 00:18:21,140
a remote branch.

291
00:18:21,140 --> 00:18:23,660
And now let me try the same thing in VS code.

292
00:18:23,660 --> 00:18:25,660
Should I try it or [Name], do you want to?

293
00:18:25,660 --> 00:18:30,660
No, I'm more due to, I'm not that used to VS code.

294
00:18:32,480 --> 00:18:33,440
Ah, yeah, me neither.

295
00:18:33,440 --> 00:18:35,520
I was hoping you would take it, but let me try.

296
00:18:35,520 --> 00:18:36,740
Okay, let me see.

297
00:18:36,740 --> 00:18:39,900
So I will just navigate out of this.

298
00:18:41,120 --> 00:18:45,520
And now I will have a sneaky peek at our instructions

299
00:18:46,940 --> 00:18:47,960
on how to do that.

300
00:18:48,840 --> 00:18:53,400
But let me first try, I will make this,

301
00:18:53,400 --> 00:18:55,960
Let me, I will start VS Code.

302
00:18:55,960 --> 00:18:57,760
I started by typing code

303
00:18:57,760 --> 00:18:58,960
and where do I want to start it?

304
00:18:58,960 --> 00:18:59,880
Code dot.

305
00:19:02,080 --> 00:19:04,000
But you might start VS Code differently,

306
00:19:04,000 --> 00:19:04,840
but that's how I started.

307
00:19:04,840 --> 00:19:07,040
I just want to start it in exactly this place.

308
00:19:09,160 --> 00:19:10,680
Ooh, it's very small.

309
00:19:10,680 --> 00:19:11,520
Let me

310
00:19:13,840 --> 00:19:14,680
zoom in.

311
00:19:17,280 --> 00:19:18,120
Ooh, okay.

312
00:19:18,120 --> 00:19:19,440
I see that there is this other repository,

313
00:19:19,440 --> 00:19:20,420
but I don't want to be here.

314
00:19:20,420 --> 00:19:22,260
I want to start something new.

315
00:19:22,260 --> 00:19:27,260
I will start a new window and I will close this one.

316
00:19:28,900 --> 00:19:30,260
No, I'll close everything.

317
00:19:30,260 --> 00:19:31,380
Okay, let's try again.

318
00:19:31,380 --> 00:19:33,200
And then we will choose exit.

319
00:19:34,500 --> 00:19:36,500
Yes, I did the wrong thing.

320
00:19:36,500 --> 00:19:37,500
No problem.

321
00:19:40,740 --> 00:19:44,900
I wanted to do new window and in the other one,

322
00:19:44,900 --> 00:19:46,260
I should do close window.

323
00:19:47,420 --> 00:19:48,260
Here we go.

324
00:19:48,260 --> 00:19:52,620
I have kind of an empty looking VS code.

325
00:19:52,620 --> 00:19:53,700
And now what should we do?

326
00:19:53,700 --> 00:19:56,460
We should, one way to clone it is to go under start.

327
00:19:57,460 --> 00:19:58,300
Where is start?

328
00:19:58,300 --> 00:19:59,120
There is no start.

329
00:20:02,260 --> 00:20:05,240
I hope I see something here on the source code control.

330
00:20:07,060 --> 00:20:09,240
Aha, source control clone repository.

331
00:20:10,620 --> 00:20:12,580
No update right now.

332
00:20:12,580 --> 00:20:14,100
I will go on clone repository

333
00:20:14,100 --> 00:20:16,820
and now I can choose where do I want to clone from

334
00:20:16,820 --> 00:20:21,820
And will it work if I do github.com,

335
00:20:24,500 --> 00:20:28,860
past, cp, book.

336
00:20:28,860 --> 00:20:33,860
You could just paste the URL, I guess, in there.

337
00:20:34,600 --> 00:20:35,840
I could, I could.

338
00:20:37,040 --> 00:20:38,920
So from here, from the green button now?

339
00:20:38,920 --> 00:20:39,760
Yeah.

340
00:20:39,760 --> 00:20:41,160
I will try what happens if I do,

341
00:20:42,160 --> 00:20:44,720
if I just type it from the browser.

342
00:20:44,720 --> 00:20:46,200
I'm curious whether it will work.

343
00:20:46,200 --> 00:20:51,200
I think it might recipe book record that enter.

344
00:20:54,280 --> 00:20:57,320
And now I think it asks me, where do I want to clone into?

345
00:20:57,320 --> 00:21:00,120
So I know that this is outside of your screen.

346
00:21:00,120 --> 00:21:02,320
Where do I want to go into course?

347
00:21:02,320 --> 00:21:04,120
And I will give it a different name.

348
00:21:06,200 --> 00:21:07,480
I know you cannot see this

349
00:21:07,480 --> 00:21:10,560
because I don't want to reveal everything on my hard drive.

350
00:21:10,560 --> 00:21:15,560
Oh, I will call it recipe book VS code.

351
00:21:17,160 --> 00:21:23,560
create and select this repository. And now I got an error message.

352
00:21:25,480 --> 00:21:27,560
So that doesn't work what I wanted to do. Okay.

353
00:21:30,360 --> 00:21:34,680
Let's try again. Let's do it properly. So now clone repository. And now instead I should do

354
00:21:34,680 --> 00:21:41,400
I should take it from here. HTTPS copy this clone repository here.

355
00:21:41,400 --> 00:21:48,300
here. Yes. And now again on into the right place.

356
00:21:48,300 --> 00:21:53,840
Why did you just exit the pass over SSH this time?

357
00:21:53,840 --> 00:22:02,180
I wasn't sure whether it would work with SSH with the VS code. It might. I think it depends

358
00:22:02,180 --> 00:22:09,500
how people set it up. Yeah. And now it will. Now it asked me, would you like to open the

359
00:22:09,500 --> 00:22:11,780
the cloned repository, yes.

360
00:22:11,780 --> 00:22:12,620
Open it.

361
00:22:14,580 --> 00:22:16,020
And here it is on my VSCode.

362
00:22:18,140 --> 00:22:20,780
And when I go on source control,

363
00:22:21,980 --> 00:22:23,460
somewhere here I can see,

364
00:22:24,540 --> 00:22:26,440
no, I need to click on a certain file.

365
00:22:28,740 --> 00:22:29,860
I can see

366
00:22:34,020 --> 00:22:35,180
somewhere the commits.

367
00:22:36,180 --> 00:22:38,660
I should have practiced better how to do it on VSCode.

368
00:22:38,660 --> 00:22:42,940
But you can do it in the exercise.

369
00:22:42,940 --> 00:22:44,940
The essence is that now I have the repository

370
00:22:44,940 --> 00:22:47,900
on my computer and you can choose

371
00:22:50,580 --> 00:22:52,840
the VS code or command line or RStudio.

372
00:22:58,940 --> 00:23:00,040
Here, one of the three.

373
00:23:01,940 --> 00:23:02,780
And what are your goals?

374
00:23:02,780 --> 00:23:07,780
Your goals are decide which repository you want to use.

375
00:23:08,660 --> 00:23:13,660
want to clone your fork or the original repository,

376
00:23:13,660 --> 00:23:15,380
actually both will work because in this case,

377
00:23:15,380 --> 00:23:16,980
we are not pushing any changes.

378
00:23:16,980 --> 00:23:18,060
We are only cloning.

379
00:23:19,460 --> 00:23:22,420
We will learn how to create a new branch locally,

380
00:23:22,420 --> 00:23:25,580
how to create a new commit, how to switch between branches,

381
00:23:25,580 --> 00:23:26,900
how to merge them locally.

382
00:23:27,740 --> 00:23:30,060
And for those of you who have done that already yesterday,

383
00:23:30,060 --> 00:23:33,820
focus more on the question of where are the remote branches?

384
00:23:36,340 --> 00:23:37,180
How does it work?

385
00:23:37,180 --> 00:23:42,420
And down there, you'll find more notes on this.

386
00:23:42,420 --> 00:23:47,740
Once you create these commits and branches locally, also compare the situation locally

387
00:23:47,740 --> 00:23:48,740
and on GitHub.

388
00:23:48,740 --> 00:23:49,900
And you will see there is a difference.

389
00:23:49,900 --> 00:23:55,100
So all the changes that you create on your computer, you will see that they don't travel

390
00:23:55,100 --> 00:23:56,820
to GitHub.

391
00:23:56,820 --> 00:23:59,460
We will have to actively push them.

392
00:23:59,460 --> 00:24:03,220
We will do that later today.

393
00:24:03,220 --> 00:24:11,180
Okay, before we go into exercise, just having a quick look at the notes, whether anything

394
00:24:11,180 --> 00:24:15,180
was confusing.

395
00:24:15,180 --> 00:24:24,660
Yes, should be cloned to origin repository or the forked version if you have it clone

396
00:24:24,660 --> 00:24:25,900
your own.

397
00:24:25,900 --> 00:24:32,020
But both will work here because we are not all the changes that we do, we only do them

398
00:24:32,020 --> 00:24:33,100
locally.

399
00:24:33,100 --> 00:24:36,100
So it doesn't matter whether we are able or not

400
00:24:36,100 --> 00:24:38,180
to apply the changes on GitHub.

401
00:24:41,540 --> 00:24:44,920
All the rest of the exercises today will not depend on this.

402
00:24:44,920 --> 00:24:47,120
It will only depend on the techniques.

403
00:24:47,120 --> 00:24:49,220
So even if you mess it up completely,

404
00:24:51,120 --> 00:24:53,620
it's not a problem for the remaining two exercises.

405
00:24:56,220 --> 00:24:58,260
Good, we have allocated 25 minutes,

406
00:24:58,260 --> 00:25:00,340
which would bring us to,

407
00:25:00,340 --> 00:25:03,380
we will be back after the exercise at the full hour.

408
00:25:06,060 --> 00:25:08,260
And after the exercise, we will play the jingle,

409
00:25:08,260 --> 00:25:10,580
we will say hi, and we will remind you

410
00:25:10,580 --> 00:25:11,700
that there is a break afterwards.

411
00:25:11,700 --> 00:25:15,100
So after the exercise, we will take a 10 minute break.

412
00:25:16,060 --> 00:25:18,680
So exercise until the full hour, 25 minutes.

413
00:25:19,660 --> 00:25:21,360
Ask lots of questions.

414
00:25:21,360 --> 00:25:22,840
We will try to answer as we go.

415
00:25:22,840 --> 00:25:25,340
And in the meantime, I will practice with VS Code.

416
00:25:26,500 --> 00:25:29,980
And we will then afterwards, after the break later,

417
00:25:29,980 --> 00:25:32,940
show you maybe some of the tricky parts

418
00:25:32,940 --> 00:25:34,140
and we can discuss them.

419
00:25:37,580 --> 00:25:39,460
Okay, have fun with the exercise.

420
00:25:39,460 --> 00:25:43,140
See you briefly at the full hour for the jingle

421
00:25:43,140 --> 00:25:45,020
and the break start.

422
00:25:46,680 --> 00:25:47,520
Bye.

423
00:25:49,000 --> 00:25:55,820
And I think we are back.

424
00:25:55,820 --> 00:26:02,020
I was just trying to remotely control [Name]'s studio, so hopefully that worked.

425
00:26:02,020 --> 00:26:09,980
We are back on stream here, back from the break, and back from the exercise.

426
00:26:09,980 --> 00:26:13,500
So hopefully that went well.

427
00:26:13,500 --> 00:26:17,120
We will see if we can lift some of the many good questions

428
00:26:17,120 --> 00:26:18,920
on the document here for discussion.

429
00:26:20,980 --> 00:26:25,300
I wanted to talk about two things before moving on.

430
00:26:25,300 --> 00:26:26,700
One is about branches.

431
00:26:29,700 --> 00:26:32,380
Because now that we have cloned the repository

432
00:26:34,220 --> 00:26:36,420
and I will try to show that here on VS Code,

433
00:26:38,780 --> 00:26:42,320
I was curious about what branches do I see.

434
00:26:42,320 --> 00:26:44,980
So on my lower left corner of VS Code,

435
00:26:44,980 --> 00:26:46,720
if I click on the main branch,

436
00:26:52,220 --> 00:26:53,060
during the exercise,

437
00:26:53,060 --> 00:26:56,060
I create this one where I added French toast,

438
00:26:58,120 --> 00:27:00,540
but then I see my local branches,

439
00:27:00,540 --> 00:27:04,840
main, French toast, something else,

440
00:27:04,840 --> 00:27:07,340
but then there are also these origin branches.

441
00:27:08,400 --> 00:27:11,980
And these are branches that exist on GitHub.

442
00:27:12,320 --> 00:27:14,160
These are so-called remote branches.

443
00:27:14,160 --> 00:27:17,680
And here, VS Code tells me that remote branch

444
00:27:17,680 --> 00:27:18,720
pointing to some commit,

445
00:27:18,720 --> 00:27:20,960
remote branch pointing to a different commit,

446
00:27:20,960 --> 00:27:22,100
another remote branch.

447
00:27:25,580 --> 00:27:27,760
So actually, I can actually see them here.

448
00:27:27,760 --> 00:27:32,760
And in VS Code, if I switch to a remote branch,

449
00:27:32,920 --> 00:27:36,240
let me maybe switch to the origin [Name]/lasagna.

450
00:27:36,240 --> 00:27:38,240
This is one that I created two days ago.

451
00:27:39,480 --> 00:27:42,000
If I switch to it, so if I click on it here,

452
00:27:42,000 --> 00:27:43,300
So let's see what happens.

453
00:27:45,980 --> 00:27:50,720
It created a local branch for me.

454
00:27:52,420 --> 00:27:53,420
[Name]/lasagna.

455
00:27:53,420 --> 00:27:58,420
This is a local branch and I can make changes to it.

456
00:28:00,380 --> 00:28:03,420
And if I make changes to it, you will then also see

457
00:28:03,420 --> 00:28:06,220
that there will be a button that allows me

458
00:28:06,220 --> 00:28:08,220
to publish these changes back to GitHub.

459
00:28:08,220 --> 00:28:13,220
And in VS Code, this happens automatically for me.

460
00:28:15,860 --> 00:28:18,540
If you tried it on the command line,

461
00:28:20,500 --> 00:28:24,680
and let me test this now inside VS Code, new terminal.

462
00:28:27,060 --> 00:28:30,020
In the command line, maybe you have tried to do git branch.

463
00:28:31,220 --> 00:28:32,740
Git branch will tell you

464
00:28:32,740 --> 00:28:35,100
what are all the branches that you have.

465
00:28:35,100 --> 00:28:37,740
Well, actually, what are the local branches that you have.

466
00:28:38,220 --> 00:28:40,140
And I have now four local branches.

467
00:28:43,900 --> 00:28:48,300
But in order to see all the branches, you really have to do git branch dash dash all.

468
00:28:53,900 --> 00:28:57,740
The remote branches, they are read-only.

469
00:28:59,980 --> 00:29:05,020
I cannot really modify them, but the way to modify them was what I did in VS Code

470
00:29:05,020 --> 00:29:08,580
by creating a local version of them,

471
00:29:10,300 --> 00:29:12,940
which, where I can do my work,

472
00:29:12,940 --> 00:29:14,500
and then later, if we want to,

473
00:29:14,500 --> 00:29:16,740
we can push these changes back.

474
00:29:16,740 --> 00:29:18,140
We will practice that later.

475
00:29:20,140 --> 00:29:23,700
One thing that I was trying to find out during the exercise,

476
00:29:23,700 --> 00:29:25,780
but I don't know the answer, is in VS Code,

477
00:29:25,780 --> 00:29:29,380
how do I know, now that I have a clone of a repository,

478
00:29:29,380 --> 00:29:31,360
how do I know where I cloned from?

479
00:29:31,360 --> 00:29:35,100
And I admit that I don't know how to answer that.

480
00:29:35,100 --> 00:29:37,980
I know how to do it in the command line.

481
00:29:37,980 --> 00:29:39,900
So the way I would ask in,

482
00:29:39,900 --> 00:29:43,760
and if you know, please give us comments.

483
00:29:45,660 --> 00:29:50,660
On the command line, I would type git remote verbose.

484
00:29:54,140 --> 00:29:56,740
So whenever I forget where did I actually clone from,

485
00:29:56,740 --> 00:30:01,380
it will tell me that there is,

486
00:30:01,380 --> 00:30:03,380
let's make it a little bit more readable,

487
00:30:05,380 --> 00:30:08,260
it will tell me that there is a remote called origin,

488
00:30:10,100 --> 00:30:13,180
which is, and this is the address where I cloned from.

489
00:30:15,220 --> 00:30:17,340
And this is the shortcut for the address.

490
00:30:17,340 --> 00:30:18,940
So whenever on the command line,

491
00:30:18,940 --> 00:30:20,860
whenever you want to talk about the address,

492
00:30:20,860 --> 00:30:22,620
I can use these interchangeably.

493
00:30:26,740 --> 00:30:31,980
And there is a question on the document, what is origin hat and what is origin main?

494
00:30:31,980 --> 00:30:33,420
And where did we see that?

495
00:30:33,420 --> 00:30:46,140
Was this when I did this, maybe a hat is in Git, whenever you see head, it's, it's the

496
00:30:46,140 --> 00:30:50,260
position where you are right now.

497
00:30:50,260 --> 00:30:56,580
And this makes sense for those of us who remember still tape recorders, because they have those

498
00:30:56,580 --> 00:30:58,860
tape and there is a recorder head.

499
00:30:58,860 --> 00:31:02,580
And you can think of version control as recording changes.

500
00:31:02,580 --> 00:31:05,560
And this is the position of the recording recorder head.

501
00:31:06,540 --> 00:31:08,120
It's maybe less intuitive for those

502
00:31:08,120 --> 00:31:09,880
who have never seen a cassette tape.

503
00:31:12,500 --> 00:31:14,540
But what is this origin hat?

504
00:31:14,540 --> 00:31:19,540
That refers to the default branch on GitHub.

505
00:31:19,580 --> 00:31:20,900
So the default branch on GitHub,

506
00:31:20,900 --> 00:31:22,780
I can see from this that it is main.

507
00:31:22,780 --> 00:31:30,300
So this is not very technical, but I just wanted to answer the question.

508
00:31:30,300 --> 00:31:33,740
What else should be clarified before moving on?

509
00:31:33,740 --> 00:31:41,500
Oh, there was no jingle.

510
00:31:41,500 --> 00:31:43,980
Oh no.

511
00:31:43,980 --> 00:31:45,260
Okay.

512
00:31:45,260 --> 00:31:53,900
I'm still practicing using these remote controls to the studio.

513
00:31:53,900 --> 00:31:56,300
Thanks so much for these questions.

514
00:31:56,300 --> 00:31:57,300
Maybe we are ready then to...

515
00:31:57,300 --> 00:32:08,620
I will move this out of my way, the VS Code, but we'll return to it.

516
00:32:08,620 --> 00:32:16,420
And I will now navigate to the next episode, which is inspecting history.

517
00:32:16,420 --> 00:32:23,820
And we want, that's our goal now for the next 45 minutes.

518
00:32:23,820 --> 00:32:28,500
Here we are still working locally.

519
00:32:28,500 --> 00:32:32,800
Again you can choose VS Code, Command Line, RStudio.

520
00:32:32,800 --> 00:32:35,780
You can also do it on GitHub.

521
00:32:35,780 --> 00:32:37,380
So if you prefer not to work locally,

522
00:32:37,380 --> 00:32:40,340
this is an exercise that you can do on GitHub.

523
00:32:40,340 --> 00:32:42,980
We will work with a repository that we don't know yet.

524
00:32:44,100 --> 00:32:45,580
It's written by somebody else.

525
00:32:47,140 --> 00:32:51,380
And here are a couple of the toolbox

526
00:32:52,260 --> 00:32:53,480
that we will practice here.

527
00:32:53,480 --> 00:32:55,980
Some of it we have seen yesterday,

528
00:32:55,980 --> 00:32:59,540
like how to navigate through our existing repository.

529
00:33:00,420 --> 00:33:01,980
And just as a fun warmup,

530
00:33:01,980 --> 00:33:07,140
We can try this git history browser.

531
00:33:07,140 --> 00:33:15,980
This is just a fun tool to written where you can visualize the history of a project.

532
00:33:15,980 --> 00:33:20,660
And the repository that we will practice with is on GitHub, it's a it's a Python project

533
00:33:20,660 --> 00:33:21,660
doesn't matter.

534
00:33:21,660 --> 00:33:22,660
It's called NetworkX.

535
00:33:22,660 --> 00:33:25,340
I will open it up here.

536
00:33:25,340 --> 00:33:29,580
And for the moment only watch you will, you will have the chance to practice in a little

537
00:33:29,580 --> 00:33:30,580
bit.

538
00:33:30,580 --> 00:33:35,300
So, this is a code that does some network analysis in Python.

539
00:33:35,300 --> 00:33:40,860
The fact that it is in Python is not of importance for our exercise.

540
00:33:40,860 --> 00:33:46,860
This is a repository with over 7,000 commits.

541
00:33:46,860 --> 00:33:53,920
And one fun thing I will try here is to open this page.

542
00:33:53,920 --> 00:33:58,380
And here with left and right keys, this is the readme file.

543
00:33:58,380 --> 00:34:01,100
So if I navigate left and right,

544
00:34:01,100 --> 00:34:04,620
I can navigate through the history of this README file

545
00:34:04,620 --> 00:34:06,900
and we can see how lines were added and removed

546
00:34:06,900 --> 00:34:08,300
and how things are changing.

547
00:34:10,660 --> 00:34:13,220
I really like how this visually shows

548
00:34:13,220 --> 00:34:17,100
the evolution of a file along a git history.

549
00:34:19,220 --> 00:34:20,580
So that's just a warm up.

550
00:34:21,920 --> 00:34:25,660
We will learn or

551
00:34:28,380 --> 00:34:32,820
re-practice some really useful techniques.

552
00:34:33,900 --> 00:34:34,980
One is to search

553
00:34:38,380 --> 00:34:40,460
through our Git repository.

554
00:34:40,460 --> 00:34:43,300
And maybe here I should take a step back and say that

555
00:34:44,300 --> 00:34:46,120
this is a different repository.

556
00:34:46,120 --> 00:34:47,860
So if you are on VS Code,

557
00:34:47,860 --> 00:34:48,700
make sure to

558
00:34:51,600 --> 00:34:54,140
open a new window with a different project.

559
00:34:54,140 --> 00:34:56,820
And maybe there's a better way than what I did.

560
00:34:56,820 --> 00:34:59,760
So we are not anymore in our recipe book.

561
00:34:59,760 --> 00:35:04,760
We want to really study this NetworkX project.

562
00:35:04,940 --> 00:35:09,060
And if you are in a command line, like I'm down here,

563
00:35:09,060 --> 00:35:13,120
make sure that you are not inside an existing Git repository.

564
00:35:13,120 --> 00:35:16,940
So if you are, then step outside,

565
00:35:16,940 --> 00:35:19,020
we will create, we will make a new clone.

566
00:35:21,620 --> 00:35:24,920
And I will now, I want to show you these,

567
00:35:24,920 --> 00:35:27,920
some of these commands here in

568
00:35:27,920 --> 00:35:31,920
I will show them in the command line, but you can then later try it out on the command line

569
00:35:31,920 --> 00:35:35,920
or try it out on GitHub, VS Code, RStudio

570
00:35:35,920 --> 00:35:39,920
and the first step will be to make a copy

571
00:35:39,920 --> 00:35:43,920
except if you are on GitHub, you don't have to copy anything, you can really just

572
00:35:43,920 --> 00:35:47,920
use their repository, so I will create a copy, the clone

573
00:35:47,920 --> 00:35:51,920
and again we clone everything

574
00:35:54,920 --> 00:36:05,040
I have to make sure that this is readable.

575
00:36:05,040 --> 00:36:11,640
It takes a few seconds.

576
00:36:11,640 --> 00:36:21,400
Because now suddenly it's a lot of objects, it's a lot of commits.

577
00:36:21,400 --> 00:36:28,680
And here I'm in this repository.

578
00:36:28,680 --> 00:36:31,600
The latest commit is 2e-ce-02.

579
00:36:31,600 --> 00:36:32,960
Is that the case?

580
00:36:32,960 --> 00:36:38,760
Yes, the latest is 2e-ce-02.

581
00:36:38,760 --> 00:36:44,800
And some of the tools that you will practice that will be super useful is if you look for

582
00:36:44,800 --> 00:36:50,800
a certain text in the project.

583
00:36:50,800 --> 00:36:58,720
For instance, I want to find all the fixmes in this project, and you can even search case

584
00:36:58,720 --> 00:37:03,000
insensitive git grep-i fixme.

585
00:37:03,000 --> 00:37:10,800
It will list me all the files that contain the word fixme in this file and in this file

586
00:37:10,800 --> 00:37:13,080
and in this file, etc.

587
00:37:13,080 --> 00:37:20,200
This can be useful if you are looking for an error message and you don't know where

588
00:37:20,200 --> 00:37:21,540
in the code, is it crashing?

589
00:37:28,940 --> 00:37:33,940
Then you will learn how to look at the particular commits.

590
00:37:35,860 --> 00:37:39,340
So if I want to have a look what happened

591
00:37:39,340 --> 00:37:42,420
in a particular commit, for instance, this one,

592
00:37:42,420 --> 00:37:43,920
I can look at it with git show.

593
00:37:43,920 --> 00:37:45,480
If I know the identifier,

594
00:37:47,420 --> 00:37:49,500
you don't even have to type the whole identifier,

595
00:37:49,500 --> 00:37:50,920
Just the beginning of it is enough.

596
00:37:50,920 --> 00:37:51,760
I will try that.

597
00:37:56,380 --> 00:37:58,800
And it will show me when did it happen.

598
00:37:58,800 --> 00:38:00,700
So this was a commit from 2020.

599
00:38:03,240 --> 00:38:05,620
And what happened in this commit?

600
00:38:09,360 --> 00:38:10,200
Good.

601
00:38:11,560 --> 00:38:14,600
And the same, if you want to navigate to the same thing,

602
00:38:14,600 --> 00:38:16,480
the same thing exists on GitHub.

603
00:38:16,480 --> 00:38:17,840
So here's the same commit.

604
00:38:17,840 --> 00:38:24,680
What was there before, what was there after?

605
00:38:24,680 --> 00:38:32,640
Then yesterday we have seen this super, super useful way of annotating a file, which on

606
00:38:32,640 --> 00:38:40,000
GitHub is called blame, unfortunate naming, but you can then try it in also in the command

607
00:38:40,000 --> 00:38:54,660
line which will show you line by line when was each line of the code modified last.

608
00:38:54,660 --> 00:39:00,340
And then something we have tried yesterday is to browse the history of a particular file

609
00:39:00,340 --> 00:39:05,920
and see how does a particular file look, how did it look in the past.

610
00:39:05,920 --> 00:39:12,280
And you will practice how to do that on GitHub or command line or any of the other tools.

611
00:39:12,280 --> 00:39:17,000
But now let me let me explain you the exercise.

612
00:39:17,000 --> 00:39:22,920
So in the exercise, your first step will be to make sure that you are not inside another

613
00:39:22,920 --> 00:39:27,680
git repository.

614
00:39:27,680 --> 00:39:30,480
And here is how you want to check.

615
00:39:30,480 --> 00:39:32,920
And I think we didn't tell you how to go out of it.

616
00:39:32,920 --> 00:39:35,360
But I see the question on the collaborative notes.

617
00:39:35,360 --> 00:39:39,600
So thanks for asking that.

618
00:39:39,600 --> 00:39:48,560
And then if you work locally, you will clone this example repository.

619
00:39:48,560 --> 00:39:56,220
In this case, the HTTPS protocol will work.

620
00:39:56,220 --> 00:40:01,480
If you're on GitHub, you don't have to clone anything.

621
00:40:01,480 --> 00:40:05,960
And then we want to go one step further, and we want to make sure that we all work on a

622
00:40:05,960 --> 00:40:12,880
well-defined particular version of this project, which happens to be, this is actually a tag,

623
00:40:12,880 --> 00:40:14,560
it's a release.

624
00:40:14,560 --> 00:40:21,140
So you will navigate your copy to that particular release.

625
00:40:21,140 --> 00:40:29,980
And once you have done that, we have some puzzles for you here, and also a solution.

626
00:40:29,980 --> 00:40:33,220
you will first need to, in this project that we don't know,

627
00:40:33,220 --> 00:40:37,820
with 7,000 commits, you want to find where in the code

628
00:40:38,860 --> 00:40:42,320
is a file that contains this text,

629
00:40:43,340 --> 00:40:45,580
logic error in degree correlation.

630
00:40:45,580 --> 00:40:47,820
And we can imagine that this, maybe we try to run it,

631
00:40:47,820 --> 00:40:50,620
and maybe this is an error that we got.

632
00:40:50,620 --> 00:40:52,780
And then we want to know where does it fail.

633
00:40:54,780 --> 00:40:58,620
Then once you find it, try to find out

634
00:40:58,620 --> 00:41:03,620
when was this line of codes last modified or edit

635
00:41:03,960 --> 00:41:08,120
and find the actual commit that modified that line.

636
00:41:08,120 --> 00:41:10,360
And you can do that with this annotation

637
00:41:10,360 --> 00:41:11,800
with the blame function.

638
00:41:13,480 --> 00:41:16,120
Here is not about who did it.

639
00:41:16,120 --> 00:41:17,880
It's more about when did it happen?

640
00:41:17,880 --> 00:41:19,900
What happened in that change?

641
00:41:19,900 --> 00:41:21,200
And then have a look at this commit

642
00:41:21,200 --> 00:41:24,720
with if you are on the command line, use git show.

643
00:41:24,720 --> 00:41:26,880
If you are on GitHub, try to navigate to that commit

644
00:41:26,880 --> 00:41:28,440
and see what happened in there.

645
00:41:28,620 --> 00:41:33,620
And sometimes you want to then be able to,

646
00:41:33,640 --> 00:41:37,220
if you find, okay, there was a change happened in the past,

647
00:41:37,220 --> 00:41:42,220
I want to be able to get my project back to the state

648
00:41:42,660 --> 00:41:46,740
of how was it back then when this commit was created.

649
00:41:47,820 --> 00:41:52,220
So try to create a branch, not from main,

650
00:41:52,220 --> 00:41:57,020
not from the latest commit, but a branch from the past,

651
00:41:57,020 --> 00:42:02,020
from that commit in the past where this line was modified.

652
00:42:04,360 --> 00:42:06,440
And then bonus question is,

653
00:42:06,440 --> 00:42:09,040
well, how would you bring your code

654
00:42:09,040 --> 00:42:10,200
to the version of the code

655
00:42:10,200 --> 00:42:12,080
right before that line was modified?

656
00:42:13,760 --> 00:42:15,600
We can imagine that maybe this was a mistake,

657
00:42:15,600 --> 00:42:16,840
not in this case,

658
00:42:16,840 --> 00:42:21,460
but if you know that a certain commit in the past

659
00:42:21,460 --> 00:42:22,600
changed the behavior,

660
00:42:22,600 --> 00:42:25,960
you want to be able to navigate your project back to

661
00:42:25,960 --> 00:42:27,900
How was it just before?

662
00:42:27,900 --> 00:42:30,600
And then you want to be able to navigate back to main.

663
00:42:32,120 --> 00:42:33,980
So this is the goal of this exercise.

664
00:42:35,520 --> 00:42:38,940
For those of you who have time left

665
00:42:38,940 --> 00:42:41,380
and are on the command line

666
00:42:41,380 --> 00:42:45,460
and want to try something more advanced,

667
00:42:45,460 --> 00:42:47,900
you can even read up, read on this optional part

668
00:42:47,900 --> 00:42:51,480
where about git bisect.

669
00:42:51,480 --> 00:42:53,940
So the git bisect part is optional.

670
00:42:53,940 --> 00:42:57,420
Our goal for the exercise is this green box, steps one to five.

671
00:42:59,780 --> 00:43:04,380
And we have allocated 20 minutes.

672
00:43:07,300 --> 00:43:08,220
Yeah, 20 minutes,

673
00:43:08,220 --> 00:43:11,700
which means that we will be back 50 minutes past the hour.

674
00:43:11,700 --> 00:43:14,740
I'm just now checking also with my co-instructor

675
00:43:14,740 --> 00:43:17,420
if this was somehow clear

676
00:43:17,420 --> 00:43:18,900
or if we should clarify any step

677
00:43:18,900 --> 00:43:21,620
before sending people into the exercise.

678
00:43:21,620 --> 00:43:23,100
So this is an exercise you can do in groups,

679
00:43:23,100 --> 00:43:26,320
you can do on your own, you can do locally on your computer,

680
00:43:26,320 --> 00:43:30,200
or you can do it, I think you can do all the steps

681
00:43:30,200 --> 00:43:31,300
also purely on GitHub.

682
00:43:39,340 --> 00:43:41,700
Please let us also know how it's going,

683
00:43:41,700 --> 00:43:44,720
like whether this goes well or whether you have problems,

684
00:43:46,000 --> 00:43:47,740
and let us know about the problems.

685
00:43:50,580 --> 00:43:52,900
How is it going, all good from our side?

686
00:43:52,900 --> 00:43:56,860
Yeah, I think we are covering it all.

687
00:43:56,860 --> 00:43:59,980
Then let the exercise commence,

688
00:43:59,980 --> 00:44:04,220
and we will be back 10 minutes before the hour.

689
00:44:04,220 --> 00:44:06,500
And then together with [Name], we can summarize.

690
00:44:06,500 --> 00:44:08,740
We can then look at some of the tricky points

691
00:44:10,180 --> 00:44:11,940
before we take a longer break then.

692
00:44:13,180 --> 00:44:14,500
Good, have fun at the exercise.

693
00:44:14,500 --> 00:44:17,060
See you again in 20 minutes, 22 minutes.

694
00:44:18,540 --> 00:44:19,380
Bye.

695
00:44:21,000 --> 00:44:33,220
All right, we are back from the exercise.

696
00:44:33,220 --> 00:44:34,220
Information to [Name].

697
00:44:34,220 --> 00:44:36,380
I got an error message from my remote control panel.

698
00:44:36,380 --> 00:44:39,680
So maybe people heard some jingle, maybe they didn't.

699
00:44:39,680 --> 00:44:41,960
But I think we are streaming at least the right screen.

700
00:44:41,960 --> 00:44:43,880
We have 10 minutes left.

701
00:44:43,880 --> 00:44:45,120
We got heaps of questions

702
00:44:47,200 --> 00:44:49,640
and many, many, many good questions.

703
00:44:49,640 --> 00:44:51,720
Something that people observed is that actually

704
00:44:51,720 --> 00:44:55,560
some of the steps are not so easy to do in VS code.

705
00:44:55,560 --> 00:44:59,400
Some of the steps are not easy to do on GitHub,

706
00:44:59,400 --> 00:45:00,360
especially for instance,

707
00:45:00,360 --> 00:45:02,660
when we ask you to create a branch.

708
00:45:02,660 --> 00:45:04,920
Well, that doesn't really work

709
00:45:04,920 --> 00:45:06,420
on somebody else's repository.

710
00:45:06,420 --> 00:45:10,660
So if you wanted to do it, you would have to fork first.

711
00:45:13,220 --> 00:45:14,780
The solutions that we have here,

712
00:45:14,780 --> 00:45:16,180
they are only for the command line.

713
00:45:16,180 --> 00:45:18,020
So this is work in progress, we know.

714
00:45:21,300 --> 00:45:23,020
Many changes that we did to the lesson

715
00:45:23,020 --> 00:45:24,300
we did only last week.

716
00:45:24,300 --> 00:45:26,660
So there is more work needed.

717
00:45:27,720 --> 00:45:30,340
But what I will try to do here in the last 10 minutes

718
00:45:30,340 --> 00:45:32,740
before the longer break,

719
00:45:32,740 --> 00:45:36,320
to go through some of the steps here on VSCode.

720
00:45:36,320 --> 00:45:40,160
And sometimes I will have to open up our terminal

721
00:45:40,160 --> 00:45:42,920
inside the VSCode and use the command line instead.

722
00:45:44,280 --> 00:45:48,240
There exist extensions probably for everything.

723
00:45:48,240 --> 00:45:51,040
We didn't ask you to install any extensions

724
00:45:52,160 --> 00:45:53,880
because we didn't want to make it more complicated.

725
00:45:53,880 --> 00:45:56,280
We wanted to make it easy to join this workshop.

726
00:45:57,200 --> 00:46:01,600
But one thing we might do is we collect

727
00:46:01,600 --> 00:46:04,000
on the Code Refinery chat, we started collecting

728
00:46:04,920 --> 00:46:08,120
what would be really useful extensions for VS Code

729
00:46:08,120 --> 00:46:10,320
that we can recommend everybody.

730
00:46:10,320 --> 00:46:12,080
And I admit that I have very little experience.

731
00:46:12,080 --> 00:46:15,320
So I think I'm using it now for the third time in my life.

732
00:46:17,560 --> 00:46:20,120
But let me try to go through some of the steps here.

733
00:46:21,100 --> 00:46:24,320
And hopefully I will also have time to show some of,

734
00:46:24,320 --> 00:46:25,760
to comment on some of the questions

735
00:46:25,760 --> 00:46:27,720
on how to do certain things on GitHub.

736
00:46:28,820 --> 00:46:31,380
And the first step was to make sure

737
00:46:31,380 --> 00:46:33,040
we start from a well-defined version.

738
00:46:33,040 --> 00:46:35,840
And this was because the code is evolving

739
00:46:36,760 --> 00:46:39,360
and we want to make sure that this exercise still works.

740
00:46:39,360 --> 00:46:41,680
So I will not work on main.

741
00:46:41,680 --> 00:46:44,480
I will kind of downgrade my version

742
00:46:44,480 --> 00:46:49,480
to this some past release of NetworkX.

743
00:46:49,880 --> 00:46:52,220
And one way to do it, I can click here on main.

744
00:46:53,320 --> 00:46:54,160
Is that visible?

745
00:46:54,160 --> 00:46:56,320
I'm on the lower left here with my mouse point.

746
00:46:56,320 --> 00:47:16,040
And, I can probably navigate to the specific release, what was it, 263, here we go.

747
00:47:16,040 --> 00:47:21,960
So now it's changed a little bit because now we are, we have traveled into the past.

748
00:47:21,960 --> 00:47:24,960
Now how to find the code, the line that contains this.

749
00:47:24,960 --> 00:47:28,020
Ooh, I don't know, I will try the magnifying glass.

750
00:47:28,960 --> 00:47:32,560
Logic error in degree.

751
00:47:34,860 --> 00:47:36,120
It found something, good.

752
00:47:37,580 --> 00:47:42,580
It's in network X algorithms threshold PY.

753
00:47:42,800 --> 00:47:43,800
Good.

754
00:47:43,800 --> 00:47:47,640
And I can even open it up, the file.

755
00:47:49,240 --> 00:47:51,540
Let's do it, just that I don't forget the name.

756
00:47:51,540 --> 00:47:57,700
Find out when this line was last modified.

757
00:47:57,700 --> 00:48:08,860
Yeah, so that I don't know how to do in VS Code unless I ask the command line.

758
00:48:08,860 --> 00:48:12,740
And I also admit I don't know what happens on all of your systems.

759
00:48:12,740 --> 00:48:16,860
So if you click on new terminal, I don't really know precisely what will happen.

760
00:48:16,860 --> 00:48:21,860
What I'm hoping is that it opens some form of a command line

761
00:48:23,520 --> 00:48:25,980
that you can type and that looks similar to mine.

762
00:48:27,280 --> 00:48:28,940
But now that I know the file name,

763
00:48:30,400 --> 00:48:35,400
I can do git annotate,

764
00:48:37,120 --> 00:48:41,460
and it was networkX algorithms threshold.py.

765
00:48:43,260 --> 00:48:45,080
It might be too tiny on my screen,

766
00:48:45,080 --> 00:48:47,080
but if I now hit enter,

767
00:48:50,280 --> 00:48:53,800
it's on the very right side is the code

768
00:48:53,800 --> 00:48:56,600
and the left side is the metadata.

769
00:48:56,600 --> 00:48:58,560
When was it changed by whom?

770
00:48:58,560 --> 00:48:59,640
Which date?

771
00:48:59,640 --> 00:49:00,460
Which commit?

772
00:49:01,880 --> 00:49:03,640
And I could know with my arrow down or up,

773
00:49:03,640 --> 00:49:05,600
I could hope to find it.

774
00:49:06,920 --> 00:49:09,400
One way to search through this is

775
00:49:09,400 --> 00:49:10,720
if I know what I'm looking for,

776
00:49:10,720 --> 00:49:12,840
it would be the forward slash.

777
00:49:12,840 --> 00:49:15,080
So now I'm typing on my keyboard forward slash

778
00:49:16,120 --> 00:49:20,740
and now I can search for logic error, enter.

779
00:49:27,000 --> 00:49:29,140
And this is now a little bit hard to read

780
00:49:29,140 --> 00:49:33,160
because I tried to zoom in and it's not big screen enough

781
00:49:33,160 --> 00:49:34,740
but this is all one line.

782
00:49:36,140 --> 00:49:38,520
This is the code and this is the metadata.

783
00:49:38,520 --> 00:49:43,040
So the last, the line was last changed in this commit.

784
00:49:44,120 --> 00:49:45,480
I will keep a note of that commit.

785
00:49:45,480 --> 00:49:47,320
I will just write it down here on my paper.

786
00:49:47,320 --> 00:49:50,860
It's 90544b4

787
00:49:54,040 --> 00:49:56,020
How do I get out of this?

788
00:49:56,020 --> 00:49:56,860
With Q.

789
00:49:57,740 --> 00:50:02,020
If I type Q, I should, yep, I'm out.

790
00:50:04,220 --> 00:50:07,660
And now we can inspect the commit with git show, git show.

791
00:50:08,520 --> 00:50:13,280
90544b4, et cetera, et cetera.

792
00:50:15,200 --> 00:50:17,000
And there I will see more details.

793
00:50:19,360 --> 00:50:20,360
I don't want to open it up now

794
00:50:20,360 --> 00:50:22,480
because I don't want to put other people's email addresses

795
00:50:22,480 --> 00:50:23,680
onto the stream and recording.

796
00:50:23,680 --> 00:50:26,240
We will edit this other person out.

797
00:50:26,240 --> 00:50:28,740
But then I would see what happened in that commit.

798
00:50:30,480 --> 00:50:34,480
And what, two more steps.

799
00:50:34,480 --> 00:50:38,080
One was create a branch pointing to the past

800
00:50:38,080 --> 00:50:39,860
when that commit was created.

801
00:50:42,000 --> 00:50:43,360
Okay, let me close the terminal

802
00:50:43,360 --> 00:50:45,260
because that I can do without terminal.

803
00:50:48,680 --> 00:50:51,840
How do I go back here?

804
00:50:52,800 --> 00:50:54,280
Let me close this.

805
00:50:54,280 --> 00:50:56,000
If I know and remember the commit,

806
00:50:57,120 --> 00:50:59,000
one way to navigate to it would be again,

807
00:50:59,000 --> 00:51:01,980
click on the branch tag overview.

808
00:51:01,980 --> 00:51:06,980
And a nice way to do this is to create a new branch.

809
00:51:08,660 --> 00:51:11,580
Whenever I want to look around in the past

810
00:51:11,580 --> 00:51:13,420
to some archeology, I personally like

811
00:51:13,420 --> 00:51:15,300
to create a new branch.

812
00:51:15,300 --> 00:51:17,220
It will create a new label, a sticky note,

813
00:51:17,220 --> 00:51:22,220
but I want it to stick to this past commit way, way back.

814
00:51:23,060 --> 00:51:24,500
Create a new branch from,

815
00:51:27,340 --> 00:51:28,900
and now I can type the commit.

816
00:51:28,900 --> 00:51:36,820
Wait a moment, is it asking me for the name?

817
00:51:36,820 --> 00:51:37,820
I don't know.

818
00:51:37,820 --> 00:51:39,440
Oh, I forgot.

819
00:51:39,440 --> 00:51:41,980
Let's try again.

820
00:51:41,980 --> 00:51:47,980
Create new branch from...

821
00:51:47,980 --> 00:51:54,820
What happens if I type in the hash 90544B4?

822
00:51:54,820 --> 00:51:58,000
And then I can give it a name, which is,

823
00:52:00,420 --> 00:52:01,580
what should we call it?

824
00:52:02,860 --> 00:52:04,380
Old code.

825
00:52:04,380 --> 00:52:05,220
Old code.

826
00:52:06,900 --> 00:52:08,520
Enter.

827
00:52:08,520 --> 00:52:10,820
And now I have a branch called old code.

828
00:52:10,820 --> 00:52:11,780
I can navigate to it.

829
00:52:11,780 --> 00:52:12,780
I can go back to main.

830
00:52:12,780 --> 00:52:14,860
I can go back to old code.

831
00:52:14,860 --> 00:52:16,420
And the code that I'm looking here right now

832
00:52:16,420 --> 00:52:18,560
is the one as it was back then.

833
00:52:20,100 --> 00:52:21,860
And now for the final question,

834
00:52:21,860 --> 00:52:26,860
How do I bring it back to the commit just before 90544?

835
00:52:31,660 --> 00:52:33,820
One way would be I could open the terminal

836
00:52:33,820 --> 00:52:34,960
and type git log.

837
00:52:39,580 --> 00:52:40,420
Git log.

838
00:52:40,420 --> 00:52:55,420
Why do I see here, this hash and not the other one?

839
00:52:55,420 --> 00:53:00,380
This is not what I wanted.

840
00:53:00,380 --> 00:53:05,220
This doesn't point to the commit that I thought it would.

841
00:53:05,220 --> 00:53:09,380
Okay, that's not what I wanted.

842
00:53:12,940 --> 00:53:14,940
It's pointing to another commit.

843
00:53:14,940 --> 00:53:17,820
It's pointing to 263.

844
00:53:17,820 --> 00:53:22,820
So it created the branch on the commit that I was at,

845
00:53:24,060 --> 00:53:26,740
not the one away in the past.

846
00:53:26,740 --> 00:53:28,500
Not the one in the past, no.

847
00:53:28,500 --> 00:53:31,980
Okay, so here I will try to do that in the command line.

848
00:53:31,980 --> 00:53:34,020
And I see that we are basically out of time.

849
00:53:34,020 --> 00:53:34,940
I will use one more minute.

850
00:53:34,940 --> 00:53:39,000
and that is if I want to create a new branch

851
00:53:39,000 --> 00:53:44,000
in the past git branch, I can call it really old code.

852
00:53:47,960 --> 00:53:50,060
And now I can give the hash

853
00:53:50,060 --> 00:53:54,400
from which I wanted to create it 0.544v4.

854
00:53:57,040 --> 00:53:58,040
And how do I switch to it?

855
00:53:58,040 --> 00:53:59,520
Git switch.

856
00:54:04,940 --> 00:54:08,020
And it also, it switched also VSCode.

857
00:54:09,140 --> 00:54:11,540
And now if I do git log, I see,

858
00:54:11,540 --> 00:54:13,180
so I don't know why that failed.

859
00:54:13,180 --> 00:54:14,620
This is what I wanted to see.

860
00:54:16,420 --> 00:54:18,580
This is the commit right before.

861
00:54:18,580 --> 00:54:19,940
That's one way of doing it.

862
00:54:24,220 --> 00:54:25,980
The other way of doing it would be

863
00:54:27,060 --> 00:54:29,860
if I wanted to branch just before,

864
00:54:29,860 --> 00:54:38,660
I could say 9, 0, 5, 4, 4, B4, and then tilde 1.

865
00:54:38,660 --> 00:54:41,260
It's the first parent of that commit.

866
00:54:41,260 --> 00:54:48,000
It would be the commit just before.

867
00:54:48,000 --> 00:54:49,000
That was a quick tour.

868
00:54:49,000 --> 00:54:50,340
I think we're out of time.

869
00:54:50,340 --> 00:54:53,540
I don't want to eat into the break.

870
00:54:53,540 --> 00:54:56,380
We will be back in one hour.

871
00:54:56,380 --> 00:55:04,020
And then before we move on to the next thing, which will be learning how to turn a project

872
00:55:04,020 --> 00:55:09,580
into a Git repository and publish it, we will debrief some of the questions that I didn't

873
00:55:09,580 --> 00:55:15,420
have time to comment on.

874
00:55:15,420 --> 00:55:18,060
Good to see you everybody in one hour.

875
00:55:18,060 --> 00:55:22,380
We'll be back here with [Name] and for a little bit more Git.

876
00:55:22,380 --> 00:55:23,380
Looking forward.

877
00:55:23,380 --> 00:55:24,380
Have a good break.

878
00:55:24,380 --> 00:55:24,740
Bye.

879
00:55:26,380 --> 00:55:27,000
you

880
00:55:27,000 --> 00:55:38,380
Okay, it works. I'm just remote controlling here the studio from a different country.

881
00:55:39,340 --> 00:55:42,060
Welcome back, everybody, after the break.

882
00:55:42,060 --> 00:55:43,340
Thanks for the feedback.

883
00:55:43,340 --> 00:55:45,100
Thanks for the questions.

884
00:55:45,100 --> 00:55:47,420
I wanted, before moving on, I wanted to comment

885
00:55:47,420 --> 00:55:50,540
that this was not an easy exercise, the last one.

886
00:55:50,540 --> 00:55:52,780
It was possibly too short time.

887
00:55:52,780 --> 00:55:55,820
It was also maybe cold water

888
00:55:55,820 --> 00:55:59,820
because after yesterday, when we were on GitHub,

889
00:55:59,820 --> 00:56:02,220
now suddenly we have to work locally.

890
00:56:02,220 --> 00:56:04,220
Some commands only work in the command line.

891
00:56:04,220 --> 00:56:06,620
It's a new environment.

892
00:56:06,620 --> 00:56:07,740
So this was really advanced.

893
00:56:10,460 --> 00:56:11,740
So I understand the frustration.

894
00:56:12,940 --> 00:56:17,500
We need to improve the solution and the walkthrough to make it easier for everybody.

895
00:56:18,300 --> 00:56:24,060
But also now we can relax because the next exercise that we will do in 10-15 minutes

896
00:56:25,420 --> 00:56:26,540
will be a lot easier.

897
00:56:27,740 --> 00:56:31,580
And everybody can do it and everybody will need this in their work.

898
00:56:32,140 --> 00:56:34,300
So it will get better.

899
00:56:36,620 --> 00:56:44,660
The other thing I wanted to say is that we don't expect that you remember all the commands

900
00:56:44,660 --> 00:56:50,140
for all of these advanced techniques of how to navigate through a repository, but we

901
00:56:50,140 --> 00:56:54,420
wanted you to know that you know that this is possible.

902
00:56:54,420 --> 00:56:58,260
Now you know that these operations are possible.

903
00:56:58,260 --> 00:57:03,460
Maybe you don't need them now, maybe you need them in three years, but since you start using

904
00:57:03,460 --> 00:57:05,820
it will be possible later for you

905
00:57:05,820 --> 00:57:08,100
to do these kind of operations.

906
00:57:10,360 --> 00:57:12,060
It's not important to remember how to do it.

907
00:57:12,060 --> 00:57:13,260
You can look it up later.

908
00:57:13,260 --> 00:57:15,180
If you know where the episode is

909
00:57:15,180 --> 00:57:17,540
and you can later look up how to do it in detail,

910
00:57:17,540 --> 00:57:20,920
but we wanted you to know that these things are possible.

911
00:57:25,900 --> 00:57:26,940
I wanted to show one more thing

912
00:57:26,940 --> 00:57:28,500
before we move to the next episode.

913
00:57:28,500 --> 00:57:29,820
This is just demonstration

914
00:57:29,820 --> 00:57:33,220
because this was one question on GitHub.

915
00:57:36,660 --> 00:57:39,380
You just need to know that, again, that this is possible,

916
00:57:39,380 --> 00:57:42,260
that if I look at a repository here

917
00:57:42,260 --> 00:57:45,660
and I see main and the latest commit from two days ago,

918
00:57:48,820 --> 00:57:50,660
I can navigate to that commit.

919
00:57:56,140 --> 00:57:57,940
And you can then navigate to browse files.

920
00:57:57,940 --> 00:58:00,860
So top right, there is a button called browse files.

921
00:58:03,940 --> 00:58:05,620
And something is different now in the address.

922
00:58:05,620 --> 00:58:07,980
The address is now not anymore.

923
00:58:07,980 --> 00:58:10,280
It will not show me the latest version,

924
00:58:10,280 --> 00:58:13,000
but it will show me a specific version.

925
00:58:13,000 --> 00:58:15,420
This is the specific commit identifier.

926
00:58:16,300 --> 00:58:17,820
And if you want, now you can replace it.

927
00:58:17,820 --> 00:58:20,100
So if I still remember the commit hash

928
00:58:20,100 --> 00:58:22,620
from before the break, it was 90544B4.

929
00:58:22,620 --> 00:58:27,620
90544B4, I don't even have to type the whole thing.

930
00:58:31,360 --> 00:58:34,400
And now I can navigate through the project

931
00:58:34,400 --> 00:58:36,100
as it was seven years ago.

932
00:58:38,080 --> 00:58:39,440
So that can be also useful.

933
00:58:42,080 --> 00:58:44,280
So many of the steps could have been done on GitHub.

934
00:58:44,280 --> 00:58:47,480
It wasn't easy, we need to improve the walkthrough.

935
00:58:52,620 --> 00:59:01,780
Yeah, and the I see that the URL here is hard to read it is very small, but the difference

936
00:59:01,780 --> 00:59:11,780
is that if the first part is your project, then slash three slash commit hash, you can

937
00:59:11,780 --> 00:59:14,700
and then navigate into the past.

938
00:59:16,220 --> 00:59:17,420
It's like time traveling.

939
00:59:18,560 --> 00:59:19,660
And somewhere in the,

940
00:59:22,980 --> 00:59:24,580
well, let me paste it.

941
00:59:24,580 --> 00:59:26,180
So I'll be pasted into the answers,

942
00:59:26,180 --> 00:59:27,640
then you can try it as well.

943
00:59:28,980 --> 00:59:29,820
Here we go.

944
00:59:33,500 --> 00:59:34,960
Good.

945
00:59:34,960 --> 00:59:37,860
We will now leave this NetworkX project.

946
00:59:37,860 --> 00:59:41,560
If you didn't finish the exercise, you can try later.

947
00:59:41,560 --> 00:59:42,760
you know where to find it.

948
00:59:42,760 --> 00:59:44,960
It is not important for the rest of today

949
00:59:44,960 --> 00:59:47,580
and it's not important for tomorrow.

950
00:59:49,040 --> 00:59:54,040
So I will, I think I will close.

951
00:59:54,660 --> 00:59:55,760
I will move this away.

952
01:00:01,360 --> 01:00:02,200
Yeah, I will move it.

953
01:00:02,200 --> 01:00:04,040
No, not this thing, this thing.

954
01:00:08,040 --> 01:00:09,280
I will move the VS Code away.

955
01:00:09,280 --> 01:00:11,000
I will bring it back in a moment.

956
01:00:11,560 --> 01:00:14,120
One more thing that we probably mentioned,

957
01:00:14,120 --> 01:00:15,440
but I just want to mention it again,

958
01:00:15,440 --> 01:00:17,640
something that now that we are,

959
01:00:17,640 --> 01:00:19,600
have a couple of different repositories,

960
01:00:20,960 --> 01:00:23,880
something I did is on my hard drive,

961
01:00:23,880 --> 01:00:25,840
I created a directory called course

962
01:00:27,000 --> 01:00:29,400
and everything we create here, I will put in there.

963
01:00:29,400 --> 01:00:30,640
And it's easier for me to find.

964
01:00:30,640 --> 01:00:32,400
And also I don't clutter my hard drive

965
01:00:32,400 --> 01:00:34,400
with different projects

966
01:00:34,400 --> 01:00:38,480
because we will now go to a different project.

967
01:00:38,480 --> 01:00:41,900
it will be, I call it my project.

968
01:00:41,900 --> 01:00:43,820
It's my own project.

969
01:00:43,820 --> 01:00:45,140
It's not on Git yet.

970
01:00:45,140 --> 01:00:48,380
I will bring it to Git and I will bring it onto GitHub.

971
01:00:48,380 --> 01:00:50,580
And if you want, it can be your real project,

972
01:00:50,580 --> 01:00:53,860
but note that you will have the choice

973
01:00:53,860 --> 01:00:55,820
of making the project public or private.

974
01:00:57,860 --> 01:01:00,820
So we make it invisible for everybody else.

975
01:01:00,820 --> 01:01:01,660
And if you don't want that,

976
01:01:01,660 --> 01:01:05,720
you can practice with a small example toy project.

977
01:01:05,720 --> 01:01:07,020
So this is what I will do.

978
01:01:07,020 --> 01:01:14,020
Do you have a default license that you use when you publish a project?

979
01:01:14,020 --> 01:01:27,100
Very good question. I have in my little toy project, I created two files. One is a Python

980
01:01:27,100 --> 01:01:32,220
script, but then I start, I right away start with a license. So license is one of the first

981
01:01:32,220 --> 01:01:40,740
things I will add to a project, license and readme. And often I go for open source licenses.

982
01:01:40,740 --> 01:01:50,100
For coding projects, I often choose MIT license, if I just want to keep it as simple as possible.

983
01:01:50,100 --> 01:01:57,500
And we will talk more about licenses next week. So sometimes I want to make sure that

984
01:01:57,500 --> 01:02:02,060
not only my project is open source, but also all the derivative work is open source. And

985
01:02:02,060 --> 01:02:03,860
then I choose a different license,

986
01:02:03,860 --> 01:02:05,680
but more about that on Tuesday.

987
01:02:08,220 --> 01:02:10,060
But let me navigate to the right place.

988
01:02:10,060 --> 01:02:13,460
And the right place is on the bottom of the document,

989
01:02:13,460 --> 01:02:15,780
how to turn your own project to a Git repo

990
01:02:15,780 --> 01:02:17,420
and how to share it.

991
01:02:17,420 --> 01:02:19,980
I will open it up in my browser tab.

992
01:02:25,920 --> 01:02:27,460
And here, there is not very much to say.

993
01:02:27,460 --> 01:02:30,940
We will give you enough time

994
01:02:32,060 --> 01:02:36,380
to do this, but I want to really explain well

995
01:02:36,380 --> 01:02:37,540
what the expectation is.

996
01:02:37,540 --> 01:02:41,660
The expectation is that if you don't want to share

997
01:02:41,660 --> 01:02:44,800
a real project of yours, it can be a small script.

998
01:02:44,800 --> 01:02:48,460
You can create a new directory called my project

999
01:02:48,460 --> 01:02:52,860
or whatever name you like, put a couple of files into it.

1000
01:02:55,100 --> 01:02:57,420
And this represents our own research project,

1001
01:02:57,420 --> 01:03:00,960
our own master thesis or PhD thesis.

1002
01:03:02,060 --> 01:03:04,060
and it is not yet a git repository.

1003
01:03:07,020 --> 01:03:09,320
And the two steps are now,

1004
01:03:09,320 --> 01:03:11,120
we need to make it a git repository.

1005
01:03:13,300 --> 01:03:15,480
And depending on which track you choose,

1006
01:03:15,480 --> 01:03:17,140
you will learn some new commands.

1007
01:03:18,220 --> 01:03:19,660
So for instance, on the command line,

1008
01:03:19,660 --> 01:03:21,500
you will see you have to do a little bit more work.

1009
01:03:21,500 --> 01:03:24,200
There are a little bit more steps to do.

1010
01:03:24,200 --> 01:03:28,600
If you go for VS Code, it's less to do

1011
01:03:28,600 --> 01:03:31,420
because it does lots of these Git commands for you.

1012
01:03:33,160 --> 01:03:35,100
Or you can do only using GitHub.

1013
01:03:37,240 --> 01:03:38,200
In some of these steps,

1014
01:03:38,200 --> 01:03:42,380
you will have to create a GitHub repository for the project.

1015
01:03:44,240 --> 01:03:45,440
Again, if you go for VS Code,

1016
01:03:45,440 --> 01:03:46,360
you don't even have to do that.

1017
01:03:46,360 --> 01:03:48,560
It will create a GitHub repository for you.

1018
01:03:50,880 --> 01:03:52,000
But at some point,

1019
01:03:52,000 --> 01:03:57,000
at some point it might ask you to authorize your VS Code

1020
01:04:00,520 --> 01:04:04,680
to be able to write to GitHub for you.

1021
01:04:04,680 --> 01:04:07,660
And I did that, you have to do it only the very first time

1022
01:04:07,660 --> 01:04:08,520
and I said yes to it.

1023
01:04:08,520 --> 01:04:12,040
So now my VS Code editor can create

1024
01:04:12,040 --> 01:04:14,240
and modify my own GitHub repositories

1025
01:04:14,240 --> 01:04:16,680
because that's what I wanted it to be able to do.

1026
01:04:18,120 --> 01:04:19,160
Scrolling back.

1027
01:04:22,000 --> 01:04:33,300
Your goal will be make it a git repo in one commit or a couple of commits as you like.

1028
01:04:33,300 --> 01:04:39,480
They will live locally on your computer, but then you also want to share this repository

1029
01:04:39,480 --> 01:04:42,400
to GitHub or GitLab.

1030
01:04:42,400 --> 01:04:52,520
Because the steps that we show, especially the command line, is very transferable between

1031
01:04:52,520 --> 01:04:59,440
all of these services.

1032
01:04:59,440 --> 01:05:01,600
And that's so important to do.

1033
01:05:01,600 --> 01:05:07,600
Because our ambition is that every coding project that we do will end up as a version

1034
01:05:07,600 --> 01:05:12,400
controlled project that is findable by other people.

1035
01:05:12,400 --> 01:05:19,400
And after you are done, if you need it for a certificate,

1036
01:05:19,400 --> 01:05:20,620
take a screenshot of it.

1037
01:05:20,620 --> 01:05:22,120
You don't have to keep it on GitHub.

1038
01:05:22,120 --> 01:05:23,360
You can, again, delete it.

1039
01:05:23,360 --> 01:05:27,080
So we don't force you to keep all of these projects there.

1040
01:05:30,760 --> 01:05:33,320
And we have allocated 25 minutes, which may be,

1041
01:05:33,320 --> 01:05:34,940
I think it's good to give people time

1042
01:05:34,940 --> 01:05:37,440
to experiment also a little bit.

1043
01:05:37,440 --> 01:05:41,640
and learn how to share the code.

1044
01:05:41,640 --> 01:05:44,480
And what we will do when we come back from the exercises

1045
01:05:45,480 --> 01:05:47,400
that we will discuss a lot.

1046
01:05:47,400 --> 01:05:50,340
We will really open it up for lots of questions.

1047
01:05:50,340 --> 01:05:54,040
We will try to have a discussion here with my colleagues

1048
01:05:54,040 --> 01:05:57,840
and we will talk about after all of these things we learned,

1049
01:05:57,840 --> 01:05:59,000
what is a good starting point?

1050
01:05:59,000 --> 01:06:00,920
How to progress?

1051
01:06:00,920 --> 01:06:01,960
What are the things to avoid?

1052
01:06:01,960 --> 01:06:06,480
What are typical traps when starting with Git or GitHub?

1053
01:06:07,440 --> 01:06:20,760
Yes, exercise until 35 minutes past. Try it out. Let us know how it went. Follow the solutions

1054
01:06:20,760 --> 01:06:26,540
if you need. And see you then again in 25 minutes. And then let's discuss a lot less

1055
01:06:26,540 --> 01:06:31,200
than spend the remaining time that we will have to clarify all of these questions that

1056
01:06:31,200 --> 01:06:37,760
are left. Good luck with the exercise. See you in 25 minutes. Bye.

1057
01:06:44,200 --> 01:06:46,080
Welcome back, everybody.

1058
01:06:49,740 --> 01:06:51,580
We, how did it go?

1059
01:06:51,580 --> 01:06:53,420
I will try it also on my side.

1060
01:06:53,420 --> 01:06:54,340
We got lots of questions.

1061
01:06:54,340 --> 01:06:55,180
That was great.

1062
01:06:57,700 --> 01:06:58,980
So my plan is I will,

1063
01:06:58,980 --> 01:07:02,340
I have this little toy project.

1064
01:07:02,340 --> 01:07:06,760
I want to, I will try it as well using VS code.

1065
01:07:06,760 --> 01:07:09,480
It will take only two, three minutes,

1066
01:07:10,500 --> 01:07:12,300
and then I can comment on some of the questions

1067
01:07:12,300 --> 01:07:14,700
that came up once I created.

1068
01:07:18,060 --> 01:07:21,260
So let me try that code here.

1069
01:07:21,260 --> 01:07:25,400
Code dot, it will start it at the place where I am.

1070
01:07:28,620 --> 01:07:30,380
I will make this more readable.

1071
01:07:34,980 --> 01:07:36,820
This is not on Git yet.

1072
01:07:36,820 --> 01:07:41,220
And all I have to do is source control.

1073
01:07:42,300 --> 01:07:45,500
I could initialize it.

1074
01:07:45,500 --> 01:07:46,980
I will not even do that.

1075
01:07:46,980 --> 01:07:49,860
So for those of you who did the command line,

1076
01:07:49,860 --> 01:07:52,280
you, at some point you had to type git init,

1077
01:07:53,500 --> 01:07:55,380
and this is what would happen if I click the button,

1078
01:07:55,380 --> 01:07:56,460
but I will not even do that.

1079
01:07:56,460 --> 01:07:59,100
I will go straight to publish to GitHub,

1080
01:07:59,100 --> 01:08:02,820
which will then initialize the repository for me.

1081
01:08:02,820 --> 01:08:05,220
It will create a commit for me

1082
01:08:05,220 --> 01:08:10,020
and push the changes to GitHub, publish to GitHub.

1083
01:08:12,300 --> 01:08:16,180
And I will first make it a public repository,

1084
01:08:16,180 --> 01:08:18,620
and then later I will change it to private,

1085
01:08:18,620 --> 01:08:19,540
because there was also a question,

1086
01:08:19,540 --> 01:08:24,160
where can we switch this to a public?

1087
01:08:25,100 --> 01:08:27,020
You can, I could change the name for my project

1088
01:08:27,020 --> 01:08:31,980
to something more descriptive, public,

1089
01:08:33,940 --> 01:08:37,100
all of the files, okay.

1090
01:08:37,100 --> 01:08:38,720
And here I'm following the screenshots

1091
01:08:38,720 --> 01:08:40,180
that we have in the solution.

1092
01:08:40,180 --> 01:08:50,220
Now, it created the repository for me on GitHub, it created a commit, it pushed a commit, and

1093
01:08:50,220 --> 01:08:52,980
I can open it up on GitHub.

1094
01:08:52,980 --> 01:08:55,420
Ta-da!

1095
01:08:55,420 --> 01:08:57,900
And here is my project.

1096
01:08:57,900 --> 01:09:04,500
This first commit is a commit that I didn't even actively do, VS Code did it for me.

1097
01:09:04,500 --> 01:09:16,140
Now, to the question about one question about public and private, this is a public project.

1098
01:09:16,140 --> 01:09:17,140
How can you switch?

1099
01:09:17,140 --> 01:09:18,140
How can you make it private?

1100
01:09:18,140 --> 01:09:19,140
And how can you delete projects?

1101
01:09:19,140 --> 01:09:21,320
This is something we have been asked.

1102
01:09:21,320 --> 01:09:26,460
So on settings, this is you can do it in settings.

1103
01:09:26,460 --> 01:09:29,940
In settings, you can rename it.

1104
01:09:29,940 --> 01:09:41,400
You can do lots of things, scrolling down, but I will go to the danger zone.

1105
01:09:41,400 --> 01:09:47,080
In the danger zone, I can change visibility, so from public to private.

1106
01:09:47,080 --> 01:09:54,200
And if I don't want the repository anymore, I can also delete it.

1107
01:09:54,200 --> 01:09:56,000
And it will still ask me, do you really want to delete it?

1108
01:09:56,000 --> 01:09:57,000
There is no way back.

1109
01:09:57,000 --> 01:09:58,000
Please type the name.

1110
01:09:58,000 --> 01:10:01,360
but then in a few steps, it can be, it will be gone.

1111
01:10:06,000 --> 01:10:06,840
Good.

1112
01:10:10,520 --> 01:10:12,000
Now, let me show you one more thing here.

1113
01:10:12,000 --> 01:10:15,200
And that is, how is this linked now

1114
01:10:15,200 --> 01:10:19,400
to the local repository with the remote repository?

1115
01:10:19,400 --> 01:10:21,720
And where is this information?

1116
01:10:21,720 --> 01:10:24,720
So I'll click on my Python script,

1117
01:10:24,720 --> 01:10:29,720
And then I want to see, is this the timeline?

1118
01:10:31,240 --> 01:10:33,000
No, this is the timeline.

1119
01:10:33,000 --> 01:10:34,000
Where's the timeline?

1120
01:10:35,920 --> 01:10:38,660
How do I, this one, how do I see the commits?

1121
01:10:42,800 --> 01:10:46,440
What I wanted to see is the commit messages

1122
01:10:46,440 --> 01:10:48,060
here on VS Code as well.

1123
01:10:54,720 --> 01:11:05,040
No, I don't. I looked for that several times. I haven't found somewhere we talk about timeline.

1124
01:11:05,040 --> 01:11:09,240
So where is this timeline thing that we talked about?

1125
01:11:09,240 --> 01:11:14,800
Is a certain file tracked in git open? Yes.

1126
01:11:14,800 --> 01:11:24,440
Should be would be. Oh, can you go to the file browser view? Not the git view?

1127
01:11:24,440 --> 01:11:27,800
Yeah, there, in their timeline at the bottom.

1128
01:11:27,800 --> 01:11:30,320
Ah, here we go, thanks.

1129
01:11:30,320 --> 01:11:34,800
Okay, first commit, good, brilliant.

1130
01:11:34,800 --> 01:11:41,560
And that was hard to find, for me, the first time.

1131
01:11:41,560 --> 01:11:45,520
So there's the timeline, there is the first commit, but now, where is this information

1132
01:11:45,520 --> 01:11:46,520
locally?

1133
01:11:46,520 --> 01:11:48,200
Where is this stuff?

1134
01:11:48,200 --> 01:11:51,000
And in the command line, you could do,

1135
01:11:51,000 --> 01:11:53,800
there is a hidden directory called .git.

1136
01:11:55,760 --> 01:11:57,480
And this is just a reminder that

1137
01:11:57,480 --> 01:11:59,760
when you create commands branches,

1138
01:11:59,760 --> 01:12:02,320
it all goes in there, all the metadata is in there.

1139
01:12:04,040 --> 01:12:07,560
This also stores the connection between this repository

1140
01:12:07,560 --> 01:12:08,880
and the remote repository.

1141
01:12:10,800 --> 01:12:11,920
If you want to

1142
01:12:14,600 --> 01:12:15,920
disconnect the two,

1143
01:12:16,800 --> 01:12:21,920
look for remotes, so you can remove remotes. It will disconnect the two.

1144
01:12:23,760 --> 01:12:27,760
And if I, if I on my computer would delete the .git,

1145
01:12:29,120 --> 01:12:33,360
then this commit is gone. The history is gone. The branches are gone.

1146
01:12:35,920 --> 01:12:38,960
I think just for demonstration, I will try it out. I don't know what will happen. Let me,

1147
01:12:39,680 --> 01:12:44,720
so please don't do it. This is not dangerous. I will do it only, only here on stream. I will remove

1148
01:12:45,920 --> 01:12:58,280
this. No, I will not remove this is dangerous, but I will do I will rename it. Get to renamed

1149
01:12:58,280 --> 01:13:04,640
folder. Because then I can rename it back.

1150
01:13:04,640 --> 01:13:11,240
And if you do a git status, I guess you get. But it's not a git folder anymore.

1151
01:13:11,240 --> 01:13:15,240
Yes, so if I now, like, remove it or move it away,

1152
01:13:18,880 --> 01:13:20,680
git status.

1153
01:13:20,680 --> 01:13:21,920
So this is not a git repository,

1154
01:13:21,920 --> 01:13:24,960
but I think VS Code didn't get the news yet.

1155
01:13:24,960 --> 01:13:27,040
I was wondering what happens here with the timeline

1156
01:13:27,040 --> 01:13:29,880
because there shouldn't be anything now anymore.

1157
01:13:29,880 --> 01:13:31,480
There should be, oh yeah.

1158
01:13:31,480 --> 01:13:34,520
So now VS Code also got the news.

1159
01:13:34,520 --> 01:13:36,800
It tells that, well, this is not a git repository.

1160
01:13:36,800 --> 01:13:38,400
You need to initialize it first.

1161
01:13:38,400 --> 01:13:43,720
And now there is no there is no timeline anymore.

1162
01:13:43,720 --> 01:13:49,700
So all the all the local git information was in the .git.

1163
01:13:49,700 --> 01:13:51,980
Let me try the reverse.

1164
01:13:51,980 --> 01:13:52,980
Rename folder.

1165
01:13:52,980 --> 01:13:55,980
I move it back to .git.

1166
01:13:55,980 --> 01:14:04,680
Now there is a timeline again.

1167
01:14:04,680 --> 01:14:08,280
So that was good.

1168
01:14:08,280 --> 01:14:10,100
What else is here?

1169
01:14:10,100 --> 01:14:11,500
Any trouble here?

1170
01:14:11,500 --> 01:14:13,200
Anything else we should talk about?

1171
01:14:15,380 --> 01:14:16,620
What did I mean by disconnect?

1172
01:14:16,620 --> 01:14:18,160
I meant disconnecting.

1173
01:14:20,460 --> 01:14:21,900
Okay, what do I mean by that?

1174
01:14:25,140 --> 01:14:27,300
The connection, there is a connection

1175
01:14:27,300 --> 01:14:30,620
between now the local repository and the remote repository

1176
01:14:30,620 --> 01:14:34,540
so that when I do local changes here on my computer,

1177
01:14:34,540 --> 01:14:36,100
I can push them to GitHub.

1178
01:14:36,100 --> 01:14:40,540
And if I or somebody else does changes on GitHub,

1179
01:14:40,540 --> 01:14:43,980
I can pull these changes to my local repository.

1180
01:14:45,780 --> 01:14:50,740
This is something we will do quite a bit tomorrow.

1181
01:14:52,260 --> 01:14:53,780
Pull changes, push changes.

1182
01:14:56,220 --> 01:14:58,460
And the connection between the two

1183
01:14:58,460 --> 01:15:01,420
was this thing that we called origin,

1184
01:15:01,420 --> 01:15:04,340
but I think we only mentioned it very briefly earlier.

1185
01:15:04,340 --> 01:15:07,120
It's a placeholder for,

1186
01:15:08,420 --> 01:15:10,660
we saw that earlier when we cloned our repository.

1187
01:15:10,660 --> 01:15:13,020
It remembered where we cloned it from.

1188
01:15:17,060 --> 01:15:18,620
A little bit technical.

1189
01:15:18,620 --> 01:15:20,820
I will now move away my VS codes

1190
01:15:22,420 --> 01:15:23,540
to get more screen space.

1191
01:15:23,540 --> 01:15:25,520
I will also move away my terminal,

1192
01:15:28,580 --> 01:15:29,420
more screen space,

1193
01:15:29,420 --> 01:15:34,300
and I will navigate what I want to do now.

1194
01:15:34,300 --> 01:15:39,300
I want to navigate to the last part and we will...

1195
01:15:41,100 --> 01:15:43,500
So let's discuss a little bit before break.

1196
01:15:43,500 --> 01:15:44,500
We will then take a short break.

1197
01:15:44,500 --> 01:15:46,960
We'll discuss a little bit more later.

1198
01:15:46,960 --> 01:15:49,260
I would like now to really talk about

1199
01:15:49,260 --> 01:15:51,160
all the questions that you might have.

1200
01:15:52,420 --> 01:15:56,040
So let's make this really a Q&A session,

1201
01:15:56,040 --> 01:15:58,660
ask everything about Git that you wanted to know,

1202
01:15:58,660 --> 01:16:00,480
anything about yesterday and today.

1203
01:16:01,440 --> 01:16:07,040
And to get these questions started, we have these two episodes,

1204
01:16:07,840 --> 01:16:13,360
but there won't be any exercises of where we want to now discuss here

1205
01:16:14,880 --> 01:16:17,120
some practical advice, how much it is necessary.

1206
01:16:18,240 --> 01:16:22,320
We showed you many things that are possible, but where should we start?

1207
01:16:22,320 --> 01:16:25,360
What should we do then? And what are typical traps?

1208
01:16:25,360 --> 01:16:29,600
So first, practical advice, and I will add the link also in the document

1209
01:16:29,600 --> 01:16:31,440
and so that you know where to find it.

1210
01:16:32,640 --> 01:16:35,560
We are now here.

1211
01:16:40,600 --> 01:16:42,280
So at the bottom of the document.

1212
01:16:51,780 --> 01:16:52,980
And there are a few topics

1213
01:16:52,980 --> 01:16:54,520
that people might be wondering about.

1214
01:16:54,520 --> 01:16:55,460
And one is,

1215
01:16:55,460 --> 01:17:00,460
Let's talk about commit messages.

1216
01:17:02,300 --> 01:17:04,260
So what makes commit messages useful?

1217
01:17:09,220 --> 01:17:13,060
And we try to summarize here that a useful commit message,

1218
01:17:13,060 --> 01:17:15,540
it's like an entry in a logbook.

1219
01:17:16,540 --> 01:17:20,380
It's if you can, in one line, summarize the change,

1220
01:17:20,380 --> 01:17:22,780
but also if you can provide context for it.

1221
01:17:25,460 --> 01:17:27,860
And sometimes it's hard to do it in one line.

1222
01:17:30,180 --> 01:17:35,180
I find it quite a challenge to write one-liners.

1223
01:17:38,780 --> 01:17:42,780
So if you need more than one line, it's still good to try.

1224
01:17:42,780 --> 01:17:44,160
Here's a good example.

1225
01:17:45,940 --> 01:17:50,940
If you write it in a command line,

1226
01:17:52,140 --> 01:17:55,080
try to summarize the commit message in the first line.

1227
01:17:55,080 --> 01:17:56,280
And why in the first line?

1228
01:17:56,280 --> 01:18:00,480
Because, okay, let me navigate to,

1229
01:18:00,480 --> 01:18:02,240
let me go back to the recipe book.

1230
01:18:02,240 --> 01:18:03,640
Recipe book recorded.

1231
01:18:06,160 --> 01:18:08,660
Because the first line is the one that I see here.

1232
01:18:10,560 --> 01:18:12,640
It's good if it's somehow descriptive

1233
01:18:12,640 --> 01:18:13,840
because then I don't have to click

1234
01:18:13,840 --> 01:18:17,080
and I don't have to look into it to find out more.

1235
01:18:17,080 --> 01:18:19,040
But if you need to give more context,

1236
01:18:19,040 --> 01:18:21,640
more explanation, why was this done?

1237
01:18:21,640 --> 01:18:23,040
What does it refer to?

1238
01:18:23,040 --> 01:18:28,040
It refers to a discussion that maybe started in an issue.

1239
01:18:28,900 --> 01:18:32,480
Then it's customary to do first line summary,

1240
01:18:32,480 --> 01:18:35,180
one empty line, and then more context if you need to.

1241
01:18:37,920 --> 01:18:39,820
And when we created commits on GitHub,

1242
01:18:42,600 --> 01:18:43,640
let me try that on GitHub.

1243
01:18:43,640 --> 01:18:48,560
Now I will modify something faster.

1244
01:18:49,560 --> 01:18:51,060
Let me modify this one.

1245
01:18:53,040 --> 01:18:58,600
So, when I do it on GitHub, I also have the option to give a short summary, your edit,

1246
01:18:58,600 --> 01:19:00,600
I will edit the file.

1247
01:19:00,600 --> 01:19:11,720
Well, we need more instructions, more instructions coming up.

1248
01:19:11,720 --> 01:19:15,820
Let's preview the change.

1249
01:19:15,820 --> 01:19:21,280
And when, when I commit, when I create the commit on GitHub, the top part is the first

1250
01:19:21,280 --> 01:19:27,280
line and this is the this this the empty line is the one between the two and here is the

1251
01:19:27,280 --> 01:19:33,420
more context and this is not a very useful commit message because it only tells me which

1252
01:19:33,420 --> 01:19:36,880
file has changed it would be much nicer to say what has changed what was the context

1253
01:19:36,880 --> 01:19:49,680
there. Why did I change it? Because providing context and hear more context.

1254
01:19:49,680 --> 01:19:57,160
Yeah. When do you have really short message commit messages? And when do you have longer

1255
01:19:57,160 --> 01:20:09,200
Most of the time, I have short messages. I have the longer one if it's, if it could be,

1256
01:20:09,200 --> 01:20:15,520
if it connects to something else, if it connects to a discussion that we had, if I need to

1257
01:20:15,520 --> 01:20:23,640
provide this context, or if it's a bigger change. And I want to summarize what I did

1258
01:20:23,640 --> 01:20:28,480
and why I did it so that people don't have to look through all of the change to understand

1259
01:20:28,480 --> 01:20:35,000
it. But most of the time it fits into one line. How about you? How do you do that?

1260
01:20:35,000 --> 01:20:47,960
I mean, like everything, it really depends on the project. So for, I mean, for small

1261
01:20:47,960 --> 01:20:55,160
projects that I'm just starting and are still chaotic. I mean, it's often really short.

1262
01:20:55,160 --> 01:21:01,760
Sometimes it's even things like fix bugs or so on if I'm busy and it's just all thrown

1263
01:21:01,760 --> 01:21:07,000
in things. Like, for example, this control panel for the stream I've been working on.

1264
01:21:07,000 --> 01:21:12,680
It's so young and things are changing so fast that if I take the time to make a good commit

1265
01:21:12,680 --> 01:21:19,480
message, it's not going to matter by tomorrow. So I just do whatever. But then there's other

1266
01:21:19,480 --> 01:21:24,760
projects that are actually like out there and mostly work. So every change has a particular

1267
01:21:24,760 --> 01:21:31,320
purpose. Like I'm adding a certain new feature to it. And then I'll go into more detail. Also,

1268
01:21:31,320 --> 01:21:35,320
it depends on who else would be reading it. Like if I'm contributing to someone else's project,

1269
01:21:35,320 --> 01:21:42,040
I'll use the commit message to explain why I'm doing it and what the reviewer might need to know.

1270
01:21:42,680 --> 01:21:46,760
and they know I may as well do it there rather than write it somewhere else,

1271
01:21:47,640 --> 01:21:52,280
especially because when you open a pull request, it will automatically use the messages from the

1272
01:21:55,240 --> 01:21:57,000
commit by default.

1273
01:21:59,320 --> 01:22:02,680
Right. If I have a pull request with only one commit,

1274
01:22:04,120 --> 01:22:07,320
it will suggest me that this is the pull request title,

1275
01:22:07,320 --> 01:22:09,800
and it will suggest that this is the pull request context.

1276
01:22:09,800 --> 01:22:14,720
And a good point about that, if you start,

1277
01:22:14,720 --> 01:22:17,920
if it's your own project, it doesn't have to be formal.

1278
01:22:17,920 --> 01:22:19,080
It shouldn't be formal.

1279
01:22:21,880 --> 01:22:25,420
Maybe still good to write the commit messages in English

1280
01:22:25,420 --> 01:22:28,400
because many projects start small

1281
01:22:28,400 --> 01:22:30,500
and then they become lots of people

1282
01:22:30,500 --> 01:22:32,000
and they live for a long time.

1283
01:22:36,000 --> 01:22:37,900
But as for bigger projects,

1284
01:22:37,900 --> 01:22:39,400
and some of them are listed here

1285
01:22:39,400 --> 01:22:41,520
and maybe these are projects that some of you use

1286
01:22:41,520 --> 01:22:45,960
like SciPy, NumPy, Pandas, Julia, GGplot.

1287
01:22:47,480 --> 01:22:50,200
It can be interesting to browse these projects

1288
01:22:50,200 --> 01:22:52,280
and have a look how do they do commit messages.

1289
01:22:52,280 --> 01:22:54,160
And you will see that they are a bit more formal

1290
01:22:54,160 --> 01:22:55,000
because they have to be.

1291
01:22:55,000 --> 01:22:57,640
These are projects with hundreds, thousands of people.

1292
01:22:58,560 --> 01:23:01,000
So then they agree on certain conventions

1293
01:23:01,000 --> 01:23:06,000
of how to document improvements,

1294
01:23:06,000 --> 01:23:09,180
improvements, how to document bugs, how to document,

1295
01:23:10,080 --> 01:23:11,420
how to write commit messages,

1296
01:23:11,420 --> 01:23:14,360
which automatically create release notes,

1297
01:23:14,360 --> 01:23:16,660
but we don't have to be that formal yet.

1298
01:23:16,660 --> 01:23:18,600
But it can be still fun because you can browse them

1299
01:23:18,600 --> 01:23:22,960
for some inspiration of how do these really well-established

1300
01:23:22,960 --> 01:23:27,320
open source projects communicate through commit messages.

1301
01:23:27,320 --> 01:23:28,800
Yeah.

1302
01:23:28,800 --> 01:23:31,880
If you take some project you're interested in

1303
01:23:31,880 --> 01:23:35,000
that's reasonably big and subscribe to its repository

1304
01:23:35,000 --> 01:23:38,860
on GitHub, you'll start getting a flood of these kind of pull

1305
01:23:38,860 --> 01:23:42,220
requests and messages and discussions that are coming in.

1306
01:23:42,220 --> 01:23:45,020
And this can be really educational to see

1307
01:23:45,020 --> 01:23:46,500
how people do things.

1308
01:23:46,500 --> 01:23:48,580
Like from subscribing to repositories

1309
01:23:48,580 --> 01:23:50,360
and seeing how they've worked, I've

1310
01:23:50,360 --> 01:23:54,580
learned many of the different techniques which I use now.

1311
01:23:54,580 --> 01:24:04,980
So I'd, yeah, so I'd, so for becoming better at things,

1312
01:24:04,980 --> 01:24:08,660
This is one of the things I'd recommend.

1313
01:24:08,660 --> 01:24:09,660
It's a great tip.

1314
01:24:09,660 --> 01:24:14,740
Like if you want to become a better writer, you should read books.

1315
01:24:14,740 --> 01:24:16,500
It's similar here.

1316
01:24:16,500 --> 01:24:20,260
I think from all of these, I want to point out one thing.

1317
01:24:20,260 --> 01:24:23,700
It can be more useful to say why something was changed.

1318
01:24:23,700 --> 01:24:26,900
It can be more useful than what has changed.

1319
01:24:26,900 --> 01:24:28,060
Because I can find out what changed.

1320
01:24:28,060 --> 01:24:29,900
I can go to the commit.

1321
01:24:29,900 --> 01:24:32,780
I can click on it and I will see it.

1322
01:24:32,780 --> 01:24:33,940
These lines got removed.

1323
01:24:33,940 --> 01:24:39,220
lines got added. But sometimes it can be hard for me to tell why was this done. So the why

1324
01:24:39,220 --> 01:24:46,380
can be more interesting. But that's the last thing before the break. Let's take a break

1325
01:24:46,380 --> 01:24:51,140
soon. Let the perfect not be the enemy of the good enough. At the beginning, let's make

1326
01:24:51,140 --> 01:24:58,820
it just good enough. More commits, they don't have to be pretty. It's better than trying

1327
01:24:58,820 --> 01:25:03,940
to do everything perfectly and then preventing you from creating commits and sharing your

1328
01:25:03,940 --> 01:25:10,960
work. And I suggest that we take a break, maybe 10 minute break, because then everybody

1329
01:25:10,960 --> 01:25:14,720
can think about what are the questions that you want to ask, and please ask them. And

1330
01:25:14,720 --> 01:25:18,520
then the remaining 20 minutes that we will have after the break, then we can talk about

1331
01:25:18,520 --> 01:25:28,720
complexity, how to where to start with branches, how to deal with branch complexity, repositories,

1332
01:25:28,720 --> 01:25:34,000
to start and how to progress.

1333
01:25:34,000 --> 01:25:35,000
Sounds like a plan.

1334
01:25:35,000 --> 01:25:36,000
Okay.

1335
01:25:36,000 --> 01:25:37,000
Sounds good.

1336
01:25:37,000 --> 01:25:40,480
So then let's be back five minutes after the hour, and hopefully with lots of questions

1337
01:25:40,480 --> 01:25:41,600
about Git.

1338
01:25:41,600 --> 01:25:44,960
And if you want us to show something, please suggest it and maybe we can show something

1339
01:25:44,960 --> 01:25:46,320
here.

1340
01:25:46,320 --> 01:25:50,800
Let's make this a bit of improv session.

1341
01:25:50,800 --> 01:25:53,800
See you all in 10 minutes.

1342
01:25:53,800 --> 01:25:54,800
Bye.

1343
01:25:54,800 --> 01:25:55,800
Okay.

1344
01:25:55,800 --> 01:25:56,800
Bye.

1345
01:25:56,800 --> 01:25:57,800
Do you push the break button?

1346
01:25:57,800 --> 01:26:01,800
Oh yeah, let me find the break button.

1347
01:26:03,000 --> 01:26:13,120
Hello, everybody. Welcome back for the last 20 minutes, 25 minutes of today. It will be

1348
01:26:13,120 --> 01:26:21,520
a discussion session. It's a possibility to ask us lots of questions, which we can now

1349
01:26:21,520 --> 01:26:27,600
here discuss. Maybe we can also show one or two things. So thanks so much for keeping

1350
01:26:27,600 --> 01:26:35,480
this coming. I would maybe before moving on to branches, I would like to we can talk about

1351
01:26:35,480 --> 01:26:45,840
two things that came up. One was when do you clone and when do you fork? How do you decide?

1352
01:26:45,840 --> 01:26:49,920
I can comment, but maybe, yeah, beyond [Name].

1353
01:26:49,920 --> 01:26:52,000
And the cat is there, yeah.

1354
01:26:52,000 --> 01:26:53,720
The cat is there.

1355
01:26:53,720 --> 01:26:54,560
Yes.

1356
01:26:56,120 --> 01:27:01,120
I would fork a repository that seems like a bigger project.

1357
01:27:04,040 --> 01:27:07,360
Fork it first and then clone my version of it.

1358
01:27:12,160 --> 01:27:13,000
Yeah. Yeah.

1359
01:27:15,840 --> 01:27:21,840
So I can say that I fork when I somehow want to have it.

1360
01:27:21,840 --> 01:27:24,240
I want to make sure that I don't lose even the fork, the copy.

1361
01:27:25,920 --> 01:27:32,320
If I'm afraid that the central repository will, I don't know, disappear or something,

1362
01:27:32,320 --> 01:27:33,760
then I just make a copy of it.

1363
01:27:34,880 --> 01:27:40,000
Or if I plan to contribute to it and make changes and keep those changes somewhere

1364
01:27:40,000 --> 01:27:45,760
saved if it's just about i want to run it only today

1365
01:27:45,760 --> 01:27:53,760
oh then then i don't create a fork yeah i didn't think about this uh

1366
01:27:53,760 --> 01:27:59,520
keeping a copy in case the original changes but that's a good point

1367
01:27:59,520 --> 01:28:03,040
yeah it's a little bit like a bookmark yeah so if then the

1368
01:28:03,040 --> 01:28:06,160
central repository disappears it will not remove your fork

1369
01:28:06,160 --> 01:28:11,440
unless the central repository is private. If, at least it used to be like that, if the private

1370
01:28:11,440 --> 01:28:15,600
disappears, it also removes all the forks. I see. Okay.

1371
01:28:16,640 --> 01:28:21,760
But as a side note, how about gitignore? When is that useful? How do you use it?

1372
01:28:23,520 --> 01:28:26,720
What is it good for? It was asked somewhere.

1373
01:28:26,720 --> 01:28:36,240
did you talk about did you talk about git status before and

1374
01:28:36,240 --> 01:28:44,440
not so much because we didn't spend we didn't focus too much on the command line yeah

1375
01:28:44,440 --> 01:28:50,280
i can do a quick quick demo here of it in my in my project

1376
01:28:50,280 --> 01:29:02,720
gitstatus. Everything is, the working tree is clean. And what does that mean? Well, everything

1377
01:29:02,720 --> 01:29:09,680
has been committed. But what if I have now a file here? Give me an example for something

1378
01:29:09,680 --> 01:29:11,680
that should not be in a Git repository.

1379
01:29:12,920 --> 01:29:14,600
Test.py.

1380
01:29:16,680 --> 01:29:17,520
What about,

1381
01:29:19,800 --> 01:29:22,240
oh, sorry, I thought cats was.

1382
01:29:22,240 --> 01:29:23,080
PC.

1383
01:29:24,120 --> 01:29:25,440
Sorry, what was that?

1384
01:29:25,440 --> 01:29:26,280
.pc.

1385
01:29:27,840 --> 01:29:29,600
Yeah, but it's Python specific.

1386
01:29:29,600 --> 01:29:30,640
Let's say I have all,

1387
01:29:32,400 --> 01:29:34,640
okay, I will do something.

1388
01:29:34,640 --> 01:29:39,640
I have a file called passwords.txt.

1389
01:29:40,040 --> 01:29:40,960
Okay, yeah.

1390
01:29:42,980 --> 01:29:43,920
Git status.

1391
01:29:45,280 --> 01:29:47,720
And I don't want to put passwords into the git repository.

1392
01:29:47,720 --> 01:29:49,320
I don't want to put passwords

1393
01:29:49,320 --> 01:29:51,320
and sensitive information onto GitHub.

1394
01:29:52,760 --> 01:29:55,080
And now if I type git status, I see it here.

1395
01:29:55,080 --> 01:29:57,840
Git reminds me that there is this file.

1396
01:29:57,840 --> 01:29:59,120
It's untracked.

1397
01:29:59,120 --> 01:30:00,000
Do you want to edit?

1398
01:30:00,000 --> 01:30:00,960
No, I don't want to edit,

1399
01:30:00,960 --> 01:30:03,800
but I also, I don't want to be reminded.

1400
01:30:03,800 --> 01:30:07,080
And if I want to get to prevent me from adding it,

1401
01:30:07,920 --> 01:30:12,920
I would list this in a file called .gitignore.

1402
01:30:17,480 --> 01:30:20,680
Oh, and now I don't want to spend too much time here.

1403
01:30:20,680 --> 01:30:24,120
I can try to do it in VS code, code dot.

1404
01:30:27,040 --> 01:30:27,880
Oh.

1405
01:30:27,880 --> 01:30:28,760
So, yeah.

1406
01:30:28,760 --> 01:30:31,680
So the point of git status is it will tell you

1407
01:30:31,680 --> 01:30:33,200
what you're currently working on

1408
01:30:33,200 --> 01:30:40,320
what might need to be done. So for example it tells you these are all files that you've done

1409
01:30:40,320 --> 01:30:47,360
something on but they aren't committed yet which usually means you should commit them at some point.

1410
01:30:51,280 --> 01:30:54,880
I can even do a wildcard so anything that starts with passwords please

1411
01:30:55,440 --> 01:30:57,200
never put this into the git repository.

1412
01:30:57,200 --> 01:31:09,740
save now the thing is still there it's like to change color interesting

1413
01:31:09,740 --> 01:31:14,060
and if I go back to the terminal and I do git status

1414
01:31:14,060 --> 01:31:18,340
okay there is not a gitignore which I guess I should add to my git repository

1415
01:31:18,340 --> 01:31:25,660
how do I do that I do it by doing oh yeah oh I need to go into this thing

1416
01:31:25,660 --> 01:31:33,540
source control click add stage and commit in the commit message with a good

1417
01:31:33,540 --> 01:31:46,140
one will be ignore ignore files that start with password commit and back to

1418
01:31:46,140 --> 01:31:51,340
here get status now it looks clean the password TXT is still there it's not in

1419
01:31:51,340 --> 01:31:54,640
my git repository and I will not accidentally commit it it will not let

1420
01:31:54,640 --> 01:32:04,760
Let me I can even try or get add password. Let me try to do that. No, you cannot.

1421
01:32:04,760 --> 01:32:11,640
Yeah, so it even warrants you so you won't accidentally add it.

1422
01:32:11,640 --> 01:32:17,420
So that was getting our typical thing to ignore is sensitive stuff, password stuff. Yeah,

1423
01:32:17,420 --> 01:32:18,740
big generated files.

1424
01:32:18,740 --> 01:32:24,540
If, for example, files. Yeah, like if you're compiling code, you would ignore the results

1425
01:32:24,540 --> 01:32:31,420
the compiling stuff. If you're storing LaTeX papers, you'd ignore the generated PDFs and

1426
01:32:31,420 --> 01:32:40,700
other intermediate files, and so on. For our code refinery web pages, we ignore the generated

1427
01:32:40,700 --> 01:32:50,620
websites, and so on. If you have big data analysis kind of stuff, you might ignore all of the data

1428
01:32:50,620 --> 01:32:54,460
directories, because you store that some other way, for example.

1429
01:32:57,740 --> 01:33:02,460
A little fun fact, if you zoom out here on the lesson down here, you can actually view the

1430
01:33:02,460 --> 01:33:09,900
lesson in PDF format, in one big PDF page. And that's a generated file. We don't want to have

1431
01:33:09,900 --> 01:33:14,700
that in the Git repository. We generate this every time we make a change to the repository.

1432
01:33:15,500 --> 01:33:20,060
And this is not part of the Git repository. This could be something that is ignored.

1433
01:33:20,620 --> 01:33:21,620
Yes.

1434
01:33:21,620 --> 01:33:27,460
Back to the lesson, how about branching?

1435
01:33:27,460 --> 01:33:34,860
Do you create branches or do you work with one branch in your projects or beyond [Name]?

1436
01:33:34,860 --> 01:33:40,820
Well, I use a lot of branches, so.

1437
01:33:40,820 --> 01:33:42,820
How do you keep them organized?

1438
01:33:42,820 --> 01:33:46,620
Yeah, that's a good question.

1439
01:33:46,620 --> 01:33:55,260
I try to give good names and start with my username and then a feature name.

1440
01:33:55,260 --> 01:34:01,260
Do you usually work on big projects or small projects or?

1441
01:34:01,260 --> 01:34:10,940
I work on small projects, private projects.

1442
01:34:10,940 --> 01:34:18,260
So just make this more visible here.

1443
01:34:18,260 --> 01:34:24,980
For me, most of my projects are very small.

1444
01:34:24,980 --> 01:34:30,560
I mean, I guess for everyone, you have a few big projects and many small projects, which

1445
01:34:30,560 --> 01:34:34,720
you might not even consider a project because it's so small.

1446
01:34:34,720 --> 01:34:40,640
So for the small stuff, it's just working on one branch usually, unless there's a specific

1447
01:34:40,640 --> 01:34:46,360
case when I need to do something, like I'm actually testing something else.

1448
01:34:46,360 --> 01:34:53,000
For bigger projects, like small group things, well, if it's a small group but I'm the main

1449
01:34:53,000 --> 01:35:01,480
developer and there's no one else that has time to review things, well, again, it's mostly

1450
01:35:01,480 --> 01:35:03,800
with the main branch.

1451
01:35:03,800 --> 01:35:08,320
But there's often times I'm doing something and I'm like, okay, this is such a big change,

1452
01:35:08,320 --> 01:35:11,160
I know I definitely want someone to look at it.

1453
01:35:11,160 --> 01:35:19,080
And then I would do the pull request workflow, like make a branch and actually ask someone,

1454
01:35:19,080 --> 01:35:27,280
please take a look at this, I really need your help, and then review.

1455
01:35:27,280 --> 01:35:30,920
So start small, start simple, it's okay to have main branch, it's okay to put all the

1456
01:35:30,920 --> 01:35:32,920
commits in there.

1457
01:35:32,920 --> 01:35:38,600
And as soon as the project grows, so as soon as you have two people, more than two people,

1458
01:35:38,600 --> 01:35:46,320
a few people, one thing you could consider is, and we will see that tomorrow in exercise,

1459
01:35:46,320 --> 01:35:51,800
one thing you could do in your project, in your research group, you could even decide

1460
01:35:51,800 --> 01:35:54,680
that, well, we want to right protect the main branch.

1461
01:35:54,680 --> 01:35:57,600
you decide that the main branch is the one that works,

1462
01:35:58,840 --> 01:36:03,360
is tested, and you write protect it.

1463
01:36:03,360 --> 01:36:06,920
So nobody can accidentally modify it or push to it

1464
01:36:06,920 --> 01:36:10,200
or commit to it, but you can then,

1465
01:36:10,200 --> 01:36:12,200
and tomorrow we will show you how you can then configure it

1466
01:36:12,200 --> 01:36:16,300
so that all the changes have to be pull requests.

1467
01:36:16,300 --> 01:36:18,600
And then at least somebody else looks at it.

1468
01:36:18,600 --> 01:36:20,840
And it's not just to make sure that,

1469
01:36:20,840 --> 01:36:22,300
it's not about just quality control,

1470
01:36:22,300 --> 01:36:28,060
also about learning, then at least two people know about each change. And that's important

1471
01:36:28,060 --> 01:36:32,940
in research groups. You want to make sure that if one research group member student leaves,

1472
01:36:33,580 --> 01:36:37,900
that the knowledge is not lost, that at least somebody else understands what was going on there.

1473
01:36:39,740 --> 01:36:46,460
What happens if no one has time or really only one person is working on a project?

1474
01:36:46,460 --> 01:36:57,500
I guess then it's sort of too bad, like that's the problem itself.

1475
01:36:57,500 --> 01:37:00,380
So I think there are two questions in this one question. One is, what do you do if you

1476
01:37:00,380 --> 01:37:07,380
are alone and you have nobody else to look over the code? And maybe you can team up with

1477
01:37:07,380 --> 01:37:11,100
somebody does it can be somebody who works on something else, but at least can look at

1478
01:37:11,100 --> 01:37:16,340
the code part of it. Doesn't have even have to understand the science part of it. And maybe

1479
01:37:16,340 --> 01:37:20,180
Maybe you can help them reviewing their code, but it can be hard.

1480
01:37:20,180 --> 01:37:22,620
And then the other part of the question is, how about time?

1481
01:37:22,620 --> 01:37:24,820
Because code reviewing takes time.

1482
01:37:24,820 --> 01:37:33,140
And it can feel like, well, this is not, you know, work or this is not coding, but it makes

1483
01:37:33,140 --> 01:37:34,140
better code.

1484
01:37:34,140 --> 01:37:36,400
It makes better understanding within the group.

1485
01:37:36,400 --> 01:37:43,780
So we think it's time well spent, but we need to then also convince, well, we need to allocate

1486
01:37:43,780 --> 01:37:44,780
time for it.

1487
01:37:44,780 --> 01:37:45,780
So it takes time.

1488
01:37:45,780 --> 01:37:52,220
reviewing a paper. It takes time, but the system is there for a good reason.

1489
01:37:52,220 --> 01:38:00,980
Yeah. So when you were, like, doing research and stuff like that, did someone usually review

1490
01:38:00,980 --> 01:38:08,820
your work? Did you have enough people to do this?

1491
01:38:08,820 --> 01:38:13,940
No, we were we were not really back then.

1492
01:38:13,940 --> 01:38:17,080
We were not really using this code review.

1493
01:38:17,080 --> 01:38:20,400
Everybody was committing to the main or master branch.

1494
01:38:20,400 --> 01:38:21,400
We had tests.

1495
01:38:21,400 --> 01:38:25,560
So we would notice when things wouldn't go well, and we would run these tests before

1496
01:38:25,560 --> 01:38:26,560
committing.

1497
01:38:26,560 --> 01:38:34,200
And at some point, somebody would notice that something changed and you will fix it.

1498
01:38:34,200 --> 01:38:41,360
These days, also in the project that I used to work on during PhD, we use code review.

1499
01:38:41,360 --> 01:38:42,800
Somebody else looks over it.

1500
01:38:42,800 --> 01:38:44,200
We have automated testing.

1501
01:38:44,200 --> 01:38:46,320
We will show you that next week.

1502
01:38:46,320 --> 01:38:52,600
So even when you look at the pull request, we can see whether all the tests are passing

1503
01:38:52,600 --> 01:38:56,600
or they are not passing.

1504
01:38:56,600 --> 01:38:58,600
But this can be built up step by step.

1505
01:38:58,600 --> 01:39:01,500
It's good not to add all of this machinery

1506
01:39:01,500 --> 01:39:03,400
right from the start in small projects.

1507
01:39:06,400 --> 01:39:07,440
Okay, we have 10 minutes left.

1508
01:39:07,440 --> 01:39:09,800
I just want to see what else kind of topics we have here.

1509
01:39:09,800 --> 01:39:14,280
And looking at questions,

1510
01:39:14,280 --> 01:39:16,960
we could talk about staging and committing.

1511
01:39:16,960 --> 01:39:18,080
I'm just scrolling down here

1512
01:39:18,080 --> 01:39:20,020
and see what interesting topics.

1513
01:39:21,120 --> 01:39:23,740
How large should a commit be?

1514
01:39:23,740 --> 01:39:28,740
What, yeah, what is a good size for a commit?

1515
01:39:30,300 --> 01:39:31,140
Yeah.

1516
01:39:32,060 --> 01:39:33,820
Maybe let's start with this one.

1517
01:39:33,820 --> 01:39:37,220
My experience is that a commit shouldn't be large

1518
01:39:37,220 --> 01:39:41,480
than it's trouble, so that small commits are best.

1519
01:39:42,340 --> 01:39:44,700
Yeah, so it's probably better to do many small commits

1520
01:39:44,700 --> 01:39:48,060
than one commit every few weeks.

1521
01:39:49,460 --> 01:39:52,140
Because if you do many smaller commits,

1522
01:39:52,140 --> 01:39:56,140
You can always recombine them later.

1523
01:39:56,140 --> 01:40:00,140
It is easier to combine than to split.

1524
01:40:00,140 --> 01:40:04,140
If later you find out that some commit was a mistake

1525
01:40:04,140 --> 01:40:08,140
it can be easier to undo it when it was small

1526
01:40:08,140 --> 01:40:12,140
rather than when it was one commit that touched everything.

1527
01:40:12,140 --> 01:40:16,140
What I

1528
01:40:16,140 --> 01:40:20,140
try to do, but I'm not always successful

1529
01:40:20,140 --> 01:40:24,140
is that I try to not put unrelated changes to the same commit

1530
01:40:24,140 --> 01:40:28,140
and to the same pull request because that will

1531
01:40:28,140 --> 01:40:32,140
it will simplify the review for the other person. It will also simplify

1532
01:40:32,140 --> 01:40:36,140
the undoing if we later realize that was a bad idea

1533
01:40:36,140 --> 01:40:40,140
then I can undo the bad idea instead of

1534
01:40:40,140 --> 01:40:44,140
at the same time undoing the good idea that was packaged into the same commit.

1535
01:40:44,140 --> 01:40:48,140
Right, yeah.

1536
01:40:48,140 --> 01:40:56,540
Maybe in terms of time, often I try to make a commit at the end of the day, approximately.

1537
01:40:56,540 --> 01:41:01,200
One per day, a few per day, if all you do is coding.

1538
01:41:01,200 --> 01:41:03,780
So a unit that you would not like to lose.

1539
01:41:03,780 --> 01:41:04,780
Yeah.

1540
01:41:04,780 --> 01:41:10,820
But, I mean, does that imply you tend to do one thing per day?

1541
01:41:10,820 --> 01:41:11,820
Correct.

1542
01:41:11,820 --> 01:41:17,260
So then we need more commits, because often I actually jump from thing to thing.

1543
01:41:17,260 --> 01:41:19,700
I wish I would just work on one day and one thing the other day.

1544
01:41:19,700 --> 01:41:22,140
Yeah.

1545
01:41:22,140 --> 01:41:24,140
I mean, like I've said, I think it really

1546
01:41:24,140 --> 01:41:26,740
depends on the project size and what it is.

1547
01:41:26,740 --> 01:41:31,020
So we're teaching you some of the basics here.

1548
01:41:31,020 --> 01:41:33,820
But how to apply it to your own work,

1549
01:41:33,820 --> 01:41:39,860
well, that is something that you will figure out.

1550
01:41:39,860 --> 01:41:42,900
And I mean, it's OK to do it wrong also.

1551
01:41:42,900 --> 01:41:45,580
We talk so much about the right way to do things.

1552
01:41:45,580 --> 01:41:52,980
But doing anything and then seeing what works or doesn't work is even better.

1553
01:41:53,180 --> 01:42:00,020
I mean, that's how I've learned most of what I know by doing it wrong many times.

1554
01:42:00,220 --> 01:42:02,460
So, yeah, I fully agree.

1555
01:42:02,660 --> 01:42:05,540
I want to have a quick peek here at the what to avoid.

1556
01:42:05,740 --> 01:42:07,820
Maybe there's an interesting topic that we can talk about.

1557
01:42:08,020 --> 01:42:10,100
Yeah, that's good.

1558
01:42:10,300 --> 01:42:12,740
There is a lot of text, but

1559
01:42:12,740 --> 01:42:21,740
I think this is something that well many, many will identify with I, the code is never finished it's always unfinished.

1560
01:42:21,740 --> 01:42:26,740
It's, it's ugly. It's okay.

1561
01:42:26,740 --> 01:42:29,740
Just commit, share it, nobody will judge.

1562
01:42:29,740 --> 01:42:33,740
Don't postpone it just because it's unfinished.

1563
01:42:33,740 --> 01:42:53,740
I can give some metaphors. So when we've been hiring people, I've had to look at a lot of repositories, and I'd say, okay, so this is like practical advice. If you're thinking, oh, I don't want to share ugly looking stuff because people will judge me.

1564
01:42:53,740 --> 01:42:59,380
Well, when you're hiring people, you're doing judging.

1565
01:42:59,380 --> 01:43:06,380
And I would rather see a few, or maybe one really good project that shows this person

1566
01:43:06,380 --> 01:43:15,660
knows how to do things well, and then a lot of small, ugly projects, meaning, oh yeah,

1567
01:43:15,660 --> 01:43:20,780
like they're just, like they're not just doing, they're not too overly perfect, they're able

1568
01:43:20,780 --> 01:43:30,580
to actually track stuff and keep it, you know, that they understand that, wait, how would

1569
01:43:30,580 --> 01:43:37,960
I say this? So they're not just showing their perfect thing, but they believe in openness

1570
01:43:37,960 --> 01:43:48,860
for everything. And they know that it's better to share. And also, I mean, if you look at

1571
01:43:48,860 --> 01:43:53,980
history and it starts ugly and gets better, that's completely normal also.

1572
01:43:56,940 --> 01:44:03,420
And I would never judge anyone for that. I would actually, well, I would judge them positively

1573
01:44:03,420 --> 01:44:10,780
by thinking, okay, this person knows to start recording early, as opposed to something that

1574
01:44:10,780 --> 01:44:19,620
has one commit that's the final product, and then nothing else. I mean, I'm not relying

1575
01:44:19,620 --> 01:44:21,100
on that for anything.

1576
01:44:21,100 --> 01:44:31,300
That's a great point. I wouldn't mind at all ugly commits or ugly code. One thing I would

1577
01:44:31,300 --> 01:44:38,860
maybe look at is how do people communicate? So how do they review other people's code?

1578
01:44:38,860 --> 01:44:44,700
Is it done in a nice friendly way, in a constructive way?

1579
01:44:44,700 --> 01:44:51,520
So there is a lot of communication in issues and in pull requests and in pull request discussion.

1580
01:44:51,520 --> 01:44:55,340
And these days we often work collaboratively.

1581
01:44:55,340 --> 01:44:56,980
Yeah.

1582
01:44:56,980 --> 01:45:04,340
There's these last two good questions, or last two questions that are good.

1583
01:45:04,340 --> 01:45:08,100
Is there a way to do automatic git commit to avoid losing work?

1584
01:45:08,100 --> 01:45:14,780
So once I saw some sort of thing that it would hook into an editor and on every save it would

1585
01:45:14,780 --> 01:45:20,860
do another git commit on like a work in progress branch or something like that.

1586
01:45:20,860 --> 01:45:31,400
I haven't used that or seen it again, but if you want you can probably do similar things.

1587
01:45:31,400 --> 01:45:37,060
Maybe another way to do it is you can run git add more often.

1588
01:45:37,060 --> 01:45:45,560
So once you do get add, it stores a copy and it's hard to figure out where it's storing,

1589
01:45:45,560 --> 01:45:54,780
but it is actually stored somewhere.

1590
01:45:54,780 --> 01:45:59,540
And with enough work, you can probably find it again if you happen to completely mess things

1591
01:45:59,540 --> 01:46:00,540
up.

1592
01:46:00,540 --> 01:46:08,540
Indeed, that's, that's how I often work. I use the staging, I stage often. Anytime it's

1593
01:46:08,540 --> 01:46:14,140
an improvement, I stage it. But when I feel it is an improvement, but not yet a commit,

1594
01:46:14,140 --> 01:46:20,020
stage, stage, stage, and then a commit, I don't use anything automatic. Maybe now with

1595
01:46:20,020 --> 01:46:24,820
AI, it will soon do these things for us. We will just, well, we will not even write code.

1596
01:46:24,820 --> 01:46:26,660
it will write the code and do the commits,

1597
01:46:26,660 --> 01:46:31,660
but so I don't use any automatic committing.

1598
01:46:33,140 --> 01:46:34,900
How about the joining commits?

1599
01:46:34,900 --> 01:46:37,380
We have an episode on the more advanced topics,

1600
01:46:37,380 --> 01:46:40,460
which we will not go through,

1601
01:46:40,460 --> 01:46:42,220
but I want to show you what it is.

1602
01:46:44,180 --> 01:46:46,180
So here the optional episodes can,

1603
01:46:46,180 --> 01:46:47,020
if you're interested,

1604
01:46:47,020 --> 01:46:50,220
have a look at what is this thing staging area

1605
01:46:50,220 --> 01:46:53,820
and how can you undo recover from situations?

1606
01:46:53,820 --> 01:47:03,780
And then you will learn about git reset where you can do lots of these things like moving

1607
01:47:03,780 --> 01:47:10,340
commits around, reordering them, joining them, moving them to a different branch.

1608
01:47:10,340 --> 01:47:14,340
So all of this is possible.

1609
01:47:14,340 --> 01:47:17,860
We should also not forget to copy the feedback form into our notes.

1610
01:47:17,860 --> 01:47:18,860
Yes.

1611
01:47:18,860 --> 01:47:20,780
I'm just trying to find it.

1612
01:47:20,780 --> 01:47:22,160
We have it somewhere.

1613
01:47:25,620 --> 01:47:27,380
Okay, I almost have it.

1614
01:47:27,380 --> 01:47:31,820
I will copy it in, but let's continue the discussion.

1615
01:47:31,820 --> 01:47:33,860
We still have five minutes, but I want,

1616
01:47:33,860 --> 01:47:35,300
oh, somebody's on it, good.

1617
01:47:38,500 --> 01:47:40,060
Here it is.

1618
01:47:40,060 --> 01:47:44,500
So tell us what went well today, what didn't go well today,

1619
01:47:44,500 --> 01:47:46,380
what we need to improve for next time,

1620
01:47:46,380 --> 01:47:50,380
And whatever we can fix already for tomorrow, we will.

1621
01:47:50,380 --> 01:47:54,380
Did you all enjoy

1622
01:47:54,380 --> 01:47:58,380
this RStudio track? So we did it

1623
01:47:58,380 --> 01:48:02,380
relatively late at night, last night.

1624
01:48:02,380 --> 01:48:06,380
Based on feedback and seeing

1625
01:48:06,380 --> 01:48:10,380
how many people it would help.

1626
01:48:10,380 --> 01:48:14,380
So we can't make all of these different tracks perfect,

1627
01:48:14,380 --> 01:48:25,140
perfect, but is it worth it?

1628
01:48:25,140 --> 01:48:30,780
So I'm adding a new poll there, helpful.

1629
01:48:30,780 --> 01:48:31,780
And it is work in progress.

1630
01:48:31,780 --> 01:48:38,180
I mean, you notice that some things are not totally smooth yet because some of the changes

1631
01:48:38,180 --> 01:48:42,100
were last minute.

1632
01:48:42,100 --> 01:48:43,580
So if you look at tomorrow's exercises,

1633
01:48:43,580 --> 01:48:44,540
there is still work to be done.

1634
01:48:44,540 --> 01:48:47,460
So this afternoon we will add some screenshots

1635
01:48:47,460 --> 01:48:51,660
and solutions, but we have really interesting

1636
01:48:52,820 --> 01:48:54,700
and real life exercises for tomorrow

1637
01:48:54,700 --> 01:48:56,000
where we will collaborate.

1638
01:48:57,580 --> 01:49:02,580
Those of you who don't have an exercise team

1639
01:49:02,660 --> 01:49:05,320
or are not in a exercise room.

1640
01:49:05,320 --> 01:49:08,260
So those of you who participate here on your own,

1641
01:49:08,260 --> 01:49:09,580
you can still collaborate with us.

1642
01:49:09,580 --> 01:49:11,480
So hopefully you got an email from me.

1643
01:49:12,100 --> 01:49:17,220
If you signed up today, I will hopefully send it later.

1644
01:49:17,220 --> 01:49:22,100
And then there are instructions on how you can join, because we will need to add you

1645
01:49:22,100 --> 01:49:29,380
to an exercise repository so that we can all collaborate inside it.

1646
01:49:29,380 --> 01:49:33,860
Those of you who are part of a group and part of a team, I mean, lucky you, thanks also

1647
01:49:33,860 --> 01:49:42,060
to the team leaders and to those who help the local rooms and groups to help out, especially

1648
01:49:42,060 --> 01:49:48,860
because we try here really new material. This is also not so easy for all the team leaders

1649
01:49:48,860 --> 01:49:54,660
and helpers. It's really appreciated.

1650
01:49:54,660 --> 01:49:59,300
Should we write news for day two and what people need to do to prepare for day three

1651
01:49:59,300 --> 01:50:04,820
already before we go. So I listed, we did the things which are listed on the schedule.

1652
01:50:05,700 --> 01:50:13,780
We added links to the specific episodes we covered. Tomorrow we do a different lesson,

1653
01:50:13,780 --> 01:50:18,340
it's called Git Collaborative. It's basically the same kind of things, but it's really all

1654
01:50:18,340 --> 01:50:26,740
about working on these bigger projects together. So basically how to, a lot about pull requests

1655
01:50:26,740 --> 01:50:33,460
and central repositories and reviewing code and stuff like that. Is there any extra preparation

1656
01:50:33,460 --> 01:50:41,940
for that? Can it all be done through the GitHub web interface or the other methods?

1657
01:50:43,460 --> 01:50:50,980
Yeah, it will build on. Tomorrow we'll build on today and on yesterday. So for those who want to

1658
01:50:50,980 --> 01:50:53,900
to work on the command line,

1659
01:50:53,900 --> 01:50:58,060
we assume that you are able to, to clone,

1660
01:50:58,060 --> 01:50:59,500
and you are able to push.

1661
01:50:59,500 --> 01:51:02,560
And today we practice these two things.

1662
01:51:02,560 --> 01:51:05,500
So in other words, for those on the command line,

1663
01:51:05,500 --> 01:51:10,000
we hope that either the SSH protocol

1664
01:51:10,000 --> 01:51:12,560
or the Git credential manager is working.

1665
01:51:15,340 --> 01:51:19,220
It will be possible to do everything tomorrow only on GitHub.

1666
01:51:19,220 --> 01:51:22,500
it will be also possible and relatively easy

1667
01:51:22,500 --> 01:51:23,900
to follow on VS Code.

1668
01:51:25,540 --> 01:51:27,420
If you are already curious what the exercises are,

1669
01:51:27,420 --> 01:51:29,980
you can find them on top of this page.

1670
01:51:29,980 --> 01:51:32,140
We have a list of exercises you can browse,

1671
01:51:32,140 --> 01:51:34,300
but you will see that there is a lot of details missing,

1672
01:51:34,300 --> 01:51:35,960
but the big picture is there.

1673
01:51:38,860 --> 01:51:40,420
A list of exercises.

1674
01:51:40,420 --> 01:51:43,320
So tomorrow we will collaborate within the same repository,

1675
01:51:46,060 --> 01:51:48,180
but then we will also learn how to contribute changes

1676
01:51:48,180 --> 01:51:51,080
to repositories that belong to other people.

1677
01:51:51,080 --> 01:51:52,480
What, how to do it technically,

1678
01:51:52,480 --> 01:51:55,380
but also how to do it, like, what is the etiquette there?

1679
01:51:56,680 --> 01:51:58,340
And then we practice code review.

1680
01:51:59,620 --> 01:52:01,880
How do, how can you review somebody else's code?

1681
01:52:01,880 --> 01:52:04,280
How can you give suggestions to changes?

1682
01:52:04,280 --> 01:52:06,760
And how can we then implement these changes

1683
01:52:07,660 --> 01:52:11,840
without having to open a new pull request?

1684
01:52:11,840 --> 01:52:14,720
We will practice this inside the same pull request.

1685
01:52:14,720 --> 01:52:15,760
We will have a discussion

1686
01:52:15,760 --> 01:52:18,520
and we will have these suggestions and improvements.

1687
01:52:18,520 --> 01:52:20,160
And it's a really important technique,

1688
01:52:20,160 --> 01:52:22,160
whether you are on GitHub or on GitLab.

1689
01:52:25,280 --> 01:52:26,120
Yeah.

1690
01:52:27,280 --> 01:52:29,880
And we really have designed this where,

1691
01:52:29,880 --> 01:52:32,960
like our idea, like we need to teach the local things,

1692
01:52:32,960 --> 01:52:35,580
VS code, command line, and so on.

1693
01:52:35,580 --> 01:52:39,360
So our idea was we start with day one GitHub,

1694
01:52:39,360 --> 01:52:42,560
and then we start showing the local things other days.

1695
01:52:42,560 --> 01:52:49,560
And, even though we have these other paths there, unfortunately we can't support everything

1696
01:52:49,560 --> 01:52:52,320
as well.

1697
01:52:52,320 --> 01:53:01,680
But we hope that we give a base where you can go to other things and follow up yourself.

1698
01:53:01,680 --> 01:53:09,040
Yeah, I'm really looking forward to it.

1699
01:53:09,040 --> 01:53:11,880
So I think that's all from me.

1700
01:53:11,880 --> 01:53:18,240
How about a lot, a big thank you to [Name] and [Name] and everybody else helping.

1701
01:53:18,240 --> 01:53:19,240
Yes.

1702
01:53:19,240 --> 01:53:21,480
Any final words for me from you two?

1703
01:53:21,480 --> 01:53:27,920
Not really, I guess it's time we should get going, [Name].

1704
01:53:27,920 --> 01:53:28,920
Yeah.

1705
01:53:28,920 --> 01:53:30,760
Nothing more to add, really.

1706
01:53:30,760 --> 01:53:34,000
I think we're covered, that was all good.

1707
01:53:34,000 --> 01:53:35,000
Yeah.

1708
01:53:35,000 --> 01:53:36,000
Good.

1709
01:53:36,000 --> 01:53:37,000
Thanks, everybody.

1710
01:53:37,000 --> 01:53:38,000
Really looking forward to tomorrow.

1711
01:53:38,000 --> 01:53:39,000
It will be exciting.

1712
01:53:39,000 --> 01:53:41,600
And yeah, exciting lesson coming up.

1713
01:53:41,600 --> 01:53:44,600
Yes. Thanks so much.

1714
01:53:44,600 --> 01:53:47,600
Okay. Bye.

1715
01:53:47,600 --> 01:53:48,600
Bye.

1716
01:53:48,600 --> 01:53:49,600
Bye.

