1
00:00:00,000 --> 00:00:05,320
Thanks. I will take over the screen share.

2
00:00:07,320 --> 00:00:11,320
Oops, where did the window go?

3
00:00:11,320 --> 00:00:27,320
We have already put into a question or three questions about motivation and what our kind of wish list or what we think or what you essentially you think about documentation, what should be in there?

4
00:00:27,320 --> 00:00:38,760
So, I think it's kind of expected that the best documented projects people have seen

5
00:00:38,760 --> 00:00:41,280
are really big projects.

6
00:00:41,280 --> 00:00:46,240
So they are things where you don't want to go through the source code and try to understand

7
00:00:46,240 --> 00:00:48,680
what it's doing because it's so big.

8
00:00:48,680 --> 00:00:57,640
Also, they are aimed at an audience who doesn't necessarily need to know all the details of the

9
00:00:57,640 --> 00:01:08,920
thing that the package is doing. You just need one small piece. In Scikit-learn, you usually

10
00:01:08,920 --> 00:01:12,200
don't use everything that Scikit-learn has because it has a lot of things.

11
00:01:12,200 --> 00:01:22,600
things. So PyTorch is really big. Scikit-learn is really big. There's NumPy, SciPy. Pandas,

12
00:01:22,600 --> 00:01:29,520
okay, yeah, Pandas is a bit â€“ I often have to go and actually find stuff in the documentation

13
00:01:29,520 --> 00:01:39,080
to use Pandas, and it often helps. But that's true. I think Pandas can be a bit complicated.

14
00:01:39,080 --> 00:01:40,920
I'm not actually sure about FlutterDust.

15
00:01:40,920 --> 00:01:42,320
Do you know that?

16
00:01:42,320 --> 00:01:44,320
No.

17
00:01:44,320 --> 00:01:47,520
And then, yeah, Tidyverse is really good.

18
00:01:47,520 --> 00:01:48,760
Yeah, sorry?

19
00:01:48,760 --> 00:01:55,680
Tidyverse is good at enforcing good documentation.

20
00:01:55,680 --> 00:01:57,560
In my experience, it's not necessarily

21
00:01:57,560 --> 00:02:03,240
that big project means good documentation, actually.

22
00:02:03,240 --> 00:02:07,760
It's more active use by a lot of people,

23
00:02:07,760 --> 00:02:16,960
which are activated by a lot of interested people who then also re-contribute a bit,

24
00:02:16,960 --> 00:02:21,920
doesn't necessarily make all big projects having a good documentation.

25
00:02:22,480 --> 00:02:24,160
Yeah, that's a good point.

26
00:02:24,160 --> 00:02:25,040
Especially for details.

27
00:02:26,000 --> 00:02:35,120
So, if you've ever actually, so that there is a built-in documentation thing for the new

28
00:02:35,120 --> 00:02:44,400
operating system. All of these things you can run in Linux, for example, the commands like ls and

29
00:02:45,440 --> 00:02:53,680
cd and so on. It's kind of a running joke that those are almost unreadable,

30
00:02:54,880 --> 00:03:01,440
but they do have all the details. Being a really big project doesn't guarantee that

31
00:03:01,440 --> 00:03:07,520
the documentation is especially good. Although it kind of does guarantee that there's a lot of it

32
00:03:07,520 --> 00:03:13,760
available. So someone might write a tutorial who's not even involved in writing the code.

33
00:03:19,120 --> 00:03:25,040
I guess my point is small things used by a small number of people don't necessarily need

34
00:03:25,040 --> 00:03:31,840
so much documentation and you kind of have to decide what level of documentation is appropriate.

35
00:03:31,840 --> 00:03:37,920
It depends on who's going to use it and it depends on how much time you have

36
00:03:38,880 --> 00:03:44,640
and a lot of other factors. Well at the same time a small project that has

37
00:03:46,000 --> 00:03:52,480
little documentation can still be well documented. Yeah I mean it's a small project it doesn't need

38
00:03:52,480 --> 00:03:58,480
it doesn't have as much the document because it's also not that complex it's easier to just grasp

39
00:03:58,480 --> 00:04:06,080
what it's actually doing okay but yeah i don't know what flutter does but if you wrote down

40
00:04:06,080 --> 00:04:10,080
something that you think has really good documentation then there's the question

41
00:04:11,440 --> 00:04:17,680
what actually makes the documentation useful what makes it good so that's the second question here

42
00:04:17,680 --> 00:04:28,480
of course, what makes it important? Well, actually not a huge number of answers. Can

43
00:04:28,480 --> 00:04:38,800
we think of some more? Well, okay. It's important for at least anything that's more complex

44
00:04:38,800 --> 00:04:46,720
than a few simple functions to be actually useful to someone else. If you don't have

45
00:04:46,720 --> 00:04:51,760
any documentation and everyone needs to read through your code to understand what it actually

46
00:04:51,760 --> 00:04:57,120
does, then it's very likely that people just won't use it. They will have a look at, okay,

47
00:04:57,120 --> 00:05:03,280
there's some code, I don't care. I have no idea what it does. I don't have the time to go through

48
00:05:03,280 --> 00:05:10,080
the whole source code. And this applies to you yourself in the future. So yeah, if the future

49
00:05:10,080 --> 00:05:16,640
is important, yes, that's a good answer. So if you go back to your code, even if it's a really

50
00:05:16,640 --> 00:05:24,640
short simple code that has only three functions or three main functions. When you

51
00:05:25,440 --> 00:05:30,160
come back to it in three years you're not going to remember what those function names are and

52
00:05:30,160 --> 00:05:36,400
it's much nicer if they're mentioned in the documentation somewhere you can quickly see

53
00:05:37,200 --> 00:05:42,160
so rather than you have to go digging through the code to figure out what you need to do or

54
00:05:42,160 --> 00:05:46,400
how do you need to call the functions so it is also useful for yourself

55
00:05:48,800 --> 00:05:54,240
okay so what is good documentation how would you describe useful documentation

56
00:05:55,040 --> 00:06:01,600
um it helps you understand the code it gives you examples on how the code is being used

57
00:06:04,160 --> 00:06:10,240
so that and yeah yeah okay so a really good point so it helps someone else use the code in without

58
00:06:10,240 --> 00:06:16,400
them having to ask the creator. So if it's code that you wrote, then people don't have to always

59
00:06:16,400 --> 00:06:24,880
come and ask you. You can offload some of that work to the documentation. Of course, you can

60
00:06:24,880 --> 00:06:28,960
never write perfect documentation, so there will always be some questions and some things will

61
00:06:28,960 --> 00:06:36,480
just not be correct. But it's much better than having to always show people exactly how to use

62
00:06:36,480 --> 00:06:43,200
it for everything. That second point to me is, well, clear engaging not too long. Not too long

63
00:06:43,200 --> 00:06:51,680
is a very relative thing, but I think that mostly applies to the initial readme, which is only

64
00:06:51,680 --> 00:06:58,400
some part of the documentation. Yes, you shouldn't put useless information or repetitive

65
00:06:58,400 --> 00:07:06,240
information into your documentation, but I'm not sure if I would agree with the not too long

66
00:07:06,240 --> 00:07:11,600
in general. Well, too long is always... You can always make something too long.

67
00:07:16,640 --> 00:07:22,000
Yeah, that's a good question. Can you add information that's actually relevant

68
00:07:22,640 --> 00:07:30,000
and make it too long? I think it's possible. At some point, it's easier to just read the code.

69
00:07:30,000 --> 00:07:35,000
So, at some point, it's no longer useful.

70
00:07:35,000 --> 00:07:40,840
But also, it is important to structure it so that there is this, like, the first page

71
00:07:40,840 --> 00:07:47,800
you see something relatively short that tells you what the software does.

72
00:07:47,800 --> 00:07:49,160
Something like a README.

73
00:07:49,160 --> 00:07:52,840
And then there are tutorials that tell you how to do the things that the software is

74
00:07:52,840 --> 00:07:54,720
designed to do.

75
00:07:54,720 --> 00:08:02,960
And then for each user-facing function, each function that a user could need, there's some

76
00:08:02,960 --> 00:08:06,160
description of how to use it and what it does.

77
00:08:06,160 --> 00:08:11,720
I would rephrase that, for every function that you intend to use it to use.

78
00:08:11,720 --> 00:08:14,600
Right, yes.

79
00:08:14,600 --> 00:08:19,720
It's also good if you want to, if you have the time, it's very good to have documentation

80
00:08:19,720 --> 00:08:25,720
for all the functions that you never expect any user to use because of course someone will be

81
00:08:25,720 --> 00:08:31,720
developing the code. Might be you in three years or might be someone else.

82
00:08:31,720 --> 00:08:36,840
So it is good to document everything at least a little bit.

83
00:08:39,560 --> 00:08:43,720
I think the third point is also quite good with having examples that actually help you to get

84
00:08:43,720 --> 00:08:53,960
started. So, yeah, which is the tutorials that you mentioned is and the points here generally are

85
00:08:54,600 --> 00:09:03,800
good. Yeah, I think. And yeah, the last edit point is actually something

86
00:09:05,480 --> 00:09:12,120
easy to navigate. Yes, easy way to find what you're actually looking for, which is really

87
00:09:12,120 --> 00:09:18,360
difficult. That's probably one of the most difficult bits in my opinion because a good

88
00:09:18,360 --> 00:09:27,160
structure is not easily found. And if your code is growing then it's very likely to get messy

89
00:09:27,160 --> 00:09:36,280
structure-wise at some point. So how do you motivate your colleagues to contribute to the

90
00:09:36,280 --> 00:09:42,920
documentation. I mean, the first point is they explicitly say it's meant as a joke,

91
00:09:42,920 --> 00:09:47,800
but I'm going to take it seriously because the best way to motivate someone, especially like

92
00:09:47,800 --> 00:09:52,760
if you're developing something as a job, if it's part of your job to develop software for research,

93
00:09:53,720 --> 00:09:58,520
actually paying people for spending time on it would be a good idea. It's not

94
00:09:59,720 --> 00:10:04,600
something we always do very well, but it is actually a very good way of motivating people.

95
00:10:04,600 --> 00:10:10,600
actually pay them for their time. But yeah, there are other ways as well.

96
00:10:14,200 --> 00:10:21,240
So, yeah, explaining why it is important, explaining why it helps them in the future

97
00:10:21,240 --> 00:10:26,600
and helps get their work cited, so it helps other people use the code. And for researchers,

98
00:10:26,600 --> 00:10:34,920
citations are the kind of important so if other people can use your code then they can also

99
00:10:34,920 --> 00:10:42,760
contribute to your field and help you in your career as well. And what I think is important

100
00:10:44,120 --> 00:10:52,040
both in an academic or non-academic setting if you have undocumented code it takes a lot more

101
00:10:52,040 --> 00:10:54,560
more time for someone else to get into that code.

102
00:10:54,560 --> 00:10:55,240
Yeah.

103
00:10:55,240 --> 00:10:57,440
And might even be impossible.

104
00:10:57,440 --> 00:10:58,440
Yeah.

105
00:10:58,440 --> 00:11:05,160
So just documenting saves money, if you want it like that.

106
00:11:05,160 --> 00:11:10,880
Or in the academic instance, heaps knowledge.

107
00:11:10,880 --> 00:11:13,760
It saves you time, and it saves your research group

108
00:11:13,760 --> 00:11:15,440
time in the future.

109
00:11:15,440 --> 00:11:17,400
There are so many non-doc, there's

110
00:11:17,400 --> 00:11:20,800
so much non-documented code around

111
00:11:20,800 --> 00:11:28,320
that is essentially, okay, well, this was done by a PhD master student, whatever, last year,

112
00:11:29,280 --> 00:11:35,280
and he's gone. If you're lucky, he answers to emails. If you're unlucky, he doesn't,

113
00:11:36,240 --> 00:11:45,200
at which point it's, I have no idea how this works, and I can't understand the code, so this

114
00:11:45,200 --> 00:11:53,320
is dead upon the person leaving the group and might even have been dead before.

115
00:11:53,320 --> 00:11:57,900
That last point being added is true, very important.

116
00:11:57,900 --> 00:12:05,200
So we have talked about how to cite software and how to make sure that the correct people

117
00:12:05,200 --> 00:12:07,800
get credit for software.

118
00:12:07,800 --> 00:12:09,600
Documentation is part of the software.

119
00:12:09,600 --> 00:12:14,880
It is an important part of the job of actually doing the research and getting to a result

120
00:12:14,880 --> 00:12:17,880
and publishing the software and publishing the paper and all of that.

121
00:12:18,080 --> 00:12:23,680
So the person, someone contributing to the documentation really should be looked

122
00:12:23,880 --> 00:12:31,080
at, someone who's actually spending time contributing to the research project.

123
00:12:31,720 --> 00:12:36,280
At least if we are at the point where we can actually talk about citing software,

124
00:12:36,480 --> 00:12:38,400
then definitely someone who writes

125
00:12:38,600 --> 00:12:43,960
documentation should be included in the authors for that software.

126
00:12:43,960 --> 00:12:55,840
Okay, I think that is quite a good piece of information and let's head to what should

127
00:12:55,840 --> 00:12:59,480
documentation actually contain.

128
00:12:59,480 --> 00:13:09,620
So we basically covered everything in the first section, but I just want to quickly

129
00:13:09,620 --> 00:13:12,020
show what we're going to do in this lesson.

130
00:13:12,020 --> 00:13:14,780
So in the first half, essentially,

131
00:13:14,780 --> 00:13:18,420
will be discussions about documentation

132
00:13:18,420 --> 00:13:21,020
and then how to write good README files.

133
00:13:21,020 --> 00:13:23,860
And then in the second half, we'll

134
00:13:23,860 --> 00:13:28,340
go through a demonstration with a slightly more

135
00:13:28,340 --> 00:13:31,220
complicated documentation than README files

136
00:13:31,220 --> 00:13:37,620
and how to get that viewable online,

137
00:13:37,620 --> 00:13:41,420
how to deploy it on a website.

138
00:13:41,420 --> 00:13:47,580
So let's go to the motivation section and feel free to answer of course in the notes

139
00:13:48,220 --> 00:13:53,500
even though I'm not sharing them right now. So why documenting code is essentially done.

140
00:13:59,740 --> 00:14:05,020
Yeah so let's talk about that. So yeah what should a good documentation contain?

141
00:14:05,020 --> 00:14:11,460
Should we, let's wait for a moment before we start throwing around ideas, give people

142
00:14:11,460 --> 00:14:12,460
some time to talk.

143
00:14:12,460 --> 00:14:17,980
We can already collect what we had further up, which is how would you describe a useful

144
00:14:17,980 --> 00:14:18,980
documentation?

145
00:14:18,980 --> 00:14:19,980
Sure.

146
00:14:19,980 --> 00:14:45,780
Yeah, so there are some points that go to that section, so okay, so the arrangement

147
00:14:45,780 --> 00:14:46,780
should be boring.

148
00:14:46,780 --> 00:14:49,220
So yeah, it should contain the things

149
00:14:49,220 --> 00:14:50,720
that you expect it to contain,

150
00:14:51,740 --> 00:14:53,700
which is installation instructions,

151
00:14:53,700 --> 00:14:56,180
some quick start, and how to,

152
00:14:56,180 --> 00:14:59,100
so these are tutorials on how to do a specific thing

153
00:14:59,100 --> 00:15:01,100
the code is intended to do,

154
00:15:01,100 --> 00:15:03,080
and a reference, which means,

155
00:15:05,640 --> 00:15:06,640
I guess we'll get back to it,

156
00:15:06,640 --> 00:15:10,180
but some documentation for almost everything in the code,

157
00:15:10,180 --> 00:15:12,120
but in a structured way,

158
00:15:12,120 --> 00:15:14,960
so that you can find what you're looking for.

159
00:20:16,780 --> 00:20:21,780
.

160
00:20:21,780 --> 00:20:26,780
.

161
00:20:26,780 --> 00:20:31,780
.

162
00:20:31,780 --> 00:20:36,780
.

163
00:20:36,780 --> 00:20:41,780
.

164
00:20:41,780 --> 00:20:49,860
where to report bugs, where to report issues or where to report or where to discuss about

165
00:20:49,860 --> 00:20:54,260
features that you would like to add or would like someone to add to the software

166
00:20:55,460 --> 00:20:58,420
and then in general how contributions work.

167
00:20:58,420 --> 00:21:13,380
okay so here's our checklist it's mostly the same things so you would want to have in the

168
00:21:13,380 --> 00:21:19,940
documentation you would want to mention the authors of the software the license purpose

169
00:21:19,940 --> 00:21:27,300
is something already mentioned how it should be cited it's useful to have that's also in

170
00:21:27,300 --> 00:21:36,420
the citations file of course and then some examples where you can or tutorials how to get started

171
00:21:37,300 --> 00:21:42,660
dependencies um installation instructions is important

172
00:21:45,380 --> 00:21:52,180
the reference documentation is already mentioned um yeah and how do you want people to contact you

173
00:21:52,180 --> 00:21:57,780
and some frequently asked questions section this is roughly almost everything was was there in the

174
00:21:57,780 --> 00:22:08,980
answers so that's a good thinking we've roughly have the same ideas okay um we do have um in the

175
00:22:08,980 --> 00:22:18,580
next step kind of a list of popular tools and solutions let's go there um we will go over

176
00:22:18,580 --> 00:22:27,380
some of them in more detail and I think the only things we really want to mention here for these

177
00:22:27,380 --> 00:22:34,260
tools and solutions are the formats that we commonly use to create documentation or

178
00:22:35,540 --> 00:22:46,500
which is mainly markdown and restructured text. Okay right so yeah okay we have a whole section

179
00:22:46,500 --> 00:22:52,820
on in-code documentation, which basically means the documentation that is embedded in the code

180
00:22:52,820 --> 00:23:02,180
itself. And then I think in the next section we'll have readme files, so we'll talk more about that.

181
00:23:03,620 --> 00:23:09,620
So yeah, Markdown you already know because the collaborative document is in Markdown. I was

182
00:23:09,620 --> 00:23:14,620
I was going to just open it and show, but it's, you can,

183
00:23:15,220 --> 00:23:17,580
if you're looking at it, you can see it.

184
00:23:17,580 --> 00:23:18,980
So this is Markdown.

185
00:23:22,820 --> 00:23:25,780
Yeah, and the restructured text is another option.

186
00:23:25,780 --> 00:23:28,140
So can you, do you want to say more about

187
00:23:28,140 --> 00:23:30,940
why use either one of them?

188
00:23:30,940 --> 00:23:33,660
Well, the one biggest reason is that

189
00:23:33,660 --> 00:23:36,460
it's a relatively simple format.

190
00:23:36,460 --> 00:23:38,580
It's all text-based.

191
00:23:38,580 --> 00:23:41,980
So you, well, yeah, it's all text-based.

192
00:23:41,980 --> 00:23:45,140
So you can easily put it into version control

193
00:23:45,140 --> 00:23:46,580
and see differences.

194
00:23:46,580 --> 00:23:48,580
So it's not a binary format

195
00:23:48,580 --> 00:23:50,780
where you get a big binary dump of the data,

196
00:23:51,660 --> 00:23:55,060
but you can actually follow what changes were made.

197
00:23:57,660 --> 00:24:01,940
It has most features that you need

198
00:24:01,940 --> 00:24:06,940
for having a nice looking, at least online document.

199
00:24:08,580 --> 00:24:19,540
So I guess, I mean, they look a bit different, but they have roughly the same features, and

200
00:24:19,540 --> 00:24:26,660
I guess restructured text, because it is what Sphinx uses, and Sphinx is very commonly

201
00:24:26,660 --> 00:24:35,700
used to build documentation, it might have some features more, some features are there

202
00:24:35,700 --> 00:24:45,540
more by default, whereas in Markdown, you might need some expansion plugin, something like that.

203
00:24:48,500 --> 00:24:53,940
One thing is that Markdown is maybe a bit simpler. It's maybe a bit faster to learn,

204
00:24:53,940 --> 00:24:59,780
but it's not a big difference. It's a very small difference. There's many flavors of Markdown,

205
00:24:59,780 --> 00:25:09,620
unfortunately so some syntax that you use on say github readme files might not work in a different

206
00:25:09,620 --> 00:25:18,820
place so yeah there's um and there's multiple flavors that implement for example equations

207
00:25:18,820 --> 00:25:22,820
So they might do it slightly differently, unfortunately.

208
00:25:22,820 --> 00:25:33,820
But the standard, the text formatting things generally work the same way.

209
00:25:33,820 --> 00:25:38,820
Yeah.

210
00:25:38,820 --> 00:25:45,940
yeah so we'll in our example in the next second well not the next section but the

211
00:25:45,940 --> 00:25:54,740
the next hour we'll use a mist flavored markdown in Sphinx but yeah you can you can use

212
00:25:55,620 --> 00:26:00,180
essentially whatever you want in Sphinx and of course Sphinx is not the only thing out there.

213
00:26:02,100 --> 00:26:07,860
And there is a list of other static html site generators on this page as well so

214
00:26:07,860 --> 00:26:13,540
feel free to have a look at that. But really the main thing the main reason to use markdown or

215
00:26:14,420 --> 00:26:21,220
restructured text is that it is text so you can version control it and you can use it with your

216
00:26:21,220 --> 00:26:28,180
source code very easily. So yeah we will use Sphinx and one reason is that it is actually

217
00:26:28,180 --> 00:26:36,580
what we use to build this course website. It's very commonly used in Python projects but not

218
00:26:36,580 --> 00:26:43,700
limited, of course, to Python. It is itself, it runs in Python. There's plenty of other options

219
00:26:43,700 --> 00:26:51,860
and a lot of these use Markdown. I guess that's probably enough, probably all we want to say

220
00:26:51,860 --> 00:26:55,860
about this. Sphinx is a built-in thing for API documentation as well.

221
00:26:57,860 --> 00:27:00,420
Okay, let's head on to Encode documentation.

222
00:27:00,420 --> 00:27:13,460
Well, I mean, wikis are another popular option, but they don't exist as text in your repository.

223
00:27:13,460 --> 00:27:17,540
The advantage is that it's pretty easy to start editing it.

224
00:27:17,540 --> 00:27:22,340
You don't even really need to learn any new language, even though Markdown is an easy

225
00:27:22,340 --> 00:27:24,980
language to learn.

226
00:27:24,980 --> 00:27:29,940
But yeah, it is not connected to your repository, which is the main big downside.

227
00:27:29,940 --> 00:27:36,900
Leite is very common and that produces PDFs. The advantage is that it's very popular and

228
00:27:38,340 --> 00:27:44,260
people in certain fields know how to use it. The disadvantage is the PDF format.

229
00:27:47,060 --> 00:27:56,180
It has some restrictions on how you can use it. It is not easy to turn Leite into a website,

230
00:27:56,180 --> 00:28:00,500
although it is possible and it's not easy to automate building it although it is possible

231
00:28:01,620 --> 00:28:03,060
so it gets a bit more complex.

232
00:28:05,780 --> 00:28:12,740
Doxygen is well you can use it for it's very popular for C++ you can use it again for API

233
00:28:12,740 --> 00:28:19,540
documentation so it's kind of like Sphinx it's just another option and here's some other tools

234
00:28:19,540 --> 00:28:24,900
and they kind of seem to go with certain languages but in principle you don't need

235
00:28:24,900 --> 00:28:30,500
to pick a specific one based on what language you use. It just depends on the community.

236
00:28:34,260 --> 00:28:44,180
Okay, so in code documentation. So anything that's inside a source code file is in code

237
00:28:44,180 --> 00:28:51,860
documentation and it's probably the first thing you do maybe after the readme file.

238
00:28:51,860 --> 00:28:58,340
So when you start writing code it's good to already start including some documentation

239
00:28:58,340 --> 00:29:03,020
in the code itself.

240
00:29:03,020 --> 00:29:07,420
So let's take a look at these two comments, I wonder how much should we go back to the

241
00:29:07,420 --> 00:29:21,660
notes even, well let's say, let's paste something into the notes and, okay, let's

242
00:29:21,660 --> 00:29:41,860
Okay, it's already there, so yeah, which one is better, what is useful about either option?

243
00:29:41,860 --> 00:29:46,540
Let's just do a vote, you can write down some comments below, but yeah, vote for option

244
00:29:46,540 --> 00:30:06,540
A or B. So what makes comment B so obviously better? Maybe this was too obvious a question.

245
00:30:06,540 --> 00:30:14,780
This is a pretty obvious question. Well, comment A only says what's plainly written there already.

246
00:30:14,780 --> 00:30:22,460
no additional additional information obtainable from comment a is comment b wrong on purpose

247
00:30:23,020 --> 00:30:26,700
you record temperatures below minus 50 as measurement errors and this checks

248
00:30:27,660 --> 00:30:33,260
if it's larger yes if it's larger than it i don't actually know if it's i don't think it was on

249
00:30:33,260 --> 00:30:41,260
purpose but um yeah you're right now we check if so this one actually doesn't if you just have this

250
00:30:41,260 --> 00:30:45,420
And then this line of code, it doesn't actually

251
00:30:45,420 --> 00:30:49,180
tell you that it's wrong.

252
00:30:49,180 --> 00:30:52,140
But here, you say why you want to check

253
00:30:52,140 --> 00:30:54,100
if it's bigger than minus 50.

254
00:30:54,100 --> 00:30:55,940
And that's a measurement error.

255
00:30:55,940 --> 00:30:58,460
So yeah, now you know that the code is actually

256
00:30:58,460 --> 00:31:02,340
wrong when you just know what it's doing.

257
00:31:02,340 --> 00:31:05,260
It could well be on purpose, actually.

258
00:31:05,260 --> 00:31:07,340
So the comment definitely is useful,

259
00:31:07,340 --> 00:31:10,620
because you just spotted the bug.

260
00:31:10,620 --> 00:31:16,060
Yeah, is there anything here that we didn't mention? Not really? No. Yeah.

261
00:31:18,460 --> 00:31:24,220
Okay, yeah, and there's some situations where people often use

262
00:31:25,420 --> 00:31:34,300
comments where having version control is actually a better option. So sometimes you see people

263
00:31:34,300 --> 00:31:40,140
comment out a piece of code and, you know, for testing that's fine. You comment it out, you run

264
00:31:40,140 --> 00:31:48,540
it once and you see if what you're doing is working. But it's then not a good idea to just

265
00:31:48,540 --> 00:31:54,620
keep it lying around in the code because when you remove a piece of code and you commit it to version

266
00:31:54,620 --> 00:32:02,300
control, commit it to Git, the code exists. Before removing it, if you have committed it to Git,

267
00:32:02,300 --> 00:32:09,260
the code exists in Git and you can get it back. So there's no reason to keep it also commented

268
00:32:09,260 --> 00:32:12,220
out in the code. It just makes the code harder to read.

269
00:32:13,660 --> 00:32:17,180
And this is not even the worst thing. So if it's at least commented out,

270
00:32:18,220 --> 00:32:23,740
it's not looking as if it were a normal code, but I've also seen things like if zero.

271
00:32:25,100 --> 00:32:25,900
Okay. Yeah.

272
00:32:25,900 --> 00:32:30,140
Or if to comment stuff out.

273
00:32:31,500 --> 00:32:38,620
Yeah. I'm guilty of that, but it's usually to force. So for example, if it checks for a file

274
00:32:38,620 --> 00:32:44,540
and then creates one if it doesn't exist. I might force it to delete the existing file and overwrite

275
00:32:44,540 --> 00:32:51,740
it by doing that when developing. But yeah, just keeping that around in the code is not a good

276
00:32:51,740 --> 00:33:00,860
idea. It makes it harder to read. Another one is emulating version control.

277
00:33:00,860 --> 00:33:10,780
So a comment that tells people why you changed a piece of code is not really that useful or that's

278
00:33:10,780 --> 00:33:15,500
what version controllers is meant to do. That's why you write a comment for each comment that

279
00:33:15,500 --> 00:33:22,860
you make in Git. You tell people why you're making the change. So it's not necessary to

280
00:33:22,860 --> 00:33:29,500
make those in the code as well or in comments. I think what's important with these kind of

281
00:33:29,500 --> 00:33:35,380
of in-code comments is that they explain things.

282
00:33:35,380 --> 00:33:39,900
They don't state what's happening,

283
00:33:39,900 --> 00:33:43,140
but they explain why things are happening.

284
00:33:43,140 --> 00:33:46,420
Why are you doing these kind of things, and so on.

285
00:33:46,420 --> 00:33:54,460
And that's where these kind of inline comments become useful.

286
00:33:54,460 --> 00:33:55,540
Yeah.

287
00:33:55,540 --> 00:33:59,940
And then there's a second type of ENCODE documentation.

288
00:33:59,940 --> 00:34:05,660
Yes, so this is more about the API documentation.

289
00:34:05,660 --> 00:34:09,540
There was already a question a little bit further on and

290
00:34:09,540 --> 00:34:13,380
further up in the collaborative document about it.

291
00:34:13,380 --> 00:34:16,180
Ah, right.

292
00:34:16,180 --> 00:34:21,620
And this is, I think, the answer to that question.

293
00:34:21,620 --> 00:34:23,300
What should be in a doc string?

294
00:34:25,540 --> 00:34:31,460
In general, yeah, what's going into the function, what's coming out of the function, what does

295
00:34:31,460 --> 00:34:43,260
the function do so that whatever kind of API documentation generator you would be using

296
00:34:43,260 --> 00:34:52,860
can pass this and create a nice looking documentation out of it.

297
00:34:52,860 --> 00:35:01,740
the better structured for whatever parser you use it is the more the better it

298
00:35:03,260 --> 00:35:06,300
the better it is for the for usability in the end.

299
00:35:09,740 --> 00:35:17,020
Yeah so it is actually very common to see the comments take more space than the actual code

300
00:35:17,020 --> 00:35:24,020
Even though this is a relatively constructed example, it's also relatively realistic.

301
00:35:24,020 --> 00:35:36,020
So it is useful to tell how you're converting between Fahrenheit and Celsius in this function.

302
00:35:36,020 --> 00:35:42,020
And what is the expected input and output.

303
00:35:42,020 --> 00:35:50,700
And it is actually just having this line of code inside your code is less descriptive

304
00:35:50,700 --> 00:35:52,220
than calling this function.

305
00:35:52,220 --> 00:35:57,820
So yeah, this is a good example.

306
00:35:57,820 --> 00:36:05,860
This is how you do it in R, just occasionally change from Python for variety.

307
00:36:05,860 --> 00:36:10,860
Okay, so, yeah, so docstrings can,

308
00:36:10,960 --> 00:36:12,420
they do more than just comments

309
00:36:12,420 --> 00:36:16,580
because you can pass them out into this documentation.

310
00:36:19,940 --> 00:36:22,180
And so you can automatically generate

311
00:36:22,180 --> 00:36:25,940
this API documentation part of your documentation,

312
00:36:25,940 --> 00:36:27,140
which is very useful.

313
00:36:27,140 --> 00:36:29,900
And what that really means is

314
00:36:29,900 --> 00:36:32,620
that your API documentation lives with the code.

315
00:36:32,620 --> 00:36:35,540
It exists in the same place as the code.

316
00:36:35,540 --> 00:36:38,580
and you, well, that makes it more likely

317
00:36:38,580 --> 00:36:40,020
that you will remember to change it

318
00:36:40,020 --> 00:36:41,460
when you change the function.

319
00:36:43,060 --> 00:36:44,920
So there is no separate file

320
00:36:44,920 --> 00:36:46,980
where you have all of your API documentation.

321
00:36:46,980 --> 00:36:50,760
It is in the same file as the code, which is very useful.

322
00:36:53,160 --> 00:36:55,420
Okay, so a good docstring will describe

323
00:36:55,420 --> 00:36:56,580
what the function does.

324
00:36:57,500 --> 00:37:00,220
What are the input variables and what are the outputs?

325
00:37:01,220 --> 00:37:05,060
Format as they are the input variables, so what types?

326
00:37:05,060 --> 00:37:09,060
So essentially, how to use the function and what is it doing.

327
00:37:16,580 --> 00:37:21,460
Oh, and one very good point is that the name of the function

328
00:37:21,460 --> 00:37:24,900
is also important for documentation.

329
00:37:24,900 --> 00:37:30,340
So here, the function name tells you exactly what it's doing.

330
00:37:30,340 --> 00:37:33,700
And that is important.

331
00:37:33,700 --> 00:37:39,860
So then finally to README files, let's go over this section and then have a break.

332
00:37:41,860 --> 00:37:49,460
So README files are kind of the first, well I said that you might want to first start when you're

333
00:37:49,460 --> 00:37:54,980
starting to write the code, you might want to start with in code documentation of some kind,

334
00:37:55,540 --> 00:38:01,380
but then README files are the first thing that a user would see and that anyone you share the

335
00:38:01,380 --> 00:38:09,380
code with. When they get your code the first thing they look at is a readme file and if it's

336
00:38:09,940 --> 00:38:15,140
on GitHub, GitLab, something like that, then it's a nicely formatted section on the front

337
00:38:15,140 --> 00:38:23,060
page of your code. So it is the first thing people see and I think it is very important

338
00:38:23,060 --> 00:38:28,980
to have. So you should always have some kind of a readme file. It might also be enough

339
00:38:28,980 --> 00:38:35,380
in a small enough project to put everything in the readme file.

340
00:38:35,380 --> 00:38:36,380
I would agree.

341
00:38:36,380 --> 00:38:42,940
In general, I think the readme is kind of your way to advertise your code.

342
00:38:42,940 --> 00:38:44,700
Yeah.

343
00:38:44,700 --> 00:38:56,420
So we have a few fun exercises for readme files and I think we should take a little

344
00:38:56,420 --> 00:39:02,740
bit of time to so we have already talked a lot about what is required but we should spend a

345
00:39:02,740 --> 00:39:09,700
little bit of time playing around with it so let's do the exercise one as a demonstration

346
00:39:12,980 --> 00:39:20,740
but for that we need a readme on github so in the next section we'll use this

347
00:39:20,740 --> 00:39:29,240
this documentation example, but I will also use it in this readme example.

348
00:39:29,240 --> 00:39:35,120
And if we open the readme file here, we'll see that it's written in Markdown.

349
00:39:35,120 --> 00:39:40,180
GitHub nicely renders Markdown automatically.

350
00:39:40,180 --> 00:39:44,300
So what are these things?

351
00:39:44,300 --> 00:39:54,860
some more information about what kinds of formatting you can use here. But let's try

352
00:39:54,860 --> 00:40:05,600
make a note. So if I copy the whole thing, maybe it doesn't copy these ticks. Let's see.

353
00:40:05,600 --> 00:40:10,980
So what is each of these things? No, it does copy the ticks. Oh, because the ticks are

354
00:40:10,980 --> 00:40:18,820
part of the Markdown language. Right. Okay. So the first thing is a note.

355
00:40:20,420 --> 00:40:26,180
It will do some fancy formatting. The second is important. And one thing you can do if you're

356
00:40:26,180 --> 00:40:32,420
editing it on GitHub is you can preview. So let's see what it looks like. Okay. So there is a blue

357
00:40:32,420 --> 00:40:41,900
information thing. There is a slightly more red and well I guess yellowish but

358
00:40:41,900 --> 00:40:50,780
more visible version of it. Okay so that's a fun thing you can do. What is this

359
00:40:50,780 --> 00:41:02,180
details and summary? I guess this is some kind of card section. So let's try this.

360
00:41:02,180 --> 00:41:08,820
so if you add this details tag and it has a summary on top, short summary.

361
00:41:12,420 --> 00:41:16,900
Oh okay so details is something that's hidden by default but it has a title

362
00:41:17,700 --> 00:41:24,980
and then when you click on it it expands. So this is useful for making the readme more

363
00:41:24,980 --> 00:41:30,580
readable but still you can include some additional information that people might need.

364
00:41:32,180 --> 00:41:40,500
Okay and then there's some batches. So a lot of projects have these automatically updating

365
00:41:40,500 --> 00:41:47,140
batches that fetch some information like is the documentation up to date and building correctly

366
00:41:48,820 --> 00:41:56,260
or do the tests currently pass in this branch and so on. So this format creates some sort of a batch

367
00:41:56,260 --> 00:42:12,260
This is from image.shields.io, so it builds you this image with the text that you put in.

368
00:42:12,260 --> 00:42:19,260
Which is essentially the address that you use converted into text.

369
00:42:19,260 --> 00:42:24,260
Yeah, so this is also a link that goes to example.org in this case.

370
00:42:24,260 --> 00:42:33,620
this case. But there would be a lot more realistic cases for using this. So you can use a batch,

371
00:42:33,620 --> 00:42:39,460
for example, to show, well, like I said, that the documentation is correctly compiling.

372
00:42:42,660 --> 00:42:48,500
Which would probably come from a different source because that commonly comes from some kind of

373
00:42:48,500 --> 00:42:54,660
of continuous integration or a system that tells you okay it actually builds properly and so on.

374
00:42:56,580 --> 00:43:04,580
Okay so we should go on a break soon. Let's take an example readme quickly

375
00:43:07,780 --> 00:43:16,180
so we can find something on github. Do you have an example in mind that has some batches and

376
00:43:18,500 --> 00:43:22,500
what other useful features we would want to see.

377
00:43:22,500 --> 00:43:26,500
Let's look at

378
00:43:26,500 --> 00:43:30,500
NumPy

379
00:43:30,500 --> 00:43:34,500
is the one that always comes to my mind when I think of a Python project.

380
00:43:34,500 --> 00:43:38,500
Go for NumPy, I think that's fine.

381
00:43:38,500 --> 00:43:42,500
Okay, so NumPy is a huge

382
00:43:42,500 --> 00:43:46,500
project. You have to scroll down a bit to get to the

383
00:43:46,500 --> 00:43:54,340
to the readme file. So the batches are on top. There's a DOI that links to the digital object

384
00:43:54,340 --> 00:44:01,220
identifier of the software. There's a stack overflow page for NumPy where you can ask questions

385
00:44:02,580 --> 00:44:05,380
and it shows how many downloads per month they've had.

386
00:44:07,460 --> 00:44:13,940
And an open SSF. I'm not actually sure what this is, some sort of score. So you might have

387
00:44:13,940 --> 00:44:20,820
something like the coverage of tests and or whether the tests are passing is one I mentioned

388
00:44:21,460 --> 00:44:27,940
all sorts of useful Ataclans information in there and then they have everything

389
00:44:27,940 --> 00:44:31,460
you need to know about NumPy right on top

390
00:44:34,180 --> 00:44:39,220
code of conduct and how to contribute or call for contributions in this case

391
00:44:39,220 --> 00:44:49,060
and yeah, so these are the most important things. In the documentation itself, actually this one,

392
00:44:50,020 --> 00:44:55,700
this readme already tells you how to install it. Does it tell you how to install it? Well,

393
00:44:55,700 --> 00:45:00,340
it has a pypy tag, but it doesn't really tell you how to install it. Okay, fine,

394
00:45:01,060 --> 00:45:04,900
it tells you how to test something, test that it runs correctly.

395
00:45:04,900 --> 00:45:14,100
So here's the documentation page though and let's go to the web version.

396
00:45:15,060 --> 00:45:20,980
So there's a getting started section, there's a user guide, there's the API reference

397
00:45:21,780 --> 00:45:29,460
and how to contribute. So the most important parts are quickly there,

398
00:45:29,460 --> 00:45:37,300
there's installation instructions and links to important things like issue tracker is where you

399
00:45:37,860 --> 00:45:44,100
report bugs for example and support QnA.

400
00:45:46,580 --> 00:45:51,300
Okay so maybe I should still quickly show what an API reference looks like

401
00:45:51,300 --> 00:46:03,300
like so this is I want to function well let's just do infinity so somewhere in the code

402
00:46:03,300 --> 00:46:11,060
they define this numpy.infinity which represents an infinite number and there they have a doc

403
00:46:11,060 --> 00:46:19,340
string that's essentially converted into this section of the documentation okay so I think

404
00:46:19,340 --> 00:46:29,660
that's enough of that example and let's take a break before we go to the next section so

405
00:46:29,660 --> 00:46:41,980
I would say at least until five past then we'll we should have plenty of time all right

406
00:46:41,980 --> 00:46:44,940
so see you at five past bye

407
00:46:47,000 --> 00:46:55,340
Hello, we are back, um, hope you had a good break.

408
00:46:55,340 --> 00:47:03,140
There was a question about the repository that I showed. I didn't actually save the

409
00:47:03,140 --> 00:47:10,620
changes but that's actually the template, that's the repository that we're going to

410
00:47:10,620 --> 00:47:20,020
use in this next demonstration anyway. So I will show it in a moment. Sorry, we don't

411
00:47:20,020 --> 00:47:24,380
use it in this one. We use it in the next one. So let me just quickly hop over to that

412
00:47:24,380 --> 00:47:27,180
just to answer the question that I started to answer.

413
00:47:27,180 --> 00:47:36,580
So there is this documentation example repository

414
00:47:36,580 --> 00:47:39,580
that allows you to generate an example that we

415
00:47:39,580 --> 00:47:42,060
will be using today.

416
00:47:42,060 --> 00:47:45,220
And what I showed was actually generated

417
00:47:45,220 --> 00:47:47,660
from this documentation example.

418
00:47:47,660 --> 00:47:51,500
So it's something that I will delete in

419
00:47:51,500 --> 00:47:53,260
after this course is over.

420
00:47:53,260 --> 00:47:56,300
but you can also generate an example from here.

421
00:48:00,820 --> 00:48:03,140
It will be more important later what the contents are,

422
00:48:03,140 --> 00:48:05,400
but of course, for the thing that I showed,

423
00:48:05,400 --> 00:48:07,440
it was mainly that it has a README file.

424
00:48:09,500 --> 00:48:12,680
Okay, so Sphinx and Markdown.

425
00:48:14,600 --> 00:48:16,500
So yeah, we mentioned that Sphinx is the thing

426
00:48:16,500 --> 00:48:19,640
we use to generate these course materials,

427
00:48:19,640 --> 00:48:22,420
and they are large part written in Markdown.

428
00:48:23,260 --> 00:48:27,260
And you can also use RichText in

429
00:48:29,260 --> 00:48:33,260
RichText with Sphinx, that is probably the default

430
00:48:33,260 --> 00:48:36,260
but it's also easy to use Markdown

431
00:48:36,260 --> 00:48:39,260
and since you're all used to Markdown by now

432
00:48:39,260 --> 00:48:42,260
because all the nodes are in Markdown, we will use that.

433
00:48:42,260 --> 00:48:45,260
Okay, so this is mainly a demonstration

434
00:48:45,260 --> 00:48:49,260
so I will soon move into the

435
00:48:49,260 --> 00:48:52,260
Visual Studio window

436
00:48:52,260 --> 00:48:59,700
But you can also try to do this probably better to just follow along for now but you can also

437
00:48:59,700 --> 00:49:06,540
try to do this in a project of your own or just following these steps.

438
00:49:06,540 --> 00:49:13,060
So I will just expand this window a bit.

439
00:49:13,060 --> 00:49:23,060
Okay, so the instructions start with some checks that everything is working as expected.

440
00:49:23,060 --> 00:49:29,120
So Sphinx runs in Python, so we need to have Python.

441
00:49:29,120 --> 00:49:30,120
We do have Python.

442
00:49:30,120 --> 00:49:37,820
I will just quickly run through this, just that we don't run into problems while doing

443
00:49:37,820 --> 00:49:41,060
the demonstration.

444
00:49:41,060 --> 00:49:47,580
So we need Sphinx build. Whoops, I clicked on Sphinx build, and now I'm no longer copied.

445
00:49:47,580 --> 00:49:54,420
I have no longer copied what I was expecting. So, okay, Sphinx quick start is a descriptive

446
00:49:54,420 --> 00:50:00,140
tool we'll use. It has the correct version. Everything's fine. And one important thing

447
00:50:00,140 --> 00:50:07,220
that you need to install separately is this mist parser. So for this to work, you need

448
00:50:07,220 --> 00:50:11,980
both Python, Sphinx, and Mist parser.

449
00:50:11,980 --> 00:50:16,060
So Mist is the kind of markdown we will be using.

450
00:50:16,060 --> 00:50:18,180
Okay, so let's get started.

451
00:50:18,180 --> 00:50:23,260
So right now we are in an empty folder.

452
00:50:23,260 --> 00:50:25,340
So there's nothing in here.

453
00:50:25,340 --> 00:50:28,180
I will make a new directory.

454
00:50:28,180 --> 00:50:30,940
I'll actually use the file view for that.

455
00:50:31,580 --> 00:50:32,380
new folder

456
00:50:34,700 --> 00:50:35,500
doc example

457
00:50:40,060 --> 00:50:44,220
and then in there we okay we need to go in that folder and then run

458
00:50:44,780 --> 00:50:49,980
Sphinx quick start in that folder so let's go there to documentation example

459
00:50:52,860 --> 00:50:56,460
and then run Sphinx quick start right here

460
00:50:56,460 --> 00:51:05,100
Okay, maybe I need a bit more space for this. Okay, so it asks you a few questions.

461
00:51:08,780 --> 00:51:13,740
Let's say I don't want to separate the directories now. It's usually best to just

462
00:51:13,740 --> 00:51:19,740
stick with the standard, with the defaults. Project name is something we of course need.

463
00:51:19,740 --> 00:51:26,700
need. This is only a test project. Let's call it that. Or should we have a funny name for

464
00:51:26,700 --> 00:51:31,140
it? I'm not great with funny names. I will not start because then I will not be able

465
00:51:31,140 --> 00:51:39,500
to continue. Okay. Author's names, that's my name. Project release, so that's the version

466
00:51:39,500 --> 00:51:49,700
number, let's say. So it's 0.0.1. And language, let's do English. So it will support English.

467
00:51:49,700 --> 00:51:53,540
English and no other languages by default.

468
00:51:53,540 --> 00:51:56,740
Okay. So now we have a bunch of new files here.

469
00:51:56,740 --> 00:52:01,540
So quickstart created

470
00:52:01,540 --> 00:52:06,540
all the files that Sphinx needs to run in this folder.

471
00:52:06,540 --> 00:52:09,740
There's this conf.py,

472
00:52:09,740 --> 00:52:15,900
which has all the configuration for this project.

473
00:52:15,900 --> 00:52:22,380
there's all the project name, copyright statement, all those name,

474
00:52:22,380 --> 00:52:26,940
version number and then we have some extensions that you can add

475
00:52:30,460 --> 00:52:37,980
and we will in fact add one since we are here why not do it now. So we want to add this

476
00:52:37,980 --> 00:52:45,180
mist parser extension here. Okay and that's probably the only thing we want to change in this

477
00:52:45,900 --> 00:52:56,460
in this file. Let's look at the other files. So okay, conf.py has the configuration options

478
00:52:57,340 --> 00:53:04,780
for Sphinx. Then we have an index.rst, which is the main file for this documentation. It's a

479
00:53:05,580 --> 00:53:09,900
rich text file. Oh, sorry, [name], did you say something?

480
00:53:09,900 --> 00:53:13,020
No, I wouldn't call it the main, it's the root file.

481
00:53:13,020 --> 00:53:25,820
Okay, yeah, the root file. So, in this case, it has a title and then it has a talk tree,

482
00:53:25,820 --> 00:53:37,160
so a table of contents, yes. And then you can define some indices in here that it will

483
00:53:37,160 --> 00:53:42,440
use to generate the documentation pages.

484
00:53:43,640 --> 00:53:50,280
Okay, the makefile and make.bat are something you use to actually build the documentation,

485
00:53:50,280 --> 00:53:51,960
so they're workflow files.

486
00:53:57,960 --> 00:54:02,360
We don't need to go into the details of what's in there because it will look pretty complicated.

487
00:54:02,360 --> 00:54:08,360
And it's essentially like you never modify.

488
00:54:08,360 --> 00:54:09,360
Yeah.

489
00:54:09,360 --> 00:54:10,360
Okay.

490
00:54:10,360 --> 00:54:15,640
So there's an empty build directory, an empty static directory, an empty templates directory.

491
00:54:15,640 --> 00:54:24,680
So the build directory, it's where Sphinx puts things that it creates.

492
00:54:24,680 --> 00:54:29,520
So you generally don't put anything in there.

493
00:54:29,520 --> 00:54:36,800
is for your own HTML templates, you will not be creating any of those in this example.

494
00:54:38,080 --> 00:54:47,680
And static is for static files for the HTML site like images or CSS for styles and so on.

495
00:54:48,320 --> 00:54:53,760
So mainly images are the ones you will run into first, those will go into the static folder.

496
00:54:53,760 --> 00:55:05,240
Okay, so let's look at the index.

497
00:55:05,240 --> 00:55:13,360
So we will not use this indices and tables section, so we can remove it.

498
00:55:13,360 --> 00:55:22,240
And then, okay, so this section here is a comment in rich text, so this will not be

499
00:55:22,240 --> 00:55:30,320
displayed on the website. Let me show the whole thing. It states that it's the master file created

500
00:55:30,320 --> 00:55:48,560
by Sphinx Quickstart. Then we have this table of contents, max depth of the table. If a file

501
00:55:48,560 --> 00:55:54,480
contains sections, like how deep do you want to go in those sections? And then in here,

502
00:55:55,040 --> 00:55:58,720
we can add our own pages. Sorry, let me

503
00:56:00,960 --> 00:56:04,160
disable that because it is definitely going to make things

504
00:56:06,960 --> 00:56:14,000
weird for what we want to do here. Okay, so I should actually probably have logged out of

505
00:56:14,000 --> 00:56:24,240
everything. Okay, so here we go. We can add a page into a documentation, so somefeature.markdown.

506
00:56:25,120 --> 00:56:32,240
This is a file name and that file doesn't exist yet, so we need to add it, but

507
00:56:33,920 --> 00:56:41,520
once we add it, it will be in the table of contents. Okay, so let's add that file.

508
00:56:41,520 --> 00:56:52,180
Let's call it somefeature.md and then we can start adding things here.

509
00:56:52,180 --> 00:57:00,720
So this is now marked down so it should look relatively familiar by this point.

510
00:57:00,720 --> 00:57:15,240
It has a title, it has a subsection title, some normal text and a list and some nested

511
00:57:15,240 --> 00:57:18,760
items in that list.

512
00:57:18,760 --> 00:57:25,160
And I need to also save this one.

513
00:57:25,160 --> 00:57:35,640
And now going back to the terminal, I could probably run something in VS Code as well

514
00:57:35,640 --> 00:57:41,640
to run this. But, well, let's just run it in the terminal, follow the instructions to

515
00:57:41,640 --> 00:57:50,320
the letter. So, what we run is Sphinx build. Then we give it the directory that we want

516
00:57:50,320 --> 00:57:54,680
to where the input files are in,

517
00:57:54,680 --> 00:57:57,160
which is this current directory, so dot,

518
00:57:57,160 --> 00:58:01,440
and then where do we want to put all the build files?

519
00:58:01,440 --> 00:58:03,640
And that's the underscore build directory.

520
00:58:05,360 --> 00:58:08,320
Okay, there's a warning, non-existent.

521
00:58:08,320 --> 00:58:09,980
It didn't find some feature.

522
00:58:09,980 --> 00:58:11,720
Okay, so did I do something wrong?

523
00:58:13,840 --> 00:58:14,680
Yes, some-

524
00:58:14,680 --> 00:58:15,520
There's a typo.

525
00:58:17,280 --> 00:58:18,560
Oh no, wait.

526
00:58:18,560 --> 00:58:28,000
somefeature.md. Yes this is somefeature.md. So then the right folder. Okay it should be.

527
00:58:30,080 --> 00:58:38,480
No. No it's not. True. This isn't right. So I originally opened

528
00:58:40,240 --> 00:58:47,920
the folder one above this one and then created this folder. Okay so it was in the wrong folder.

529
00:58:47,920 --> 00:58:56,240
It's a slightly unintended. Okay, let's try again. So I'll go to the terminal and run the

530
00:58:56,240 --> 00:59:02,960
same command again by pressing up arrow. There we go. And there it was.

531
00:59:06,080 --> 00:59:13,440
Am I sharing the entire terminal window now? I think there are many.

532
00:59:13,440 --> 00:59:16,240
Might be cutting off a little bit of the bottom.

533
00:59:16,240 --> 00:59:18,520
Yeah, it's actually complete.

534
00:59:18,520 --> 00:59:19,020
OK.

535
00:59:19,020 --> 00:59:21,280
It just looks odd because it's line breaking.

536
00:59:25,400 --> 00:59:29,760
No, I mean, I think the last thing I'm seeing in the stream

537
00:59:29,760 --> 00:59:31,560
is this line here.

538
00:59:31,560 --> 00:59:32,520
Yeah, sorry.

539
00:59:32,520 --> 00:59:34,480
OK, I've updated it.

540
00:59:34,480 --> 00:59:35,640
Yeah.

541
00:59:35,640 --> 00:59:41,080
So the command I just ran is this things build dot

542
00:59:41,080 --> 00:59:43,440
and then underscore build.

543
00:59:43,440 --> 00:59:45,760
OK, so mostly it was visible just

544
00:59:45,760 --> 00:59:52,000
when it reads the end of the last line, then you maybe didn't see it. Okay, but here we are.

545
00:59:54,400 --> 00:59:55,840
It's a little bit wider as well.

546
01:00:01,680 --> 01:00:09,360
Okay, so now we should have the files. It didn't complain about anything.

547
01:00:09,360 --> 01:00:15,040
And now in this build directory, this is what we had previously. And now we have

548
01:00:15,760 --> 01:00:22,040
Well, we have some HTML files, importantly, an index.html.

549
01:00:22,040 --> 01:00:28,680
So we can open that in a web browser and see what's inside.

550
01:00:28,680 --> 01:00:32,200
So there's different ways of doing that from the terminal.

551
01:00:32,200 --> 01:00:39,040
I think in this case, we can try to do this in VS Code.

552
01:00:39,040 --> 01:00:45,000
We can go live, on the live server.

553
01:00:45,000 --> 01:00:53,120
The problem is that it will open the folder that's in the bottom of the, but while it

554
01:00:53,120 --> 01:00:59,840
will open the folder that's currently open in VS Code.

555
01:00:59,840 --> 01:01:06,040
So this font is really small, okay, now it's really big.

556
01:01:06,040 --> 01:01:11,400
So yeah, that's the build directory and finally, okay, so now it opened the actual documentation

557
01:01:11,400 --> 01:01:12,400
page.

558
01:01:12,400 --> 01:01:18,920
So this is what the default looks like, it's a table of contents, there's some feature

559
01:01:18,920 --> 01:01:24,880
and a subsection and then there's this navigation area.

560
01:01:24,880 --> 01:01:33,960
Okay, so let's go to some feature and this is now the page we wrote in Markdown for this

561
01:01:33,960 --> 01:01:37,040
some feature section.

562
01:01:37,040 --> 01:01:41,600
Okay, so how are we doing?

563
01:01:41,600 --> 01:01:52,240
are actually we haven't spent all that much time here yet so let's do a bit more

564
01:01:57,520 --> 01:02:05,840
so we can go and edit the somefeature.markdown and try some

565
01:02:05,840 --> 01:02:10,840
try some more fancy features of the mist markdown.

566
01:02:14,880 --> 01:02:17,660
Okay, so maybe not as that fancy,

567
01:02:17,660 --> 01:02:20,480
but there's different levels of titles,

568
01:02:20,480 --> 01:02:23,080
which we are already seeing.

569
01:02:23,080 --> 01:02:24,400
So just level one,

570
01:02:30,240 --> 01:02:31,560
level two.

571
01:02:31,560 --> 01:02:41,320
so this will look slightly different once we run oops that's still level two with three of these

572
01:02:43,720 --> 01:02:47,400
hashes it will be level three and with four hashes it will be level

573
01:02:47,400 --> 01:02:54,760
four okay so this will look slightly different actually why not

574
01:02:57,320 --> 01:03:00,680
why not just keep recompiling and show as we go

575
01:03:01,560 --> 01:03:06,120
Okay so this is what the different levels of titles look like.

576
01:03:08,600 --> 01:03:11,240
There's a useful feature here so there is a permalink

577
01:03:12,440 --> 01:03:17,880
to each of these heading each of these sections so when you say

578
01:03:19,880 --> 01:03:25,960
hash then the section title it will take you directly to that section in the documentation.

579
01:03:25,960 --> 01:03:43,440
Okay, so what else can you do? You can do numbered lists, so let's do three items,

580
01:03:43,440 --> 01:03:49,200
but now we don't actually have to keep numbering the items correctly. You can make edits and

581
01:03:49,200 --> 01:03:54,400
sometimes the numbers come out or sometimes you forget to change the numbers, but

582
01:03:54,400 --> 01:04:05,800
but the Markdown Renderer takes care of that for you, so the numbers will come up correctly

583
01:04:05,800 --> 01:04:14,640
in this case, yeah, that's expected. Okay, then some other things you can do and you can

584
01:04:14,640 --> 01:04:24,040
also test this in the notes. Maybe don't add too large tables into the notes, but okay,

585
01:04:24,040 --> 01:04:28,880
This is what a table looks like.

586
01:04:28,880 --> 01:04:39,240
So you need to have a header and a line below the header and then the renderer will realize

587
01:04:39,240 --> 01:04:46,560
that this is supposed to be a table.

588
01:04:46,560 --> 01:04:51,360
Okay so this is a table of whether each number is prime.

589
01:04:51,360 --> 01:04:53,580
I'm always a bit confused about why one is not a prime,

590
01:04:53,580 --> 01:04:54,860
but fine.

591
01:04:54,860 --> 01:04:55,860
Two is a prime.

592
01:04:56,740 --> 01:04:57,700
Maybe one is a prime.

593
01:04:57,700 --> 01:04:58,600
What do you think?

594
01:05:03,260 --> 01:05:05,700
Let's also add a bit of spacing there just to,

595
01:05:05,700 --> 01:05:08,820
so one useful thing, of course, in Markdown is that

596
01:05:10,220 --> 01:05:13,900
the texts written into,

597
01:05:13,900 --> 01:05:25,400
The text document itself usually looks good enough on its own, so you don't even need

598
01:05:25,400 --> 01:05:32,340
to render it to be able to read it properly.

599
01:05:32,340 --> 01:05:40,980
But this creates a table, so 4 is not a prime, which is good to know.

600
01:05:40,980 --> 01:05:54,960
And then, well, you can have, importantly in software documentation, you can have code.

601
01:05:54,960 --> 01:05:56,500
So this is Python code.

602
01:05:56,500 --> 01:06:00,660
So we'll start with three ticks and then the language name.

603
01:06:00,660 --> 01:06:03,820
So Python.

604
01:06:03,820 --> 01:06:06,300
So let's just do a quick function.

605
01:06:06,300 --> 01:06:13,340
hello world or just hello and this function prints

606
01:06:16,620 --> 01:06:23,900
hello world okay so that's an example of how to include code in

607
01:06:28,380 --> 01:06:33,260
in markdown and i will language yeah in a certain language so i will quick

608
01:06:33,260 --> 01:06:41,660
also just copy paste in an example from that's written in C so that you see there's multiple

609
01:06:41,660 --> 01:06:49,020
languages I just didn't write to write all of this C code into the markdown file okay

610
01:06:50,620 --> 01:06:57,340
because there's a lot of a lot more you need to do in C to get the same result okay

611
01:06:57,340 --> 01:07:03,420
OK, you can also include a file directly.

612
01:07:03,420 --> 01:07:07,300
So this is literal include directive.

613
01:07:07,300 --> 01:07:12,820
So it's the same three ticks, and then literal include,

614
01:07:12,820 --> 01:07:14,060
and the name of the file.

615
01:07:17,300 --> 01:07:20,700
That was the question, if you can give a bit more

616
01:07:20,700 --> 01:07:25,700
explanation of what you can configure and what you can do.

617
01:07:25,700 --> 01:07:32,980
and I think going through the conf.py a bit would be useful. Okay yeah.

618
01:07:35,700 --> 01:07:42,020
Let's see so there's one more thing so we don't have an example.py so this will not actually

619
01:07:42,020 --> 01:07:49,940
work so let's get rid of this section but one more thing before that so you can

620
01:07:50,900 --> 01:07:54,580
also write math equations which is important in many fields

621
01:07:55,700 --> 01:08:03,700
So this is a math section and this is something that the specifically missed flavored markdown does for you.

622
01:08:03,700 --> 01:08:07,700
I think that's also for the literal include, that's also missed.

623
01:08:07,700 --> 01:08:10,700
Oh yeah, okay, that is true.

624
01:08:10,700 --> 01:08:18,700
We do need to do something in the conf.py to get this to work, so we'll be there in a second.

625
01:08:18,700 --> 01:08:24,700
So we'll just write this very interesting equation with a green theorem.

626
01:08:24,700 --> 01:08:28,700
Okay, and you can also do an inline equation.

627
01:08:32,700 --> 01:08:37,700
So again, math is, it's not square brackets, what are these called?

628
01:08:37,700 --> 01:08:39,700
Curly brackets.

629
01:08:39,700 --> 01:08:41,700
Curly brackets, okay.

630
01:08:41,700 --> 01:08:56,260
Okay. So that's an inline equation. Okay. And so, okay, this will actually not work.

631
01:08:56,260 --> 01:09:00,620
No, let's see. I'm quite surprised.

632
01:09:00,620 --> 01:09:06,180
Well, it mentions that in some older versions of Sphinx, you needed to include it.

633
01:09:06,180 --> 01:09:12,740
Okay, yes, so this Sphinx is, so now this is included in Sphinx or with the Mist

634
01:09:12,740 --> 01:09:18,180
parser extension directly. We don't need to change the config file for this to work.

635
01:09:19,220 --> 01:09:20,980
Let's change the config file anyway.

636
01:09:24,180 --> 01:09:30,340
So here's the config file. So there's not that much here actually.

637
01:09:30,340 --> 01:09:37,340
That's where to look for HTML templates and what files to not include.

638
01:09:37,340 --> 01:09:39,340
And we could change the HTML theme.

639
01:09:39,340 --> 01:09:43,340
Yeah, we can do that. I don't know what the defaults are.

640
01:09:43,340 --> 01:09:52,340
Well, you could use the Sphinx RTD. I think that should be part of the Codefinery environment.

641
01:09:52,340 --> 01:09:58,340
Okay, let's do that. So is it Sphinx RTD?

642
01:09:58,340 --> 01:10:11,540
I think read the docs RTD. Yes. Let's see if this works. No. Okay. So we don't have

643
01:10:11,540 --> 01:10:22,900
that one. So that failed. It's things RTD underscore RTD underscore theme. Sphinx read

644
01:10:22,900 --> 01:10:25,020
Orthodox theme with underscores.

645
01:10:25,020 --> 01:10:25,860
Okay.

646
01:10:28,380 --> 01:10:29,840
Okay, that works.

647
01:10:29,840 --> 01:10:32,220
So yeah, this looks a lot nicer, doesn't it?

648
01:10:33,260 --> 01:10:38,260
This looks pretty much like our course documentation,

649
01:10:39,380 --> 01:10:40,980
which is built on this as well.

650
01:10:42,820 --> 01:10:43,660
Okay.

651
01:10:46,300 --> 01:10:51,300
It's half past, so yeah, okay, we are doing good time.

652
01:10:51,300 --> 01:11:03,940
time. So I mean in principle there's a lot you can change but a lot of it is not in the default

653
01:11:03,940 --> 01:11:10,820
configuration options here. So you have HTML templates so you can write any HTML file you

654
01:11:10,820 --> 01:11:18,420
want and include the contents in that Sphinx creates into that. There's also a number of

655
01:11:18,420 --> 01:11:27,060
these themes that you can use and you can install third-party themes as Python packages.

656
01:11:28,100 --> 01:11:30,660
So there is a lot you can do.

657
01:11:37,380 --> 01:11:43,780
But yeah, so I don't know if there's anything we can easily demonstrate here in the time we have.

658
01:11:43,780 --> 01:11:50,780
I think the theming is probably the easiest that we have done that.

659
01:11:50,780 --> 01:11:52,780
Yeah.

660
01:11:52,780 --> 01:11:54,780
Okay.

661
01:11:54,780 --> 01:12:03,780
We could build this example.py file to show how it actually works and just add a example.py.

662
01:12:03,780 --> 01:12:11,780
this literal include section it also specifies the language and we are putting emphasis on

663
01:12:11,780 --> 01:12:16,780
lines two and three here so we don't know what those lines are yet because we didn't

664
01:12:16,780 --> 01:12:25,940
create the file yet lines two and three that means if I'm importing

665
01:12:25,940 --> 01:12:42,420
something, it will probably be those lines.

666
01:12:42,420 --> 01:12:49,180
So those are the lines we're emphasizing and then we do something.

667
01:12:49,180 --> 01:12:55,820
I think that's already sufficient.

668
01:12:55,820 --> 01:12:56,820
Yeah.

669
01:12:56,820 --> 01:12:57,820
Okay.

670
01:12:57,820 --> 01:13:00,340
So that's some Python code.

671
01:13:00,340 --> 01:13:01,340
And let's demo.

672
01:13:01,340 --> 01:13:04,020
And your example of Py is again in the wrong folder.

673
01:13:04,020 --> 01:13:05,020
True.

674
01:13:05,020 --> 01:13:08,820
Let's move it to the right folder.

675
01:13:08,820 --> 01:13:09,820
Okay.

676
01:13:09,820 --> 01:13:10,820
Good.

677
01:13:10,820 --> 01:13:14,820
Thanks for noticing that.

678
01:13:14,820 --> 01:13:16,340
Okay.

679
01:13:16,340 --> 01:13:20,900
So now it's including the example code directly,

680
01:13:20,900 --> 01:13:25,260
and it's added some emphasis on these two lines.

681
01:13:25,260 --> 01:13:29,980
And that's pretty convenient, especially in our case,

682
01:13:29,980 --> 01:13:33,620
where we sometimes have examples that build on one another,

683
01:13:33,620 --> 01:13:35,580
and we just want to highlight what changed

684
01:13:35,580 --> 01:13:39,660
in between the previous and this piece of code.

685
01:13:39,660 --> 01:13:41,940
So that's something that's quite useful there.

686
01:13:42,820 --> 01:13:49,460
yeah and of course this is a way of including the same example in multiple different places

687
01:13:49,460 --> 01:14:01,620
for example okay so we did the math we did the so we we did not add one thing we didn't add

688
01:14:01,620 --> 01:14:07,220
is api documentation and we have talked a good bit about that so maybe we should do that one

689
01:14:07,220 --> 01:14:12,820
as well before moving on to the next part. One thing I want to mention is that this is

690
01:14:12,820 --> 01:14:19,780
also a nice way to, in general, present examples and keep the examples as actual runnable files.

691
01:14:20,740 --> 01:14:26,500
So I think you can do literal includes that only include certain lines and don't

692
01:14:27,300 --> 01:14:31,460
not just highlight but just include the specific lines that you want to show.

693
01:14:31,460 --> 01:14:38,460
but you essentially have the example files as whole scripts or whatever,

694
01:14:38,460 --> 01:14:44,460
which makes it more usable in the end.

695
01:14:44,460 --> 01:14:47,460
Yeah, that's a good point.

696
01:14:47,460 --> 01:14:52,460
Because often you write a tutorial with some code examples,

697
01:14:52,460 --> 01:14:56,460
but it's hard to write that in such a way

698
01:14:56,460 --> 01:14:59,460
that the code examples actually work and actually run.

699
01:14:59,460 --> 01:15:05,940
run. It is hard to test those code examples but if you instead include certain lines from a script

700
01:15:05,940 --> 01:15:13,140
you can always run the script and see that it actually works. Okay so I've deleted the

701
01:15:13,140 --> 01:15:19,860
script-like part that I added but instead now I'm adding this multiply function and importantly this

702
01:15:19,860 --> 01:15:33,300
function has in code documentation, it has an API reference. So this is now our code for this

703
01:15:33,300 --> 01:15:39,620
project and we want to have an API reference added to our documentation. We don't currently have one.

704
01:15:39,620 --> 01:15:50,500
So how do we do that? First we need to go back to this index.rst file

705
01:15:54,900 --> 01:16:04,100
and we will be documenting the example module example.py here. So let's just call it the

706
01:16:04,100 --> 01:16:10,660
subsection example. Let's actually add a whole main section API reference.

707
01:16:15,140 --> 01:16:20,180
I assume the example will work but this looks a lot like

708
01:16:20,180 --> 01:16:26,900
Markdown and RST are getting mixed together so we'll see. It looks suspicious.

709
01:16:26,900 --> 01:16:40,820
Okay, so this is another of these tree tick sections, we'll call this eval RST.

710
01:16:40,820 --> 01:16:44,020
I am very much starting to think that I'm doing something wrong here.

711
01:16:44,020 --> 01:16:47,860
No, I think that's perfectly fine.

712
01:16:47,860 --> 01:16:55,300
This is already RST, so why don't I just have an RST section directly, like this.

713
01:16:55,300 --> 01:17:04,900
Ah, yeah, but then you can't use the hashtags for the titles, the API reference.

714
01:17:04,900 --> 01:17:05,900
Yes.

715
01:17:05,900 --> 01:17:08,580
Well, this title is already in RST.

716
01:17:08,580 --> 01:17:14,540
This title is already in rich text, so why not do it this way?

717
01:17:14,540 --> 01:17:15,540
Okay.

718
01:17:15,540 --> 01:17:22,180
So let's have an example of how to do titles in rich text instead.

719
01:17:22,180 --> 01:17:33,380
So this is a big title and this is a small one, I think level one and level two.

720
01:17:33,380 --> 01:17:42,900
So this will be auto module example.

721
01:17:42,900 --> 01:17:48,820
So module in this case is a Python module, it's this example module here.

722
01:17:48,820 --> 01:17:57,660
And then some magic words members so we include all of the members everything that's in example.py.

723
01:17:57,660 --> 01:18:06,500
Okay and now we do need to go and change the configuration file conf.py.

724
01:18:06,500 --> 01:18:18,340
We need to add an extension autodoc extension we need to make some other changes as well.

725
01:18:18,340 --> 01:18:27,420
So, there is an auto-doc extension that generates this API documentation.

726
01:18:27,420 --> 01:18:34,380
The rest of this stuff, I think, maybe goes on top, but below this first comment, maybe.

727
01:18:34,380 --> 01:18:35,860
Yeah, on top.

728
01:18:35,860 --> 01:18:38,180
So we need to import some things.

729
01:18:38,180 --> 01:18:46,860
What we essentially need to do is we need to inform Sphinx on where this can be found.

730
01:18:46,860 --> 01:18:51,060
And that's what we're doing here.

731
01:18:51,060 --> 01:18:55,860
From OS, we are getting the path we are currently on.

732
01:18:55,860 --> 01:18:59,620
And this allows us to set the path Python

733
01:18:59,620 --> 01:19:03,380
is looking for code in.

734
01:19:03,380 --> 01:19:07,260
So if you are not familiar with Python,

735
01:19:07,260 --> 01:19:09,660
you can think of this as a magic expression.

736
01:19:09,660 --> 01:19:14,820
But then you put whatever your source path is in here.

737
01:19:14,820 --> 01:19:17,100
So our source path is the current directory,

738
01:19:17,100 --> 01:19:18,100
so we just use dot.

739
01:19:22,340 --> 01:19:24,180
OK.

740
01:19:24,180 --> 01:19:25,140
Should it run now?

741
01:19:25,140 --> 01:19:26,100
I think it should run.

742
01:19:26,100 --> 01:19:27,220
I think it should.

743
01:19:27,220 --> 01:19:34,180
In a normal Python project, you would probably

744
01:19:34,180 --> 01:19:37,660
have something like source in here and not dot.

745
01:19:37,660 --> 01:19:40,740
Yeah, or the Python package name.

746
01:19:40,740 --> 01:19:42,380
You know what I did incorrectly here?

747
01:19:42,380 --> 01:19:47,380
I've just added this section directly to the index.rst,

748
01:19:47,460 --> 01:19:50,300
and not as a separate file.

749
01:19:50,300 --> 01:19:52,260
That's why I got confused.

750
01:19:52,260 --> 01:19:53,540
It doesn't hurt too much.

751
01:19:53,540 --> 01:19:54,780
Yeah, yeah.

752
01:19:55,700 --> 01:19:57,700
Okay, so it should build.

753
01:19:59,020 --> 01:20:03,540
Build the example, build import module, example.

754
01:20:05,220 --> 01:20:07,060
No module named my project.

755
01:20:09,220 --> 01:20:11,420
Okay, so what is happening?

756
01:20:12,380 --> 01:20:18,420
Right. I still have these lines that don't work in my code.

757
01:20:18,420 --> 01:20:19,420
Yeah.

758
01:20:19,420 --> 01:20:25,900
I should be importing something else. Okay. So yeah, now it should work as long as I have

759
01:20:25,900 --> 01:20:26,900
NumPy available.

760
01:20:26,900 --> 01:20:30,620
Which I think you have.

761
01:20:30,620 --> 01:20:39,980
And let's do some proper formatting there. Okay. Now it works. Okay. So now let's go

762
01:20:39,980 --> 01:20:46,060
back to the main page and here we have the API documentation directly in the main page which is

763
01:20:46,860 --> 01:20:49,020
not the best thing. Not optimal.

764
01:20:51,660 --> 01:20:58,700
Okay. Normally you would do this. Yeah normally it would be a separate section here

765
01:21:00,700 --> 01:21:08,940
in a separate file. Okay but it's, we have a limited amount of time it would not be that

766
01:21:08,940 --> 01:21:13,820
complicated to fix this, but it works already, so let's keep it as it is.

767
01:21:16,300 --> 01:21:21,100
Okay, so that was the Sphinx and Markdown example. There's a lot of stuff there you can play around

768
01:21:21,100 --> 01:21:25,980
with. You can try doing this yourself either with the example or with your own project.

769
01:21:28,780 --> 01:21:35,580
Are people confused about Mist and Markdown and restructured text?

770
01:21:38,940 --> 01:21:46,940
Not a huge number of questions in the notes, so I guess we're fine.

771
01:21:46,940 --> 01:21:49,940
Well, there's a bit more information here.

772
01:21:49,940 --> 01:21:59,940
Write them in the document. We can come to them later or they can be answered in the document as well.

773
01:21:59,940 --> 01:22:13,940
One useful thing to mention that often saves me and often I forget to do and therefore get into trouble is there is a way of checking links in this generated documentation.

774
01:22:13,940 --> 01:22:22,780
So, at least if the links just don't work at all, this will help you.

775
01:22:22,780 --> 01:22:27,860
If they lead you to the wrong place, it might not save you, but it's a very common issue

776
01:22:27,860 --> 01:22:33,180
to add wrong or incorrect links, so this is useful.

777
01:22:33,180 --> 01:22:39,700
Okay, let's then head on to the next section.

778
01:22:39,700 --> 01:22:46,660
GitHub pages and how to deploy Sphinx documentation to GitHub pages. This is again using GitHub

779
01:22:47,380 --> 01:22:57,700
and GitHub is not the only option, but it is a common and easy option. Since basically

780
01:22:57,700 --> 01:23:00,900
everything we have is on GitHub, we will demonstrate using GitHub.

781
01:23:00,900 --> 01:23:10,380
GitHub. So we will be using two things, GitHub pages, which is a way of including websites

782
01:23:10,380 --> 01:23:19,140
essentially in your repository and showing them as HTML as websites instead of the source

783
01:23:19,140 --> 01:23:30,880
code. And GitHub actions, which are things that run automatically when you push something

784
01:23:30,880 --> 01:23:37,040
to your repository so this is a really useful thing in general we'll see an example of.

785
01:23:39,600 --> 01:23:49,760
Okay so yeah this is pulling a lot of stuff from the past two weeks and putting it all together

786
01:23:49,760 --> 01:23:56,320
so we'll just go into it and see how it goes. Okay so there is this documentation example

787
01:23:56,320 --> 01:24:06,240
repository and I already made my own version of this documentation example, so it's generated

788
01:24:06,240 --> 01:24:14,440
from this template as it says here and at this point I should have the instructions

789
01:24:14,440 --> 01:24:24,040
available for me. Okay, just a small moment. Here we are.

790
01:24:24,040 --> 01:24:29,040
So this is a repository that contains,

791
01:24:29,240 --> 01:24:30,880
it's already on GitHub,

792
01:24:30,880 --> 01:24:33,840
but it contains essentially what we just did.

793
01:24:33,840 --> 01:24:38,520
So there's a documentation folder in this repository.

794
01:24:38,520 --> 01:24:42,680
It has a conf.py for Sphinx

795
01:24:42,680 --> 01:24:44,480
and all of this other status,

796
01:24:45,400 --> 01:24:48,840
some feature.markdown that we just created.

797
01:24:50,000 --> 01:24:51,880
It is very familiar looking.

798
01:24:54,040 --> 01:25:01,160
and then there's a source folder for our actual software. It's actually an empty folder

799
01:25:01,160 --> 01:25:07,240
just as a readme file that says this is where your code would go. So yeah, this is an example.

800
01:25:09,000 --> 01:25:10,600
Okay, so

801
01:25:14,680 --> 01:25:20,920
we could clone this locally and do what we just did to build the documentation,

802
01:25:20,920 --> 01:25:26,840
but instead we're going to do it with a workflow file so we will add a new file

803
01:25:29,080 --> 01:25:32,600
is the um is the text too small

804
01:25:34,600 --> 01:25:39,160
that may be slightly better okay so let's create a new file

805
01:25:40,920 --> 01:25:47,000
and this needs to go into dot github slash workflows

806
01:25:50,920 --> 01:26:00,240
And now we can choose whatever name we want for the workflow, so let's call it documentation

807
01:26:00,240 --> 01:26:05,280
and it's a YML file, a YAML file.

808
01:26:05,280 --> 01:26:11,720
So this is something I would rarely type out, basically never, I just always get an example

809
01:26:11,720 --> 01:26:16,720
from somewhere and change the parts that need changing.

810
01:26:16,720 --> 01:26:19,880
But the syntax is not that complicated.

811
01:26:19,880 --> 01:26:25,640
So a workflow has a name, documentation.

812
01:26:25,640 --> 01:26:26,960
When do we want to run it?

813
01:26:26,960 --> 01:26:33,520
So we run on a push, a pull request.

814
01:26:33,520 --> 01:26:35,160
So if somebody makes a pull request,

815
01:26:35,160 --> 01:26:39,480
we want to run this documentation builder.

816
01:26:39,480 --> 01:26:43,800
And then workflow dispatch.

817
01:26:43,800 --> 01:26:47,840
This means that we can manually ask this workflow to run.

818
01:26:50,520 --> 01:26:59,800
which is useful for an example. Okay permissions so it needs so the idea is that it work this

819
01:26:59,800 --> 01:27:04,760
workflow will build our documentation and then put it in our repository in a branch

820
01:27:05,640 --> 01:27:16,680
and then that branch is our website so it needs the permission to write into our repository.

821
01:27:20,760 --> 01:27:25,000
Let's give it write permissions to the contents of the repository.

822
01:27:26,680 --> 01:27:31,160
Okay and then we'll define a job for this workflow to run.

823
01:27:34,920 --> 01:27:37,080
So there's a job step called docs.

824
01:27:38,520 --> 01:27:43,720
This will run on so you need to tell it what operating system you want your job to run on.

825
01:27:43,720 --> 01:27:53,640
Ubuntu. That's the simplest option for me. And then we define some steps to run.

826
01:27:54,680 --> 01:28:02,440
Okay. So at this point, maybe I will quickly tell you what each step does,

827
01:28:02,440 --> 01:28:10,920
but I will not write out the details. So first we need to check out or clone our repository.

828
01:28:10,920 --> 01:28:19,960
and then we need to install Python because Sphinx runs in Python. Then we need to install

829
01:28:19,960 --> 01:28:31,400
some dependencies and that is a piece of code we write ourselves. So this step install

830
01:28:31,400 --> 01:28:37,560
dependencies runs a piece of code which is pip install and the dependencies we need.

831
01:28:37,560 --> 01:28:51,000
Okay. Am I now on the same level as the name? Yes. Okay. Then we want to build the documentation.

832
01:28:53,320 --> 01:29:02,120
So it also runs a command. It runs the Sphinx build command. The source for the documentation

833
01:29:02,120 --> 01:29:05,720
is the doc folder and the build folder is where the documentation goes.

834
01:29:05,720 --> 01:29:11,480
Now, importantly, the build folder will not appear in our repository. It's not modifying

835
01:29:11,480 --> 01:29:16,880
our repository at this point. It's just running on some random machine in the cloud and creating

836
01:29:16,880 --> 01:29:23,040
a build folder. So, we need to copy it somewhere where other people can see it. So, deploy

837
01:29:23,040 --> 01:29:34,120
to GitHub pages. Now, what does this do? This runs a workflow

838
01:29:34,120 --> 01:29:41,160
someone else wrote for us that actually does the deployment but we need to give it some parameters

839
01:29:41,160 --> 01:29:52,840
and well okay before we give it the parameters we only want it to run if the push is to the main

840
01:29:52,840 --> 01:29:58,280
if something gets pushed to the main branch so this looks a bit complicated it is a bit

841
01:29:58,280 --> 01:30:03,320
complicated but what it does it it prevents this from publishing documentation that's

842
01:30:04,120 --> 01:30:11,160
in the wrong branch. That's in a pull request, for example. So, only documentation in the main

843
01:30:11,160 --> 01:30:20,440
branch gets updated to the actual documentation. Okay. And then some parameters. Publish it to

844
01:30:20,440 --> 01:30:26,120
a branch called GitHub Pages. It needs a secret token to actually modify the repository.

845
01:30:26,120 --> 01:30:33,560
and well that's where it should find the build documentation.

846
01:30:33,560 --> 01:30:45,280
Okay, so a good number of steps here but each of them in principle is hopefully something that's

847
01:30:45,280 --> 01:30:53,900
familiar to you by now. So we are cloning a repository, installing Python, installing

848
01:30:53,900 --> 01:30:57,220
dependencies, building the documentation,

849
01:30:57,220 --> 01:30:58,780
and the last thing is new.

850
01:30:58,780 --> 01:31:02,740
We are pushing it to a new branch

851
01:31:02,740 --> 01:31:06,300
in our existing repository.

852
01:31:06,300 --> 01:31:07,540
OK.

853
01:31:07,540 --> 01:31:10,100
Now I have a new file.

854
01:31:10,100 --> 01:31:13,060
I want to commit this to GitHub.

855
01:31:13,060 --> 01:31:15,740
Actually, this is a pretty good commit message.

856
01:31:24,380 --> 01:31:31,420
to build and publish documentation. Okay. And I'll just push directly to the main branch

857
01:31:31,420 --> 01:31:36,220
in this case. I'm the only one working on this project. Okay.

858
01:31:39,660 --> 01:31:45,660
Here we go. Now we have a new workflow file. Okay. Well, did anything happen? Not really.

859
01:31:46,780 --> 01:31:47,580
Yes, there did.

860
01:31:47,580 --> 01:31:55,020
it is something did happen. It is already running. So the workflows are already set to run

861
01:31:55,020 --> 01:31:59,340
in this repository. They are automatically set to run. As soon as you have any workflows being

862
01:31:59,340 --> 01:32:08,860
set up, they will run. Okay, that's nice. There's a workflow that hasn't completed yet,

863
01:32:08,860 --> 01:32:15,020
but we can look at the details from here. So this is all the steps we just defined.

864
01:32:15,020 --> 01:32:18,100
And now it is done.

865
01:32:18,100 --> 01:32:19,100
Now it is done.

866
01:32:19,100 --> 01:32:20,100
Okay.

867
01:32:20,100 --> 01:32:22,780
So it prints some output at each step.

868
01:32:22,780 --> 01:32:26,100
It's installed Python, Sphinx build and so on.

869
01:32:26,100 --> 01:32:27,440
Okay.

870
01:32:27,440 --> 01:32:29,980
So what did it do?

871
01:32:29,980 --> 01:32:31,380
It created a new branch.

872
01:32:31,380 --> 01:32:33,620
Oh, that's still yellow.

873
01:32:33,620 --> 01:32:35,580
Maybe I need to just refresh the page.

874
01:32:35,580 --> 01:32:38,380
Now it's, yeah, it's a nice green tick.

875
01:32:38,380 --> 01:32:41,220
So everything's working.

876
01:32:41,220 --> 01:32:48,340
created a new branch called GitHub pages which is here and now this has this index.html and

877
01:32:48,340 --> 01:32:53,300
everything that's needed for the website. That's essentially a copy of the build directory

878
01:32:53,300 --> 01:33:02,020
as we specified in our. Okay I would assume that it's not working as a page yet though

879
01:33:02,020 --> 01:33:10,340
I need to go to settings. Yeah at least it's not deployed as a page yet. So if I go to settings

880
01:33:10,340 --> 01:33:17,780
there's a pages section here and here I can select deploy from a branch

881
01:33:20,820 --> 01:33:24,100
and the branch I want to deploy from is github pages

882
01:33:24,100 --> 01:33:30,100
gh pages okay and the root of that branch save the settings

883
01:33:30,100 --> 01:33:43,700
Okay, and now if I go to, so the URL is slightly different from this repository URL, but it's

884
01:33:43,700 --> 01:33:44,700
related.

885
01:33:44,700 --> 01:33:58,620
So I need to go to myusername.github.io and then the name of the repository.

886
01:33:58,620 --> 01:34:09,420
Okay and here we are. So now my documentation is online. Anyone can go to this address and

887
01:34:09,420 --> 01:34:19,180
see it. Actually one very useful thing to do after this would be to take this URL and

888
01:34:19,180 --> 01:34:29,820
edit the readme file and add some sort of link to it in here. I will do the simplest

889
01:34:29,820 --> 01:34:37,260
possible job of adding the link here but you might want to format it slightly better.

890
01:34:41,660 --> 01:34:44,380
Add a link to documentation in readme.

891
01:34:44,380 --> 01:34:56,380
Okay, so now we have, I guess, I made a mistake in Markdown syntax here.

892
01:34:56,380 --> 01:35:05,100
Okay, so now we have a link to the documentation in our README and it will get updated automatically.

893
01:35:05,100 --> 01:35:11,820
So now I did a new push, it's rebuilding the documentation, although even though there

894
01:35:11,820 --> 01:35:13,440
wasn't any change to the documentation.

895
01:35:13,440 --> 01:35:16,920
It's always when I change anything in this repository,

896
01:35:16,920 --> 01:35:18,960
it will rebuild and publish again.

897
01:35:23,720 --> 01:35:27,000
You can also, which people very often do,

898
01:35:27,000 --> 01:35:30,920
put it into the About.

899
01:35:30,920 --> 01:35:34,760
Yes, so the About section is not visible now

900
01:35:34,760 --> 01:35:36,160
if I make it a bit smaller.

901
01:35:36,160 --> 01:35:37,920
So here is an About section.

902
01:35:37,920 --> 01:35:44,760
So if you click on that cogwheel in the top right corner,

903
01:35:44,760 --> 01:35:47,880
there's the website URL.

904
01:35:47,880 --> 01:35:49,560
OK.

905
01:35:49,560 --> 01:35:53,480
Or use your GitHub pages website,

906
01:35:53,480 --> 01:35:55,540
which will point to the correct one,

907
01:35:55,540 --> 01:36:00,120
even if you change the name of the repository.

908
01:36:00,120 --> 01:36:04,120
You can also add a description here.

909
01:36:04,120 --> 01:36:08,500
Example of building documentation.

910
01:36:12,580 --> 01:36:14,580
OK, now that's updated.

911
01:36:14,580 --> 01:36:17,380
So now there's a link to the documentation

912
01:36:17,380 --> 01:36:20,860
right here in the sidebar for anyone who's

913
01:36:20,860 --> 01:36:22,960
looking at the Adjurable story.

914
01:36:27,700 --> 01:36:29,740
After this is the lunch break, right?

915
01:36:29,740 --> 01:36:31,180
So we have five more minutes.

916
01:36:34,120 --> 01:36:38,120
We definitely don't want to start on the next section, which is

917
01:36:38,120 --> 01:36:42,120
how to publish your own website in GitHub Pages.

918
01:36:42,120 --> 01:36:46,120
It is quite similar

919
01:36:46,120 --> 01:36:50,120
to this one, and you can check it out on your own.

920
01:36:50,120 --> 01:36:54,120
I guess the biggest difference is that we're not automatically building

921
01:36:54,120 --> 01:36:58,120
the documentation. We're not automatically building

922
01:36:58,120 --> 01:37:02,120
the website. We are only publishing it on GitHub Pages.

923
01:37:02,120 --> 01:37:13,520
Yeah. Well, I did mention there are alternatives. There's GitLab. CI GitLab is a common alternative

924
01:37:13,520 --> 01:37:22,080
to GitHub. And GitLab Pages, Read2Docs is commonly used. And well, those are the alternatives

925
01:37:22,080 --> 01:37:32,800
we mentioned here, I guess. There's essentially all the places where you can host your report

926
01:37:32,800 --> 01:37:40,160
stories. Almost all of them also have a way of hosting a static website because it is

927
01:37:40,160 --> 01:37:43,200
actually just HTML code.

928
01:37:43,200 --> 01:37:50,000
Which you could also on whatever other server, web server you have that you in some way control

929
01:37:50,000 --> 01:37:52,960
and just point it to, okay, this is the static website.

930
01:37:52,960 --> 01:37:53,960
Yeah.

931
01:37:53,960 --> 01:37:54,960
True.

932
01:37:54,960 --> 01:38:05,720
GitHub Pages or GitLab Pages is just a very simple way to have a web host for you, that

933
01:38:05,720 --> 01:38:08,080
you don't have to explicitly pay.

934
01:38:08,080 --> 01:38:15,280
So we will skip over the hosting websites and homepages on GitHub and go to the summary.

935
01:38:15,280 --> 01:38:19,640
And probably the best way of doing this would be to ask everyone, if you have any questions

936
01:38:19,640 --> 01:38:25,240
questions, please ask them in the notes and see if there's anything interesting there

937
01:38:25,240 --> 01:38:33,800
or anything very important to bring up.

938
01:38:33,800 --> 01:38:39,760
I think the first point in the summary is actually quite important. There is not the

939
01:38:39,760 --> 01:38:48,520
one right way to do things in documentation. And I would add to that, it's in general more

940
01:38:48,520 --> 01:38:57,560
important to have some documentation than to have a perfect documentation yeah yeah this is a typical

941
01:38:57,560 --> 01:39:08,040
case of better have something incomplete than not having anything at all well now if you feel

942
01:39:08,040 --> 01:39:16,920
this went too fast or you just want to learn this better to actually use this on your own

943
01:39:16,920 --> 01:39:25,640
repository. The instructions are on the course website or on the website for this section.

944
01:39:25,640 --> 01:39:34,520
So I essentially followed this deploying Sphinx documentation to GitHub almost exactly. So

945
01:39:34,520 --> 01:39:38,880
just take a look there and the Sphinx and Markdown section where you can set up your

946
01:39:38,880 --> 01:39:45,360
documentation first.

947
01:39:45,360 --> 01:39:54,020
But yeah, so there's always a balance you need to find with how much time you spend

948
01:39:54,020 --> 01:39:58,160
writing documentation versus how much time you spend coding and how much time you spend

949
01:39:58,160 --> 01:40:00,840
doing research and other things in your life.

950
01:40:00,840 --> 01:40:08,120
So for smaller projects, a README file can easily contain everything you need, especially

951
01:40:08,120 --> 01:40:13,720
you have in code documentation as well. Something that takes that in code documentation and turns it

952
01:40:13,720 --> 01:40:21,400
into an API reference is nice and you can do that very quickly with Sphinx even if you don't write

953
01:40:21,400 --> 01:40:30,680
any other documentation in there. But that's a small step further and then in a bigger project

954
01:40:30,680 --> 01:40:39,880
you will have a full-fledged website with lots of examples and so on. So it depends on

955
01:40:41,080 --> 01:40:48,520
practically speaking how much time you have to spend on this and you want of course to spend

956
01:40:48,520 --> 01:40:53,880
time actually writing your code as well and not just documentation so there is a balance there.

957
01:40:53,880 --> 01:41:02,120
In most projects, just a README is enough, because most projects are small.

958
01:41:06,440 --> 01:41:12,840
And you can essentially put all the examples also just in the README if it's a really small project.

959
01:41:14,120 --> 01:41:18,200
Even kind of API definitions you can put in the README

960
01:41:18,200 --> 01:41:22,840
in a small project and you don't need to set up a whole Sphinx environment for it.

961
01:41:24,840 --> 01:41:32,200
Okay but it is time to go for lunch break. After the lunch break we will have a section

962
01:41:32,200 --> 01:41:42,520
on Jupyter notebooks. Anyone who is around do you want to do a quick outro or a quick teaser

963
01:41:42,520 --> 01:41:51,480
of what's after the lunch break? Jupyter notebooks are a really useful tool for research so

964
01:41:53,880 --> 01:42:03,000
Yeah, I mean, I guess many people know Jupyter in general.

965
01:42:03,000 --> 01:42:09,480
Here we go over just a little bit of the basics in case anyone doesn't know.

966
01:42:09,480 --> 01:42:15,120
But more important than that, we talk about how to make them a little bit more reproducible,

967
01:42:15,120 --> 01:42:21,080
like some ways of sharing them, which perhaps you didn't know about.

968
01:42:21,080 --> 01:42:26,300
of diffing and merging them using them with version control and so on. So

969
01:42:26,300 --> 01:42:33,340
basically it will help you go from using them and a big mess to using them and a

970
01:42:33,340 --> 01:42:43,020
little bit more organized and closer to regular code. So with that should we go

971
01:42:43,020 --> 01:42:56,860
to lunch yep so okay we will see you later then enjoy your lunch okay thanks

972
01:42:56,860 --> 01:43:00,820
bye bye

