1
00:00:01,000 --> 00:00:02,000
So, hi to everybody.

2
00:00:02,000 --> 00:00:05,000
It's so nice to see so many people on the document and on stream.

3
00:00:05,000 --> 00:00:07,000
We are so excited about this workshop.

4
00:00:07,000 --> 00:00:09,000
My name is Saravan.

5
00:00:09,000 --> 00:00:16,000
And together with Gego, we are today teaching Git from Tromso, northern Norway.

6
00:00:16,000 --> 00:00:18,000
It's snowing here.

7
00:00:18,000 --> 00:00:23,000
I work with the CodeRefinery project since its start.

8
00:00:23,000 --> 00:00:28,000
So, this is now, I think, eight years that we do this.

9
00:00:28,000 --> 00:00:31,880
In my work, I like teaching programming,

10
00:00:31,880 --> 00:00:34,880
helping researchers and students with their coding.

11
00:00:35,880 --> 00:00:37,920
So research software engineering

12
00:00:37,920 --> 00:00:41,820
and also supporting people in computing.

13
00:00:45,400 --> 00:00:50,100
Yes, and maybe a quick hello from my co-instructor Gregor.

14
00:00:51,600 --> 00:00:52,960
Yeah, hello from my side.

15
00:00:52,960 --> 00:00:54,320
My name is Gregor.

16
00:00:54,320 --> 00:00:56,880
I'm working with the same group as another one

17
00:00:56,880 --> 00:00:59,060
here at UIT in TromsÃ¸, Norway.

18
00:00:59,060 --> 00:01:00,620
So it's the high performance computing group,

19
00:01:00,620 --> 00:01:02,800
but also the research stuff engineering group.

20
00:01:02,800 --> 00:01:05,460
I started recently and before that I did a postdoc here

21
00:01:05,460 --> 00:01:08,040
at the same university in plasma physics in my case.

22
00:01:08,040 --> 00:01:10,700
So I've worked a few years as a researcher as well.

23
00:01:11,980 --> 00:01:13,820
Yeah, looking forward to this course.

24
00:01:15,060 --> 00:01:17,940
And since we both have been researchers,

25
00:01:17,940 --> 00:01:19,580
we know how it feels.

26
00:01:19,580 --> 00:01:24,580
We both haven't kind of officially learned coding

27
00:01:24,580 --> 00:01:29,180
coding in our university curriculum, we did research and learned it a bit on the side.

28
00:01:29,180 --> 00:01:36,340
We know the pain, we know what is needed. Before we go into Git, a little bit what to

29
00:01:36,340 --> 00:01:46,420
expect and how to participate. So please expect, we will do an exercise soon, roughly

30
00:01:46,420 --> 00:01:55,140
in 15-20 minutes. We will then also do a break in half an hour.

31
00:01:55,140 --> 00:01:59,540
And the two things that I always have open in my browser, and you can have that maybe

32
00:01:59,540 --> 00:02:06,020
open next to the stream on the other half of your screen, is I have the collaborative

33
00:02:06,020 --> 00:02:11,820
notes. So we will be watching these as instructors, and please keep the questions coming. The

34
00:02:11,820 --> 00:02:16,160
The more you ask, the more you comment, the better it will be.

35
00:02:16,160 --> 00:02:23,620
We are following this and the best way to do it is to ask at the bottom because we already

36
00:02:23,620 --> 00:02:27,000
have so many things open here on my side and on your side.

37
00:02:27,000 --> 00:02:29,760
I will be watching what comes up at the bottom.

38
00:02:29,760 --> 00:02:32,440
So add your questions, add your comments to the bottom of the page.

39
00:02:32,440 --> 00:02:37,840
You will also find always here where are we at this moment.

40
00:02:37,840 --> 00:02:40,920
The other place that I have as a starting point

41
00:02:40,920 --> 00:02:41,800
is the workshop page.

42
00:02:41,800 --> 00:02:46,240
So if you get lost and you want to find the material,

43
00:02:46,240 --> 00:02:48,560
you can also find it here through the schedule.

44
00:02:49,760 --> 00:02:52,560
And we have now finished the introduction section,

45
00:02:52,560 --> 00:02:53,520
thanks to Samantha.

46
00:02:53,520 --> 00:02:56,360
And now we will talk about Git and version control.

47
00:02:57,240 --> 00:02:59,860
And I will now go into the first link,

48
00:02:59,860 --> 00:03:02,060
which is also in the collaborative notes.

49
00:03:02,060 --> 00:03:13,260
And I want to tell you a little bit what to expect today and tomorrow and on Thursday.

50
00:03:13,260 --> 00:03:16,740
There is a side panel here with lots of episodes.

51
00:03:16,740 --> 00:03:18,300
We will not do all of them.

52
00:03:18,300 --> 00:03:23,780
There is a lot more than we chose to present.

53
00:03:23,780 --> 00:03:29,340
But what we will present you is the most important parts.

54
00:03:29,340 --> 00:03:32,520
The exciting thing is that we have a completely new Git lesson.

55
00:03:32,520 --> 00:03:33,760
This is the first time we present it.

56
00:03:33,760 --> 00:03:38,560
We have changed everything, but hopefully to the better, because our goal was to make

57
00:03:38,560 --> 00:03:41,640
it possible for everybody to participate.

58
00:03:41,640 --> 00:03:47,440
And you can actually choose your path, and I will tell you more about it in a moment.

59
00:03:47,440 --> 00:03:52,480
I will now scroll down a little bit just to give you an overview and zoom in to make

60
00:03:52,480 --> 00:03:57,400
it more readable.

61
00:03:57,400 --> 00:03:59,200
so that you know what to expect today,

62
00:03:59,200 --> 00:04:00,880
what to expect tomorrow.

63
00:04:00,880 --> 00:04:03,920
We will now very briefly motivate why we do this.

64
00:04:05,360 --> 00:04:10,360
And then the goal for today is these three episodes.

65
00:04:11,600 --> 00:04:14,080
To browse an existing project,

66
00:04:14,080 --> 00:04:16,360
to make changes to an existing project,

67
00:04:17,840 --> 00:04:22,000
and to merge changes that have been done

68
00:04:22,000 --> 00:04:24,840
on different branches.

69
00:04:24,840 --> 00:04:29,560
So, today in day one, we learn how to,

70
00:04:29,560 --> 00:04:32,160
how do we contribute to an existing project

71
00:04:32,160 --> 00:04:33,720
that already exists?

72
00:04:33,720 --> 00:04:36,840
And we imagine that today and tomorrow,

73
00:04:36,840 --> 00:04:40,320
we want to learn Git for, even if you work on your own,

74
00:04:40,320 --> 00:04:42,440
even if you don't collaborate with others,

75
00:04:42,440 --> 00:04:44,720
what are the most important techniques?

76
00:04:46,200 --> 00:04:49,360
Tomorrow, okay, and each of these three

77
00:04:49,360 --> 00:04:50,400
will have one exercise.

78
00:04:50,400 --> 00:04:53,520
So, please expect 20 minutes,

79
00:04:53,520 --> 00:04:55,020
25 minute exercise blocks

80
00:04:55,020 --> 00:04:56,880
in each of these three sessions today.

81
00:04:57,920 --> 00:05:00,440
And then tomorrow we will move from,

82
00:05:00,440 --> 00:05:02,240
we will move the existing project

83
00:05:03,640 --> 00:05:07,940
and learn how do we work locally on our computer?

84
00:05:07,940 --> 00:05:09,880
How do we inspect history

85
00:05:09,880 --> 00:05:12,760
of a project locally on our computer?

86
00:05:12,760 --> 00:05:14,220
And then super important,

87
00:05:15,120 --> 00:05:17,240
since many of you already have a project,

88
00:05:17,240 --> 00:05:19,960
you have a script, you have some code,

89
00:05:19,960 --> 00:05:21,360
or you are about to start one,

90
00:05:21,360 --> 00:05:24,400
how do you turn this project into a Git repository

91
00:05:24,400 --> 00:05:25,240
and share it?

92
00:05:25,240 --> 00:05:26,160
This is so important,

93
00:05:26,160 --> 00:05:29,200
because we want to make it findable and reusable.

94
00:05:31,720 --> 00:05:33,120
So that's the plan.

95
00:05:33,960 --> 00:05:36,420
I will now go into motivation.

96
00:05:39,680 --> 00:05:40,920
Why do we do this?

97
00:05:40,920 --> 00:05:43,600
So our goal is nobody leaves the workshop

98
00:05:43,600 --> 00:05:45,680
without starting some form of version control.

99
00:05:45,680 --> 00:05:48,040
We want to really get you excited about this.

100
00:05:48,040 --> 00:05:52,680
And this will be a really short overview.

101
00:05:52,680 --> 00:05:54,520
And what is Git?

102
00:05:56,640 --> 00:06:00,440
And I see on the document that many of you are new to Git.

103
00:06:00,440 --> 00:06:05,320
You can think of it as a tool that keeps track of changes.

104
00:06:07,280 --> 00:06:10,760
And we will learn how to keep track of changes on the web.

105
00:06:10,760 --> 00:06:11,720
And here's a screenshot,

106
00:06:11,720 --> 00:06:15,000
and you can even browse this example repository,

107
00:06:15,000 --> 00:06:18,000
which I think is some of my projects.

108
00:06:18,000 --> 00:06:22,320
So you can open it up in your browser and browse

109
00:06:22,320 --> 00:06:25,380
and see what I was doing in 2017 and 2021.

110
00:06:27,360 --> 00:06:32,000
We keep track of changes that we apply to the project.

111
00:06:32,000 --> 00:06:34,800
And then whenever I want to go back

112
00:06:34,800 --> 00:06:36,340
to a previous version, I can.

113
00:06:38,080 --> 00:06:40,280
Some of you will also experiment with this

114
00:06:40,280 --> 00:06:42,520
in your command line terminal.

115
00:06:42,520 --> 00:06:45,080
Some of you will choose to do that in your editor.

116
00:06:45,080 --> 00:06:51,160
So, one way to think about Git would be, it's like an undo button.

117
00:06:51,160 --> 00:06:57,840
If you ever want to go back, something didn't work out, you want to try an earlier version,

118
00:06:57,840 --> 00:06:59,880
you can do an undo.

119
00:06:59,880 --> 00:07:04,040
But it can do a lot more than that.

120
00:07:04,040 --> 00:07:11,600
And here are some questions that I have either heard or I have asked, and maybe you recognize

121
00:07:11,600 --> 00:07:13,240
some of them.

122
00:07:13,240 --> 00:07:16,620
for instance, oh, it broke.

123
00:07:16,620 --> 00:07:19,120
Oof, hopefully I have a working version somewhere.

124
00:07:20,120 --> 00:07:22,320
Or can you please send me the latest version?

125
00:07:23,400 --> 00:07:25,920
Or where is the latest version?

126
00:07:25,920 --> 00:07:29,020
Maybe you have asked, which version are you using?

127
00:07:30,280 --> 00:07:31,840
Which version have the authors used

128
00:07:31,840 --> 00:07:34,640
in the paper that I'm trying to reproduce?

129
00:07:34,640 --> 00:07:37,440
Or you found a problem and you want to know

130
00:07:37,440 --> 00:07:38,760
how long was it there?

131
00:07:38,760 --> 00:07:43,760
And git and version control is the answer to these questions.

132
00:07:46,840 --> 00:07:49,920
So it can do a lot more than just roll back,

133
00:07:49,920 --> 00:07:51,400
roll back is like an undo.

134
00:07:52,720 --> 00:07:57,280
One thing we will learn already today is how to branch

135
00:07:59,040 --> 00:08:00,500
and merge and how to,

136
00:08:00,500 --> 00:08:04,060
and then on Thursday, we will do collaboration.

137
00:08:05,960 --> 00:08:07,360
But in order to do collaboration,

138
00:08:07,360 --> 00:08:09,020
we have to understand branching.

139
00:08:10,180 --> 00:08:15,180
It actually cannot go in Git, we have to.

140
00:08:16,880 --> 00:08:17,720
And what is branching?

141
00:08:17,720 --> 00:08:21,900
We try to visualize it with these cute gophers.

142
00:08:23,480 --> 00:08:28,280
In Git, you can work on different features

143
00:08:28,280 --> 00:08:29,520
inside the same project.

144
00:08:31,680 --> 00:08:33,320
And for this, you can create

145
00:08:33,320 --> 00:08:34,880
these different development branches.

146
00:08:34,880 --> 00:08:39,240
So on this branch, you can implement a new feature

147
00:08:39,240 --> 00:08:41,360
to give this gopher sunglasses.

148
00:08:41,360 --> 00:08:45,080
And on a different branch, it could be the graduation hat.

149
00:08:45,080 --> 00:08:47,600
And then you can so-called merge these changes

150
00:08:47,600 --> 00:08:50,400
into the main branch, recombine them.

151
00:08:51,800 --> 00:08:54,220
So we don't have to wait for each other.

152
00:08:54,220 --> 00:08:55,840
Also, if you want to experiment with something,

153
00:08:55,840 --> 00:08:58,520
you can create this branch, experiment,

154
00:08:58,520 --> 00:09:01,160
and then you can merge it or not.

155
00:09:01,160 --> 00:09:05,240
Different people can work on the same code,

156
00:09:05,240 --> 00:09:07,660
same project without interfering.

157
00:09:07,660 --> 00:09:11,220
And you can experiment with that idea and discard it

158
00:09:11,220 --> 00:09:12,980
if it turns out it was a bad idea.

159
00:09:13,900 --> 00:09:15,460
And Git is really good at that.

160
00:09:17,720 --> 00:09:19,280
And finally, reproducibility.

161
00:09:19,280 --> 00:09:22,280
This is really about making reproducible science,

162
00:09:22,280 --> 00:09:25,180
reproducible computations and programs.

163
00:09:25,180 --> 00:09:28,760
And if somebody asks you about your results

164
00:09:28,760 --> 00:09:31,860
from some time ago, can you get the same results now?

165
00:09:32,800 --> 00:09:36,640
And often you will want to reproduce somebody else's code

166
00:09:36,640 --> 00:09:39,520
and then you are really happy if you can find

167
00:09:39,520 --> 00:09:42,620
the precise version that the authors have used

168
00:09:42,620 --> 00:09:44,920
in the paper you try to reproduce.

169
00:09:45,820 --> 00:09:48,420
And there will be a day when you find a problem

170
00:09:48,420 --> 00:09:49,720
and you will want to know

171
00:09:50,620 --> 00:09:54,040
when precisely this bug got introduced.

172
00:09:55,560 --> 00:09:58,480
Was it before I published a nature paper

173
00:09:58,480 --> 00:09:59,320
or was it after?

174
00:09:59,320 --> 00:10:01,040
I'm hoping it was after,

175
00:10:01,040 --> 00:10:04,300
but at least I have a tool that tells me

176
00:10:05,920 --> 00:10:07,640
when exactly it was introduced.

177
00:10:09,200 --> 00:10:11,320
And we will, I will not go here into details

178
00:10:11,320 --> 00:10:13,540
because we will actually practice this

179
00:10:13,540 --> 00:10:14,560
in the first exercise.

180
00:10:14,560 --> 00:10:16,600
You will be able to explore these tools.

181
00:10:16,600 --> 00:10:18,320
You will see them in real life.

182
00:10:21,320 --> 00:10:22,320
Just looking at the time,

183
00:10:22,320 --> 00:10:24,280
I think we are still doing pretty okay.

184
00:10:24,280 --> 00:10:29,200
Git also makes it easier for me to talk about code.

185
00:10:29,200 --> 00:10:32,120
If I want to share with somebody a few lines of my project,

186
00:10:33,040 --> 00:10:34,160
I can send them a link

187
00:10:35,640 --> 00:10:37,240
and you can actually visit this permalink.

188
00:10:37,240 --> 00:10:39,820
So if I want to tell you about this code that I wrote,

189
00:10:39,820 --> 00:10:42,420
well, you can open it up in your browser

190
00:10:42,420 --> 00:10:44,600
and you will see exactly what I'm talking about.

191
00:10:44,600 --> 00:10:48,560
It's so much nicer than describing to you,

192
00:10:48,560 --> 00:10:51,200
find a code, please go to the file, so-and-so,

193
00:10:51,200 --> 00:10:55,360
search for the line that contains this text.

194
00:10:55,360 --> 00:10:57,080
Oh, but please make sure that you use the version

195
00:10:57,080 --> 00:10:58,580
from August, 2023.

196
00:11:01,480 --> 00:11:03,160
And it's not just about software.

197
00:11:03,160 --> 00:11:07,000
We can, with Git, we can version snapshots.

198
00:11:07,000 --> 00:11:08,880
We can create these snapshots for software,

199
00:11:08,880 --> 00:11:13,880
for scripts, documents, manuscripts, websites,

200
00:11:14,020 --> 00:11:15,280
configuration files.

201
00:11:15,280 --> 00:11:16,840
In the Code Refinery project,

202
00:11:16,840 --> 00:11:18,960
we kind of use it for everything.

203
00:11:18,960 --> 00:11:23,040
So the lesson that you see is on version control,

204
00:11:23,040 --> 00:11:23,880
it's on Git.

205
00:11:25,120 --> 00:11:28,360
The project website is on version control

206
00:11:28,360 --> 00:11:31,000
and that will become all clear

207
00:11:31,000 --> 00:11:33,720
as we show you the tools that we use

208
00:11:33,720 --> 00:11:35,360
over the next two weeks.

209
00:11:39,960 --> 00:11:41,120
Git is not the only tool,

210
00:11:41,120 --> 00:11:43,040
but we show you a Git and GitHub

211
00:11:43,040 --> 00:11:46,580
because they are the most popular versions of this.

212
00:11:46,580 --> 00:11:51,500
I think I will not spend more time on the motivation.

213
00:11:51,500 --> 00:12:00,900
I want to see whether there are any questions and there are not too many.

214
00:12:00,900 --> 00:12:04,260
So please ask questions here, you will make really the.

215
00:12:04,260 --> 00:12:06,820
We want to keep it really interactive to see.

216
00:12:06,820 --> 00:12:10,420
We don't really see you in the stream.

217
00:12:10,420 --> 00:12:12,900
We hope you're doing well.

218
00:12:12,900 --> 00:12:19,860
There was already a question asking about why GitHub and not GitLab, for instance, so

219
00:12:19,860 --> 00:12:22,660
maybe you could elaborate on that a bit.

220
00:12:22,660 --> 00:12:24,580
Yes, that's a very good question.

221
00:12:24,580 --> 00:12:26,100
Why do we do that?

222
00:12:26,100 --> 00:12:33,940
And when you go back to the lesson overview, we have all this blue box that answers it

223
00:12:33,940 --> 00:12:36,620
because it is a really good question.

224
00:12:36,620 --> 00:12:40,900
And we show you GitHub, so we are not sponsored by GitHub.

225
00:12:40,900 --> 00:12:42,780
We have no affiliation with GitHub.

226
00:12:42,780 --> 00:12:46,020
we show you the service which is owned by Microsoft,

227
00:12:46,020 --> 00:12:48,820
which is proprietary because it is the most popular

228
00:12:49,860 --> 00:12:52,620
web hosting for Git.

229
00:12:52,620 --> 00:12:55,300
And even if you choose other services,

230
00:12:55,300 --> 00:12:57,420
like GitLab, like Bitbucket, and there are more,

231
00:12:57,420 --> 00:12:58,620
and we will link to them,

232
00:12:59,880 --> 00:13:02,860
it's, the probability is high that you

233
00:13:04,740 --> 00:13:07,340
at least use somebody else's code that is on GitHub.

234
00:13:07,340 --> 00:13:09,540
So we find it, it's probably useful for you

235
00:13:09,540 --> 00:13:11,660
if you know how it works.

236
00:13:11,660 --> 00:13:13,540
And all the things that we will learn with GitHub,

237
00:13:13,540 --> 00:13:15,500
they also work with the other services.

238
00:13:16,580 --> 00:13:19,420
And once you get the understanding of how it works,

239
00:13:19,420 --> 00:13:21,660
it will be easy for you to move between those.

240
00:13:29,020 --> 00:13:31,700
Good, thanks for keeping the questions coming.

241
00:13:33,940 --> 00:13:36,740
Maybe just one quick comment about GitHub versus GitLab,

242
00:13:36,740 --> 00:13:38,060
for instance.

243
00:13:38,060 --> 00:13:40,180
My one motivation is also that most of the projects

244
00:13:40,180 --> 00:13:41,980
that you will work with in the future

245
00:13:41,980 --> 00:13:43,740
are most likely on GitHub

246
00:13:43,740 --> 00:13:46,460
if they are publicly developed projects.

247
00:13:46,460 --> 00:13:47,700
So therefore, I think it makes sense

248
00:13:47,700 --> 00:13:51,580
to get you familiar with the tools that GitHub provides.

249
00:13:51,580 --> 00:13:54,940
There are some very small differences in how the UI looks,

250
00:13:54,940 --> 00:13:56,800
like the user interface looks on the websites,

251
00:13:56,800 --> 00:14:00,300
but it's nothing that stops you from using it.

252
00:14:05,620 --> 00:14:07,580
And I really appreciate the comments that come in.

253
00:14:07,580 --> 00:14:09,540
We might return to those.

254
00:14:10,180 --> 00:14:18,420
I will now navigate to we are almost at the first exercise.

255
00:14:18,420 --> 00:14:21,820
And we will start with browsing.

256
00:14:21,820 --> 00:14:23,220
So we will not make any changes yet.

257
00:14:23,220 --> 00:14:27,060
But we will try to get an understanding of an existing project.

258
00:14:27,060 --> 00:14:29,620
So I will go to this episode here.

259
00:14:29,620 --> 00:14:34,820
Copy and browse an existing project.

260
00:14:34,820 --> 00:14:38,220
please help me pasting the link to the notes.

261
00:14:42,180 --> 00:14:45,340
And we will give you a, whoops.

262
00:14:45,340 --> 00:14:47,540
We will give you a short intro of what this is,

263
00:14:47,540 --> 00:14:49,700
and then we will send you into an exercise.

264
00:14:49,700 --> 00:14:52,420
The exercise you will be able to do on your own

265
00:14:52,420 --> 00:14:53,820
or with a group.

266
00:14:53,820 --> 00:14:58,080
And then after the exercise, we will take a break.

267
00:14:58,080 --> 00:15:00,320
And then we will discuss the findings.

268
00:15:00,320 --> 00:15:13,320
Here we prepared an existing project for you and the project is, it's a recipe book.

269
00:15:13,320 --> 00:15:19,040
So we will not only learn how Git works, we will also have a nice recipe book of cooking

270
00:15:19,040 --> 00:15:26,240
recipes which you can then use at home in your kitchen.

271
00:15:26,240 --> 00:15:33,560
Our goal is to really give you an understanding of what are the building blocks.

272
00:15:33,560 --> 00:15:36,840
What is really nice about this version that we present now for the very first time is

273
00:15:36,840 --> 00:15:39,400
that we give you different paths.

274
00:15:39,400 --> 00:15:42,960
You can choose your own path.

275
00:15:42,960 --> 00:15:46,920
You can spend everything we will do today.

276
00:15:46,920 --> 00:15:50,960
You can do on GitHub alone if you want to.

277
00:15:50,960 --> 00:15:55,760
So all you need is a GitHub account.

278
00:15:55,760 --> 00:15:59,560
If you like, for those who don't want to do that on GitHub,

279
00:15:59,560 --> 00:16:02,500
who would rather follow on Visual Studio Code,

280
00:16:04,240 --> 00:16:08,240
you can then choose to follow that path.

281
00:16:08,240 --> 00:16:12,760
We also offer all the steps to do also on the command line.

282
00:16:12,760 --> 00:16:14,000
So really you can choose.

283
00:16:16,040 --> 00:16:18,360
And in future, we plan to add more paths,

284
00:16:18,360 --> 00:16:23,240
also for Jupyter, RStudio, Spyder, PyCharm.

285
00:16:23,240 --> 00:16:24,400
Contributions welcome.

286
00:16:25,760 --> 00:16:27,600
And we will start our very first step

287
00:16:28,640 --> 00:16:30,280
and I will demonstrate it,

288
00:16:30,280 --> 00:16:32,480
but you can then do it in the exercise

289
00:16:32,480 --> 00:16:34,840
is I will create a so-called fork.

290
00:16:36,320 --> 00:16:37,800
And fork is a new term.

291
00:16:39,760 --> 00:16:42,320
And think of it as making a copy.

292
00:16:42,320 --> 00:16:47,240
So I will create a copy of something called repository.

293
00:16:48,120 --> 00:16:49,440
And if you want to know a little bit more

294
00:16:49,440 --> 00:16:50,920
about what is really a repository,

295
00:16:50,920 --> 00:16:52,280
you can even click on these

296
00:16:52,280 --> 00:16:57,000
And it will take you to, we have a quick reference

297
00:16:57,000 --> 00:16:59,320
and a glossary, so it will explain you

298
00:16:59,320 --> 00:17:01,480
if some of the terms you never heard before,

299
00:17:01,480 --> 00:17:03,780
what is a fork, what is a repository,

300
00:17:04,880 --> 00:17:08,420
you can read these nice descriptions.

301
00:17:12,800 --> 00:17:15,020
So I will show you that, but I want to tell you

302
00:17:15,020 --> 00:17:18,040
that when you create this copy, you can then choose,

303
00:17:18,040 --> 00:17:21,240
we created this recipe book, but we have two versions of it.

304
00:17:22,280 --> 00:17:27,640
and you can choose which one you copy. There is this one, the recipe book,

305
00:17:27,640 --> 00:17:30,040
and we have one which is called recipe book recorded.

306
00:17:32,040 --> 00:17:35,480
Here on stream, I will only show the recorded one.

307
00:17:36,200 --> 00:17:39,000
And this is just to make sure that those who don't want to,

308
00:17:39,000 --> 00:17:42,200
if you don't want your GitHub account or anything you do,

309
00:17:43,080 --> 00:17:47,960
ever to show up in any recording or stream, then choose this one.

310
00:17:47,960 --> 00:17:56,440
one. But it will help us if few people work on this repository because then we have something

311
00:17:56,440 --> 00:18:01,320
to show here on stream. Something that you will do then in the exercise is you can open

312
00:18:01,320 --> 00:18:08,120
it up in a browser tab. And assuming that you have a GitHub account that you are logged

313
00:18:08,120 --> 00:18:14,240
in and here we assume that you went through the install instructions. The first step you

314
00:18:14,240 --> 00:18:20,240
will do is to forget to make a copy and I can see that three copies already exist and

315
00:18:20,240 --> 00:18:29,040
I will create the fourth one. So what the first step will be to click on this fork boom

316
00:18:29,040 --> 00:18:35,520
and then you can copy it into your own user account. And in this case, this is my user.

317
00:18:35,520 --> 00:18:43,240
Yes, I want to keep the name. There is a description. Do I want to copy the main branch only?

318
00:18:43,240 --> 00:18:49,720
Yeah, it doesn't matter. I think I want to copy everything. Why not? And we didn't even

319
00:18:49,720 --> 00:18:54,840
tell you what is a branch, we will come back to that. So here doesn't matter so much, but

320
00:18:54,840 --> 00:19:05,480
I will, I want to copy everything. And once I create the fork, I, it takes a few seconds.

321
00:19:05,480 --> 00:19:10,000
I have my own copy of it. And you can see that this is your own copy. If on top left,

322
00:19:10,000 --> 00:19:16,280
see your own username. And you can also see that this has been copied from forked from

323
00:19:16,280 --> 00:19:29,840
this place. And the rest of the exercise will be, you will do it in this inside this fork.

324
00:19:29,840 --> 00:19:37,440
So the exercise steps are here. And we know that you still need to learn how to do this.

325
00:19:37,440 --> 00:19:40,640
So below the exercise, you can find solutions,

326
00:19:40,640 --> 00:19:44,940
walkthroughs, screenshots, and you can choose your journey.

327
00:19:44,940 --> 00:19:47,280
So choose your path, is it maybe GitHub?

328
00:19:47,280 --> 00:19:50,040
So if you are unsure, just take the GitHub.

329
00:19:50,040 --> 00:19:51,520
If you are sure you want something else,

330
00:19:51,520 --> 00:19:53,280
then choose a different path.

331
00:19:55,200 --> 00:20:00,200
And what we expect from you is to get an overview,

332
00:20:00,280 --> 00:20:02,040
browse the commit history.

333
00:20:02,040 --> 00:20:06,220
You will then see, visually see what are commits,

334
00:20:06,220 --> 00:20:11,460
What are the changes?

335
00:20:11,460 --> 00:20:13,900
You will see the network graph.

336
00:20:13,900 --> 00:20:17,660
Maybe let me show you that so that you know what to look out for.

337
00:20:17,660 --> 00:20:25,580
So something that you will see in this insights network.

338
00:20:25,580 --> 00:20:31,080
You will see that there are these commits, changes, versions.

339
00:20:31,080 --> 00:20:33,000
You will see that there are branches,

340
00:20:34,000 --> 00:20:35,600
that there are different people.

341
00:20:38,360 --> 00:20:40,440
And then we have a couple of questions for you.

342
00:20:42,120 --> 00:20:43,680
Like when was a certain recipe

343
00:20:43,680 --> 00:20:46,160
in this recipe book modified last?

344
00:20:46,160 --> 00:20:47,320
How many changes?

345
00:20:49,120 --> 00:20:51,560
Which recipes include a certain ingredient?

346
00:20:51,560 --> 00:20:56,000
So you will learn how to search through our Git repository.

347
00:20:57,120 --> 00:20:59,240
And you will also learn how to find out

348
00:20:59,240 --> 00:21:04,240
when a certain line of code was modified last.

349
00:21:06,760 --> 00:21:10,280
So somebody actually modified the guacamole recipe

350
00:21:10,280 --> 00:21:13,740
and you will find out who added the cilantro to the recipe.

351
00:21:15,200 --> 00:21:16,120
And then some more questions.

352
00:21:16,120 --> 00:21:18,480
Can you use this recipe yourself?

353
00:21:18,480 --> 00:21:20,380
Are you allowed to share modifications?

354
00:21:21,880 --> 00:21:24,200
And also you will learn how to browse issues

355
00:21:24,200 --> 00:21:25,640
and so-called pull requests.

356
00:21:25,640 --> 00:21:27,920
And you should think about

357
00:21:27,920 --> 00:21:30,280
like what this might be good for.

358
00:21:30,280 --> 00:21:31,360
We have hints.

359
00:21:31,360 --> 00:21:34,120
So in each of these steps, there is a hint

360
00:21:34,120 --> 00:21:35,560
and then please go through.

361
00:21:36,960 --> 00:21:38,120
So this is not a spoiler.

362
00:21:38,120 --> 00:21:38,960
Go through the solution,

363
00:21:38,960 --> 00:21:42,580
go through the walk through and try this out.

364
00:21:43,680 --> 00:21:46,940
And I think we will give you 20 minutes.

365
00:21:47,960 --> 00:21:50,880
And then when we get back, we will take a break.

366
00:21:50,880 --> 00:21:53,840
We will take a 10 minute break after the exercise.

367
00:21:53,840 --> 00:21:55,140
And then after the break,

368
00:21:55,140 --> 00:22:00,140
Gregor and me will show you some of the aspects

369
00:22:00,220 --> 00:22:02,580
that are the most interesting, maybe the most problematic,

370
00:22:02,580 --> 00:22:05,780
and we will also react to the questions

371
00:22:05,780 --> 00:22:10,140
that you have on the collaborative notes.

372
00:22:10,140 --> 00:22:26,540
Here, on the bottom of the collaborative notes, where we are, what the expectation is.

373
00:22:26,540 --> 00:22:29,140
So this is our first exercise.

374
00:22:29,140 --> 00:22:38,260
It will be not until 55 past, but it will be up until six minutes past, and then break.

375
00:22:38,260 --> 00:22:39,380
I will modify that.

376
00:22:41,460 --> 00:22:44,860
Try it out, see you after the exercise,

377
00:22:44,860 --> 00:22:47,080
but then we will go into break

378
00:22:47,080 --> 00:22:49,560
and then we will discuss more after the break.

379
00:22:50,740 --> 00:22:51,860
Let us also know how it's going

380
00:22:51,860 --> 00:22:54,620
through the, during the exercise, have fun.

381
00:22:54,620 --> 00:22:55,520
See you then, bye.

382
00:23:03,620 --> 00:23:06,660
Welcome back from the exercise session.

383
00:23:08,980 --> 00:23:10,780
Oh, I'm just waiting.

384
00:23:10,780 --> 00:23:13,780
Yes, now I see that we have my screen share.

385
00:23:14,940 --> 00:23:17,940
Just wanted to say that the thing I'm sharing here

386
00:23:17,940 --> 00:23:20,540
on the bottom part, the exercise feedback

387
00:23:20,540 --> 00:23:21,980
is really helpful for us.

388
00:23:21,980 --> 00:23:24,460
It's really good for us to know whether it worked well

389
00:23:24,460 --> 00:23:27,540
or whether it was confusing, whether you had problems.

390
00:23:27,540 --> 00:23:30,700
This is really helpful because we don't see you.

391
00:23:30,700 --> 00:23:31,740
That's the only way.

392
00:23:31,740 --> 00:23:33,260
And now let's have a break.

393
00:23:33,260 --> 00:23:34,300
Let's have a 10 minute break.

394
00:23:34,300 --> 00:23:36,800
We'll be back 16 minutes past the hour.

395
00:23:36,800 --> 00:23:39,720
And then we will discuss these things.

396
00:23:39,720 --> 00:23:41,440
What did we see here in the exercise?

397
00:23:41,440 --> 00:23:42,280
What did we learn?

398
00:23:42,280 --> 00:23:45,040
We will talk about it and then move on to more.

399
00:23:45,040 --> 00:23:46,240
See you in 10 minutes.

400
00:23:53,080 --> 00:23:56,440
All right, and we are back from the break, hopefully.

401
00:23:56,440 --> 00:23:59,920
I'll just try to control the streaming settings

402
00:23:59,920 --> 00:24:01,320
and it's a new thing for me.

403
00:24:01,320 --> 00:24:03,560
So hopefully you are back and everything is good.

404
00:24:03,560 --> 00:24:04,760
I have the screen share.

405
00:24:04,760 --> 00:24:08,320
Hope you had a good break.

406
00:24:08,320 --> 00:24:14,280
Now I want to show you some of the steps from the previous exercise before we move on to

407
00:24:14,280 --> 00:24:21,960
the next episode, because I know that there were many new things.

408
00:24:21,960 --> 00:24:26,560
But it was a choice for us because we want to we wanted to really kind of throw you into

409
00:24:26,560 --> 00:24:28,360
something existing.

410
00:24:28,360 --> 00:24:35,920
And our hope is that when you see a commit, you will get an understanding of what it is

411
00:24:35,920 --> 00:24:41,720
instead of us first describing it theoretically.

412
00:24:41,720 --> 00:24:48,480
The other thing that we hope is that by providing these different paths, that it's a little

413
00:24:48,480 --> 00:24:53,000
bit like if you've seen these books, which when you open it up on one side of the page

414
00:24:53,000 --> 00:24:57,760
is one language, and on the other side is a different language.

415
00:24:57,760 --> 00:25:01,040
and they can really help you learning a new language.

416
00:25:01,040 --> 00:25:03,560
And here the hope is that if you have maybe already

417
00:25:03,560 --> 00:25:06,240
been in GitHub, but you are curious about the command line,

418
00:25:06,240 --> 00:25:09,960
you will recognize some of these things better

419
00:25:09,960 --> 00:25:10,840
and vice versa.

420
00:25:12,680 --> 00:25:15,180
But in a theory, let me show you some of the,

421
00:25:15,180 --> 00:25:16,920
let's go through some of the steps now

422
00:25:16,920 --> 00:25:20,760
before I hand over the mic to Gregor.

423
00:25:20,760 --> 00:25:23,200
So what was the first thing I was supposed to do?

424
00:25:24,880 --> 00:25:26,480
I was supposed to fork.

425
00:25:26,480 --> 00:25:27,620
Here is my fork.

426
00:25:27,760 --> 00:25:36,800
I was supposed to browse the commit history in my repository here are there are 25 commits,

427
00:25:36,800 --> 00:25:38,480
25 changes.

428
00:25:38,480 --> 00:25:47,200
And if I click this time timeline link, I can see these 25 changes.

429
00:25:47,200 --> 00:25:52,660
They all have an author, they have a timestamp, they have a message.

430
00:25:52,660 --> 00:25:55,100
So we have a one line summary.

431
00:25:55,100 --> 00:25:57,400
So it's a little bit like a logbook.

432
00:25:57,400 --> 00:26:03,900
a logbook of changes as we program our code. Also notice that each of these changes has

433
00:26:03,900 --> 00:26:13,440
a unique identifier. And we will, we might, when we say commit hash, this is what we mean.

434
00:26:13,440 --> 00:26:20,280
It's this is a short version of it. It's actually 40 characters. But each of these changes is

435
00:26:20,280 --> 00:26:26,240
unique, we can uniquely label them. Okay, what was the next thing I was supposed to

436
00:26:26,240 --> 00:26:27,740
to look at the network graph.

437
00:26:29,280 --> 00:26:33,700
This is something I do very often insights at work.

438
00:26:37,140 --> 00:26:38,500
And in the network,

439
00:26:38,500 --> 00:26:42,720
we get this nice visual overview of these other commits.

440
00:26:44,180 --> 00:26:46,460
And here the blue line and the green line,

441
00:26:47,500 --> 00:26:50,460
these were different branches.

442
00:26:50,460 --> 00:26:51,820
So there is a main branch,

443
00:26:51,820 --> 00:26:54,020
there is a little sticky note main,

444
00:26:54,020 --> 00:26:58,060
But there are other branches.

445
00:26:58,060 --> 00:27:04,500
And in the next exercise already, we will learn how to create these branches.

446
00:27:04,500 --> 00:27:07,340
We will also discuss what they are good for.

447
00:27:07,340 --> 00:27:14,020
So here somebody created the branch, experimented with a vegetarian lasagna, and then found

448
00:27:14,020 --> 00:27:18,900
that this was good and wanted to have that in the main, main branch.

449
00:27:18,900 --> 00:27:22,080
So we see that developments got merged.

450
00:27:22,080 --> 00:27:25,160
This is a merge point, this is a merge point,

451
00:27:25,160 --> 00:27:26,320
and here's another one.

452
00:27:27,560 --> 00:27:30,120
What else were we supposed to do?

453
00:27:30,120 --> 00:27:35,120
If I go back, when was a file last modified?

454
00:27:35,200 --> 00:27:36,440
You can actually see it here.

455
00:27:36,440 --> 00:27:37,400
So this was last week.

456
00:27:37,400 --> 00:27:40,280
You can see that we created this a week ago.

457
00:27:41,380 --> 00:27:44,440
And if I want to know, how about the salads?

458
00:27:46,640 --> 00:27:48,780
Yeah, so also here last week.

459
00:27:52,080 --> 00:27:55,220
which recipe include the ingredient salt.

460
00:27:56,900 --> 00:28:00,140
On GitHub, you can search for it up here,

461
00:28:00,140 --> 00:28:01,220
but some of you have noticed

462
00:28:01,220 --> 00:28:03,180
that it takes a little bit of time,

463
00:28:03,180 --> 00:28:06,140
the very first time you search for anything,

464
00:28:06,140 --> 00:28:09,360
because it needs to create this search index.

465
00:28:10,760 --> 00:28:15,380
But now it will list me all the files that contain salt.

466
00:28:15,380 --> 00:28:16,380
So this can be really useful

467
00:28:16,380 --> 00:28:18,180
if you look through a code project

468
00:28:18,180 --> 00:28:20,780
and you are not sure in which file was it,

469
00:28:20,780 --> 00:28:22,980
was this error message that I'm looking for.

470
00:28:24,260 --> 00:28:26,760
Okay, now let's go to the guacamole recipe.

471
00:28:28,600 --> 00:28:29,440
Where was it?

472
00:28:29,440 --> 00:28:33,680
It was under sides and guacamole.

473
00:28:34,600 --> 00:28:37,840
And now there is this really useful feature

474
00:28:37,840 --> 00:28:42,840
which has a really unfortunate name, or blame.

475
00:28:43,400 --> 00:28:45,720
So that's historical reasons.

476
00:28:45,720 --> 00:28:47,820
A better name would have been to annotate.

477
00:28:50,780 --> 00:28:56,020
But it's so incredibly useful because it will split

478
00:28:56,020 --> 00:28:58,660
my code into two halves.

479
00:28:58,660 --> 00:29:02,860
On the right side, I see the recipe.

480
00:29:02,860 --> 00:29:06,340
But on the left side, I see line by line

481
00:29:06,340 --> 00:29:12,820
which commit modified a specific line, the last.

482
00:29:12,820 --> 00:29:17,540
So now if I'm curious about who added this cilantro,

483
00:29:17,540 --> 00:29:20,420
because personally, I don't like cilantro so much.

484
00:29:21,480 --> 00:29:24,380
I would consider it a bug.

485
00:29:26,920 --> 00:29:29,020
And much more important than who is when.

486
00:29:30,000 --> 00:29:32,560
If I want to know when was this introduced,

487
00:29:32,560 --> 00:29:34,040
I can click on the commit.

488
00:29:36,160 --> 00:29:38,920
And this is the change that introduced it.

489
00:29:38,920 --> 00:29:43,920
So this fantasy person last week introduced

490
00:29:43,920 --> 00:29:56,100
In this commit, this change, this will be very useful for you in your like for reproducibility.

491
00:29:56,100 --> 00:29:59,460
And I get the feedback that I was scrolling really fast and it's hard to follow where

492
00:29:59,460 --> 00:30:01,700
the mouse pointer is.

493
00:30:01,700 --> 00:30:03,500
So I will try to be more careful.

494
00:30:03,500 --> 00:30:07,260
The good news is that everything I show now we have screenshots for this and you can find

495
00:30:07,260 --> 00:30:13,020
it in the solution and in the walkthrough.

496
00:30:13,020 --> 00:30:18,580
to the overview. Can I use these recipes myself? The thing that I would look for before using

497
00:30:18,580 --> 00:30:26,240
anything is the license. Is there a license file? Yes, there is one. And GitHub even recognizes

498
00:30:26,240 --> 00:30:33,380
it that it's a so-called CC zero license. We will learn more about licenses next week.

499
00:30:33,380 --> 00:30:42,940
But if I click here on top right, I can even get some information of. No, I need to click

500
00:30:42,940 --> 00:30:44,300
on the license file itself.

501
00:30:47,060 --> 00:30:48,860
On top, it will give me a summary

502
00:30:48,860 --> 00:30:52,360
of what are things I can do, cannot do,

503
00:30:53,220 --> 00:30:55,900
any conditions, in this case, there are no conditions.

504
00:30:58,380 --> 00:30:59,900
And then there are issues and pull requests,

505
00:30:59,900 --> 00:31:04,900
but we will see more of issues and pull requests

506
00:31:08,100 --> 00:31:08,940
on Thursday.

507
00:31:09,980 --> 00:31:11,380
And some people asked,

508
00:31:11,380 --> 00:31:13,140
So if I go back to my fork,

509
00:31:13,140 --> 00:31:15,660
why don't I see any issues in my fork?

510
00:31:17,100 --> 00:31:20,100
This is something that you can enable in settings,

511
00:31:20,980 --> 00:31:25,980
but many projects decide to keep track of all the issues

512
00:31:26,100 --> 00:31:28,220
and bug reports in a central place.

513
00:31:29,180 --> 00:31:31,220
So I will be able to find them if I go back

514
00:31:31,220 --> 00:31:33,800
to the place where I forked from.

515
00:31:35,940 --> 00:31:39,780
I will go back to the so-called upstream repository.

516
00:31:41,380 --> 00:31:44,140
And here I see that there is an issue tab,

517
00:31:44,140 --> 00:31:45,220
there is a pull requests,

518
00:31:45,220 --> 00:31:46,980
we will see what they are good for.

519
00:31:48,540 --> 00:31:50,820
And issues is not only for problems,

520
00:31:50,820 --> 00:31:54,840
it's also for sharing an idea.

521
00:31:55,700 --> 00:31:58,740
So it can, you can even share an idea

522
00:31:58,740 --> 00:32:00,900
for something before starting all the work.

523
00:32:05,060 --> 00:32:05,900
Good.

524
00:32:07,440 --> 00:32:08,280
I think I will,

525
00:32:08,280 --> 00:32:13,560
Gregor, how about you take the screen from me and then we talk.

526
00:32:13,560 --> 00:32:19,320
Now we will take it a step further and we will, instead of just browsing a repository

527
00:32:19,320 --> 00:32:27,000
created by somebody else, we will learn how do we make changes to it on GitHub, but also

528
00:32:27,000 --> 00:32:29,720
locally for those who want to.

529
00:32:29,720 --> 00:32:41,120
Okay. Yeah, thank you. Another one. So we will now focus on the second lesson. For those

530
00:32:41,120 --> 00:32:46,760
of you who want to follow the lesson yourself, you can find it here. It's on the top commit

531
00:32:46,760 --> 00:32:52,040
changes. And in this part now, in the next hour, we will discuss in further detail, commits

532
00:32:52,040 --> 00:32:53,560
branches, and also tags.

533
00:32:57,080 --> 00:33:00,200
So you're already familiar with commits

534
00:33:00,200 --> 00:33:01,480
since you've now inspected the history

535
00:33:01,480 --> 00:33:02,560
of an existing repository,

536
00:33:02,560 --> 00:33:04,920
but now we will discuss how to create commits.

537
00:33:04,920 --> 00:33:08,800
So this is probably the Git feature

538
00:33:08,800 --> 00:33:12,040
that you will use the most often,

539
00:33:12,040 --> 00:33:14,120
since every time you change a file

540
00:33:14,120 --> 00:33:17,480
or create a new file in your Git repository,

541
00:33:17,480 --> 00:33:18,600
and you want to save it,

542
00:33:18,600 --> 00:33:23,600
you want to have it available in the future as well

543
00:33:23,880 --> 00:33:26,160
through the, when you go back in your history,

544
00:33:26,160 --> 00:33:28,600
then you can create a git commit.

545
00:33:28,600 --> 00:33:33,020
Now, usually we will start on the main branch.

546
00:33:33,020 --> 00:33:37,480
So branches are different ways how to structure

547
00:33:37,480 --> 00:33:40,120
or like how to have different versions of your repository.

548
00:33:40,120 --> 00:33:42,200
So this is indicated here by this nice figure here

549
00:33:42,200 --> 00:33:47,200
where we have this mascot of a popular programming language.

550
00:33:47,200 --> 00:33:51,160
in this case, it's Go, which is lying on the main branch.

551
00:33:51,160 --> 00:33:54,800
And branches can be thought of lines of development.

552
00:33:56,020 --> 00:33:59,340
So nowadays, all new Git repositories,

553
00:33:59,340 --> 00:34:01,900
if you create a new repository in GitHub or some GitLab,

554
00:34:01,900 --> 00:34:03,340
it will be called the main branch,

555
00:34:03,340 --> 00:34:05,020
but you could name it whatever you want.

556
00:34:05,020 --> 00:34:06,820
In the past, it has been called master,

557
00:34:06,820 --> 00:34:08,220
but because of historical reasons,

558
00:34:08,220 --> 00:34:11,300
people have now decided that main should be the new default.

559
00:34:11,300 --> 00:34:13,180
And in theory, you can still name it whatever you want,

560
00:34:13,180 --> 00:34:14,980
but I think it's a good idea to follow

561
00:34:14,980 --> 00:34:18,580
the convention of calling it the main branch

562
00:34:18,580 --> 00:34:20,700
since that's what's mostly used.

563
00:34:20,700 --> 00:34:25,600
Now, if we now want a whole team work on this code

564
00:34:25,600 --> 00:34:27,860
or like in this painting, let's say,

565
00:34:27,860 --> 00:34:29,820
it would be very difficult if it would be a real painting

566
00:34:29,820 --> 00:34:32,060
to have multiple people working on different parts

567
00:34:32,060 --> 00:34:33,300
of the painting at the same time.

568
00:34:33,300 --> 00:34:37,500
However, with Git, since this is typically code-based

569
00:34:37,500 --> 00:34:41,180
as we work with, we can create digital copies

570
00:34:41,180 --> 00:34:42,100
of this branch.

571
00:34:42,100 --> 00:34:43,340
In this case, we create two.

572
00:34:43,340 --> 00:34:45,300
One, which is here, the sunglass branch,

573
00:34:45,300 --> 00:34:48,140
and the other one, which is this graduation half branch.

574
00:34:48,140 --> 00:34:49,540
And then one part of your team can then

575
00:34:49,540 --> 00:34:51,860
focus on the implementation of the sunglasses.

576
00:34:51,860 --> 00:34:53,460
The other one can focus on the implementation

577
00:34:53,460 --> 00:34:54,600
of something different.

578
00:34:54,600 --> 00:34:55,700
And then if you want later,

579
00:34:55,700 --> 00:34:56,820
and you're happy with the results,

580
00:34:56,820 --> 00:34:59,820
they can be merged back into the main branch.

581
00:34:59,820 --> 00:35:01,900
So these branches here are sometimes also called

582
00:35:01,900 --> 00:35:03,740
developer or the developing branches.

583
00:35:04,860 --> 00:35:07,700
As long as they don't show any conflict,

584
00:35:07,700 --> 00:35:10,060
which means that they work on the same feature

585
00:35:10,060 --> 00:35:12,900
and then try to merge it into the main branch,

586
00:35:12,900 --> 00:35:14,180
this will work just fine,

587
00:35:14,180 --> 00:35:16,540
but we will discuss this in further detail later.

588
00:35:18,900 --> 00:35:21,180
Now, the last thing which is mentioned here,

589
00:35:21,180 --> 00:35:22,820
which you probably have not encountered yet

590
00:35:22,820 --> 00:35:25,300
when you went through the history of the repository before

591
00:35:25,300 --> 00:35:26,900
is called tags.

592
00:35:26,900 --> 00:35:28,940
And these are selected commits

593
00:35:28,940 --> 00:35:33,100
that you can mark as tags with a specific name,

594
00:35:33,100 --> 00:35:36,260
which can be very useful if you want to have one commits

595
00:35:36,260 --> 00:35:39,020
that you want to be easily accessible in the future.

596
00:35:39,020 --> 00:35:41,140
So in the context of this recipe book, for instance,

597
00:35:41,140 --> 00:35:43,820
could be when we decide to make a printed version of this book,

598
00:35:44,740 --> 00:35:47,180
then of course, we cannot change the version, the printed version

599
00:35:47,180 --> 00:35:51,060
anymore. So it would be good in the future to have committed we

600
00:35:51,060 --> 00:35:53,660
can easily find which then is the same version as the one that

601
00:35:53,660 --> 00:35:57,140
is printed, even though the project on GitHub might still

602
00:35:57,140 --> 00:36:00,420
develop in other directions. Or to be maybe use an example,

603
00:36:00,420 --> 00:36:03,380
which is more relevant for you as researchers, if you have a

604
00:36:03,740 --> 00:36:08,460
manuscript or a publication that you submit to a journal, then it

605
00:36:08,460 --> 00:36:11,420
could be a very good idea to create a tag for the version that

606
00:36:11,420 --> 00:36:16,260
you submitted. And then once you receive the reviewer comments,

607
00:36:16,260 --> 00:36:21,460
and then you change the repository which is connected to

608
00:36:21,460 --> 00:36:24,700
your publication, then you can create a new tag for every new

609
00:36:24,700 --> 00:36:26,620
version that you submit and then for the published one as

610
00:36:26,620 --> 00:36:31,140
well. So this can be very useful for this as well. In my case,

611
00:36:31,700 --> 00:36:34,060
when I wrote my PhD thesis three years ago, it was also very

612
00:36:34,060 --> 00:36:37,940
useful to create tags whenever I wanted to have a version that I

613
00:36:37,940 --> 00:36:39,860
I sent to my supervisor so he could read through it

614
00:36:39,860 --> 00:36:41,060
and give comments on it.

615
00:36:41,060 --> 00:36:42,460
So that way I could have,

616
00:36:45,300 --> 00:36:46,980
I could work on my thesis,

617
00:36:46,980 --> 00:36:48,100
which was written in LaTeX

618
00:36:48,100 --> 00:36:49,900
and therefore easily storable on GitHub.

619
00:36:49,900 --> 00:36:52,580
And then every time I have a version which,

620
00:36:52,580 --> 00:36:53,780
or like a chapter which was done,

621
00:36:53,780 --> 00:36:56,100
I could then create a tag on it

622
00:36:56,100 --> 00:36:58,180
and then send it to someone else to read it.

623
00:36:58,180 --> 00:36:59,540
So there was no problem

624
00:36:59,540 --> 00:37:01,780
with having the latest version, for instance.

625
00:37:03,100 --> 00:37:05,020
Maybe just one more sentence I should mention

626
00:37:05,020 --> 00:37:06,660
for the branches.

627
00:37:06,660 --> 00:37:08,180
I was mentioning before that this is very useful

628
00:37:08,180 --> 00:37:10,840
if you have a whole team which is working on one code base,

629
00:37:10,840 --> 00:37:13,700
but it can also be very useful if you work alone

630
00:37:13,700 --> 00:37:15,940
since you want to experiment.

631
00:37:15,940 --> 00:37:19,060
So you want to, you have an idea about a new feature

632
00:37:19,060 --> 00:37:20,380
or like something which you could implement

633
00:37:20,380 --> 00:37:22,460
in a better way, but you don't want to touch

634
00:37:22,460 --> 00:37:25,100
the main branch since that's the one that other people

635
00:37:26,620 --> 00:37:28,780
might take a look at, or also you just want to have

636
00:37:28,780 --> 00:37:30,820
like a main batch which is kind of relatively clean

637
00:37:30,820 --> 00:37:31,660
in its history.

638
00:37:31,660 --> 00:37:33,740
So you can create a new branch,

639
00:37:33,740 --> 00:37:35,980
try implementing some new code,

640
00:37:35,980 --> 00:37:37,360
And if you're happy with it, you can merge it,

641
00:37:37,360 --> 00:37:40,320
but if it turns out that it doesn't go the way you want,

642
00:37:40,320 --> 00:37:42,440
you see that you haven't pulled through

643
00:37:42,440 --> 00:37:45,800
all the steps necessary, then you can just delete it

644
00:37:45,800 --> 00:37:48,720
without having to do any changes to the main branch.

645
00:37:48,720 --> 00:37:50,600
Of course, in theory, you could have done this also

646
00:37:50,600 --> 00:37:51,440
just to the main branch

647
00:37:51,440 --> 00:37:53,740
and then kind of deleted the last couple of commits,

648
00:37:53,740 --> 00:37:57,260
but I would say that this is not particularly clean.

649
00:37:58,720 --> 00:38:00,400
Now, we have again an exercise set here

650
00:38:00,400 --> 00:38:01,960
which takes approximately 20 minutes

651
00:38:01,960 --> 00:38:04,200
where we'll now create commits

652
00:38:04,200 --> 00:38:07,840
and on top of the branch, on top of the,

653
00:38:07,840 --> 00:38:09,760
sorry, on top of the repository

654
00:38:09,760 --> 00:38:13,680
that you've been working with in the past in a new branch.

655
00:38:13,680 --> 00:38:16,720
And I will now show the first two, three steps live,

656
00:38:16,720 --> 00:38:18,840
and then I will leave the remaining steps to you.

657
00:38:18,840 --> 00:38:21,280
And then at the end, we can then,

658
00:38:21,280 --> 00:38:22,200
after the exercises,

659
00:38:22,200 --> 00:38:24,200
we can go through some of the questions.

660
00:38:25,440 --> 00:38:26,880
I will do this now in GitHub,

661
00:38:26,880 --> 00:38:28,640
but if there is time remaining,

662
00:38:28,640 --> 00:38:30,280
I will do the same thing,

663
00:38:30,280 --> 00:38:33,280
or at least show some of the parts also in VS Code.

664
00:38:33,280 --> 00:38:37,100
Now, I go now to the recipe book recorded repository,

665
00:38:38,400 --> 00:38:43,400
which is in the Code Refinery GitHub project.

666
00:38:45,180 --> 00:38:47,780
And first of all, what I will do is to create a fork.

667
00:38:47,780 --> 00:38:48,820
I've already done this.

668
00:38:48,820 --> 00:38:50,540
So we just create a fork now.

669
00:38:50,540 --> 00:38:52,620
I copy it to my own account.

670
00:38:52,620 --> 00:38:54,460
Just a question, Gregor.

671
00:38:54,460 --> 00:38:57,380
Should we, we should now watch or should we do something?

672
00:38:58,900 --> 00:39:02,820
I will, everything I'm doing now is also shown

673
00:39:02,820 --> 00:39:04,300
in the description.

674
00:39:04,300 --> 00:39:07,860
It's just the first two steps, I thought,

675
00:39:07,860 --> 00:39:10,700
so that we make sure that everyone uses

676
00:39:10,700 --> 00:39:13,140
the right repository and first commit.

677
00:39:13,140 --> 00:39:15,140
Yeah, and the fork people have already done

678
00:39:15,140 --> 00:39:17,620
in the previous exercise, but here we show it.

679
00:39:17,620 --> 00:39:20,620
It's good that we show it because just to make sure

680
00:39:20,620 --> 00:39:22,200
that everybody's on the same page,

681
00:39:22,200 --> 00:39:23,500
also if people join later.

682
00:39:25,380 --> 00:39:28,380
Yeah, so this takes now just a few seconds.

683
00:39:28,380 --> 00:39:31,740
And now we have a copy again of this repository.

684
00:39:31,740 --> 00:39:33,940
And in this case, we are still on the main branch.

685
00:39:33,940 --> 00:39:37,220
However, if I now want to introduce a new feature

686
00:39:37,220 --> 00:39:40,360
or like a new recipe, I can now create a new branch name.

687
00:39:42,500 --> 00:39:44,300
And then I click on create branch.

688
00:39:45,900 --> 00:39:50,240
And this will now create, it'll copy over all the code

689
00:39:50,240 --> 00:39:52,340
from the previous branch into this new one.

690
00:39:53,180 --> 00:39:54,740
And the last thing I would just quickly show

691
00:39:54,740 --> 00:39:57,380
is then how to create a new commit.

692
00:39:57,380 --> 00:39:59,300
So in my case, I like pasta a lot,

693
00:39:59,300 --> 00:40:02,200
So I want to add a recipe here so I can keep an add file.

694
00:40:05,300 --> 00:40:07,900
I can copy now something into

695
00:40:12,860 --> 00:40:17,640
a new file into like a new recipe.

696
00:40:21,220 --> 00:40:22,500
I need to give it a name in this case

697
00:40:22,500 --> 00:40:23,340
because it's a new file.

698
00:40:23,340 --> 00:40:27,280
So in this case, it's a tomato basil.

699
00:40:29,300 --> 00:40:34,300
recipe and I commit the changes.

700
00:40:36,080 --> 00:40:38,620
And now this is the new part for you.

701
00:40:38,620 --> 00:40:40,380
We can now create a commit message.

702
00:40:40,380 --> 00:40:42,540
That's the one that the other one was showing just before.

703
00:40:42,540 --> 00:40:44,860
So this would be this one line message.

704
00:40:44,860 --> 00:40:46,300
And then we have also the option

705
00:40:46,300 --> 00:40:51,300
to give a more extended description of this change.

706
00:40:51,340 --> 00:40:53,340
Now, if you have a small project

707
00:40:53,340 --> 00:40:55,340
and it might not be necessary

708
00:40:55,340 --> 00:40:57,660
to have like a very detailed set of description here.

709
00:40:57,660 --> 00:40:59,940
And in this case, I think it's not necessary

710
00:40:59,940 --> 00:41:01,580
since it's kind of self-descriptive.

711
00:41:01,580 --> 00:41:04,540
But in the future, if you would work with a larger project,

712
00:41:04,540 --> 00:41:06,540
then they might actually have some expectations

713
00:41:06,540 --> 00:41:09,400
or like some rules on how you have to create these commits.

714
00:41:09,400 --> 00:41:11,740
So there might be some template

715
00:41:11,740 --> 00:41:14,420
for what to add into the extension descriptions.

716
00:41:14,420 --> 00:41:16,620
But in this case, we just keep it simple.

717
00:41:18,020 --> 00:41:21,220
And we now see that we have, if you go now to the history,

718
00:41:21,220 --> 00:41:22,860
we have now created a new commit

719
00:41:22,860 --> 00:41:27,860
with the description that we chose before,

720
00:41:28,620 --> 00:41:30,660
and also the new hash that was generated for us.

721
00:41:30,660 --> 00:41:32,660
So this is the identifier of this commit.

722
00:41:33,620 --> 00:41:35,860
Okay, I think this is enough for now.

723
00:41:35,860 --> 00:41:40,440
I will now mute myself, and in 20 minutes,

724
00:41:41,780 --> 00:41:46,140
we will get back and discuss some of the problems

725
00:41:46,140 --> 00:41:47,700
that some people have seen,

726
00:41:47,700 --> 00:41:50,360
and maybe discuss some interesting questions.

727
00:41:50,360 --> 00:41:56,080
Yes, so we'll be back of 55 minutes past the hour.

728
00:41:56,080 --> 00:42:00,680
And then we will do a quick summary before we take a longer break.

729
00:42:00,680 --> 00:42:04,640
And your task is now to do the steps one to nine.

730
00:42:04,640 --> 00:42:09,040
Again, let us know how it's going on the collaborative notes.

731
00:42:09,040 --> 00:42:13,840
Ask us questions, and then we can return to the questions and discuss them here, here on

732
00:42:13,840 --> 00:42:15,440
stream.

733
00:42:15,440 --> 00:42:18,440
See you in 20 minutes.

734
00:42:18,440 --> 00:42:18,680
Bye.

735
00:42:20,360 --> 00:42:29,640
Okay, so we are back. We have five minutes before the break starts. So, there were two

736
00:42:29,640 --> 00:42:34,520
questions which arose, which I would like to discuss now. And if we have some time,

737
00:42:34,520 --> 00:42:40,680
I can also quickly show how to use VS Code for creating commits. The first thing was

738
00:42:40,680 --> 00:42:48,960
about comparing. And one, in my view, simplest way to create two different branches or commits

739
00:42:48,960 --> 00:42:54,560
is by copying the URL and just writing compare at the end.

740
00:42:54,560 --> 00:42:57,280
And this will then open this interface

741
00:42:57,280 --> 00:43:01,520
where we can then here choose which branches, repositories,

742
00:43:01,520 --> 00:43:02,320
we want to compare.

743
00:43:02,320 --> 00:43:06,680
So in this case, I will now just focus on mine.

744
00:43:06,680 --> 00:43:08,240
And we can have here the main branch,

745
00:43:08,240 --> 00:43:10,200
and we can compare it to the new recipe branch

746
00:43:10,200 --> 00:43:12,320
that I created previously.

747
00:43:12,320 --> 00:43:14,240
And this way, it will now show us

748
00:43:14,240 --> 00:43:16,440
all the differences between the two branches.

749
00:43:16,440 --> 00:43:18,320
So we see in this case, the only difference

750
00:43:18,320 --> 00:43:23,120
is that we have the new file that I created previously,

751
00:43:23,120 --> 00:43:26,680
the tomato basil spaghetti recipe in this case.

752
00:43:27,760 --> 00:43:31,560
So you will see something similar

753
00:43:31,560 --> 00:43:32,760
when you create pull requests,

754
00:43:32,760 --> 00:43:36,120
but that's something we will discuss later in this course.

755
00:43:36,120 --> 00:43:37,320
But in my view, that's the simplest way

756
00:43:37,320 --> 00:43:39,220
of comparing it on GitHub itself.

757
00:43:40,400 --> 00:43:42,560
So I hope this answers one of the questions.

758
00:43:43,720 --> 00:43:46,520
Another question was there was some confusion

759
00:43:46,520 --> 00:43:48,720
about the creating a tag.

760
00:43:50,840 --> 00:43:52,920
And on GitHub, this can be some,

761
00:43:52,920 --> 00:43:55,480
maybe a little bit confusing that it has a feature

762
00:43:55,480 --> 00:43:56,920
which is called releases,

763
00:43:56,920 --> 00:43:58,360
which is basically the same thing.

764
00:43:58,360 --> 00:44:00,480
But the simplest way of creating one is just,

765
00:44:00,480 --> 00:44:01,640
let's just quickly go back.

766
00:44:01,640 --> 00:44:03,040
I click here on this button,

767
00:44:03,040 --> 00:44:04,760
create a new release on the right.

768
00:44:07,080 --> 00:44:11,460
And I can now choose a tag.

769
00:44:11,460 --> 00:44:14,000
And now I need to actually write a new name into it

770
00:44:14,000 --> 00:44:17,080
before I can create a new release or tag.

771
00:44:17,080 --> 00:44:18,760
So I think this is the problem that arose there.

772
00:44:18,760 --> 00:44:22,320
And I think it's kind of counterintuitive in GitHub.

773
00:44:22,320 --> 00:44:24,640
So if I now write a new release, for instance,

774
00:44:29,600 --> 00:44:31,640
then I can now give it a title again.

775
00:44:35,080 --> 00:44:37,360
I can provide some more information, which I won't do now.

776
00:44:37,360 --> 00:44:38,800
Then I can publish a release.

777
00:44:38,800 --> 00:44:44,080
And Gregor, can I ask, can we take a step back?

778
00:44:44,080 --> 00:44:48,440
So when do you use branches and when do you use tags?

779
00:44:48,440 --> 00:44:53,080
And so how are they different and when would you use one or the other?

780
00:44:53,080 --> 00:44:54,880
It's a very good question.

781
00:44:54,880 --> 00:45:00,160
So branches I would use if I have a project where I still want to develop it or still

782
00:45:00,160 --> 00:45:06,320
make changes to the project with the idea that I've eventually merged them.

783
00:45:06,320 --> 00:45:12,000
I would use tags then when I'm not planning to make any changes to this version of the project,

784
00:45:12,800 --> 00:45:18,800
but I want them to be easily accessible in the future. For instance, if I want to have like this,

785
00:45:19,440 --> 00:45:23,360
the specific version of a manuscript that I submitted to a journal, then it makes sense

786
00:45:23,360 --> 00:45:27,200
to have it as a tag in my view, because branches somehow imply that I would do some changes.

787
00:45:28,080 --> 00:45:33,120
In fact, I have seen a few projects where they had like an own branch for the version that they

788
00:45:33,120 --> 00:45:39,120
submitted to a journal or that was uploaded to archive for instance, which I think isn't ideal

789
00:45:39,120 --> 00:45:42,800
because these branches in theory can still be changed. Now, of course, I can always go to the

790
00:45:42,800 --> 00:45:49,680
history since I'm using Git, I can always check what was the date when I submitted it, which was

791
00:45:49,680 --> 00:45:55,280
the latest branch back then, but I think a tag makes more sense. This would be my answer to this

792
00:45:55,280 --> 00:45:57,920
question. Thanks.

793
00:45:57,920 --> 00:45:58,800
Thanks.

794
00:45:58,800 --> 00:45:59,640
Okay.

795
00:46:00,760 --> 00:46:04,520
Shall I very briefly talk about VS Code

796
00:46:04,520 --> 00:46:05,720
or shall we do that after the break?

797
00:46:05,720 --> 00:46:07,320
What do you think about the one?

798
00:46:09,480 --> 00:46:10,480
Just looking at the time,

799
00:46:10,480 --> 00:46:13,160
I think we should do it after the break.

800
00:46:13,160 --> 00:46:15,560
I'm just looking here to whether there's any questions

801
00:46:15,560 --> 00:46:19,440
that we should pick up before we go into the break.

802
00:46:25,360 --> 00:46:27,680
So let me thank everybody for the questions.

803
00:46:27,920 --> 00:46:29,760
Let's have many more questions.

804
00:46:29,760 --> 00:46:32,360
We want to be really overwhelmed by questions.

805
00:46:32,360 --> 00:46:35,260
Let's take a, we will take a one-hour break.

806
00:46:35,260 --> 00:46:37,380
This is lunchtime in some time zones.

807
00:46:37,380 --> 00:46:40,220
We know that this is not ideal for everybody,

808
00:46:40,220 --> 00:46:44,300
but in that hour, you can a little bit process

809
00:46:44,300 --> 00:46:49,300
what we learned, and we will then do a recap.

810
00:46:50,680 --> 00:46:54,860
And after the break, our plan is to learn

811
00:46:54,860 --> 00:46:57,580
how to merge the changes that we did.

812
00:46:57,580 --> 00:47:00,020
So we learn how to browse, how to create branch,

813
00:47:00,020 --> 00:47:01,940
how to create commits,

814
00:47:01,940 --> 00:47:03,980
but how do we get all of these developments

815
00:47:03,980 --> 00:47:06,380
back into the main branch

816
00:47:06,380 --> 00:47:08,140
that we will learn after the break.

817
00:47:10,480 --> 00:47:12,060
We will be back in one hour.

818
00:47:12,060 --> 00:47:13,380
Oh, Becky on stream.

819
00:47:15,100 --> 00:47:17,300
See you then, have a good break.

820
00:47:17,300 --> 00:47:18,320
And bye everybody.

821
00:47:23,860 --> 00:47:24,700
From the break.

822
00:47:24,700 --> 00:47:26,780
And I'm also watching the stream.

823
00:47:26,780 --> 00:47:28,140
Let's see whether we appear there.

824
00:47:28,140 --> 00:47:31,220
I can still see the lunch break notice on mine.

825
00:47:31,220 --> 00:47:32,060
There we are.

826
00:47:35,540 --> 00:47:39,180
And for those watching, we have a cat sighting.

827
00:47:40,800 --> 00:47:42,060
Nice that it worked out

828
00:47:42,060 --> 00:47:44,860
because cats was visiting during the lunch break

829
00:47:44,860 --> 00:47:45,860
and we were hoping.

830
00:47:49,900 --> 00:47:50,740
Excellent.

831
00:47:50,740 --> 00:47:51,560
So we are back.

832
00:47:51,560 --> 00:47:53,020
I hope you all had a good break.

833
00:47:54,180 --> 00:47:56,180
Thanks for, we got more questions

834
00:47:56,180 --> 00:47:58,820
on the collaborative document, thanks for those.

835
00:47:59,940 --> 00:48:03,420
We thought that, so our plan is now

836
00:48:03,420 --> 00:48:05,740
for the next one and a half hour for today.

837
00:48:07,460 --> 00:48:12,340
We will in a moment look at how does it,

838
00:48:12,340 --> 00:48:14,500
how can we create branches and commits

839
00:48:14,500 --> 00:48:16,780
in Visual Studio Code.

840
00:48:17,700 --> 00:48:19,060
After that we will practice

841
00:48:19,060 --> 00:48:21,380
how do we combine these developments?

842
00:48:21,380 --> 00:48:22,760
How do we merge the changes

843
00:48:22,760 --> 00:48:25,220
and the branches that we created?

844
00:48:25,220 --> 00:48:27,940
But before we go there, maybe let's take a step back

845
00:48:27,940 --> 00:48:29,660
and do a quick recap.

846
00:48:31,140 --> 00:48:33,700
Today we learned about Git,

847
00:48:33,700 --> 00:48:37,860
about commits, branches, repositories.

848
00:48:39,340 --> 00:48:40,660
Let's do a recap what these mean.

849
00:48:40,660 --> 00:48:43,140
So what is a commit?

850
00:48:43,140 --> 00:48:44,420
How should I think about a commit?

851
00:48:44,420 --> 00:48:46,140
How can I imagine a commit?

852
00:48:47,540 --> 00:48:48,380
Gregor.

853
00:48:49,340 --> 00:48:51,740
I would say a commit is a new contribution

854
00:48:51,740 --> 00:48:53,900
to the project, to the repository.

855
00:48:53,900 --> 00:48:55,260
So it could be either a new file,

856
00:48:55,260 --> 00:48:59,060
or it could be a change to an already existing file.

857
00:48:59,060 --> 00:49:00,780
But I would think of it every time there's a change

858
00:49:00,780 --> 00:49:02,780
or like a new contribution to the whole project,

859
00:49:02,780 --> 00:49:05,020
I would think of that as a commit.

860
00:49:06,980 --> 00:49:09,140
And then it can also be, maybe, sorry.

861
00:49:10,380 --> 00:49:11,420
It can also be, of course,

862
00:49:11,420 --> 00:49:13,980
multiple files that are changed at the same time.

863
00:49:13,980 --> 00:49:16,260
So it's not one commit per file.

864
00:49:16,260 --> 00:49:18,480
It could also be one new feature,

865
00:49:18,480 --> 00:49:20,940
which spans over four or five files.

866
00:49:20,940 --> 00:49:22,540
That's also a commit.

867
00:49:22,540 --> 00:49:26,020
It's like one coherent change to the repository.

868
00:49:28,680 --> 00:49:31,360
Is it easy for you to actually show a commit?

869
00:49:31,360 --> 00:49:34,000
Can we click on some commit in your GitHub browser?

870
00:49:36,080 --> 00:49:38,600
Sure, we can take a look at the repository

871
00:49:38,600 --> 00:49:39,960
that we looked at earlier.

872
00:49:39,960 --> 00:49:40,800
Yeah.

873
00:49:40,800 --> 00:49:41,620
Shall I?

874
00:49:41,620 --> 00:49:42,620
Let's click on one of those.

875
00:49:46,080 --> 00:49:47,920
Because what I wanted to show is that

876
00:49:47,920 --> 00:49:55,920
Here, everything that we see in green on the right side, these are, this is code recipes

877
00:49:55,920 --> 00:49:57,560
that got added.

878
00:49:57,560 --> 00:50:02,380
So I also think about commits, I think as a change, something gets added, something

879
00:50:02,380 --> 00:50:04,160
gets removed.

880
00:50:04,160 --> 00:50:10,600
Sometimes nothing, nothing gets removed and it can be one file or multiple files.

881
00:50:10,600 --> 00:50:14,160
Then how do you, how do you think about branches?

882
00:50:14,160 --> 00:50:17,160
What is a branch?

883
00:50:17,160 --> 00:50:25,240
a branch is like one line of work was like one. It's one version of the

884
00:50:25,240 --> 00:50:32,760
repository, typically belongs to like it also again, semantically should

885
00:50:32,760 --> 00:50:37,220
reflect one new implementation. So it could be either the main branch or

886
00:50:37,220 --> 00:50:41,880
master branch, which is like the kind of the default. But whenever we have any

887
00:50:41,880 --> 00:50:48,160
changes then it's a new line of work and that then again belongs to like one

888
00:50:48,160 --> 00:50:52,720
particular thing typically so you don't want to have a branch which has like 25

889
00:50:52,720 --> 00:50:55,640
different things that have nothing to do with each other but you want to have

890
00:50:55,640 --> 00:51:03,280
like one clear idea like I don't know one new feature and then finally what is

891
00:51:03,280 --> 00:51:09,520
a repository what is a git repository what is inside so the repository is a

892
00:51:09,520 --> 00:51:18,160
collection of files that are covered by one git project. So there's one dot git directory. We

893
00:51:18,160 --> 00:51:25,840
haven't mentioned that yet, but that's like the implementation which covers the whole collection

894
00:51:25,840 --> 00:51:34,560
of these files. So if I do some change at some of these files, it will be registered when I use git.

895
00:51:34,560 --> 00:51:37,040
So it's basically a collection of files that, again, belong together.

896
00:51:37,040 --> 00:51:43,040
Yeah, and we can think of a repository as it's like all the commits are in there, all

897
00:51:43,040 --> 00:51:49,000
the branches are inside there, and also the tags, if we have any, so all the history of

898
00:51:49,000 --> 00:51:50,000
the project.

899
00:51:50,000 --> 00:51:54,280
And then one more question that just came in, which is something really good.

900
00:51:54,280 --> 00:51:59,840
So when I want to use Git, do I then always have to connect my project to a repository

901
00:51:59,840 --> 00:52:01,320
on GitHub?

902
00:52:01,320 --> 00:52:04,000
And I can answer that is that no, you don't have to.

903
00:52:04,000 --> 00:52:08,520
You can also use Git locally without connecting it to anything.

904
00:52:08,520 --> 00:52:14,400
It can only live, if you want, the Git repository can stay on your laptop.

905
00:52:14,400 --> 00:52:17,840
And it doesn't have to leave, it doesn't have to be connected to anything.

906
00:52:17,840 --> 00:52:25,320
At some point, you might want to then copy it, make it available on GitHub, GitLab, and

907
00:52:25,320 --> 00:52:30,680
similar services, because you want to have backup, and because at some point, maybe you

908
00:52:30,680 --> 00:52:34,020
you want other people to use it or contribute to it.

909
00:52:35,320 --> 00:52:38,980
And we will do a lot more of this tomorrow and on Thursday,

910
00:52:41,980 --> 00:52:45,900
but you can really choose whether you want to work

911
00:52:45,900 --> 00:52:50,060
on a service like GitHub

912
00:52:50,060 --> 00:52:52,180
or whether you want to work locally.

913
00:52:52,180 --> 00:52:54,060
And traditionally, we have given,

914
00:52:54,060 --> 00:52:57,640
when we gave this lesson half a year ago and in the past,

915
00:52:57,640 --> 00:53:02,720
we always started from zero, from nothing,

916
00:53:02,720 --> 00:53:06,160
and we were trying to build it up in the terminal

917
00:53:06,160 --> 00:53:08,960
and learn Git this way.

918
00:53:08,960 --> 00:53:12,360
But this time we do it completely differently.

919
00:53:12,360 --> 00:53:15,160
This time we start with something that already exists.

920
00:53:15,160 --> 00:53:16,520
Maybe it's a little bit overwhelming.

921
00:53:16,520 --> 00:53:18,440
There are lots of new terms,

922
00:53:18,440 --> 00:53:20,520
but we start with an existing repository.

923
00:53:20,520 --> 00:53:24,920
But our hope is that by browsing

924
00:53:24,920 --> 00:53:27,200
and contributing to something existing,

925
00:53:27,200 --> 00:53:29,940
you get an understanding of what it is.

926
00:53:29,940 --> 00:53:34,180
And then the details of how do I do it in detail?

927
00:53:34,180 --> 00:53:36,180
Like which commands to type?

928
00:53:36,180 --> 00:53:37,260
These you don't have to remember.

929
00:53:37,260 --> 00:53:38,500
You can look them up later.

930
00:53:38,500 --> 00:53:41,060
Our goal is to communicate an understanding.

931
00:53:44,020 --> 00:53:47,140
And now I suggest that we have a look at,

932
00:53:47,140 --> 00:53:50,120
you wanted to show us how we can do that in VS Code.

933
00:53:52,060 --> 00:53:54,900
And this is still the exercise from before the break.

934
00:53:54,900 --> 00:53:58,160
So in there, we did, what did we do?

935
00:53:58,160 --> 00:54:02,200
We created a new branch and we created a couple of commits.

936
00:54:03,480 --> 00:54:05,520
Yeah, so I just very briefly wanted to show

937
00:54:05,520 --> 00:54:08,160
how something like this is usually implemented

938
00:54:08,160 --> 00:54:10,560
in a graphical editor.

939
00:54:11,800 --> 00:54:13,480
In this case, I use VS Code as an example,

940
00:54:13,480 --> 00:54:15,320
but we are not using this code

941
00:54:15,320 --> 00:54:18,000
in order to endorse Microsoft products or so.

942
00:54:18,000 --> 00:54:19,720
Probably if you use another type of editor,

943
00:54:19,720 --> 00:54:22,120
it would look very, very similar.

944
00:54:22,120 --> 00:54:24,720
And I will only show how to create a commit

945
00:54:24,720 --> 00:54:27,520
and maybe some of the other features that VS Code provides

946
00:54:27,520 --> 00:54:29,160
or like editors like this provide,

947
00:54:29,160 --> 00:54:30,960
I will not go through all the steps.

948
00:54:32,200 --> 00:54:34,960
But in this case, I'm using VS Code

949
00:54:34,960 --> 00:54:38,120
with only a few extensions installed.

950
00:54:38,120 --> 00:54:40,680
So it should, basically the feature that I'm showing now

951
00:54:40,680 --> 00:54:42,320
is already implemented in VS Code.

952
00:54:42,320 --> 00:54:45,060
It's not any additional thing that you have to install.

953
00:54:45,060 --> 00:54:47,780
And typically you will see a sign like this,

954
00:54:47,780 --> 00:54:51,740
which is called source control on the left side,

955
00:54:53,080 --> 00:54:54,160
which covers Git.

956
00:54:54,160 --> 00:54:56,080
So if you take a look at our project in this case,

957
00:54:56,080 --> 00:54:57,920
it's again the same, it's the same repository

958
00:54:57,920 --> 00:54:59,760
as we saw before.

959
00:54:59,760 --> 00:55:04,760
And let's say we want to change the amount of cilantro here.

960
00:55:06,760 --> 00:55:07,760
So we could, for instance,

961
00:55:07,760 --> 00:55:10,320
now if we increase the amount of cilantro,

962
00:55:10,320 --> 00:55:13,400
we've made a change to the existing repository.

963
00:55:13,400 --> 00:55:16,280
And now we see that VS Code has registered

964
00:55:16,280 --> 00:55:17,200
that there has been a change

965
00:55:17,200 --> 00:55:21,040
and it shows it here in this source control tab.

966
00:55:21,040 --> 00:55:23,600
So if you click on it, now it will list the files,

967
00:55:23,600 --> 00:55:25,600
where a change has been registered.

968
00:55:25,600 --> 00:55:29,200
In this case, it's the guacamole Macdon file.

969
00:55:29,200 --> 00:55:31,880
And I can actually click on this file that has been created

970
00:55:31,880 --> 00:55:35,460
and it will show me the differences to the previous commit.

971
00:55:35,460 --> 00:55:38,040
So, or like the differences between the current state

972
00:55:38,040 --> 00:55:40,360
of your repository and the last commit.

973
00:55:40,360 --> 00:55:42,960
So in this case, it shows me that in this one line here,

974
00:55:42,960 --> 00:55:45,040
I have changed one character.

975
00:55:46,520 --> 00:55:49,080
I can also easily discard the changes

976
00:55:49,080 --> 00:55:50,960
if I wanted to do it that way.

977
00:55:50,960 --> 00:55:55,080
but I can also stage this file.

978
00:55:55,080 --> 00:55:58,080
This is something we haven't discussed today,

979
00:55:58,080 --> 00:56:00,520
but if I'm not misinformed,

980
00:56:00,520 --> 00:56:01,960
this will be covered tomorrow

981
00:56:01,960 --> 00:56:04,200
when we actually work with the command line,

982
00:56:04,200 --> 00:56:07,280
where we stage a commit and afterwards stage a file,

983
00:56:07,280 --> 00:56:09,560
and then we can commit it by writing our message.

984
00:56:09,560 --> 00:56:11,200
So for instance, I can now write,

985
00:56:14,080 --> 00:56:17,160
increase cilantro, you can see, of course,

986
00:56:18,560 --> 00:56:19,920
then I can click on commit.

987
00:56:20,960 --> 00:56:25,400
And now I've created a commit locally in VSCode.

988
00:56:25,400 --> 00:56:26,960
So this can be very useful for those of you

989
00:56:26,960 --> 00:56:30,280
who work with something like VSCode already,

990
00:56:30,280 --> 00:56:32,760
because Git is something which is typically

991
00:56:32,760 --> 00:56:36,140
already very well integrated with these tools.

992
00:56:39,960 --> 00:56:41,180
At the moment, do you think this is enough,

993
00:56:41,180 --> 00:56:43,680
or shall we spend some more time on VSCode?

994
00:56:45,880 --> 00:56:46,920
Oh, that's good.

995
00:56:49,440 --> 00:56:50,740
Yeah, we have screenshots.

996
00:56:50,960 --> 00:56:57,000
Also, we understand that not some participants have different editors and our ambition is

997
00:56:57,000 --> 00:57:03,120
that we then over time add instructions also for other very like popular editors and editing

998
00:57:03,120 --> 00:57:05,280
environments.

999
00:57:05,280 --> 00:57:11,560
But here the message is that we can do most of the most of the steps.

1000
00:57:11,560 --> 00:57:18,460
Okay, maybe keep it open because there is one more thing I want to say here is that

1001
00:57:18,460 --> 00:57:24,140
We can do most of the things in VS code that we would also do otherwise on the command

1002
00:57:24,140 --> 00:57:27,500
line or in GitHub.

1003
00:57:27,500 --> 00:57:33,180
But we hopefully have already a little bit of a visual understanding of what these mean.

1004
00:57:33,180 --> 00:57:40,460
So when we do a commit, it's the same thing we did before.

1005
00:57:40,460 --> 00:57:44,620
Sometimes you want to have a terminal.

1006
00:57:44,620 --> 00:57:47,420
So if there is anything that you know how to do

1007
00:57:47,420 --> 00:57:49,240
in the command line,

1008
00:57:49,240 --> 00:57:51,480
but you don't know how to do it in VS Code,

1009
00:57:52,880 --> 00:57:56,320
what you can do is you start a terminal inside VS Code.

1010
00:57:57,760 --> 00:57:59,960
And I think, so on the top bar, there is terminal.

1011
00:57:59,960 --> 00:58:04,960
And if you start that, it will open a command line.

1012
00:58:05,380 --> 00:58:09,160
And here you can then do git commands

1013
00:58:10,280 --> 00:58:11,860
if you are familiar to the command line

1014
00:58:11,860 --> 00:58:14,540
or if you want to follow the command line track.

1015
00:58:14,540 --> 00:58:17,700
So that's always an alternative if you feel limited

1016
00:58:17,700 --> 00:58:22,700
by what the source control that is offering you.

1017
00:58:27,980 --> 00:58:28,980
Good.

1018
00:58:28,980 --> 00:58:30,680
Should I take the screen from you?

1019
00:58:31,740 --> 00:58:32,580
Okay.

1020
00:58:32,580 --> 00:58:33,400
Oh, just a sec.

1021
00:58:33,400 --> 00:58:35,300
I need to keep it for the moment.

1022
00:58:35,300 --> 00:58:38,100
I need to navigate to the right thing.

1023
00:58:38,100 --> 00:58:38,940
Moment.

1024
00:58:38,940 --> 00:58:51,000
Yes, and here we are, and I have the screen share.

1025
00:58:51,000 --> 00:58:54,640
I'll just arrange my windows.

1026
00:58:54,640 --> 00:59:04,960
There was one more question that I wanted to clarify before moving on, which is

1027
00:59:04,960 --> 00:59:09,900
We have been using the word fork, and I think somewhere in the instructions, depending on

1028
00:59:09,900 --> 00:59:15,180
how you follow, we have also used the word cloning.

1029
00:59:15,180 --> 00:59:19,840
And I wanted to tell really tell you what the difference is.

1030
00:59:19,840 --> 00:59:29,280
And for the to clarify that I'm going to my I need to go to my work back to the fork.

1031
00:59:29,280 --> 00:59:36,680
So the difference between fork and clone is that both are copies. Both are full copies

1032
00:59:36,680 --> 00:59:48,400
with all the commits, all the branches, everything. But the fork stays on GitHub. It's here on

1033
00:59:48,400 --> 00:59:55,200
GitHub. It's not on my computer. But I copied it to my namespace. So instead of CodeRefinery,

1034
00:59:55,200 --> 00:59:56,800
it says my user account.

1035
00:59:56,800 --> 00:59:57,760
So that's a fork.

1036
00:59:59,120 --> 01:00:02,720
Cloning means making a copy from GitHub

1037
01:00:02,720 --> 01:00:06,440
or similar place onto my computer.

1038
01:00:06,440 --> 01:00:07,720
It's still a full copy.

1039
01:00:10,360 --> 01:00:12,040
The difference is that if,

1040
01:00:12,040 --> 01:00:14,520
when I make changes locally on my computer,

1041
01:00:14,520 --> 01:00:18,720
they don't automatically go here on GitHub.

1042
01:00:18,720 --> 01:00:20,680
I have to actively tell it to,

1043
01:00:20,680 --> 01:00:22,520
and we will show you how to do that.

1044
01:00:22,520 --> 01:00:24,120
We will practice that tomorrow.

1045
01:00:25,200 --> 01:00:27,400
So hopefully that clarified it a little bit.

1046
01:00:29,840 --> 01:00:32,360
But now let's learn something new

1047
01:00:32,360 --> 01:00:37,360
and we will do another exercise in 10, 15 minutes

1048
01:00:37,360 --> 01:00:40,360
but let me first explain what we want from you

1049
01:00:40,360 --> 01:00:41,240
and where we are.

1050
01:00:43,360 --> 01:00:46,800
So I will navigate out of here just to make sure

1051
01:00:46,800 --> 01:00:48,360
that we all know where we are.

1052
01:00:50,200 --> 01:00:54,880
Before the break, we have been committing changes,

1053
01:00:54,880 --> 01:00:56,680
creating commits, creating branches.

1054
01:00:57,560 --> 01:01:02,440
And now I will navigate to merging changes

1055
01:01:02,440 --> 01:01:04,920
and contributing to the project.

1056
01:01:04,920 --> 01:01:09,480
And you can find this also in the notes.

1057
01:01:09,480 --> 01:01:10,800
So this is where I am now.

1058
01:01:16,000 --> 01:01:17,880
And our goal for this episode,

1059
01:01:19,000 --> 01:01:24,000
which we will spend on for the remaining

1060
01:01:24,880 --> 01:01:34,580
training a little bit over one hour today, is how to merge changes from different branches.

1061
01:01:34,580 --> 01:01:42,480
We will see that on GitHub, it's done through something called a pull request. But the name

1062
01:01:42,480 --> 01:01:51,560
pull request is confusing for newcomers. And what I find really useful is whenever you

1063
01:01:51,560 --> 01:01:55,240
you hear pull request, think of a change proposal.

1064
01:01:56,920 --> 01:01:59,960
It's a proposal or a change of a branch.

1065
01:02:02,800 --> 01:02:07,420
We will create a pull request

1066
01:02:07,420 --> 01:02:09,720
and we will learn how to merge a pull request

1067
01:02:10,760 --> 01:02:14,600
within your own repository, within your own fork.

1068
01:02:16,480 --> 01:02:19,120
And then optionally, at the end,

1069
01:02:19,120 --> 01:02:23,680
we can try to send a pull request,

1070
01:02:23,680 --> 01:02:28,280
change proposal from one repository to the other.

1071
01:02:29,400 --> 01:02:30,960
And guess what I will try to do?

1072
01:02:30,960 --> 01:02:34,520
I will try to send a pull request from my own fork

1073
01:02:34,520 --> 01:02:38,320
towards the upstream, the central one,

1074
01:02:38,320 --> 01:02:39,680
the one that I forked from.

1075
01:02:40,660 --> 01:02:43,280
And we will already get a taste of how it is

1076
01:02:44,280 --> 01:02:46,120
to collaborate and contribute.

1077
01:02:49,120 --> 01:02:51,060
it will give us a really good basis

1078
01:02:51,060 --> 01:02:52,820
for tomorrow and for Thursday.

1079
01:02:55,020 --> 01:02:59,060
While doing it, we may, might encounter something

1080
01:02:59,060 --> 01:03:01,380
called a conflict.

1081
01:03:02,420 --> 01:03:06,740
A conflict in Git is when we modify the same part

1082
01:03:06,740 --> 01:03:10,900
of the code on two different branches in two different ways.

1083
01:03:13,580 --> 01:03:15,980
And we will, if we have time left at the end,

1084
01:03:15,980 --> 01:03:18,380
Gregor and me, we will produce a conflict

1085
01:03:18,380 --> 01:03:19,980
So it's just that you know how it looks

1086
01:03:19,980 --> 01:03:21,380
and we will also try to resolve it

1087
01:03:21,380 --> 01:03:25,620
so that you can see that it's possible

1088
01:03:25,620 --> 01:03:27,220
to resolve it relatively easily.

1089
01:03:29,380 --> 01:03:30,520
So that's our plan.

1090
01:03:34,740 --> 01:03:37,260
So as a reminder, in the last exercise,

1091
01:03:37,260 --> 01:03:41,340
we created two commits on a branch.

1092
01:03:41,340 --> 01:03:42,380
Let's verify that.

1093
01:03:42,380 --> 01:03:43,900
So I did that as well.

1094
01:03:43,900 --> 01:03:47,260
I was following along with the exercise

1095
01:03:48,220 --> 01:03:51,000
And let me show you what I did.

1096
01:03:51,000 --> 01:03:54,640
I'm navigating to, well, let me zoom in first,

1097
01:03:54,640 --> 01:03:58,240
to insights and network.

1098
01:04:00,880 --> 01:04:02,840
And I want to share with you what I did.

1099
01:04:06,280 --> 01:04:07,520
Okay, loading and syncing.

1100
01:04:13,360 --> 01:04:14,200
Oh, okay.

1101
01:04:14,200 --> 01:04:25,000
Okay, lots of people did something similar as me. What I did is I created a commit on

1102
01:04:25,000 --> 01:04:32,180
the main branch and I wanted to modify the pumpkin by recipe. But I also created a branch

1103
01:04:32,180 --> 01:04:41,040
called new recipe on which I created two commits. I had an idea for a pineapple salad and I

1104
01:04:41,040 --> 01:04:43,760
had a modification tonic water.

1105
01:04:43,760 --> 01:04:47,320
Not sure it's a good idea, but I just came up with that.

1106
01:04:47,320 --> 01:04:49,480
My goal now is to, I want to combine,

1107
01:04:49,480 --> 01:04:53,200
I want to merge this branch into this branch.

1108
01:04:53,200 --> 01:04:57,420
Notice how GitHub shows these branches as little labels.

1109
01:04:58,440 --> 01:05:01,920
Technically they work really like little sticky notes

1110
01:05:01,920 --> 01:05:03,300
which stick to a commit.

1111
01:05:05,680 --> 01:05:08,240
My goal is to combine these two, to merge these two.

1112
01:05:11,040 --> 01:05:15,920
I'm just reading up whether any, I forgot anything.

1113
01:05:15,920 --> 01:05:17,680
We will do it with a pull request.

1114
01:05:19,220 --> 01:05:22,020
Again, when I hear pull request, I think change proposal.

1115
01:05:23,120 --> 01:05:25,280
And again, we offer you three paths.

1116
01:05:25,280 --> 01:05:29,040
You can do that purely on GitHub.

1117
01:05:29,040 --> 01:05:32,820
You can also try to do that through VS code or command line.

1118
01:05:34,960 --> 01:05:36,960
And I just want to get you started here.

1119
01:05:36,960 --> 01:05:38,680
Before you sending you into the exercise,

1120
01:05:38,680 --> 01:05:39,980
I want to get you started.

1121
01:05:41,040 --> 01:05:46,040
on how to initiate this pull request.

1122
01:05:51,040 --> 01:05:53,280
This will actually allow me to also answer one question

1123
01:05:53,280 --> 01:05:54,480
that I wanted to answer.

1124
01:05:59,200 --> 01:06:00,800
So again, first thing you want to check,

1125
01:06:00,800 --> 01:06:04,080
are you on your fork?

1126
01:06:04,080 --> 01:06:04,920
Yes, I am.

1127
01:06:04,920 --> 01:06:17,280
Then, you want to navigate to the branch that you want to send the change proposal from.

1128
01:06:17,280 --> 01:06:23,600
So in my case, I click on the main, this will be part of the exercise, and you want to then

1129
01:06:23,600 --> 01:06:29,360
navigate to the branch that you want to incorporate into main, that you want to merge into main.

1130
01:06:29,360 --> 01:06:30,800
In my case, it's new recipe.

1131
01:06:35,020 --> 01:06:36,880
And then this thing changed here.

1132
01:06:36,880 --> 01:06:39,920
Now I know that I'm on the new recipe branch.

1133
01:06:42,080 --> 01:06:44,320
Somebody in the document also asked,

1134
01:06:44,320 --> 01:06:46,680
how do I find an overview of the branches?

1135
01:06:46,680 --> 01:06:48,320
I don't know where to,

1136
01:06:50,040 --> 01:06:51,920
I don't know how to rename a branch.

1137
01:06:51,920 --> 01:06:55,200
It's this thing here, this symbol.

1138
01:06:55,200 --> 01:06:58,240
And if I zoom out, it will change to,

1139
01:06:58,240 --> 01:07:00,200
it will tell me there are five branches.

1140
01:07:00,200 --> 01:07:02,880
And if I zoom in, it changes to a symbol.

1141
01:07:02,880 --> 01:07:05,940
And if you click on this one,

1142
01:07:05,940 --> 01:07:08,640
you can get an overview of all the available branches.

1143
01:07:11,520 --> 01:07:13,820
And here I could delete them or I could rename them.

1144
01:07:13,820 --> 01:07:16,000
So if I don't like the name, new recipe,

1145
01:07:16,000 --> 01:07:19,920
I could here rename the branch.

1146
01:07:22,520 --> 01:07:23,720
But I will not do that.

1147
01:07:25,000 --> 01:07:26,200
So back to my branch.

1148
01:07:28,240 --> 01:07:38,480
new recipe, and then to initiate this pull request process, you can click on contribute.

1149
01:07:39,920 --> 01:07:47,600
Contribute, open pull request, and this will be your first step in the exercise. So

1150
01:07:49,360 --> 01:07:53,120
back to the exercise, let me tell you what the goal is, and we will give you 20 minutes. Your

1151
01:07:53,120 --> 01:07:58,120
your goal is navigate to your branch, open a pull request.

1152
01:08:00,640 --> 01:08:02,000
Then in the pull request,

1153
01:08:02,000 --> 01:08:04,840
it will ask you to give it the title and a description.

1154
01:08:06,660 --> 01:08:09,520
Please also use the walkthrough and the solution below

1155
01:08:09,520 --> 01:08:13,680
because we added a checklist for you

1156
01:08:13,680 --> 01:08:17,000
of things that we check when we create a pull request.

1157
01:08:19,200 --> 01:08:20,720
And then after you have created,

1158
01:08:20,720 --> 01:08:25,720
Also, before you create it, browse your network.

1159
01:08:27,720 --> 01:08:28,560
What is the network?

1160
01:08:28,560 --> 01:08:32,520
It's this thing, Insights Network.

1161
01:08:32,520 --> 01:08:34,400
So when you open a pull request,

1162
01:08:38,560 --> 01:08:39,400
waiting, waiting, waiting.

1163
01:08:39,400 --> 01:08:42,180
So after you open it, have a look at your network,

1164
01:08:42,180 --> 01:08:44,540
you will see that the change is not merged yet.

1165
01:08:44,540 --> 01:08:50,540
Only after you merge the pull request,

1166
01:08:50,540 --> 01:08:52,540
have a look at the network again,

1167
01:08:52,540 --> 01:08:56,540
and then you will see that there is a new merge commit.

1168
01:08:56,540 --> 01:08:59,540
Then we have an extra step, which is

1169
01:08:59,540 --> 01:09:02,540
find out which branches are safe to delete,

1170
01:09:02,540 --> 01:09:04,540
and delete them.

1171
01:09:04,540 --> 01:09:09,540
And you will also see that deleting branches doesn't necessarily delete commits.

1172
01:09:09,540 --> 01:09:13,540
And then an optional step is, if you feel like it,

1173
01:09:13,540 --> 01:09:23,380
try to open a new pull request, but then this time towards the repository which you forked from.

1174
01:09:26,260 --> 01:09:31,700
And I will later demonstrate this. We will do that with Gecko. We will also try to actually

1175
01:09:31,700 --> 01:09:38,580
create, we will try to both change the same recipe in two different ways and we will see what happens

1176
01:09:38,580 --> 01:09:50,640
then. 20 minutes, we will be back. Is 20 minutes enough? 20 minutes will be enough. We'll be

1177
01:09:50,640 --> 01:10:03,140
back 45 minutes past the hour. And here, 45 minutes past the hour. Again, it will be really

1178
01:10:03,140 --> 01:10:13,260
helpful if you tell us how it is going. We get a status and an overview. Keep the questions

1179
01:10:13,260 --> 01:10:19,460
coming. Good luck with the exercise and we will then discuss afterwards. Good luck. See

1180
01:10:19,460 --> 01:10:28,100
you then. Bye.

1181
01:10:28,100 --> 01:10:29,740
Welcome back from exercise.

1182
01:10:31,900 --> 01:10:33,180
I actually cannot hear the jingle

1183
01:10:33,180 --> 01:10:35,260
if there was one on my side, but maybe there was one

1184
01:10:35,260 --> 01:10:36,820
and hopefully you all enjoy it.

1185
01:10:38,380 --> 01:10:40,880
Thanks to our colleague Matthias who created those.

1186
01:10:43,220 --> 01:10:48,220
My plan is now that I want to go through the exercise

1187
01:10:48,380 --> 01:10:50,560
but show you the key steps.

1188
01:10:50,560 --> 01:10:53,540
And I want to show you how we, how Gecko and we,

1189
01:10:53,540 --> 01:10:58,020
how we look at pull requests when we create them

1190
01:10:58,020 --> 01:11:00,120
and how we look at them when we merge them.

1191
01:11:02,580 --> 01:11:04,260
And I also want to go through this step

1192
01:11:04,260 --> 01:11:06,140
of deleting branches.

1193
01:11:06,140 --> 01:11:09,040
And then we will take a very short break.

1194
01:11:09,040 --> 01:11:11,260
So then only five minute break,

1195
01:11:11,260 --> 01:11:14,180
and then we will back for conflict resolution.

1196
01:11:15,920 --> 01:11:18,080
So let me go through the steps.

1197
01:11:18,080 --> 01:11:21,100
I'm now here, top left is my mouse.

1198
01:11:21,100 --> 01:11:22,620
I'm in my branch.

1199
01:11:22,620 --> 01:11:26,200
I will now initiate a pull request.

1200
01:11:28,020 --> 01:11:34,740
Let me get more space here.

1201
01:11:34,740 --> 01:11:37,620
And the first thing I always verify is from where to where.

1202
01:11:37,620 --> 01:11:43,260
So I want to go from this repository to this one.

1203
01:11:43,260 --> 01:11:45,320
No, I want to go to my own one.

1204
01:11:45,320 --> 01:11:50,660
So I will change this to my repository.

1205
01:11:50,660 --> 01:11:55,180
And then I verify from which branch to which branch from new recipe to main.

1206
01:11:55,180 --> 01:11:56,580
Yes, that's what I wanted.

1207
01:11:59,900 --> 01:12:00,780
I will change the title

1208
01:12:00,780 --> 01:12:02,820
because the new recipe is not very descriptive.

1209
01:12:02,820 --> 01:12:06,460
So we want to have a descriptive one-line title for this.

1210
01:12:06,460 --> 01:12:07,980
Also, if I remember correctly,

1211
01:12:07,980 --> 01:12:12,980
it was idea for a tasty pineapple salad.

1212
01:12:17,380 --> 01:12:21,180
Here, I can give more context, more context.

1213
01:12:21,180 --> 01:12:31,020
For instance, if, if we discussed this earlier in an issue, I can refer to it.

1214
01:12:31,020 --> 01:12:34,540
So more context, why I did this, what I did.

1215
01:12:34,540 --> 01:12:40,780
And then what I personally do before clicking create pull request, I normally scroll down

1216
01:12:40,780 --> 01:12:45,780
and I have a look, I had two commits.

1217
01:12:45,780 --> 01:12:49,060
Are these the one that I intended to send?

1218
01:12:49,060 --> 01:12:50,060
Yes.

1219
01:12:50,060 --> 01:12:53,260
see some commits that I don't recognize, then I stop.

1220
01:12:54,780 --> 01:12:56,700
I also scroll down to the bottom and I see

1221
01:12:56,700 --> 01:12:58,060
what is the actual change.

1222
01:12:59,460 --> 01:13:01,580
Is this the one that I wanted to send?

1223
01:13:01,580 --> 01:13:02,660
Yes, this is the one.

1224
01:13:04,660 --> 01:13:06,160
So this looks all pretty good.

1225
01:13:10,580 --> 01:13:12,260
Note that here, if I go on the little arrow,

1226
01:13:12,260 --> 01:13:15,220
I have a choice between create pull request

1227
01:13:15,220 --> 01:13:16,740
and create draft pull request.

1228
01:13:18,180 --> 01:13:19,340
This thing can be really useful,

1229
01:13:19,340 --> 01:13:21,380
but we will come back to that on Thursday.

1230
01:13:23,300 --> 01:13:25,860
I'm now ready to create a pull request.

1231
01:13:25,860 --> 01:13:27,060
Did I forget anything?

1232
01:13:28,180 --> 01:13:29,160
Hopefully not.

1233
01:13:30,580 --> 01:13:31,460
Let's create it.

1234
01:13:34,580 --> 01:13:36,140
When I create a pull request,

1235
01:13:37,380 --> 01:13:40,500
there is a new number here in the tab, pull requests.

1236
01:13:40,500 --> 01:13:43,020
Each pull request has a number,

1237
01:13:43,020 --> 01:13:44,860
so I can refer to them.

1238
01:13:44,860 --> 01:13:46,660
This is the pull request number one.

1239
01:13:49,340 --> 01:13:52,700
And before I review it and before I merge it,

1240
01:13:54,820 --> 01:13:56,780
I will try to reload my network graph

1241
01:13:56,780 --> 01:13:59,060
and it might take again a few seconds.

1242
01:14:00,220 --> 01:14:02,020
But what I wanted to show you is that

1243
01:14:02,020 --> 01:14:05,920
just by opening up a request, I didn't really,

1244
01:14:08,460 --> 01:14:09,740
oh, nothing merged yet.

1245
01:14:09,740 --> 01:14:12,020
The main branch didn't change yet.

1246
01:14:14,300 --> 01:14:15,640
This is still my branch.

1247
01:14:15,640 --> 01:14:20,000
the tasty pineapple recipe is still not on the main branch,

1248
01:14:21,760 --> 01:14:23,040
but now let's review it.

1249
01:14:25,200 --> 01:14:29,720
And when I merge a change proposal or request,

1250
01:14:30,560 --> 01:14:35,560
I look at the same things, the title, what is the context?

1251
01:14:39,320 --> 01:14:41,720
And notice that here we can even have a discussion,

1252
01:14:41,720 --> 01:14:45,000
you can comment on it, you can say this is a good idea,

1253
01:14:45,000 --> 01:14:49,280
is a bad idea or you can give ideas for changes.

1254
01:14:50,920 --> 01:14:54,640
More about that on Thursday.

1255
01:14:54,640 --> 01:14:57,720
I also look at what are the commits

1256
01:14:58,960 --> 01:15:00,080
and what has actually changed.

1257
01:15:00,080 --> 01:15:01,960
I often click here, files changed.

1258
01:15:06,040 --> 01:15:07,520
Yep, that looks pretty okay.

1259
01:15:07,520 --> 01:15:09,960
I want to have that in my main branch.

1260
01:15:15,000 --> 01:15:25,400
merge, merge, confirm

1261
01:15:25,400 --> 01:15:35,760
and now it's merged. So when I now look at the network and reload it

1262
01:15:35,760 --> 01:15:41,280
we will see a merge commit. We will see a new commit on main which combines these two

1263
01:15:41,280 --> 01:15:52,240
developments. And while this is loading and refreshing, I can already, if I now check

1264
01:15:52,240 --> 01:16:02,720
on my main branch, and I go to Sellads, here I can find it. Here's the one. Has this finished

1265
01:16:02,720 --> 01:16:09,680
in the meantime? It hasn't. Yes, here it is. Here's the merge commit. So now I have merged

1266
01:16:09,680 --> 01:16:10,800
these two changes.

1267
01:16:11,760 --> 01:16:13,240
And this is now a little bit hard to navigate

1268
01:16:13,240 --> 01:16:14,960
because we have now so many collaborators

1269
01:16:14,960 --> 01:16:16,920
that work on a very similar repository.

1270
01:16:18,120 --> 01:16:20,140
But this is really what I wanted to do.

1271
01:16:20,140 --> 01:16:21,540
So I'm happy with this.

1272
01:16:23,600 --> 01:16:25,520
But now I want to go one step further.

1273
01:16:25,520 --> 01:16:28,040
In the exercise we asked you to,

1274
01:16:28,040 --> 01:16:29,640
okay, scroll, scroll.

1275
01:16:30,840 --> 01:16:33,300
We asked you to delete a branch.

1276
01:16:33,300 --> 01:16:36,880
And what I will show you is that when I delete a branch,

1277
01:16:36,880 --> 01:16:40,320
I will only delete this sticky note.

1278
01:16:40,320 --> 01:16:42,040
I will not delete the commits.

1279
01:16:42,040 --> 01:16:43,480
The commits will still remain there

1280
01:16:43,480 --> 01:16:47,580
because the commits are now part of another branch.

1281
01:16:48,880 --> 01:16:53,560
So what we wanted you to see that deleting branches

1282
01:16:53,560 --> 01:16:56,440
doesn't necessarily delete commits.

1283
01:16:56,440 --> 01:16:58,640
And we also wanted to show you

1284
01:16:58,640 --> 01:17:00,980
how can you safely remove branches.

1285
01:17:00,980 --> 01:17:10,180
One way is I can click on the button and then it's gone because here Git knows that GitHub

1286
01:17:10,180 --> 01:17:12,660
knows that this has been merged.

1287
01:17:12,660 --> 01:17:14,860
It is safe to delete the branch.

1288
01:17:14,860 --> 01:17:18,460
It is safe to delete the sticky note.

1289
01:17:18,460 --> 01:17:21,180
But what if I forget?

1290
01:17:21,180 --> 01:17:23,420
I forgot.

1291
01:17:23,420 --> 01:17:27,860
I navigated back.

1292
01:17:27,860 --> 01:17:31,180
How can you find out which branches are safe to delete?

1293
01:17:31,180 --> 01:17:32,180
You can also leave them there.

1294
01:17:32,180 --> 01:17:35,100
I mean, they don't cost anything.

1295
01:17:35,100 --> 01:17:37,700
No problem to have them there.

1296
01:17:37,700 --> 01:17:40,700
But after a while, maybe you will have, I have now five branches.

1297
01:17:40,700 --> 01:17:45,740
After a while, you might have 50 branches and you want to do some cleanup.

1298
01:17:45,740 --> 01:17:56,980
So what I sometimes do is I navigate here to the branches, top left.

1299
01:17:56,980 --> 01:18:03,700
And this is a little bit tiny font, but this symbol here tells me that this branch has

1300
01:18:03,700 --> 01:18:09,860
been merged.

1301
01:18:09,860 --> 01:18:11,860
This one has been merged, the new recipe.

1302
01:18:11,860 --> 01:18:18,780
It is absolutely safe to delete it here, trashcan.

1303
01:18:18,780 --> 01:18:20,220
And now it's deleted.

1304
01:18:20,220 --> 01:18:31,860
And if I now reload this page, I would have to wait a few seconds. The commit will still

1305
01:18:31,860 --> 01:18:44,220
be here, but this sticky note would be gone. That's all we did with deleting branches.

1306
01:18:44,220 --> 01:18:55,220
And my suggestion is that we will take a five minute break and then Gregor and me will return

1307
01:18:55,220 --> 01:19:03,580
to step number seven and we will do a pull request, we will show you a pull request across

1308
01:19:03,580 --> 01:19:11,180
repositories and at the same time we will try to create a conflict, but it will be a

1309
01:19:11,180 --> 01:19:14,900
a conflict between two different code versions,

1310
01:19:14,900 --> 01:19:16,300
so it will be very friendly,

1311
01:19:17,660 --> 01:19:21,300
and the humans will help the programs

1312
01:19:21,300 --> 01:19:22,780
to resolve the conflict.

1313
01:19:25,940 --> 01:19:26,780
Sounds good.

1314
01:19:27,620 --> 01:19:30,040
Just catching up here with any questions.

1315
01:19:31,780 --> 01:19:33,860
Yeah, so let's take a break until the full hour,

1316
01:19:33,860 --> 01:19:38,200
so until, oh, I need to make that visible.

1317
01:19:38,200 --> 01:19:49,360
here, break until the full hour and then we show you some conflict resolution in Git directly

1318
01:19:49,360 --> 01:20:01,080
on GitHub. See you in five minutes. Bye.

1319
01:20:01,080 --> 01:20:05,880
And welcome back for the last half an hour of today.

1320
01:20:05,880 --> 01:20:16,480
Here we will continue on the idea of creating these change proposals pull requests on GitHub.

1321
01:20:16,480 --> 01:20:19,560
But now we want to take it a step further.

1322
01:20:19,560 --> 01:20:26,840
Because what I will try to do is I will try to create a pull request between my repository

1323
01:20:26,840 --> 01:20:28,980
and towards the one that I forked from.

1324
01:20:31,340 --> 01:20:32,740
At the same time, we will,

1325
01:20:34,100 --> 01:20:36,620
with Gaggle, we will try to change

1326
01:20:36,620 --> 01:20:39,140
the same recipe

1327
01:20:41,100 --> 01:20:43,740
in two different ways, and we will see what happens

1328
01:20:43,740 --> 01:20:45,020
and how do we deal with it,

1329
01:20:45,020 --> 01:20:46,700
because that can happen in real life,

1330
01:20:46,700 --> 01:20:48,900
that you work with somebody

1331
01:20:48,900 --> 01:20:52,720
and you modify a same portion of the file

1332
01:20:52,720 --> 01:20:53,780
in two different ways.

1333
01:20:53,780 --> 01:20:58,300
Let's see how Git deals with this.

1334
01:20:58,300 --> 01:21:04,220
Also note that when I'm now on my fork, it informs me that this branch, which is the

1335
01:21:04,220 --> 01:21:15,780
main branch, seems to be four commits ahead of the one that I forked from.

1336
01:21:15,780 --> 01:21:24,900
It's interesting because that also shows me that the fork and the so-called upstream,

1337
01:21:24,900 --> 01:21:31,860
they don't automatically synchronize somehow magically.

1338
01:21:31,860 --> 01:21:37,580
I have to, we can synchronize it, but we have to do it actively.

1339
01:21:37,580 --> 01:21:43,340
So until I do it, they are really separate repositories with their separate histories.

1340
01:21:43,340 --> 01:21:53,300
Why four commits? What are the four commits? I did two commits on the new recipe branch.

1341
01:21:53,300 --> 01:21:57,820
I did a different commit on the main branch, so three. Where is the fourth one? The fourth

1342
01:21:57,820 --> 01:22:04,220
one was the merge commit. It was the one where I combined new recipe with main. So my branch

1343
01:22:04,220 --> 01:22:11,380
is four commits ahead. But now I will try to create a new change. And let's see what

1344
01:22:11,380 --> 01:22:24,280
we do. We'll create a new branch and I will call it another recipe. It's not a great name.

1345
01:22:24,280 --> 01:22:30,680
It's also good if the branches are, if the branch name is descriptive. Let me take a

1346
01:22:30,680 --> 01:22:37,520
descriptive branch name. I personally like to call my branches with my name because then

1347
01:22:37,520 --> 01:22:39,440
and I can find them again.

1348
01:22:39,440 --> 01:22:41,280
And what are I doing on the branch?

1349
01:22:41,280 --> 01:22:43,440
So in this case, I will do,

1350
01:22:46,280 --> 01:22:50,160
I will make a change to modify guacamole.

1351
01:22:52,920 --> 01:22:54,080
So now everybody, please watch.

1352
01:22:54,080 --> 01:22:55,560
So now no more exercise.

1353
01:22:55,560 --> 01:22:58,200
You don't have to do the same thing.

1354
01:22:59,100 --> 01:23:04,100
Now, please watch and let's see if I make some mistakes.

1355
01:23:04,100 --> 01:23:08,580
If I make some mistakes, and please continue asking the questions, so I'm seeing the questions

1356
01:23:08,580 --> 01:23:09,580
coming in.

1357
01:23:09,580 --> 01:23:12,580
I create this branch.

1358
01:23:12,580 --> 01:23:17,620
What do I need to do now?

1359
01:23:17,620 --> 01:23:21,540
Oh yeah, here, create branch.

1360
01:23:21,540 --> 01:23:23,860
Yes.

1361
01:23:23,860 --> 01:23:24,860
And here it is.

1362
01:23:24,860 --> 01:23:25,860
So I'm on the new branch.

1363
01:23:25,860 --> 01:23:26,860
And guess what?

1364
01:23:26,860 --> 01:23:33,860
I will now modify the guacamole, which happens to be here, sides, guacamole.

1365
01:23:33,860 --> 01:23:41,820
And I can modify it directly here, the pen button on top right, edit.

1366
01:23:41,820 --> 01:23:45,100
What should we do with it?

1367
01:23:45,100 --> 01:23:48,320
So I personally am not a big fan of cilantro.

1368
01:23:48,320 --> 01:23:59,880
What I will do is I will reduce the cilantro amount to 0.5 tablespoons.

1369
01:23:59,880 --> 01:24:06,760
I like to do when I do this on GitHub is I switch on the preview so that I can see what

1370
01:24:06,760 --> 01:24:24,200
did I actually change showed it here I removed one I added 0.5 that looks good and now I

1371
01:24:24,200 --> 01:24:27,220
I want to commit the change on the branch.

1372
01:24:29,560 --> 01:24:31,860
This is not a good commit message

1373
01:24:31,860 --> 01:24:34,600
because it tells me what file I changed

1374
01:24:34,600 --> 01:24:38,120
but it doesn't really summarize what I did.

1375
01:24:38,120 --> 01:24:39,960
A much better commit message would be

1376
01:24:41,120 --> 01:24:42,920
reduce the cilantro amount.

1377
01:24:44,760 --> 01:24:45,960
And why did I change it?

1378
01:24:45,960 --> 01:24:48,160
Well, because I'm not a fan.

1379
01:24:48,160 --> 01:25:03,600
Does this look okay? Yes. Do the guacamole branch commit changes.

1380
01:25:03,600 --> 01:25:14,000
If I now go back to my repository on top, there is this yellow field that also some people

1381
01:25:14,000 --> 01:25:19,440
wondering about what is that. This is because GitHub now recognized that I have a new branch,

1382
01:25:19,440 --> 01:25:25,600
I modified it recently. I maybe want to create a pull request. Yes, thank you, I want to.

1383
01:25:26,320 --> 01:25:30,400
So this can be helpful sometimes. If you don't want to create a pull request, just ignore it.

1384
01:25:30,400 --> 01:25:38,720
But I really want to. And this time, I want to create the pull request not

1385
01:25:38,720 --> 01:25:41,880
not inside the same repository.

1386
01:25:41,880 --> 01:25:44,680
I really want to send it to Code Refinery recipe book.

1387
01:25:45,600 --> 01:25:46,440
So this looks good.

1388
01:25:46,440 --> 01:25:48,540
From my branch, from my repository,

1389
01:25:49,640 --> 01:25:52,860
towards the main branch, Code Refinery recipe book.

1390
01:25:55,720 --> 01:25:57,560
Let's summarize it in a title.

1391
01:25:58,560 --> 01:26:02,440
Reduce cilantro amount.

1392
01:26:05,620 --> 01:26:07,160
More description if needed.

1393
01:26:07,160 --> 01:26:10,120
Again, I scroll down.

1394
01:26:10,120 --> 01:26:11,460
What is the change?

1395
01:26:14,640 --> 01:26:16,560
Here is the change.

1396
01:26:16,560 --> 01:26:18,960
Now, how come I see all these other things?

1397
01:26:23,800 --> 01:26:25,920
Which I didn't modify now.

1398
01:26:25,920 --> 01:26:30,920
This is because my main branch was four commits ahead

1399
01:26:32,840 --> 01:26:35,040
and I created this new,

1400
01:26:35,040 --> 01:26:37,580
I created this, what was it called?

1401
01:26:38,580 --> 01:26:40,620
The other one modified guacamole from main

1402
01:26:40,620 --> 01:26:42,100
which was four commits ahead.

1403
01:26:42,100 --> 01:26:47,100
So what I see here is not only the cilantro change

1404
01:26:47,780 --> 01:26:49,700
but also all my other local changes.

1405
01:26:51,060 --> 01:26:53,060
This is fine, but maybe this is a bit misleading.

1406
01:26:53,060 --> 01:26:55,440
So it's not only the cilantro amount,

1407
01:26:55,440 --> 01:27:00,440
it's also plus new salad recipe.

1408
01:27:05,040 --> 01:27:12,040
So, here I bake together a couple of unrelated changes into the same pull request.

1409
01:27:12,040 --> 01:27:20,040
Not the best practice, but happens.

1410
01:27:20,040 --> 01:27:26,040
And now I will open the pull request.

1411
01:27:26,040 --> 01:27:28,040
Good.

1412
01:27:28,040 --> 01:27:34,000
Oh, there are already 18 pull requests, wonderful.

1413
01:27:34,000 --> 01:27:35,440
We will review them later.

1414
01:27:35,440 --> 01:27:36,720
We will maybe not have time now,

1415
01:27:36,720 --> 01:27:39,520
but thanks to everybody else who sent pull requests.

1416
01:27:39,520 --> 01:27:40,360
This is really cool

1417
01:27:40,360 --> 01:27:42,980
because we can now build together our recipe book.

1418
01:27:44,840 --> 01:27:46,960
But I suggest that now we switch the screen to Gregor

1419
01:27:46,960 --> 01:27:48,280
and Gregor makes a pull request,

1420
01:27:48,280 --> 01:27:52,560
which will also modify the guacamole recipe,

1421
01:27:52,560 --> 01:27:53,640
but in a different way.

1422
01:27:53,640 --> 01:27:55,200
And let's see what happens then.

1423
01:28:04,000 --> 01:28:13,440
And Gregor, you're muted.

1424
01:28:13,440 --> 01:28:15,520
Thanks for telling me.

1425
01:28:15,520 --> 01:28:21,640
So I'm now on my work of the recipe book recorded repository.

1426
01:28:21,640 --> 01:28:26,440
And I will now change the same recipe that Radovan has changed before.

1427
01:28:26,440 --> 01:28:30,560
In fact, in a previous in the previous exercise, I changed the amount already, but I will now

1428
01:28:30,560 --> 01:28:34,160
increase it to two tablespoons of cilantro.

1429
01:28:34,160 --> 01:28:35,560
Oh, go for three.

1430
01:28:35,560 --> 01:28:36,760
I'll go for three, okay.

1431
01:28:39,360 --> 01:28:41,440
So I will now make a commit.

1432
01:28:41,440 --> 01:28:46,440
So I will now say increase amount of cilantro.

1433
01:28:48,800 --> 01:28:51,560
Again, I could provide some more extended description.

1434
01:28:51,560 --> 01:28:53,280
It's, I don't know, I really like

1435
01:28:53,280 --> 01:29:04,160
So the intro, for instance, and like, of course, provide some more explanations, but for now,

1436
01:29:04,160 --> 01:29:05,160
that should be enough.

1437
01:29:05,160 --> 01:29:08,040
I will now commit the changes.

1438
01:29:08,040 --> 01:29:09,720
So I've created now a new commit.

1439
01:29:09,720 --> 01:29:22,200
So if I go back to my repository, I will see now again, if I click on commits, oh, sorry,

1440
01:29:22,200 --> 01:29:24,100
that's the wrong branch, my bad.

1441
01:29:24,100 --> 01:29:27,840
So I go now to the change cilantro branch.

1442
01:29:28,980 --> 01:29:31,520
And I take a look at the commits, it should appear now.

1443
01:29:32,900 --> 01:29:33,820
And it does.

1444
01:29:33,820 --> 01:29:36,560
So increase amount of cilantro, that's fine.

1445
01:29:36,560 --> 01:29:38,920
And now I compare pull requests.

1446
01:29:41,820 --> 01:29:43,380
Create a pull request.

1447
01:29:43,380 --> 01:29:46,420
So I go and choose the repository I want to

1448
01:29:47,540 --> 01:29:48,940
merge my changes to.

1449
01:29:48,940 --> 01:29:52,320
So this would then be co-definery recipe book recorded.

1450
01:29:52,320 --> 01:29:53,160
That's fine.

1451
01:29:53,160 --> 01:29:56,800
I enter the main branch and I do it from my local branch

1452
01:29:56,800 --> 01:29:59,640
here, which is in my namespace.

1453
01:29:59,640 --> 01:30:04,640
And I used to change cilantro branch.

1454
01:30:04,680 --> 01:30:07,880
So I can now say, again, I should also provide a title

1455
01:30:07,880 --> 01:30:08,680
which is more descriptive.

1456
01:30:08,680 --> 01:30:13,120
So increase cilantro in,

1457
01:30:13,120 --> 01:30:18,120
Oh, remind me of the way, it's okay.

1458
01:30:22,880 --> 01:30:24,040
Guacamole recipe.

1459
01:30:25,280 --> 01:30:27,360
Then I quickly check the changes.

1460
01:30:27,360 --> 01:30:29,680
In this case, I have two commits.

1461
01:30:29,680 --> 01:30:31,600
One in the first, which was in the previous exercise,

1462
01:30:31,600 --> 01:30:33,360
where I reduced it, now I increased it.

1463
01:30:33,360 --> 01:30:34,460
And here, down here again,

1464
01:30:34,460 --> 01:30:37,120
I see the changes actually in the files directly.

1465
01:30:37,120 --> 01:30:38,720
So this is what I want to merge.

1466
01:30:38,720 --> 01:30:41,960
And I can see here that I increased the amount of cilantro

1467
01:30:41,960 --> 01:30:49,080
by free. So I will now create the pull request and then I will give the screen

1468
01:30:49,080 --> 01:30:51,840
back to the other one.

1469
01:30:53,000 --> 01:30:58,440
All righty, I will take the screen and let's see how it looks on my side.

1470
01:30:59,080 --> 01:31:02,560
Just a sec.

1471
01:31:04,200 --> 01:31:07,480
Here I have it.

1472
01:31:07,480 --> 01:31:20,800
And I'm now looking at the, that's not my fork, that's the central repository.

1473
01:31:20,800 --> 01:31:26,840
And I clicked on the pull requests map, there are 21 open, 22 now.

1474
01:31:26,840 --> 01:31:31,480
Thanks to all of you, we will look through them and merge them.

1475
01:31:31,480 --> 01:31:35,680
Maybe some of you tried to merge these and now you realize that you cannot.

1476
01:31:35,680 --> 01:31:41,480
And this is a bit by design, but now because now only the code refinery team has the permissions

1477
01:31:41,480 --> 01:31:48,040
to merge and modify this repository, but don't worry, we will on Thursday, when we really

1478
01:31:48,040 --> 01:31:54,440
practice collaboration, we will create exercise repositories where you also have permissions

1479
01:31:54,440 --> 01:31:58,200
to review and merge and modify those.

1480
01:31:58,200 --> 01:32:02,280
So then he will also practice being the person

1481
01:32:02,280 --> 01:32:03,840
who is reviewing these changes.

1482
01:32:06,600 --> 01:32:09,360
So now I want to focus on two changes.

1483
01:32:09,360 --> 01:32:12,360
One is the one that I created

1484
01:32:13,240 --> 01:32:16,880
and the other one is the one that Gregor created.

1485
01:32:16,880 --> 01:32:20,040
And now I will do something which is not super nice.

1486
01:32:20,040 --> 01:32:21,520
I shouldn't really review my own changes,

1487
01:32:21,520 --> 01:32:22,800
but now for the sake of time,

1488
01:32:22,800 --> 01:32:25,720
I don't want to switch too much back and forth.

1489
01:32:25,720 --> 01:32:29,120
I will view my own change.

1490
01:32:31,400 --> 01:32:32,880
And of course it's excellent,

1491
01:32:32,880 --> 01:32:35,800
but I will still double check here.

1492
01:32:35,800 --> 01:32:38,000
Is this what I really wanted?

1493
01:32:38,000 --> 01:32:38,840
What's happening here?

1494
01:32:38,840 --> 01:32:43,840
Lots of changes, but looks pretty okay overall.

1495
01:32:46,120 --> 01:32:49,200
I will merge it into main branch.

1496
01:32:49,200 --> 01:32:54,200
And now it is, is it safe to delete?

1497
01:32:57,640 --> 01:32:59,640
Yes, it's safe to delete.

1498
01:32:59,640 --> 01:33:04,320
Now it is on the main branch in the central repository.

1499
01:33:05,480 --> 01:33:06,320
And that worked.

1500
01:33:07,700 --> 01:33:08,580
But let's see what happens

1501
01:33:08,580 --> 01:33:10,880
when I now try to merge Gregor's change.

1502
01:33:14,200 --> 01:33:17,380
This one, the pull request number 39.

1503
01:33:19,200 --> 01:33:25,400
Here we go.

1504
01:33:25,400 --> 01:33:26,400
Something is different here.

1505
01:33:26,400 --> 01:33:29,000
And it's this one.

1506
01:33:29,000 --> 01:33:30,000
It doesn't let me merge.

1507
01:33:30,000 --> 01:33:33,400
I can't really click here.

1508
01:33:33,400 --> 01:33:35,940
Because there are conflicts.

1509
01:33:35,940 --> 01:33:37,040
And why are the conflicts?

1510
01:33:37,040 --> 01:33:41,600
Because on two different branches, we have changed the same portion in two different

1511
01:33:41,600 --> 01:33:42,600
ways.

1512
01:33:42,600 --> 01:33:47,200
The git now doesn't know which one do we want to keep, like, do we want to keep the one

1513
01:33:47,200 --> 01:33:49,080
that is now on main?

1514
01:33:49,080 --> 01:33:51,480
Or do I want to keep the one that,

1515
01:33:51,480 --> 01:33:54,480
the change that comes in from this other branch?

1516
01:33:54,480 --> 01:33:56,320
And we have to help get deciding.

1517
01:33:58,060 --> 01:33:59,680
It's really good that it stops here

1518
01:33:59,680 --> 01:34:03,360
because it doesn't, it will not just accidentally

1519
01:34:04,920 --> 01:34:09,080
let Gago override my changes.

1520
01:34:09,080 --> 01:34:13,320
So it stops here, it needs some human advice.

1521
01:34:15,400 --> 01:34:16,400
So let's try that together.

1522
01:34:16,400 --> 01:34:20,560
And you can do it in many different ways,

1523
01:34:20,560 --> 01:34:23,240
but we will try it here directly on GitHub.

1524
01:34:25,120 --> 01:34:26,080
And Gregor will help me.

1525
01:34:26,080 --> 01:34:28,760
So I click first on resolve conflicts

1526
01:34:28,760 --> 01:34:30,400
just to see what is the conflict.

1527
01:34:39,560 --> 01:34:42,480
And it doesn't now show me all the...

1528
01:34:42,480 --> 01:34:45,360
If you remember, I have changed a couple of files.

1529
01:34:45,360 --> 01:34:47,920
I changed guacamole, but there was also some pineapple salad

1530
01:34:47,920 --> 01:34:49,520
and there was some other change.

1531
01:34:50,920 --> 01:34:53,720
But we only conflict in this one file

1532
01:34:53,720 --> 01:34:56,080
and we only conflict in this one portion.

1533
01:34:58,640 --> 01:35:01,520
These that I see here, these symbols

1534
01:35:03,460 --> 01:35:08,040
are so-called conflict markers.

1535
01:35:08,040 --> 01:35:09,800
They tell me where is the conflict.

1536
01:35:11,160 --> 01:35:12,680
And the conflict is between main

1537
01:35:12,680 --> 01:35:17,680
and between the main branch and the change cilantro branch.

1538
01:35:19,360 --> 01:35:21,840
On the main branch, I reduced it to 0.5.

1539
01:35:21,840 --> 01:35:23,120
On the change cilantro branch,

1540
01:35:23,120 --> 01:35:26,000
it was changed from one to three.

1541
01:35:28,320 --> 01:35:29,620
And we need to decide now.

1542
01:35:32,180 --> 01:35:35,080
And I will now not take my own version,

1543
01:35:35,080 --> 01:35:39,100
but I will take this version.

1544
01:35:39,100 --> 01:35:45,540
And the way to resolve a conflict is, and whether you are on GitHub or whether you are

1545
01:35:45,540 --> 01:35:51,980
in your editor, that's to decide which version and then don't forget to remove these markers

1546
01:35:51,980 --> 01:35:52,980
also.

1547
01:35:52,980 --> 01:35:53,980
They should not stay there.

1548
01:35:53,980 --> 01:36:04,380
So I will, I decide to keep three, remove these markers.

1549
01:36:04,380 --> 01:36:15,260
And once we are happy, mark it as resolved.

1550
01:36:15,260 --> 01:36:22,220
And now what we don't see because I'm zoomed in is that on the top right, there is a button

1551
01:36:22,220 --> 01:36:23,220
commit merge.

1552
01:36:23,220 --> 01:36:30,820
I also, this resolution needs to be committed to be a new commit that decides between the

1553
01:36:30,820 --> 01:36:33,740
two versions.

1554
01:36:33,740 --> 01:36:41,820
the merge.

1555
01:36:41,820 --> 01:36:46,700
So these were Gregor did in fact two commits.

1556
01:36:46,700 --> 01:36:47,700
One was this one.

1557
01:36:47,700 --> 01:36:48,700
One was this.

1558
01:36:48,700 --> 01:36:50,340
Where does this come from?

1559
01:36:50,340 --> 01:36:53,140
This was my resolution commit.

1560
01:36:53,140 --> 01:36:59,660
The conflict resolution created a new commit because it merges between Gregor's branch

1561
01:36:59,660 --> 01:37:03,420
and the main branch.

1562
01:37:03,420 --> 01:37:05,700
Now, before I merge it, I want to review

1563
01:37:05,700 --> 01:37:07,780
what did we get at the end.

1564
01:37:07,780 --> 01:37:08,900
Files changed.

1565
01:37:13,620 --> 01:37:18,460
At the end, it's changed from 0.5 to three.

1566
01:37:19,820 --> 01:37:20,660
Are we happy?

1567
01:37:20,660 --> 01:37:21,920
We are happy.

1568
01:37:21,920 --> 01:37:22,760
Let's merge.

1569
01:37:25,260 --> 01:37:28,360
This was a relatively easy conflict.

1570
01:37:28,360 --> 01:37:34,980
Sometimes, the conflict will require that you actually talk to the other person and

1571
01:37:34,980 --> 01:37:41,940
discuss with them on maybe you schedule a video call, but at least now you know technically

1572
01:37:41,940 --> 01:37:50,900
on how to tell Git which version you like better.

1573
01:37:50,900 --> 01:37:57,600
Back to the lesson, I will now scroll down to the summary.

1574
01:37:57,600 --> 01:37:58,440
What did we learn?

1575
01:37:58,440 --> 01:37:59,440
And what did we learn in this lesson?

1576
01:37:59,440 --> 01:38:00,920
What did we learn today?

1577
01:38:02,000 --> 01:38:04,600
We learned how to browse a project,

1578
01:38:04,600 --> 01:38:06,920
how to create commits and branches.

1579
01:38:06,920 --> 01:38:09,560
And in this episode, we learned how to merge them,

1580
01:38:09,560 --> 01:38:11,400
how to merge two branches together.

1581
01:38:11,400 --> 01:38:13,400
This is the basis of collaboration.

1582
01:38:13,400 --> 01:38:15,700
We will use this a lot on Thursday.

1583
01:38:17,600 --> 01:38:21,120
And it's really useful also for your own work.

1584
01:38:21,120 --> 01:38:26,120
If you want to put something unfinished

1585
01:38:26,120 --> 01:38:29,160
finished or something that you aren't sure about

1586
01:38:29,160 --> 01:38:31,200
on a side branch and not on main.

1587
01:38:32,380 --> 01:38:35,560
But when you are new to Git, it's also fine really

1588
01:38:35,560 --> 01:38:40,520
to start just with one branch, create commits.

1589
01:38:40,520 --> 01:38:44,320
Better to many commits than to few commits.

1590
01:38:44,320 --> 01:38:45,920
They don't have to be beautiful.

1591
01:38:48,560 --> 01:38:50,360
And same with pull requests.

1592
01:38:50,360 --> 01:38:53,920
If I may quickly mention this one question

1593
01:38:53,920 --> 01:38:57,320
which came up in the document, what to do?

1594
01:38:57,320 --> 01:38:59,000
Can I, if I have like a pull request

1595
01:38:59,000 --> 01:39:01,720
and I only want to merge half of it,

1596
01:39:01,720 --> 01:39:03,880
I think the best strategy is to create

1597
01:39:03,880 --> 01:39:06,320
many small pull requests if you are able to separate it

1598
01:39:06,320 --> 01:39:08,280
so that this situation doesn't arise.

1599
01:39:08,280 --> 01:39:10,720
So in the ideal case, you have one pull request

1600
01:39:10,720 --> 01:39:14,720
for one encapsulated feature or one change.

1601
01:39:16,480 --> 01:39:17,320
Yeah.

1602
01:39:17,320 --> 01:39:18,720
Instead of one huge one, yeah.

1603
01:39:19,760 --> 01:39:23,280
Exactly, so at the beginning, start using these features.

1604
01:39:23,280 --> 01:39:25,900
then later what is a good practice

1605
01:39:25,900 --> 01:39:28,600
is to not put unrelated things into a commit

1606
01:39:29,520 --> 01:39:32,360
because it is hard to separate unrelated things.

1607
01:39:32,360 --> 01:39:35,600
Also don't put too much into a pull request.

1608
01:39:35,600 --> 01:39:37,440
Not unrelated things into a pull request

1609
01:39:37,440 --> 01:39:39,320
is something I've done here.

1610
01:39:39,320 --> 01:39:44,320
So what if the guacamole recipe change was good

1611
01:39:44,720 --> 01:39:46,920
but my pineapple salad wasn't good?

1612
01:39:46,920 --> 01:39:49,120
So then suddenly it becomes a little bit difficult

1613
01:39:49,120 --> 01:39:50,400
to separate the one from the other.

1614
01:39:50,400 --> 01:39:53,660
So what would it be nicer is to create

1615
01:39:53,660 --> 01:39:58,660
two separate pull requests, which create nice little units.

1616
01:40:00,940 --> 01:40:03,020
A small pull request is easier to review

1617
01:40:03,020 --> 01:40:04,140
than a gigantic one.

1618
01:40:05,040 --> 01:40:07,540
Nobody wants to look through 20,000 lines of code,

1619
01:40:09,340 --> 01:40:12,220
but at the beginning, it's good to use them

1620
01:40:12,220 --> 01:40:13,740
and make it nicer later.

1621
01:40:13,740 --> 01:40:17,660
So don't let the beautiful commits

1622
01:40:17,660 --> 01:40:18,940
and the beautiful pull requests

1623
01:40:18,940 --> 01:40:20,740
be the enemy of just good enough.

1624
01:40:25,260 --> 01:40:28,020
Looking at other questions, we have nine minutes left.

1625
01:40:28,020 --> 01:40:29,100
We want to use it now.

1626
01:40:29,100 --> 01:40:30,300
We can do a little bit more discussion,

1627
01:40:30,300 --> 01:40:32,900
but one thing we should not forget is to,

1628
01:40:32,900 --> 01:40:34,880
we would like to hear feedback from you.

1629
01:40:34,880 --> 01:40:37,740
Maybe somebody can paste our feedback form

1630
01:40:42,260 --> 01:40:43,660
into these documents.

1631
01:40:44,820 --> 01:40:46,500
So what we would like to hear from you is

1632
01:40:46,500 --> 01:40:48,100
what went well today

1633
01:40:48,100 --> 01:40:50,980
and what should we improve today?

1634
01:40:50,980 --> 01:40:54,460
So what should we remove, change, do differently?

1635
01:40:54,460 --> 01:40:55,580
This is very important for us

1636
01:40:55,580 --> 01:40:58,460
because we look at the feedback, we use it.

1637
01:40:58,460 --> 01:41:00,100
If there is something we can improve already

1638
01:41:00,100 --> 01:41:01,460
until tomorrow, we will do.

1639
01:41:08,620 --> 01:41:10,500
And I hear that there is cut visible on the screen

1640
01:41:10,500 --> 01:41:13,100
on the stream and even audible, but I don't hear that.

1641
01:41:13,100 --> 01:41:16,620
So that's too bad for us instructors, Gregor,

1642
01:41:16,620 --> 01:41:19,220
but apparently there are some cut sidings on stream.

1643
01:41:23,220 --> 01:41:25,740
So please, now that I share it, please give us feedback.

1644
01:41:25,740 --> 01:41:26,780
Was it, how did it go?

1645
01:41:26,780 --> 01:41:28,260
Was it too fast, too slow?

1646
01:41:30,420 --> 01:41:33,740
Tell us one good thing about today.

1647
01:41:33,740 --> 01:41:35,140
This feedback is anonymous.

1648
01:41:36,660 --> 01:41:38,500
What was good about today?

1649
01:41:38,500 --> 01:41:41,180
Tell us one thing that we should improve for next time.

1650
01:41:41,180 --> 01:41:43,680
And next time is maybe already tomorrow.

1651
01:41:43,680 --> 01:41:45,020
Any other feedback welcome.

1652
01:41:46,620 --> 01:41:49,020
And while the feedback is coming in,

1653
01:41:50,100 --> 01:41:53,060
I want to look at, is there any other question?

1654
01:41:55,100 --> 01:41:58,220
Maybe the one about how exactly are conflicts happening?

1655
01:41:58,220 --> 01:42:02,660
For example, what if we change lines?

1656
01:42:02,660 --> 01:42:04,300
What if the change lines I moved

1657
01:42:05,580 --> 01:42:06,980
could be considered different lines

1658
01:42:06,980 --> 01:42:08,980
and therefore different entries,

1659
01:42:08,980 --> 01:42:11,820
even if they are changing the same thing?

1660
01:42:11,820 --> 01:42:12,860
That's an excellent question.

1661
01:42:12,860 --> 01:42:15,020
And Git is really smart about this.

1662
01:42:15,020 --> 01:42:16,740
it doesn't look at line numbers.

1663
01:42:17,620 --> 01:42:22,060
It uses some really smart algorithms to decide

1664
01:42:22,060 --> 01:42:25,500
which parts are the same thing,

1665
01:42:25,500 --> 01:42:28,260
even as the code evolves,

1666
01:42:28,260 --> 01:42:32,640
even across file renames.

1667
01:42:34,300 --> 01:42:35,460
So it is really smart.

1668
01:42:37,880 --> 01:42:40,780
It is often not a problem.

1669
01:42:40,780 --> 01:42:41,860
You will probably not see it

1670
01:42:41,860 --> 01:42:43,680
when working just on your own.

1671
01:42:43,680 --> 01:42:45,840
You might see it when collaborating.

1672
01:42:45,840 --> 01:42:49,300
When it happens, it's not a big deal.

1673
01:42:50,600 --> 01:42:52,800
You now know how to resolve it technically.

1674
01:42:53,920 --> 01:42:56,640
We will also on Thursday, when we do collaboration,

1675
01:42:56,640 --> 01:42:58,960
we will discuss on what are good strategies

1676
01:42:58,960 --> 01:43:01,880
so that we can avoid conflicts from even happening.

1677
01:43:04,280 --> 01:43:06,800
And in one sentence, the strategy would be

1678
01:43:06,800 --> 01:43:10,440
keep branches small, keep commits small,

1679
01:43:10,440 --> 01:43:14,140
don't do too many things at the same time,

1680
01:43:14,140 --> 01:43:17,240
then the likelihood that there will be conflicts is smaller.

1681
01:43:23,540 --> 01:43:26,220
We are doing amazing with time, five minutes left, yes.

1682
01:43:26,220 --> 01:43:30,900
Did you comment on how we do very similar things tomorrow,

1683
01:43:30,900 --> 01:43:35,220
but with VS code and command line and locally?

1684
01:43:35,220 --> 01:43:37,060
That's a great prompt here.

1685
01:43:37,060 --> 01:43:39,940
There was a question comment about that.

1686
01:43:40,440 --> 01:43:41,280
That's a great.

1687
01:43:41,280 --> 01:43:43,660
So let's, with everything we did today,

1688
01:43:44,680 --> 01:43:47,060
how will that connect to tomorrow?

1689
01:43:50,480 --> 01:43:52,980
Tomorrow we will learn how to clone a repository

1690
01:43:52,980 --> 01:43:54,120
and work locally.

1691
01:43:54,120 --> 01:43:55,720
Some of you have done it already.

1692
01:43:59,080 --> 01:44:01,000
Tomorrow we will take this recipe,

1693
01:44:01,000 --> 01:44:02,640
make a copy onto our computer

1694
01:44:02,640 --> 01:44:07,640
and learn committing, branching, merging locally.

1695
01:44:07,640 --> 01:44:16,760
locally, we will, this is possible either in VS code or command line.

1696
01:44:16,760 --> 01:44:20,480
But even if you don't, if the command line doesn't work for you, you don't want to install

1697
01:44:20,480 --> 01:44:23,560
VS code, please still come tomorrow.

1698
01:44:23,560 --> 01:44:27,320
Because the other episode tomorrow will not.

1699
01:44:27,320 --> 01:44:30,840
You can do them only on GitHub if you want to.

1700
01:44:30,840 --> 01:44:38,300
So the second episode will be we will do some of the repository browsing and history inspection,

1701
01:44:38,300 --> 01:44:42,280
but a little bit more in depth than today.

1702
01:44:42,280 --> 01:44:45,040
We will study a repository that we don't know.

1703
01:44:45,040 --> 01:44:49,520
It's written by somebody else, but we will try to figure a few things out about it.

1704
01:44:49,520 --> 01:44:52,720
This is a very typical situation.

1705
01:44:52,720 --> 01:44:59,040
And then tomorrow the finale will be to turn your own project and it doesn't have to be

1706
01:44:59,040 --> 01:45:01,400
a real project where you don't have to share your project

1707
01:45:01,400 --> 01:45:02,320
that you have on a computer,

1708
01:45:02,320 --> 01:45:06,360
but we will create your own example project,

1709
01:45:06,360 --> 01:45:10,440
but learn how to turn it, make it a Git repository

1710
01:45:10,440 --> 01:45:14,760
and how to share it on GitHub or GitLab.

1711
01:45:14,760 --> 01:45:16,960
And what would be the next steps

1712
01:45:16,960 --> 01:45:20,620
if you want to make your project citable.

1713
01:45:22,240 --> 01:45:23,920
So these are the goal for tomorrow.

1714
01:45:23,920 --> 01:45:26,800
We will then tomorrow also talk a bit more about the balance.

1715
01:45:26,800 --> 01:45:36,800
What is a good balance when you start using it of where to start, how to progress,

1716
01:45:36,800 --> 01:45:41,280
and what are typical things, typical problems that you want to avoid?

1717
01:45:42,160 --> 01:45:46,800
Of course, you're already welcome to browse these and then tomorrow come with lots of questions.

1718
01:45:46,800 --> 01:45:58,800
questions. So, if someone has tried the VS code track today. Are there is tomorrow something

1719
01:45:58,800 --> 01:46:10,200
different than today. Do you learn new things. Yes, there will be. So, if you have done this

1720
01:46:10,200 --> 01:46:14,880
already today then the first episode, there will be some repetition but I think it doesn't

1721
01:46:14,880 --> 01:46:19,480
harm, to get it a little bit more into our muscle memory, there will be something new

1722
01:46:19,480 --> 01:46:26,640
and that is, we will take a closer look at what is the difference between a local branch

1723
01:46:26,640 --> 01:46:32,840
and a remote branch. And we got a few questions about it today, we didn't really talk about

1724
01:46:32,840 --> 01:46:40,160
it by design, but tomorrow we will hopefully give an understanding that you see the difference

1725
01:46:40,160 --> 01:46:44,080
between what is a local branch and remote branch. This is something that confused me

1726
01:46:44,080 --> 01:46:50,480
a lot when I started using it. So that will be different already in episode one.

1727
01:46:50,480 --> 01:46:59,000
Yes. Okay. And if someone starts from tomorrow and hasn't been here today, I guess that works

1728
01:46:59,000 --> 01:47:04,360
fine. Also, that's fine. No problem. Invite your friends and so on.

1729
01:47:04,360 --> 01:47:09,040
Exactly. So even if, or even if you were here today and everything failed, and I don't know

1730
01:47:09,040 --> 01:47:14,720
you don't find the repositories again, please come tomorrow. You don't need to have the

1731
01:47:14,720 --> 01:47:22,480
things from today for the tomorrow's exercises. We invite your friends. It's really fine and

1732
01:47:22,480 --> 01:47:30,080
welcome to join just for a day or just for an episode. And thanks a lot for the feedback.

1733
01:47:30,960 --> 01:47:33,200
One thing that was really good and one thing to improve.

1734
01:47:33,200 --> 01:47:41,200
Yeah, and we should thank Radovan for this latest lesson redesigned.

1735
01:47:41,200 --> 01:47:42,200
And Richard.

1736
01:47:42,200 --> 01:47:47,200
Well, yeah, but I was gone on the weekend when Radovan was working on it.

1737
01:47:47,200 --> 01:48:00,200
But anyway, it was a great effort to rewrite it this new way that introduces it with GitHub as the main flow, main path, and the other things there.

1738
01:48:00,200 --> 01:48:01,360
there.

1739
01:48:01,360 --> 01:48:05,080
So we're really looking forward to see

1740
01:48:05,080 --> 01:48:07,560
how this goes for future days.

1741
01:48:07,560 --> 01:48:09,960
And you can all help us contributing.

1742
01:48:09,960 --> 01:48:12,760
We know that there are some rough edges.

1743
01:48:12,760 --> 01:48:15,120
If you go into the git history of the lesson,

1744
01:48:15,120 --> 01:48:18,000
you will see that there has been some weekend work

1745
01:48:18,000 --> 01:48:21,520
and late changes.

1746
01:48:21,520 --> 01:48:24,000
So this will evolve as we go.

1747
01:48:24,000 --> 01:48:25,400
But now, I mean, in this workshop,

1748
01:48:25,400 --> 01:48:28,960
we learn how to contribute to other people's projects

1749
01:48:28,960 --> 01:48:35,960
and your contributions and issues and ideas are really what makes this go.

1750
01:48:35,960 --> 01:48:47,160
Yeah. So, I guess there's no new questions. So, you can expect videos to be processed

1751
01:48:47,160 --> 01:48:52,200
by later this evening.

1752
01:48:57,080 --> 01:49:00,160
If you want to be more involved, consider

1753
01:49:00,160 --> 01:49:04,060
joining the Code Refinery chat and asking what you can do.

1754
01:49:04,060 --> 01:49:08,640
We've got different stuff that people can look at.

1755
01:49:08,640 --> 01:49:15,360
Anyway, yeah, anything else or?

1756
01:49:15,360 --> 01:49:20,000
Yeah, we need more cats tomorrow. So that's a clear takeaway here from the feedback.

1757
01:49:20,000 --> 01:49:22,400
But I think I'm happy. I don't know, Gregor, did we forget something?

1758
01:49:26,080 --> 01:49:30,720
All right. No, I think we went through most of the important things that we were planning to

1759
01:49:30,720 --> 01:49:35,840
go through anyway. And we can go through the documents today in the afternoon and see whether

1760
01:49:35,840 --> 01:49:39,840
we missed anything. And maybe if there is time, we can discuss it tomorrow.

1761
01:49:40,960 --> 01:49:44,880
Yeah. Thanks so much, Gregor. I'm looking forward to teach with you again then on

1762
01:49:44,880 --> 01:49:49,040
on Thursday, tomorrow, or we will be with BjÃ¶rn.

1763
01:49:50,080 --> 01:49:51,680
Really looking forward to.

1764
01:49:51,680 --> 01:49:52,520
Yeah, thanks everybody.

1765
01:49:52,520 --> 01:49:57,440
Also, thanks to all the people answering questions,

1766
01:49:57,440 --> 01:50:00,560
working in local rooms.

1767
01:50:01,880 --> 01:50:03,040
Thanks to Samantha for the intro.

1768
01:50:03,040 --> 01:50:05,080
There are lots of people who make this happen.

1769
01:50:06,320 --> 01:50:07,160
Have a nice afternoon.

1770
01:50:07,160 --> 01:50:08,920
See you all tomorrow.

1771
01:50:08,920 --> 01:50:10,520
Okay.

1772
01:50:10,520 --> 01:50:11,360
Thanks so much.

1773
01:50:12,280 --> 01:50:13,200
Bye.

1774
01:50:13,200 --> 01:50:14,040
Bye.

