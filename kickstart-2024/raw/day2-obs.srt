1
00:00:00,000 --> 00:00:02,000
CodeRefinery.org

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:30,000 --> 00:05:32,060
you

13
00:06:00,000 --> 00:06:02,060
you

14
00:06:30,000 --> 00:06:32,060
you

15
00:07:00,000 --> 00:07:02,060
you

16
00:07:30,000 --> 00:07:32,060
you

17
00:08:00,000 --> 00:08:02,060
you

18
00:08:30,000 --> 00:08:32,060
you

19
00:09:00,000 --> 00:09:02,060
you

20
00:09:30,000 --> 00:09:32,060
you

21
00:10:00,000 --> 00:10:02,060
you

22
00:10:30,000 --> 00:10:32,060
you

23
00:11:00,000 --> 00:11:29,960
Just say one two three.

24
00:11:29,960 --> 00:11:39,920
test we started. Sorry, I didn't give the countdown. Hi. So, we're here. I guess the

25
00:11:39,920 --> 00:11:43,000
first order of business is adding some icebreakers here.

26
00:11:43,000 --> 00:11:45,000
Yeah, let's do that.

27
00:11:45,000 --> 00:11:47,000
We'll add the audio test.

28
00:11:47,000 --> 00:11:49,000
Me then [name].

29
00:11:49,000 --> 00:11:51,000
One.

30
00:11:51,000 --> 00:11:53,000
Two.

31
00:11:53,000 --> 00:11:55,000
Three.

32
00:11:57,000 --> 00:11:59,000
Four.

33
00:11:59,000 --> 00:12:01,000
Okay. Five.

34
00:12:01,000 --> 00:12:03,000
Six.

35
00:12:07,000 --> 00:12:11,000
I was listening to the audio and it was pretty confusing to hear.

36
00:12:11,000 --> 00:12:14,000
Which number should I say?

37
00:12:14,000 --> 00:12:15,000
Yeah.

38
00:12:15,000 --> 00:12:16,000
Yeah.

39
00:12:16,000 --> 00:12:17,000
Okay.

40
00:12:17,000 --> 00:12:20,000
There's some icebreakers.

41
00:12:20,000 --> 00:12:21,000
Yeah.

42
00:12:21,000 --> 00:12:24,000
So, what can we...

43
00:12:24,000 --> 00:12:34,000
So, one question I would have for our audience is that, have you used an HPC system before?

44
00:12:34,000 --> 00:12:36,000
Like a computational cluster?

45
00:12:36,000 --> 00:12:37,000
Yeah.

46
00:12:37,000 --> 00:13:03,000
And let's say we have questions of never, occasionally, and then.

47
00:13:03,000 --> 00:13:27,320
one and something completely fun.

48
00:13:27,320 --> 00:13:29,640
I always remember this question,

49
00:13:29,640 --> 00:13:31,960
what was your favorite fruit that got some of

50
00:13:31,960 --> 00:13:36,480
the best response from anything.

51
00:13:36,480 --> 00:13:40,440
What's your favorite ice cream flavor?

52
00:13:40,440 --> 00:13:43,200
In honor of the weather the last few days.

53
00:13:46,720 --> 00:13:47,600
That's a good question.

54
00:13:50,440 --> 00:13:54,760
I would say maybe like an old-timey strawberry

55
00:13:54,760 --> 00:13:59,560
with some jam inside of it or something like that.

56
00:13:59,560 --> 00:14:00,320
That's pretty good.

57
00:14:01,960 --> 00:14:02,960
Yeah.

58
00:14:02,960 --> 00:14:03,960
What's yours?

59
00:14:03,960 --> 00:14:08,160
Oh, that's a good question.

60
00:14:08,160 --> 00:14:16,520
There's this, um, maito flavor from Suomen Jäätelötehdäs, that's pretty good.

61
00:14:16,520 --> 00:14:20,520
Yeah.

62
00:14:20,520 --> 00:14:22,920
So for the, how long have you used computers?

63
00:14:22,920 --> 00:14:30,040
One of my interesting questions there, like, how did you get started and what did it mean

64
00:14:30,040 --> 00:14:31,040
to you?

65
00:14:31,040 --> 00:14:38,000
Like when I was growing up there were computers in our home and I mean I guess my parents had

66
00:14:38,000 --> 00:14:46,880
one of course this was in the 90s or something like that so it wasn't really a powerful commonly

67
00:14:46,880 --> 00:14:53,760
used thing but I didn't really like have a feeling that this is a thing that I could learn about and

68
00:14:53,760 --> 00:15:03,560
know about until maybe my last year of high school, something like that, and then I got

69
00:15:03,560 --> 00:15:07,400
one that I could mess with just for myself.

70
00:15:07,400 --> 00:15:11,680
And then I could start, you know, breaking things.

71
00:15:11,680 --> 00:15:15,960
And then when you break stuff, you really understand it.

72
00:15:15,960 --> 00:15:24,400
So I wonder, how did this progression go for other people?

73
00:15:24,400 --> 00:15:28,960
Like for you, [name], what was your starting point of?

74
00:15:31,600 --> 00:15:38,520
Yeah, I would say that the starting point was when my father bought a secondhand computer from his work

75
00:15:38,520 --> 00:15:45,400
that his coworker had preloaded with some shareware games or something like that, like DOS games.

76
00:15:45,400 --> 00:15:53,400
It was a Windows 95 computer, but yeah, I would say that trying to even get those to work

77
00:15:54,120 --> 00:16:03,080
was an effort in and of itself, like old shareware games. So yeah, that was basically like

78
00:16:03,080 --> 00:16:07,480
you immediately start to do problem solving because you want to play the games and the

79
00:16:07,480 --> 00:16:15,800
games don't work. So yeah, yeah, okay. So basically games seems to be the way that people start

80
00:16:15,800 --> 00:16:23,480
with computers. Do we need some HPC games that people can play and get familiar with things and

81
00:16:23,480 --> 00:16:33,320
so on? Like I would say that why people start, like I tried my, I learned my parents like 486

82
00:16:33,320 --> 00:16:40,040
as well with MS-DOS, but what can I do with that? I can use a matrix printer and write some text,

83
00:16:40,040 --> 00:16:46,360
but if I'm like six years old or something, what does a six-year-old need a matrix printer for?

84
00:16:48,200 --> 00:16:57,160
The games are much more suitable, I would say, because if you only have a productivity computer,

85
00:16:57,160 --> 00:17:02,440
it's not that fun. Eventually, of course, the productivity can get fun as well.

86
00:17:02,440 --> 00:17:03,440
So, yeah.

87
00:17:03,440 --> 00:17:04,440
Hopefully.

88
00:17:04,440 --> 00:17:05,440
Yeah.

89
00:17:05,440 --> 00:17:06,440
Hmm.

90
00:17:06,440 --> 00:17:07,440
Hmm.

91
00:17:07,440 --> 00:17:08,440
Yeah.

92
00:17:08,440 --> 00:17:19,760
Does anyone want to hear what happened yesterday with the stream going down?

93
00:17:19,760 --> 00:17:22,280
And some more stories behind that.

94
00:17:22,280 --> 00:17:26,480
Go right ahead.

95
00:17:26,480 --> 00:17:34,400
Uh, yeah, so in my home a few weeks ago, I got these messages saying electricity meters

96
00:17:34,400 --> 00:17:39,280
will be replaced in your building sometime in the next few weeks, but you'll get a text

97
00:17:39,280 --> 00:17:44,400
message a day or two before that happens, so you have some warning.

98
00:17:44,400 --> 00:17:49,640
So I worried, ah, okay, this is going to be bad, because it's right during the kickstart

99
00:17:49,640 --> 00:17:56,440
course time. But I haven't gotten a message about it yet, so, you know, I've just ignored it.

100
00:17:58,200 --> 00:18:01,560
But, of course, whenever they're replacing the meter of the common

101
00:18:02,280 --> 00:18:07,080
telco equipment in the building, I guess I wouldn't get notified. So my hypothesis is that

102
00:18:07,080 --> 00:18:15,320
yesterday they did that. So I lost my connection for 15 minutes or so. Incidentally, like they

103
00:18:15,320 --> 00:18:20,440
said yesterday, it was right at the same time before the same talk that was interrupted by

104
00:18:21,240 --> 00:18:31,560
the Fastly CDN breaking several years ago. So then I... So at first I was hoping it would

105
00:18:31,560 --> 00:18:36,840
come back soon. It happened towards the beginning of this long break. But then

106
00:18:36,840 --> 00:18:47,520
When it was getting closer and closer to time, I switched my laptop tether to my mobile device,

107
00:18:47,520 --> 00:18:53,500
which incidentally my mobile operator had some problems with their network, their mobile

108
00:18:53,500 --> 00:18:55,520
network earlier in the day.

109
00:18:55,520 --> 00:18:59,400
And luckily they weren't right at the same time because then I would have had zero connection

110
00:18:59,400 --> 00:19:02,460
to the outside world at all.

111
00:19:02,460 --> 00:19:04,400
That would be pretty funny.

112
00:19:04,400 --> 00:19:10,900
And all of the fancy production tricks that you might see during the streams, [name]

113
00:19:10,900 --> 00:19:14,460
is basically the person behind all of these.

114
00:19:14,460 --> 00:19:22,620
So we would have been in a creek without a paddle if [name]'s internet didn't come

115
00:19:22,620 --> 00:19:23,620
back.

116
00:19:23,620 --> 00:19:24,620
Yeah.

117
00:19:24,620 --> 00:19:28,860
And then you saw me dynamically adjusting stuff trying to recover.

118
00:19:28,860 --> 00:19:33,340
So that was kind of fun.

119
00:19:33,340 --> 00:19:39,180
But it did show me that it actually wasn't that hard.

120
00:19:39,180 --> 00:19:44,980
My laptop could handle it with the outside screen, and if I just had a little bit more

121
00:19:44,980 --> 00:19:52,460
preparation then it would have been much easier.

122
00:19:52,460 --> 00:19:57,940
The hardest part is that I couldn't copy stuff by SSH from my desktop to my laptop

123
00:19:57,940 --> 00:20:03,540
because there was no network and I didn't really know what to do about that problem.

124
00:20:06,980 --> 00:20:16,100
Anyway, so it's almost time. Let's review what we've got here for our

125
00:20:18,020 --> 00:20:23,940
answers. So most people haven't used clusters that much.

126
00:20:23,940 --> 00:20:37,940
Please do go and open up the notes and answer these, so this is really important for us to see the interaction and know how many people are around.

127
00:20:37,940 --> 00:20:46,020
Yeah, and also usually we have so many people watching this, or hopefully we have a lot

128
00:20:46,020 --> 00:20:47,260
of people watching this.

129
00:20:47,260 --> 00:20:53,180
But when we have a lot of people watching, if you encounter something during the talks

130
00:20:53,180 --> 00:21:01,380
that was rushed too fast or something like that, that's something that was unclear for

131
00:21:01,380 --> 00:21:02,380
you.

132
00:21:02,380 --> 00:21:09,260
notes is the best way to make us notice that, and then we can elaborate on the answers that

133
00:21:09,260 --> 00:21:10,260
we're giving.

134
00:21:10,260 --> 00:21:16,100
So because today, [name] will talk a bit more about what we're going to be going through

135
00:21:16,100 --> 00:21:21,100
today, but there's going to be this kind of like, we're building on a foundation type

136
00:21:21,100 --> 00:21:24,340
of a thing where we build upon the previous things.

137
00:21:24,340 --> 00:21:32,740
If something gets lost in translation or something, then it's basically like the foundation

138
00:21:35,060 --> 00:21:44,180
is cracked. It's good to fix immediately so that we know how to build upon the information that we

139
00:21:44,180 --> 00:21:50,100
have given. Use the notes a lot. Let us know about any questions that you have. Ask a lot

140
00:21:50,100 --> 00:21:55,860
of questions that there's other people answering as well, because it really, really helps us and

141
00:21:55,860 --> 00:22:05,140
it helps you. Yeah. Okay, so let's get started. I will switch to my screen here, I hope. Yes.

142
00:22:07,300 --> 00:22:12,820
So as usual, we have our schedule. It should say everything we're doing.

143
00:22:14,500 --> 00:22:18,740
If we go down to day two, we begin with about clusters and your work.

144
00:22:20,100 --> 00:22:28,500
I will also quickly mention that public service announcement, remember to put the stream to

145
00:22:28,500 --> 00:22:37,460
maximum resolution if it's not already there, so that any text will appear as crisp as possible.

146
00:22:37,460 --> 00:22:44,980
But we will mostly talk and look at pretty pictures, but there's text sometimes as well.

147
00:22:44,980 --> 00:22:53,060
Okay, so yesterday we talked a lot about basic concepts of scientific computing, like where

148
00:22:53,060 --> 00:22:57,580
you can store your data, who we are, how to ask for help, things like that.

149
00:22:57,580 --> 00:23:00,040
Now we get to the real stuff.

150
00:23:00,040 --> 00:23:04,740
The general plan is that today we go into basics.

151
00:23:04,740 --> 00:23:09,100
So what is a cluster, what are resources, how to request them, and so on.

152
00:23:09,100 --> 00:23:13,660
We get to some of the interesting parallel and GPU stuff tomorrow.

153
00:23:13,660 --> 00:23:21,840
But because a cluster is easy to use if you're familiar with the command line Linux, things

154
00:23:21,840 --> 00:23:27,560
like that, and hard if not, we're going nice and slow today in order to make sure that

155
00:23:27,560 --> 00:23:34,760
everyone can keep up and we have this good solid background.

156
00:23:34,760 --> 00:23:37,880
So yeah, what's a cluster?

157
00:23:37,880 --> 00:23:45,680
Yeah, so if we think about the cluster, it's basically like a bunch of computers in a trench

158
00:23:45,680 --> 00:23:50,480
coat.

159
00:23:50,480 --> 00:23:52,760
But it's also a bit more than that.

160
00:23:52,760 --> 00:24:01,080
So a cluster is basically a big system that has many features in it.

161
00:24:01,080 --> 00:24:07,280
So what we usually have in the cluster is that we first off have a lot of computers

162
00:24:07,280 --> 00:24:13,840
there that are meant for computing. So in this diagram that you can see we have the CPU nodes

163
00:24:13,840 --> 00:24:20,000
like that is the main thing of the cluster really. We have a lot of hardware there that can be used

164
00:24:20,000 --> 00:24:28,880
for computing. There's also specialized hardware like the GPU nodes that have GPU cards

165
00:24:28,880 --> 00:24:36,720
that are used for GPU computing. And then usually a cluster has a file system as well

166
00:24:36,720 --> 00:24:43,120
So it's own file system, which is connected to these nodes in some fast lane, so that you can

167
00:24:43,120 --> 00:24:52,080
have big data flowing into the CPU nodes and the GPU nodes. And then, yeah.

168
00:24:52,080 --> 00:24:56,640
So how big is our cluster, just as a reference? So the one at Aalto University.

169
00:24:56,640 --> 00:25:09,920
So our is like a medium size, maybe. Medium, small. Medium in Finland, small in international scale.

170
00:25:09,920 --> 00:25:17,200
But we have a lot smaller clusters. Some other universities might have a smaller cluster.

171
00:25:17,200 --> 00:25:22,320
And for example, the CSC supercomputers, they are a lot bigger. But in our case, it's,

172
00:25:22,320 --> 00:25:25,520
Well, I don't know, actually remember the numbers, like a few hundred nodes?

173
00:25:26,640 --> 00:25:30,640
Yeah, I think it's like the order of 300-ish.

174
00:25:31,520 --> 00:25:34,080
Yeah, and maybe a few hundred GPUs.

175
00:25:34,720 --> 00:25:40,160
Yeah, a few hundred GPUs, 10,000 processors roughly, last I remembered.

176
00:25:42,160 --> 00:25:42,660
Yeah.

177
00:25:43,520 --> 00:25:48,480
But you can already hear from what I'm describing here that the cluster,

178
00:25:48,480 --> 00:25:54,400
what is important about the cluster is not necessarily how much there is on the backend

179
00:25:54,400 --> 00:26:00,320
or something, it's how you're going to be using it. And you're going to be using it through this

180
00:26:00,320 --> 00:26:09,440
login systems, like login node or the on-demand. And then we will talk about how you get access to

181
00:26:09,440 --> 00:26:16,000
the resources later on. But for me, at least personally, it's more of like, I know that

182
00:26:16,000 --> 00:26:21,200
there's just resources there, I just need to be able to use them. But it doesn't really matter

183
00:26:21,920 --> 00:26:28,480
where they come from. They are there on the background and there is a way of

184
00:26:29,280 --> 00:26:34,960
getting those resources. And we'll talk about that soon. But basically, there is just a bunch

185
00:26:34,960 --> 00:26:40,640
of computers and those computers are connected to each other with a fast network and there's a

186
00:26:40,640 --> 00:26:47,880
a storage space for your data and then you can use those computers using certain things

187
00:26:47,880 --> 00:26:51,120
that we'll be talking about.

188
00:26:51,120 --> 00:26:55,680
So about our own cluster at Aalto University.

189
00:26:55,680 --> 00:27:04,200
It was completely upgraded and reinstalled, well, a month ago.

190
00:27:04,200 --> 00:27:05,880
And everything has changed.

191
00:27:05,880 --> 00:27:09,600
So many of the things you might read might be out of date.

192
00:27:09,600 --> 00:27:16,320
trying to update them or add warnings there, but just be aware that things are different now.

193
00:27:17,680 --> 00:27:24,000
And we'll talk more about this later. The final thing on this page is asking for help.

194
00:27:24,000 --> 00:27:29,680
So it is really hard to go and do everything alone, especially when you're starting.

195
00:27:30,560 --> 00:27:38,560
So do read about getting help and come to your local support early if you need it.

196
00:27:38,560 --> 00:27:45,440
don't struggle forever. And with that I think we can go on from this page.

197
00:27:47,920 --> 00:27:55,040
Yes. Okay. So next up in the schedule is Slurm, the queuing system.

198
00:27:57,120 --> 00:28:07,200
So Slurm is the drink from Futurama, and it's also the simple Linux utility for resource

199
00:28:07,200 --> 00:28:15,280
management. I don't even know. I think nowadays it's just a word. I don't think it's an acronym

200
00:28:15,280 --> 00:28:25,520
anymore, but that's probably the original one. That was the original one. Yeah. So, we already

201
00:28:25,520 --> 00:28:37,120
talked about what's a cluster. Is there anything else to add here? Yeah. So, we mentioned the

202
00:28:37,200 --> 00:28:40,440
that there is a cluster and there's lots of resources.

203
00:28:40,440 --> 00:28:42,840
And I also already hinted that there's

204
00:28:42,840 --> 00:28:47,880
a way of getting access to those resources, and that is Slurm.

205
00:28:47,880 --> 00:28:52,920
So we have this nice analog for this, what the Slurm is.

206
00:28:52,920 --> 00:28:55,320
And it's this kind of like, the analog

207
00:28:55,320 --> 00:28:58,640
is this HPC diner or HPC restaurant.

208
00:28:58,640 --> 00:29:01,640
Do you want to, [name], explain the analog?

209
00:29:01,640 --> 00:29:03,920
Oh, yeah, that's a good metaphor.

210
00:29:03,920 --> 00:29:15,520
So let's say you're going to a restaurant. Do you go to a restaurant to sit at the stove and

211
00:29:15,520 --> 00:29:20,560
cooking yourself? Or do you go at the restaurant for someone else to cook for you? Well, for

212
00:29:20,560 --> 00:29:27,360
someone else to cook for you. That's the first thing. But when you arrive there, so that way

213
00:29:27,360 --> 00:29:32,080
you can do other things while someone is cooking for you. But when you arrive there, do you

214
00:29:32,080 --> 00:29:37,880
immediately go and pick any table and sit down? Or is there usually a sign when it's

215
00:29:37,880 --> 00:29:44,600
busy that says, please wait to be seated? And what does this person do? You have to

216
00:29:44,600 --> 00:29:51,840
tell them how many people you are. Usually you don't tell them how long you'll be eating,

217
00:29:51,840 --> 00:29:57,560
but this would be a relevant piece of information if there's another reservation there. And

218
00:29:57,560 --> 00:30:03,360
And this host that's there looks at everyone that's in the queue and then tries to assign

219
00:30:03,360 --> 00:30:08,960
them to tables so that the most possible number of people can eat at once.

220
00:30:08,960 --> 00:30:13,200
So for example, they won't have two people sit at a table for four people if there's

221
00:30:13,200 --> 00:30:15,400
space for just two.

222
00:30:15,400 --> 00:30:20,980
They won't go, like they'll try to save some big tables for big parties that might come

223
00:30:20,980 --> 00:30:27,160
in later, especially if they have a reservation.

224
00:30:27,160 --> 00:30:32,040
And this is basically what Slurm is doing.

225
00:30:32,040 --> 00:30:38,960
So there's a bunch of people waiting and want to run more jobs than there's time.

226
00:30:38,960 --> 00:30:45,080
So the host has the queue, they order the queue in priority somehow, and they try to

227
00:30:45,080 --> 00:30:56,000
give something to all the resources in a way that will use them as optimally as possible.

228
00:30:56,000 --> 00:30:58,320
Do you think of this metaphor?

229
00:30:58,320 --> 00:31:00,720
Yes, I think that is very well put.

230
00:31:00,720 --> 00:31:08,720
So in our case, the Slurm, what it considers

231
00:31:08,720 --> 00:31:11,840
when you look at what sort of tables are you booking

232
00:31:11,840 --> 00:31:14,680
and that sort of stuff, it also takes

233
00:31:14,680 --> 00:31:17,440
into account stuff like your priority

234
00:31:17,440 --> 00:31:21,480
or how much you have visited there before.

235
00:31:21,480 --> 00:31:29,240
Basically, let's say the restaurant is very popular and they try to make certain that as many people

236
00:31:30,680 --> 00:31:36,280
have an opportunity to eat at the restaurant. They try to organize it so that it's fair for

237
00:31:36,280 --> 00:31:46,120
everybody. If somebody goes there every day and takes a table, they try to book other people as

238
00:31:46,120 --> 00:31:52,840
well so that as many as possible have the opportunity to go there. So the queue manager

239
00:31:53,480 --> 00:32:00,760
takes into account various things about what sort of things you require, so what sort of

240
00:32:01,960 --> 00:32:09,960
things you need. And then it can manage this large, large restaurant from a simple lobby.

241
00:32:09,960 --> 00:32:14,200
Yeah. So I guess you have to tell the host what you want if you come in and you say,

242
00:32:14,200 --> 00:32:19,320
I'd like a table and they ask you, okay, how many people are you? And you're like, I don't know.

243
00:32:19,960 --> 00:32:23,880
Then they'll look at you and wonder what's wrong with this person.

244
00:32:24,840 --> 00:32:35,960
Yeah. But the restaurant manager is also very understanding that if you want to book a table

245
00:32:35,960 --> 00:32:43,480
for four when there's only two people eating, they will book it, but you're limited to basically then

246
00:32:43,480 --> 00:32:49,560
only tables of four. They will try to accommodate every kind of a guest, but at the same time,

247
00:32:50,360 --> 00:32:57,480
by, well, the question what you don't need, you might be limited to some place. If we go back

248
00:32:57,480 --> 00:33:05,880
into, from this analog, partly back to the actual reality of what is happening, if you, [name],

249
00:33:05,880 --> 00:33:14,360
want to show the picture of the cluster. Yeah, if you show the picture of the cluster. So what

250
00:33:14,360 --> 00:33:22,280
happens in the cluster is that you go into the login node with an SSH or you take the on-demand

251
00:33:22,280 --> 00:33:29,480
connection to login node or VS Code connection. You are there and that is basically the lobby

252
00:33:29,480 --> 00:33:36,920
of the restaurant. When you are there, you're in the lobby and now you have the sign in front of

253
00:33:36,920 --> 00:33:47,480
you that, okay, wait for seating. And who is the host? That is the SLURM, like the queue manager.

254
00:33:48,040 --> 00:33:53,640
And when you ask the queue manager that, hey, I would want to have these sort of resources for

255
00:33:53,640 --> 00:34:01,320
this sort of time, aka I would want to have this table with these kind of seatings for this amount

256
00:34:01,320 --> 00:34:09,480
of time, then the queue manager will process your request and it will, once the table is free,

257
00:34:09,480 --> 00:34:18,280
it will seat you there. So in the case of a cluster, it will find you a computer that has

258
00:34:18,280 --> 00:34:25,320
those resources and it will put you into that computer and then it will run your code in that

259
00:34:25,320 --> 00:34:33,480
computer. So basically, we go back to the real world, what is happening, that is what's happening

260
00:34:33,480 --> 00:34:41,160
in the background. Yeah. So I guess on the cluster, we're not asking for seats for people,

261
00:34:41,160 --> 00:34:48,760
But what are we asking for? And that's why we come to here, the resources Slurm manages.

262
00:34:49,960 --> 00:34:56,840
Yeah, so the most important or the simplest resources that Slurm considers are the amount

263
00:34:56,840 --> 00:35:02,920
of processors you want. Like yesterday, there was talk in notes that do I really need to know

264
00:35:02,920 --> 00:35:09,000
about these processors and do I need to really know about how the CPUs are. In a sense, you need.

265
00:35:09,000 --> 00:35:14,920
There's, I will, we will show like some shorthands of how you can like estimate these things

266
00:35:17,000 --> 00:35:23,880
soon, but you need to know a bit about your program, like you need to know a bit about the

267
00:35:23,880 --> 00:35:29,240
like the requirements of your program, that how many processors it needs, how much memory it needs

268
00:35:29,240 --> 00:35:37,720
and how much time it needs. So that Slurm can fill you a slot in one of the computers

269
00:35:37,720 --> 00:35:45,560
so that your code can then run there. Of course, basically, you can think of Slurm as trying to

270
00:35:45,560 --> 00:35:51,720
solve like a Tetris puzzle constantly, and you're just giving it different kinds of blocks all the

271
00:35:51,720 --> 00:36:01,000
time. If you don't like the table analogy, another analogy with that. And Slurm tries to get the full

272
00:36:01,000 --> 00:36:08,360
Tetris of filling the computers fully and it will consider these kinds of like slots or blocks

273
00:36:09,240 --> 00:36:17,400
when it's calculating the jobs. Yeah, actually you have a good picture of this slot concept.

274
00:36:17,400 --> 00:36:26,600
Should we show that? If you have it right away then sure why not. So this how big is my program

275
00:36:26,600 --> 00:36:42,160
page. Yeah. So this is written last year-ish. Yeah. And yeah, so there's these good pictures.

276
00:36:42,160 --> 00:36:48,160
So a typical laptop computer, what's it like? Yeah, a typical laptop, like what you might

277
00:36:48,160 --> 00:36:54,080
have, these might be a bit old, maybe they're bigger now, like since last year, but it's

278
00:36:54,080 --> 00:37:01,680
It's about four CPUs and 16 gigabytes of RAM, and a workstation might be eight CPUs and

279
00:37:01,680 --> 00:37:11,880
maybe 32 gigabytes of RAM, and a typical computational server or compute node, compute node is another

280
00:37:11,880 --> 00:37:18,080
way that we just say it's a server, it's about maybe 32 CPUs.

281
00:37:18,080 --> 00:37:26,420
Nowadays, it can be up to 128 or 256 CPUs and up to terabytes of RAM or something.

282
00:37:26,420 --> 00:37:32,200
But that's about the ballpark, but that's an estimate.

283
00:37:32,200 --> 00:37:41,500
So you can say that one server is about four desktop computers or eight laptops.

284
00:37:41,500 --> 00:37:48,620
So when you're trying to decide what the resources are

285
00:37:48,620 --> 00:37:51,220
that your program needs, it's usually a good idea

286
00:37:51,220 --> 00:37:54,900
to use this as sort of a natural measuring stick.

287
00:37:54,900 --> 00:37:57,900
That's like, OK, let's just say that.

288
00:37:57,900 --> 00:38:00,460
So if you have no idea what to request at all,

289
00:38:00,460 --> 00:38:02,140
but you know it works on your laptop,

290
00:38:02,140 --> 00:38:05,020
you could start with roughly this amount

291
00:38:05,020 --> 00:38:08,180
and then adjust up or down.

292
00:38:08,180 --> 00:38:09,220
Yes.

293
00:38:09,220 --> 00:38:14,900
And the simplest option is that if you run the program on your computer,

294
00:38:14,900 --> 00:38:18,340
if it runs on your computer, you can just check your task manager.

295
00:38:18,340 --> 00:38:23,140
Like there's instructions below how you could do it, but basically this is the kind of like

296
00:38:26,500 --> 00:38:35,060
natural number or like natural unit that you can use to measure your codes.

297
00:38:35,060 --> 00:38:38,060
That's a good starting point.

298
00:38:38,060 --> 00:38:43,660
So first ask what your laptop provides and then see how it works.

299
00:38:43,660 --> 00:38:46,460
That's usually a good starting point.

300
00:38:46,460 --> 00:38:56,500
So what are the resources we'll be requesting in our jobs?

301
00:38:56,500 --> 00:39:00,380
What resources does it allocate?

302
00:39:00,380 --> 00:39:05,740
So yeah, like we mentioned, there's the CPUs, then the memory, and then the time.

303
00:39:05,740 --> 00:39:11,300
We'll be talking about these throughout, like, we'll first start in the first examples that

304
00:39:11,300 --> 00:39:15,380
we are going to be running quite shortly, and that you can run as well.

305
00:39:15,380 --> 00:39:19,620
We'll be mainly focusing on time and memory, because those are something that always need

306
00:39:19,620 --> 00:39:22,180
to be basically set.

307
00:39:22,180 --> 00:39:26,900
And then the processor count, when we get to the parallel stuff tomorrow, we'll talk

308
00:39:26,900 --> 00:39:29,180
a lot more about the processor count.

309
00:39:29,180 --> 00:39:36,780
For now, let's just focus on one CPU jobs, but we can do more on that.

310
00:39:36,780 --> 00:39:40,060
There's also, of course, special hardware like GPUs.

311
00:39:40,860 --> 00:39:47,180
You might need a machine with a specific hardware, so you might need a GPU.

312
00:39:47,180 --> 00:39:52,060
There's also a possibility that if you want to use a certain kind of a CPU,

313
00:39:52,060 --> 00:39:57,980
like our cluster, it has multiple generations of CPUs.

314
00:39:57,980 --> 00:40:04,300
whenever we buy more machines, we usually don't throw the old ones away. We try to be ecological

315
00:40:04,300 --> 00:40:10,220
in a sense like that. So, we use them until they are no longer usable or useful anymore.

316
00:40:11,900 --> 00:40:16,140
So, you might want to limit yourself to a certain architecture or something.

317
00:40:16,140 --> 00:40:22,220
And in those cases, you can do the limiting. But those are more advanced stuff and we don't

318
00:40:22,220 --> 00:40:26,140
necessarily need to focus on that.

319
00:40:26,700 --> 00:40:30,460
So maybe, this wasn't exactly asked in the notes, but

320
00:40:30,460 --> 00:40:35,980
I questioned, so CPUs and cores and processors, do these all mean the

321
00:40:35,980 --> 00:40:38,460
same thing?

322
00:40:39,580 --> 00:40:45,100
Well, basically yes, like CPU can have multiple,

323
00:40:45,100 --> 00:40:48,140
or CPUs usually have multiple cores, so the

324
00:40:48,140 --> 00:40:56,540
actual like physical CPU chip. It usually has multiple cores, but they can be also said to be

325
00:40:56,540 --> 00:41:03,260
like CPUs in many cases. So they appear as like separate GPUs in the operating system.

326
00:41:03,260 --> 00:41:07,820
So they are usually referred to as cores. So practically speaking, it's the same thing.

327
00:41:08,540 --> 00:41:15,420
Yeah, it's like from the user perspective, it's the same thing. And that is, yeah.

328
00:41:15,420 --> 00:41:21,180
And then second, there's a good question. The new Mac processors, M1 and so on,

329
00:41:21,180 --> 00:41:26,860
seem to have a lot of VRAM, and also a different architecture, and I think more

330
00:41:26,860 --> 00:41:32,380
cores than usual. How does this play into this, if it usually works on my laptop?

331
00:41:34,060 --> 00:41:40,380
Yeah, so what [name] said, the Mac architecture is different, so it's an ARM-based processor.

332
00:41:40,380 --> 00:41:46,860
most of the computing clusters. Well, there are some ARM-based computing clusters in, I think

333
00:41:46,860 --> 00:41:54,700
Amazon has some and that sort of stuff, but ours are like the x86, you might have heard that

334
00:41:54,700 --> 00:42:05,500
architecture. So they are using that architecture. So they have a different kind of CPU style.

335
00:42:05,500 --> 00:42:15,060
still. So they work in a bit different way. And like the VRAM stuff, like Mac has this

336
00:42:15,060 --> 00:42:20,460
unified memory architecture that is like a bit different than this kind of like x86.

337
00:42:20,460 --> 00:42:27,580
So it's a bit more complicated. But usually that means that's just like, yeah, you cannot

338
00:42:27,580 --> 00:42:33,240
run the exact same program because you need two different CPU architecture, but usually

339
00:42:33,240 --> 00:42:40,280
can get it working in both systems without any hassle. And I guess understanding the resources

340
00:42:40,280 --> 00:42:47,160
your program needs actually is a big part of running on the cluster somehow. Like on your

341
00:42:47,160 --> 00:42:52,600
own computer you just do it and it either works or it doesn't. But on the cluster

342
00:42:54,520 --> 00:43:02,120
you have to really think about this. I will also mention that when we are going through

343
00:43:02,120 --> 00:43:07,960
the examples here. And when you're starting on your work, it's a good idea to request more

344
00:43:07,960 --> 00:43:16,600
than less. And we will show you various tools that Slurm provides that you can then monitor

345
00:43:16,600 --> 00:43:23,240
what the code actually used. And based on that output, you can try to determine whether your

346
00:43:23,240 --> 00:43:31,000
code ran correctly. But as a first step, I would request more than less and then see if I actually

347
00:43:31,000 --> 00:43:37,080
managed to use all of that. So if you don't know how many people are coming to your birthday party

348
00:43:37,080 --> 00:43:43,240
or something, it's better to book a table that is big enough for the biggest group that you expect

349
00:43:43,240 --> 00:43:50,840
instead of maybe just book a small table and then have a problem. Important to realize we're not

350
00:43:50,840 --> 00:43:56,280
running things just once usually, so it's better to request more and then look and see what it uses

351
00:43:56,280 --> 00:44:02,220
And then for all the future ones, you can adjust and we'll actually talk about monitoring later today

352
00:44:02,220 --> 00:44:08,380
So we don't need to go into details, but but there's this is enough theory. Let's go to actual like let's do something

353
00:44:09,160 --> 00:44:11,480
So should we move on to the next lesson?

354
00:44:12,280 --> 00:44:14,540
Yes to interactive jobs

355
00:44:15,180 --> 00:44:19,080
So, okay. So do you want to throw the screen to my screen?

356
00:44:20,080 --> 00:44:23,720
Sure. Are you ready for it? Yeah, okay

357
00:44:26,280 --> 00:44:28,980
There is your screen.

358
00:44:28,980 --> 00:44:34,200
Yes. So before we start looking at the lessons,

359
00:44:34,200 --> 00:44:39,400
let's check this copy of code to the cluster section.

360
00:44:39,400 --> 00:44:44,880
We will do one thing here.

361
00:44:44,880 --> 00:44:48,080
So the upcoming examples,

362
00:44:48,080 --> 00:44:54,200
we'll use these HPC examples repository that we have created.

363
00:44:54,200 --> 00:45:01,760
So, if you want to follow along with the examples, you should clone this repository as well.

364
00:45:01,760 --> 00:45:08,920
So, we'll talk about when there's time to, like, when do you want to write yourself and

365
00:45:08,920 --> 00:45:12,520
when do we, when there's type along and when there's not.

366
00:45:12,520 --> 00:45:17,440
But if you want to do the same commands that we do, just be mindful that you need to get

367
00:45:17,440 --> 00:45:18,440
this repository.

368
00:45:18,440 --> 00:45:26,040
I will do this in my terminal that I have enabled here and now I have the repository.

369
00:45:26,040 --> 00:45:30,800
So I'm now in the folder of the repository.

370
00:45:30,800 --> 00:45:38,760
I just made a quick poll to see how many people have gone through the cluster shell tutorial

371
00:45:38,760 --> 00:45:39,760
here.

372
00:45:39,760 --> 00:45:40,760
Yeah.

373
00:45:40,760 --> 00:45:41,760
Yeah.

374
00:45:41,760 --> 00:45:47,160
So, but that's quite simple.

375
00:45:47,160 --> 00:45:51,880
a few commands to do if you want to follow that. But let's go to start with the interactive jobs.

376
00:45:52,920 --> 00:45:55,720
And [name], what do we mean with interactive jobs?

377
00:45:56,920 --> 00:46:04,840
Yeah, so on the cluster, there's two main types of jobs you can run. So let's say you go to a

378
00:46:04,840 --> 00:46:11,480
restaurant. You can go, you can tell the host, I would like to have this kind of table. And you can

379
00:46:11,480 --> 00:46:17,940
sit there waiting in the queue, or you can go walk around, do something else, and come

380
00:46:17,940 --> 00:46:20,300
back when your table's ready.

381
00:46:20,300 --> 00:46:24,540
So this isn't actually perfect because the better metaphor would be coming back once

382
00:46:24,540 --> 00:46:29,740
your food is already eaten, which doesn't make sense in that metaphor, but it's the

383
00:46:29,740 --> 00:46:32,500
general idea here.

384
00:46:32,500 --> 00:46:38,340
So with interactive jobs, we say we'd like these resources, and you wait until they're

385
00:46:38,340 --> 00:46:40,940
there and then you can do something yourself.

386
00:46:40,940 --> 00:46:44,500
So it requires your time and mental effort.

387
00:46:44,500 --> 00:46:49,580
What we'll do next is called batch jobs, where we say we'd like to do this, and then it's

388
00:46:49,580 --> 00:46:53,580
submitted and then you come back when it's all done.

389
00:46:53,580 --> 00:46:57,620
So we start with interactive jobs because it's easy to understand, it's easy to see

390
00:46:57,620 --> 00:47:04,260
what happens, and then we can get familiar with making these different resource requests

391
00:47:04,260 --> 00:47:08,260
and so on.

392
00:47:08,260 --> 00:47:09,220
Oh, OK.

393
00:47:09,220 --> 00:47:10,980
Yeah.

394
00:47:10,980 --> 00:47:12,700
Was that a good explanation?

395
00:47:12,700 --> 00:47:13,900
Yeah.

396
00:47:13,900 --> 00:47:15,260
OK.

397
00:47:15,260 --> 00:47:17,260
So we'll actually do it.

398
00:47:17,260 --> 00:47:18,980
Yeah, let's do it.

399
00:47:18,980 --> 00:47:22,580
So let's look at the following command here.

400
00:47:22,580 --> 00:47:25,500
I will make this a bit smaller.

401
00:47:25,500 --> 00:47:27,740
So OK, so where are we now?

402
00:47:27,740 --> 00:47:32,780
So you can try to follow along and type with us also.

403
00:47:32,780 --> 00:47:35,220
Also, we will give you time.

404
00:47:35,220 --> 00:47:36,940
We're going to go through some things,

405
00:47:36,940 --> 00:47:42,620
you'll have a nice long exercise break where you can try yourself. So, if you can't follow

406
00:47:42,620 --> 00:47:51,020
as we're typing now, don't worry. There's time later. And about the setup here, on that

407
00:47:51,740 --> 00:47:57,500
window here, I will be typing some commands and [name] will explain them. And on the bottom here,

408
00:47:57,500 --> 00:48:04,060
you can see the history of the commands. Yeah. And so, we assume that you already can connect

409
00:48:04,060 --> 00:48:10,940
to the cluster by SSH or on-demand or something and get a terminal. This is what we demonstrated

410
00:48:10,940 --> 00:48:16,860
yesterday and should have been the homework for today. If you can't already get a terminal that

411
00:48:16,860 --> 00:48:22,940
looks like this and type commands, then you're a bit behind and then that's okay.

412
00:48:23,740 --> 00:48:27,500
You can watch what we're doing and try to catch up later during the break.

413
00:48:27,500 --> 00:48:36,220
So, [name] is there. He has cloned the HPC examples repository using the git version

414
00:48:36,220 --> 00:48:41,860
control system. Which is, by the way, a good way of transferring code to the cluster in

415
00:48:41,860 --> 00:48:57,460
general. And then has changed into the directory. And then is running Python3 slurm/pi.py 

416
00:48:57,460 --> 00:49:05,860
1000. So what does this program do? So this program does like this kind of like a

417
00:49:05,860 --> 00:49:13,620
like this is like a common example in like if you do Monte Carlo simulations like this

418
00:49:13,620 --> 00:49:20,980
example where we estimate pi by throwing dart at a dartboard and because dartboard is a circle

419
00:49:20,980 --> 00:49:26,900
and if we take random numbers from zero to one, like either square, we can basically estimate

420
00:49:26,900 --> 00:49:35,060
the pi by the ratio of how many darts hit the dartboard. So this is like a small example code

421
00:49:35,060 --> 00:49:45,780
that just does something. And we use it for many examples. So where did this code now run, [name]?

422
00:49:45,780 --> 00:49:56,780
Well, we haven't... I don't see anything that looks like it's requesting resources, so this must have just run on the login node, I guess.

423
00:49:56,780 --> 00:50:00,780
Like, we didn't give any instructions to the host saying what we wanted.

424
00:50:02,780 --> 00:50:06,780
So let's... should we do the interactive request then?

425
00:50:06,780 --> 00:50:13,780
Yeah, so let's request from Slurm some resources. So srun is the program to use for it.

426
00:50:13,780 --> 00:50:21,460
it. The memory option says we need 100 megabytes of memory, which by the way is very small.

427
00:50:22,500 --> 00:50:27,620
We need 10 minutes of time, which is way too much. And then we give all the normal options

428
00:50:27,620 --> 00:50:33,540
we would give on the command line. So the program to run, which is Python, the program,

429
00:50:33,540 --> 00:50:41,460
which is Py, and 10,000 iterations. So what do I see here? It says srun,

430
00:50:41,460 --> 00:50:49,460
Slurm job submit automatically setting partitions is this in the background telling it

431
00:50:51,140 --> 00:50:59,220
where it's running somehow yeah so on the on our cluster it might be different in your cluster

432
00:50:59,220 --> 00:51:04,660
but on our cluster like the different kinds of hardware that we have is separating the

433
00:51:04,660 --> 00:51:10,260
entity set different partitions because like if somebody wants to run on a specific hardware

434
00:51:11,460 --> 00:51:14,420
they might want to run only on a specific partition.

435
00:51:14,420 --> 00:51:19,700
But if the user doesn't specify what hardware they want to use,

436
00:51:19,700 --> 00:51:21,780
there's this automatic script that

437
00:51:21,780 --> 00:51:24,420
basically use a sensible default.

438
00:51:24,420 --> 00:51:27,660
In your cluster, if you're in a different cluster,

439
00:51:27,660 --> 00:51:33,820
you might need to specify this dash-dash partition flag like this.

440
00:51:33,820 --> 00:51:36,180
In some sites, you might also

441
00:51:36,180 --> 00:51:39,020
need to specify an account that you want to use.

442
00:51:39,020 --> 00:51:41,460
So there might be different projects or something

443
00:51:41,460 --> 00:51:47,860
that you want to specify that, OK, use

444
00:51:47,860 --> 00:51:51,900
this account for the billing of job, basically.

445
00:51:51,900 --> 00:51:54,340
We'll talk about the billing in a second.

446
00:51:54,340 --> 00:51:58,420
But in our cluster, these are set basically automatically,

447
00:51:58,420 --> 00:52:00,060
so you don't necessarily need to do them.

448
00:52:00,060 --> 00:52:03,820
But let's say you run it on a CSC machine,

449
00:52:03,820 --> 00:52:05,220
you might need to set this.

450
00:52:05,220 --> 00:52:05,980
Yeah.

451
00:52:05,980 --> 00:52:07,660
But what happened afterwards?

452
00:52:07,660 --> 00:52:14,780
So then we see srun job id, thus queued and waiting for resources, job allocated resources,

453
00:52:15,340 --> 00:52:23,100
calculating pi, so that's the standard output. So yeah, basically it's telling us it

454
00:52:24,460 --> 00:52:31,260
got the resources and then it ran, and I guess it ran on some other computer somewhere.

455
00:52:31,260 --> 00:52:41,980
Yes. While it was running, we could have tried to see what was happening in the queue, like

456
00:52:41,980 --> 00:52:48,980
how it was doing in the queue. You can either use this squeue command or this slurm q to do it.

457
00:52:48,980 --> 00:52:56,780
Because it's so fast to go through the queue, it's very hard to capture this for this specific

458
00:52:56,780 --> 00:53:04,620
program, but if you have a program in the queue, you can use this to check the queue status. We'll

459
00:53:04,620 --> 00:53:13,740
talk about this more in the monitoring part, but yes, you can do this. Okay. Maybe we can go on

460
00:53:13,740 --> 00:53:19,900
and let people explore this more themselves. Yeah. To verify, this is a good example that

461
00:53:19,900 --> 00:53:26,580
that if we just run a command like hostname,

462
00:53:26,580 --> 00:53:29,220
which tells us which host we are in,

463
00:53:29,220 --> 00:53:32,820
we can show that if we run just hostname,

464
00:53:32,820 --> 00:53:36,700
we see that we are actually in the login for.

465
00:53:36,700 --> 00:53:37,780
Because in the output,

466
00:53:37,780 --> 00:53:39,440
we didn't necessarily see that we

467
00:53:39,440 --> 00:53:41,900
were in a different place where we were running.

468
00:53:41,900 --> 00:53:45,180
But if we run srun hostname,

469
00:53:45,180 --> 00:53:49,700
now it just uses some default values for time and memory.

470
00:53:49,700 --> 00:53:56,180
But usually we don't want to use the defaults because they are not set by us, but in this

471
00:53:56,180 --> 00:53:59,420
case, let's just run it.

472
00:53:59,420 --> 00:54:04,700
It's running, waiting for resources, and it has been allocated some compute node.

473
00:54:04,700 --> 00:54:09,900
So we know that, okay, this command actually run in some different system.

474
00:54:09,900 --> 00:54:11,540
There's a request in the notes.

475
00:54:11,540 --> 00:54:18,980
Can we show an srun with huge resource request and show it waiting in the queue?

476
00:54:18,980 --> 00:54:19,980
Yes.

477
00:54:19,980 --> 00:54:22,980
So, what is big?

478
00:54:22,980 --> 00:54:25,980
Can we say 200 gigabytes of memory?

479
00:54:25,980 --> 00:54:26,980
Yeah.

480
00:54:26,980 --> 00:54:31,980
And then...

481
00:54:31,980 --> 00:54:38,980
Yeah, well, it still runs quite quickly because, like, yeah, there's like...

482
00:54:38,980 --> 00:54:40,980
It's kind of arranged for that.

483
00:54:40,980 --> 00:54:43,980
But let's say we ask for 200 terabytes of memory.

484
00:54:43,980 --> 00:54:46,980
Now it says that there's no such node.

485
00:54:46,980 --> 00:54:52,980
We don't have a computer that has 200 gigabytes of memory.

486
00:54:52,980 --> 00:54:53,980
So, yeah.

487
00:54:53,980 --> 00:55:00,980
Could we request 200 gigabytes of memory, 50 processors, and, say, one day of time?

488
00:55:00,980 --> 00:55:02,980
Is that huge?

489
00:55:02,980 --> 00:55:05,980
Well, let's not do the processors.

490
00:55:05,980 --> 00:55:09,980
Let's just say, like, four days of time.

491
00:55:09,980 --> 00:55:14,980
So, this is the day syntax.

492
00:55:14,980 --> 00:55:16,980
And it still ran immediately.

493
00:55:16,980 --> 00:55:19,980
There seems to be like a node...

494
00:55:19,980 --> 00:55:21,980
Okay, let's put the CPU.

495
00:55:25,980 --> 00:55:26,980
Okay, now it's...

496
00:55:26,980 --> 00:55:27,980
Okay, it's still...

497
00:55:27,980 --> 00:55:28,980
So, this is...

498
00:55:28,980 --> 00:55:32,980
Okay, but there's a free resource for you to take.

499
00:55:32,980 --> 00:55:36,980
So, part of the reason why it's running so fast is that

500
00:55:36,980 --> 00:55:39,980
[name] hasn't run much lately.

501
00:55:39,980 --> 00:55:42,980
And the less you run, the higher your priority is.

502
00:55:42,980 --> 00:55:47,980
So basically, [name] hops to the front of the queue and gets anything immediately.

503
00:55:47,980 --> 00:55:54,980
And this is also one of the situations that can happen if you are dealing with interactive jobs.

504
00:55:54,980 --> 00:55:59,980
If we think about the restaurant metaphor, if we go to an empty restaurant,

505
00:55:59,980 --> 00:56:02,980
we can basically choose which table we want to eat anyway, right?

506
00:56:02,980 --> 00:56:07,980
We can pick the biggest table, it doesn't really matter if the restaurant is empty.

507
00:56:07,980 --> 00:56:17,940
If there is enough free space, then the queue manager can basically fill our strange requests.

508
00:56:17,940 --> 00:56:25,460
But if the place is full, it might be that we suddenly need to wait a lot.

509
00:56:25,460 --> 00:56:31,280
So let's show the interactive shell and the sinteractive command quickly.

510
00:56:31,280 --> 00:56:36,300
So what we did here is we ran a command line program on a node.

511
00:56:36,300 --> 00:56:42,300
But we can also request it to run just a normal shell,

512
00:56:42,300 --> 00:56:45,300
and then we see things.

513
00:56:45,300 --> 00:56:48,980
So here we're making the standard resource request.

514
00:56:48,980 --> 00:56:52,100
This time we've told it the interactive partition.

515
00:56:52,100 --> 00:56:54,900
And we get this.

516
00:56:54,900 --> 00:56:56,980
So now we see it.

517
00:56:56,980 --> 00:56:58,660
This is because of the recording thing.

518
00:56:58,660 --> 00:56:59,780
Don't worry about that.

519
00:56:59,780 --> 00:57:02,820
Like recording the history.

520
00:57:02,820 --> 00:57:03,860
Yeah.

521
00:57:03,860 --> 00:57:04,460
Yeah.

522
00:57:04,460 --> 00:57:08,340
But we see here, if you read this last line,

523
00:57:08,340 --> 00:57:09,260
it looks different.

524
00:57:09,260 --> 00:57:13,100
It says [name] username and then PE22.

525
00:57:13,100 --> 00:57:16,780
And PE22 is the name of one of these compute nodes

526
00:57:16,780 --> 00:57:18,620
that's available.

527
00:57:18,620 --> 00:57:23,180
So now [name] has waited once and can run things multiple times,

528
00:57:23,180 --> 00:57:27,340
like this hostname command and other things.

529
00:57:27,340 --> 00:57:28,380
Yeah.

530
00:57:28,380 --> 00:57:29,140
Yeah, OK.

531
00:57:29,140 --> 00:57:32,300
If I exit them, yeah.

532
00:57:32,300 --> 00:57:34,300
I don't know why that history doesn't work.

533
00:57:35,580 --> 00:57:37,580
I have an idea, but let's worry about it later.

534
00:57:37,580 --> 00:57:39,580
Okay. Yeah. Okay.

535
00:57:39,580 --> 00:57:41,580
So, yeah.

536
00:57:41,580 --> 00:57:45,580
So, yeah, this is, like, if you want to run multiple commands,

537
00:57:45,580 --> 00:57:50,380
like, you can use this if you want to temporarily get, like,

538
00:57:50,380 --> 00:57:53,580
let's say you want to do, like, a big installation or something,

539
00:57:53,580 --> 00:57:58,300
and the login node doesn't have the resources to do that.

540
00:57:58,300 --> 00:58:05,980
like there was a question there in the notes about like if you're doing like a

541
00:58:05,980 --> 00:58:12,540
big build on your laptop like it might require lots of resources like that might happen also

542
00:58:12,540 --> 00:58:17,100
in the cluster you so you might want to get like temporarily lots of resources but do note that

543
00:58:17,100 --> 00:58:22,460
these because these are interactive resources when you're not using them they're basically

544
00:58:22,460 --> 00:58:28,060
still reserved for you, so you're reserving resources. So if you're not using them,

545
00:58:28,060 --> 00:58:32,780
it's a good idea to usually give them away so that other people can use them instead.

546
00:58:34,700 --> 00:58:39,100
And this other command, sinteractive, is it even still installed? Did we

547
00:58:39,100 --> 00:58:40,940
install it on the new cluster? Yeah, it's installed.

548
00:58:40,940 --> 00:58:49,980
Okay. So this is pretty similar to the srun one, but it sets some other defaults

549
00:58:49,980 --> 00:58:55,340
and can allow graphical programs to run. But now we would recommend doing graphical things with

550
00:58:55,900 --> 00:58:59,500
open on demand, so wouldn't really recommend this, I guess.

551
00:59:01,180 --> 00:59:10,540
Yeah, but if you have a need to do it, then yeah. Yes. Okay. So the error is

552
00:59:10,540 --> 00:59:16,460
probably because of the recording script that I'm using. Yeah. Okay.

553
00:59:19,980 --> 00:59:27,260
So should we go on and we need to talk about checking the jobs so we can see the history.

554
00:59:27,260 --> 00:59:34,020
I'll quickly mention that if you want to see what jobs we had previously run, you can use

555
00:59:34,020 --> 00:59:36,700
the slurm history command.

556
00:59:36,700 --> 00:59:41,580
I will make the terminal a bit smaller so that I can see it.

557
00:59:41,580 --> 00:59:50,540
And it will show me the history of all of the jobs

558
00:59:50,540 --> 00:59:53,020
that I have previously run, for example, the interactive jobs

559
00:59:53,020 --> 00:59:53,940
and that sort of stuff.

560
00:59:53,940 --> 00:59:55,700
We'll talk about this more about when

561
00:59:55,700 --> 01:00:00,060
we talk about monitoring jobs, but it

562
01:00:00,060 --> 01:00:03,060
is possible to see the history.

563
01:00:03,060 --> 01:00:04,900
So but let's scroll down.

564
01:00:04,900 --> 01:00:05,820
Yeah, should we?

565
01:00:05,820 --> 01:00:07,900
We've got these exercises here.

566
01:00:07,900 --> 01:00:11,220
So we'll give you some time to explore this yourself

567
01:00:11,220 --> 01:00:13,620
and ask questions.

568
01:00:13,620 --> 01:00:17,140
There are how many different things you can try?

569
01:00:17,140 --> 01:00:18,300
I count five of them.

570
01:00:21,140 --> 01:00:22,980
And you can also try the other things

571
01:00:22,980 --> 01:00:26,020
we've demonstrated above here.

572
01:00:26,020 --> 01:00:26,860
Give it a try.

573
01:00:26,860 --> 01:00:30,540
See how it adapts to your own clusters.

574
01:00:30,540 --> 01:00:33,100
Read some more things.

575
01:00:33,100 --> 01:00:34,780
Yeah.

576
01:00:34,780 --> 01:00:38,860
I will switch to the notes here.

577
01:00:38,860 --> 01:00:46,140
And I see that there's many different questions here, and they've been being answered. So do

578
01:00:46,140 --> 01:00:57,900
keep asking. Is there anything we want to talk about now? I think most people can probably...

579
01:00:57,900 --> 01:01:07,900
The Jupyter Terminal does work, yes.

580
01:01:07,900 --> 01:01:09,900
MATLAB.

581
01:01:09,900 --> 01:01:17,900
Maybe we'll talk about MATLAB a bit later if someone can answer some default.

582
01:01:17,900 --> 01:01:21,900
Yeah, okay, I'd say let's go on to the exercises.

583
01:01:21,900 --> 01:01:25,900
How long should people have?

584
01:01:25,900 --> 01:01:33,900
Should we have maybe 5 to one?

585
01:01:33,900 --> 01:01:42,900
Yeah, maybe 5 to one and then we can do a brief wrap up and then have a break.

586
01:01:42,900 --> 01:01:43,900
Yeah.

587
01:01:43,900 --> 01:01:44,900
Okay.

588
01:01:44,900 --> 01:01:45,900
Sounds good.

589
01:01:45,900 --> 01:01:47,900
See you then.

590
01:01:47,900 --> 01:01:48,900
Yep.

591
01:01:48,900 --> 01:01:56,740
Yep, do keep asking questions and respond with your progress to our poll there.

592
01:01:56,740 --> 01:01:58,740
See you later.

593
01:01:58,740 --> 01:02:00,740
Bye.

594
01:02:18,900 --> 01:02:20,960
you

595
01:02:48,900 --> 01:02:50,960
you

596
01:03:18,900 --> 01:03:20,960
you

597
01:03:48,900 --> 01:03:50,960
you

598
01:04:18,900 --> 01:04:20,960
you

599
01:04:48,900 --> 01:04:50,960
you

600
01:05:18,900 --> 01:05:20,960
you

601
01:05:48,900 --> 01:05:50,960
you

602
01:06:18,900 --> 01:06:20,960
you

603
01:06:48,900 --> 01:06:50,960
you

604
01:07:18,900 --> 01:07:20,960
you

605
01:07:48,900 --> 01:07:50,960
you

606
01:08:18,900 --> 01:08:20,960
you

607
01:08:48,900 --> 01:08:50,960
you

608
01:09:18,900 --> 01:09:20,960
you

609
01:09:48,900 --> 01:09:50,960
you

610
01:10:18,900 --> 01:10:20,960
you

611
01:10:48,900 --> 01:10:50,960
you

612
01:11:18,900 --> 01:11:20,960
you

613
01:11:48,900 --> 01:11:50,960
you

614
01:12:18,900 --> 01:12:20,960
you

615
01:12:48,900 --> 01:12:50,960
you

616
01:13:18,900 --> 01:13:20,960
you

617
01:13:48,900 --> 01:13:50,960
you

618
01:14:18,900 --> 01:14:20,960
you

619
01:14:48,900 --> 01:14:50,960
you

620
01:15:18,900 --> 01:15:20,960
you

621
01:15:48,900 --> 01:15:50,960
you

622
01:16:18,900 --> 01:16:22,900
Yeah, we could then demo.

623
01:16:48,900 --> 01:17:18,740
Also, I will mention that this goes into the next subject that we are going to be talking

624
01:17:18,740 --> 01:17:27,780
about, there's also a question of, can you attach to already existing job? And it goes to,

625
01:17:28,580 --> 01:17:32,420
what we're next going to be talking about is these non-interactive jobs.

626
01:17:32,420 --> 01:17:40,340
So in many cases, the interactive is fine if you are actually watching. My personal

627
01:17:41,140 --> 01:17:47,780
approach is that if I'm not watching the actual screen, I'm not using interactive jobs.

628
01:17:47,780 --> 01:17:57,780
Like, if I'm not actually using, like, humanly watching it, I'm not using interactive talks

629
01:17:57,780 --> 01:17:59,140
because why?

630
01:17:59,140 --> 01:18:01,140
I'm not interacting with it.

631
01:18:01,140 --> 01:18:05,300
I realized I forgot to turn on my audio when coming back on stream.

632
01:18:05,300 --> 01:18:08,660
But anyway, we're back.

633
01:18:08,660 --> 01:18:11,180
What did I say that was the podcast?

634
01:18:11,180 --> 01:18:18,860
If you wanted us to do a demo of one of the exercises, put a vote to the exercises.

635
01:18:18,860 --> 01:18:21,020
Please vote down here.

636
01:18:21,020 --> 01:18:28,420
What else did I say?

637
01:18:28,420 --> 01:18:34,300
If you, do you need to close jobs when they're completed?

638
01:18:34,300 --> 01:18:38,500
And that is yes.

639
01:18:38,500 --> 01:18:43,240
If you don't close one of the ones that gives you a shell, then the resources will stay

640
01:18:43,240 --> 01:18:50,460
reserved for you.

641
01:18:50,460 --> 01:18:53,660
So there was at least one vote for exercise one.

642
01:18:53,660 --> 01:18:56,900
So we can do a quick demo of that.

643
01:18:56,900 --> 01:19:01,020
So let's do the most simple one over here.

644
01:19:01,020 --> 01:19:04,500
I'm heading to [name]'s screen.

645
01:19:04,500 --> 01:19:07,420
Yes.

646
01:19:07,420 --> 01:19:18,700
In this exercise, we run this memory use script that uses memory and then we

647
01:19:22,060 --> 01:19:27,900
want to see what happens when we increase the memory requirements and with various memory requirements.

648
01:19:27,900 --> 01:19:37,900
So let's try first just running with just srun and no any requirements specified,

649
01:19:39,580 --> 01:19:46,700
any specific requirements. So let's just try running this and see what happens.

650
01:19:48,780 --> 01:19:57,820
So you can see here, yeah maybe I typed it too fast. So I wrote srun and just what I want to run.

651
01:19:57,900 --> 01:20:04,220
So just add the SRUN. That's usually this one handy trick that you can use. Just add the SRUN

652
01:20:04,220 --> 01:20:11,980
if you don't know what happens. And it was trying to use 50 megabytes of memory and it

653
01:20:13,740 --> 01:20:20,220
allocated up to that point. It worked. So let's add an actual memory requirement here.

654
01:20:20,220 --> 01:20:32,860
So I press the up arrow to get the previous command and now I will request 500 megabytes.

655
01:20:32,860 --> 01:20:37,940
And because it's less than the 50, it still worked quite well.

656
01:20:37,940 --> 01:20:44,460
But now let's do the C part where we try to increase the memory limit.

657
01:20:44,460 --> 01:20:48,620
So let's try, we have the 500 over here.

658
01:20:48,620 --> 01:20:52,940
So let's try like 500 over here.

659
01:20:52,940 --> 01:20:53,940
Okay.

660
01:20:53,940 --> 01:20:54,940
Ah.

661
01:20:54,940 --> 01:20:55,940
Yeah.

662
01:20:55,940 --> 01:21:01,260
It's memory killed because it's actually probably using a bit more than the 500.

663
01:21:01,260 --> 01:21:05,460
So let's increase the memory limit a bit and let's see how much it actually used even though

664
01:21:05,460 --> 01:21:07,540
it tried to use 500.

665
01:21:07,540 --> 01:21:09,140
Let's see if 600 works.

666
01:21:09,140 --> 01:21:10,140
Okay.

667
01:21:10,140 --> 01:21:11,300
600 works.

668
01:21:11,300 --> 01:21:14,580
So let's add the sleep parameter there

669
01:21:14,580 --> 01:21:18,620
to check what was the actual memory usage.

670
01:21:23,980 --> 01:21:26,780
We can use Slurm history to check the memory usage.

671
01:21:30,140 --> 01:21:34,700
But we need to, like Slurm captures it only once

672
01:21:34,700 --> 01:21:37,860
every 60 seconds or 30 seconds or something.

673
01:21:37,860 --> 01:21:41,620
So, we need to let it run a bit longer.

674
01:21:42,700 --> 01:21:43,540
Yeah.

675
01:21:47,100 --> 01:21:48,620
Right.

676
01:21:48,620 --> 01:21:50,260
And you notice here that,

677
01:21:50,260 --> 01:21:53,340
let's say I would be running like a long job.

678
01:21:53,340 --> 01:21:56,700
This would be really annoying to watch at the screen

679
01:21:56,700 --> 01:21:59,980
to keep it open, like the terminal open constantly

680
01:21:59,980 --> 01:22:01,220
or the connection open.

681
01:22:01,220 --> 01:22:04,220
So, in the next session, we'll talk about

682
01:22:04,220 --> 01:22:07,500
how you can avoid this kind of like situation

683
01:22:07,500 --> 01:22:10,720
where you have to keep it open while it's running somewhere

684
01:22:10,720 --> 01:22:11,760
in the background.

685
01:22:11,760 --> 01:22:15,800
So if this would last for, let's say, multiple hours,

686
01:22:15,800 --> 01:22:19,200
it would be really annoying to watch at this screen

687
01:22:19,200 --> 01:22:21,000
and let it wait.

688
01:22:21,000 --> 01:22:23,320
OK, there, it's done.

689
01:22:23,320 --> 01:22:29,800
Yeah, I will make it a bit smaller.

690
01:22:29,800 --> 01:22:31,800
Hopefully, you can still see the font.

691
01:22:31,800 --> 01:22:43,320
So you notice here there is some overhead in the code, so it actually used 518 megabytes.

692
01:22:45,480 --> 01:22:52,280
We'll talk about the memory usage and that sort of stuff a bit more later.

693
01:22:52,280 --> 01:22:59,480
I guess this is basically how it goes when you don't know how much memory it uses.

694
01:22:59,480 --> 01:23:06,600
you try a few things and you see what's happened, what happens, and then yeah. Okay, should we go

695
01:23:06,600 --> 01:23:11,960
to a break now? Yeah, I will quickly say that about the interactive stuff, the most important

696
01:23:11,960 --> 01:23:21,960
thing to remember is basically this diagram at the top of the documentation here, that when you're

697
01:23:21,960 --> 01:23:28,520
using srun or sinteractive, you're no longer in the login node, you're suddenly over here.

698
01:23:29,480 --> 01:23:34,760
So you're in the compute node. And that's the most important thing to remember that,

699
01:23:34,760 --> 01:23:40,280
okay, if I ask the queue system to place me somewhere, you end up into a different place.

700
01:23:40,920 --> 01:23:43,800
And that's basically the most important thing to remember.

701
01:23:44,440 --> 01:23:47,640
Yeah. Okay.

702
01:23:47,640 --> 01:23:48,600
Okay. Let's...

703
01:23:48,600 --> 01:23:48,840
Great.

704
01:23:48,840 --> 01:23:51,080
Should we take a 10 minute break until...

705
01:23:51,080 --> 01:24:00,920
10-minute break until 13 past. Okay, great. See you later. Bye.

706
01:24:21,080 --> 01:24:23,140
you

707
01:24:51,080 --> 01:24:53,140
you

708
01:25:21,080 --> 01:25:23,140
you

709
01:25:51,080 --> 01:25:53,140
you

710
01:26:21,080 --> 01:26:23,140
you

711
01:26:51,080 --> 01:26:53,140
you

712
01:27:21,080 --> 01:27:23,140
you

713
01:27:51,080 --> 01:27:53,140
you

714
01:28:21,080 --> 01:28:23,140
you

715
01:28:51,080 --> 01:28:53,140
you

716
01:29:21,080 --> 01:29:23,140
you

717
01:29:51,080 --> 01:29:53,140
you

718
01:30:21,080 --> 01:30:23,140
you

719
01:30:51,080 --> 01:30:53,140
you

720
01:31:21,080 --> 01:31:23,140
you

721
01:31:51,080 --> 01:31:53,140
you

722
01:32:21,080 --> 01:32:23,140
you

723
01:32:51,080 --> 01:32:53,140
you

724
01:33:21,080 --> 01:33:23,140
you

725
01:33:51,080 --> 01:33:53,140
you

726
01:34:21,080 --> 01:34:42,120
Hello.

727
01:34:42,120 --> 01:34:48,260
So we are back, and I've remembered to set the audio correct.

728
01:34:48,260 --> 01:34:53,660
So were there any more questions while we were waiting?

729
01:34:53,660 --> 01:34:58,860
I will quickly mention there were a few questions about various, like for example, the sinteractive

730
01:34:58,860 --> 01:35:00,340
and the Slurm commands.

731
01:35:00,340 --> 01:35:03,620
So these are like helper scripts that we have created.

732
01:35:03,620 --> 01:35:08,260
They are available in GitHub if you are interested.

733
01:35:08,260 --> 01:35:15,380
You can ask your admins to set them up or you can set them up yourself if you want to.

734
01:35:15,380 --> 01:35:21,220
there's alternatives that they're basically just wrappers for the slurm commands so there's

735
01:35:21,780 --> 01:35:33,060
alternatives provided in the notes if you don't have those at your site yeah okay so off to the

736
01:35:34,580 --> 01:35:42,020
section on serial jobs and I sent it to [name]'s screen yes

737
01:35:42,020 --> 01:35:55,700
Okay, so yeah, a serial or batch job. What does it mean? So I guess I gave the metaphor

738
01:35:55,700 --> 01:36:01,860
that you don't have to sit there and wait for it. So how does that go?

739
01:36:04,020 --> 01:36:10,660
Yeah, so like if you think about like what you are doing with your computer, like usually of

740
01:36:10,660 --> 01:36:17,940
course, there's a lot of coding that you do interactively. You code your code and then you

741
01:36:17,940 --> 01:36:23,220
do some modifications. Maybe you use a notebook interface or something like that, and then you

742
01:36:24,580 --> 01:36:30,820
constantly run each individual cell in the notebook. You might do most of your job like that.

743
01:36:31,380 --> 01:36:38,420
But when it comes to the parts that are actually heavy or computationally, that might take four

744
01:36:38,420 --> 01:36:44,420
hours to run that you might need the HPC resources, like the cluster resources for,

745
01:36:45,620 --> 01:36:50,420
you don't usually want to be there watching at it, right? It's a waste of your time

746
01:36:51,220 --> 01:36:56,180
to basically watch at that. Yeah. And then you can only do one thing at a time.

747
01:36:57,220 --> 01:37:05,940
Yes. Yeah. Yeah. You want to usually offload that to something else. So basically,

748
01:37:05,940 --> 01:37:10,820
So basically, you want to, like what [name] said about the table reservation, you want

749
01:37:10,820 --> 01:37:16,940
to, well, okay, you basically order like takeout.

750
01:37:16,940 --> 01:37:24,540
Like you order that the meal be prepared and once it's prepared, let me know so that I

751
01:37:24,540 --> 01:37:28,420
can fetch it and just like eat the result.

752
01:37:28,420 --> 01:37:33,220
So it's prepared for you on the background, so you don't have to like worry about, you

753
01:37:33,220 --> 01:37:35,220
don't have to wait for it.

754
01:37:35,220 --> 01:37:35,720
Yeah.

755
01:37:39,720 --> 01:37:41,880
And we do this via the batch script.

756
01:37:41,880 --> 01:37:50,840
So can you go over what's the general idea here?

757
01:37:50,840 --> 01:37:53,640
So we tell the cluster what we want.

758
01:37:53,640 --> 01:37:58,200
And we do that by, I guess, this batch script

759
01:37:58,200 --> 01:38:00,360
that we're showing here.

760
01:38:00,360 --> 01:38:03,640
So can you go over what these lines mean?

761
01:38:03,640 --> 01:38:10,520
Yeah, so in the batch script, like we have an example batch script over here that you can look

762
01:38:10,520 --> 01:38:18,200
at and over there we have various strange looking lines but these lines basically tell the queue

763
01:38:18,200 --> 01:38:29,800
manager, the slurm, what it should do for you on the background. So the first line over here,

764
01:38:29,800 --> 01:38:43,400
this line is this so-called shebang line which tells which interpreter, which tool we should

765
01:38:43,400 --> 01:38:49,720
use to interpret the script or which program we should use to run the script. Usually,

766
01:38:49,720 --> 01:38:56,680
commonly it's the shell, so the bash shell or some other terminal so that it would be basically

767
01:38:56,680 --> 01:39:08,280
like, okay, execute these commands. Previously, when we just ran the Python 3, for example,

768
01:39:09,400 --> 01:39:17,880
and then we ran the PI example, then we just called commands from the command line.

769
01:39:18,600 --> 01:39:23,160
So, basically, this would mean that, okay, just use the command line to run these commands.

770
01:39:23,160 --> 01:39:34,120
The next two lines are directives to the queue system.

771
01:39:34,120 --> 01:39:41,160
So when we want the queue to manage this script, we want it to get us the resources what we

772
01:39:41,160 --> 01:39:42,160
want.

773
01:39:42,160 --> 01:39:43,500
And how do we tell it?

774
01:39:43,500 --> 01:39:48,600
We usually give these comments in the script, these Sbatch directives.

775
01:39:48,600 --> 01:39:55,880
And this is like a format that is very like, you need to write it in this format.

776
01:39:55,880 --> 01:40:00,520
So it's not S bash or S batch with a space.

777
01:40:00,520 --> 01:40:02,600
So it's written like this.

778
01:40:02,600 --> 01:40:03,600
Exactly like that.

779
01:40:03,600 --> 01:40:04,600
Yeah.

780
01:40:04,600 --> 01:40:09,600
Because like the Slurm, when it takes this script, it will look for these comments and

781
01:40:09,600 --> 01:40:16,200
if it sees these comments, then it will interpret what comes after the comment as an argument

782
01:40:16,200 --> 01:40:23,080
for the queue manager, basically. Like, okay, I want this time, I want this memory for this job.

783
01:40:24,520 --> 01:40:31,320
And afterwards, you can have whatever your code is after that. Like, whatever commands you want

784
01:40:31,320 --> 01:40:39,800
the code to run, like the queue manager to run. And what happens is that when we call this 

785
01:40:39,800 --> 01:40:48,600
SBATCH and then the script that we have written, we call it, we basically say we are in the login

786
01:40:48,600 --> 01:40:55,560
node, we have our terminal or whatever, we have it on the login node. And when we call that command,

787
01:40:55,560 --> 01:41:02,200
the queue manager takes that file and then it will like read the comments that, okay, I will,

788
01:41:02,200 --> 01:41:12,380
I know that this script needs these resources, and it will find you the correct place on

789
01:41:12,380 --> 01:41:19,580
the compute node, in the CPU node, where it can execute that, that has those resources,

790
01:41:19,580 --> 01:41:22,020
and then it will just plow through it.

791
01:41:22,020 --> 01:41:26,340
It will just run the commands.

792
01:41:26,340 --> 01:41:29,300
And it will, like, done it non-interactively.

793
01:41:29,300 --> 01:41:35,460
So once you give the queue manager the script, you don't have to, you can just go to something

794
01:41:35,460 --> 01:41:41,380
else and the queue manager will run it for you somewhere in the background.

795
01:41:41,380 --> 01:41:46,540
There was a good comment in one of the previous notes questions.

796
01:41:46,540 --> 01:41:48,980
If you log out, is all your stuff saved?

797
01:41:48,980 --> 01:41:55,540
So I guess the synchronization here is everything starts as a file and everything comes out

798
01:41:55,540 --> 01:41:57,180
as a file.

799
01:41:57,180 --> 01:42:01,740
So your program, if it writes something,

800
01:42:01,740 --> 01:42:05,980
if it prints something to the screen, where does that go?

801
01:42:05,980 --> 01:42:10,900
Yeah, so if you would run in an interactive session,

802
01:42:10,900 --> 01:42:13,620
for example, the Python code that we previously run,

803
01:42:13,620 --> 01:42:15,260
it just printed it out there.

804
01:42:15,260 --> 01:42:17,180
So it's basically ephemeral.

805
01:42:17,180 --> 01:42:19,540
So it just disappears once you close the terminal,

806
01:42:19,540 --> 01:42:21,340
because it's just output.

807
01:42:21,340 --> 01:42:25,380
But if we run it non-interactively,

808
01:42:25,380 --> 01:42:31,700
then Slurm will gather whatever output your code will write, like whatever text output it will

809
01:42:31,700 --> 01:42:37,940
print, and it will collect that into a file. Of course, in many cases, you would want your code to

810
01:42:39,460 --> 01:42:43,700
let's say read input files in the code and then write maybe some output file.

811
01:42:44,340 --> 01:42:51,060
So basically, what happened during the computation is stored in those files.

812
01:42:51,060 --> 01:42:56,260
But if you want to record the printed output of your code,

813
01:42:56,260 --> 01:42:59,900
it will be recorded by Slurm.

814
01:42:59,900 --> 01:43:02,580
Should we run a simple example on this?

815
01:43:02,580 --> 01:43:03,260
Yeah, sure.

816
01:43:03,260 --> 01:43:03,860
Let's go.

817
01:43:03,860 --> 01:43:08,140
So if we scroll down a bit under your first jobscript,

818
01:43:08,140 --> 01:43:12,060
I guess we can do the full demo.

819
01:43:12,060 --> 01:43:17,260
So the starting point is at the shell, like we've had before.

820
01:43:17,260 --> 01:43:19,220
And we need to make a new file.

821
01:43:19,220 --> 01:43:26,180
So I guess [name] will use the nano editor to open a file and make it, but you can use any editor

822
01:43:26,180 --> 01:43:33,540
you're comfortable with, whether it's VS Code with the remote SSH or through Jupyter or some other

823
01:43:33,540 --> 01:43:40,580
command line thing. So [name]'s opened the file and will paste all the contents in there.

824
01:43:41,460 --> 01:43:44,420
I'll make it a bit bigger so that it doesn't look so...

825
01:43:44,420 --> 01:43:53,740
Okay, so we paste it here and I guess we know what these things mean, time, memory, output

826
01:43:53,740 --> 01:43:57,140
is where it writes the output.

827
01:43:57,140 --> 01:44:10,340
Yeah, and control X to save and yes to save it into a file name if you are using nano.

828
01:44:10,340 --> 01:44:18,660
And then we do sbatch.

829
01:44:18,660 --> 01:44:21,900
So sbatch and run-pi.

830
01:44:21,900 --> 01:44:29,380
And if we push enter, so we see job submit automatically setting partitions, submitted

831
01:44:29,380 --> 01:44:30,380
sbatch job.

832
01:44:30,380 --> 01:44:32,420
So we have a job ID.

833
01:44:32,420 --> 01:44:34,340
If we do slurm history, what do we see?

834
01:44:34,340 --> 01:44:37,220
Or slurm queue, I guess.

835
01:44:37,220 --> 01:44:39,220
Well, it already ran.

836
01:44:39,220 --> 01:44:40,220
Yeah.

837
01:44:40,220 --> 01:44:43,220
We should add some sleep there or something.

838
01:44:43,220 --> 01:44:45,220
Let's do that, actually.

839
01:44:45,220 --> 01:44:50,220
Just for the demo, let's add a bit of a sleep here.

840
01:44:50,220 --> 01:44:57,220
So you can use this command sleep to add, let's say, 10 seconds so that we can capture the output.

841
01:44:57,220 --> 01:45:02,220
So I will submit it again.

842
01:45:02,220 --> 01:45:05,900
but this time I will run slurm q.

843
01:45:10,300 --> 01:45:18,780
You can see it's now running there. Make it a bit smaller so the whole output fits.

844
01:45:18,780 --> 01:45:28,460
Yeah.

845
01:45:28,460 --> 01:45:37,740
And now in the script itself, if we look at the script again over here, we have this sbatch

846
01:45:37,740 --> 01:45:38,740
output.

847
01:45:38,740 --> 01:45:39,740
Right.

848
01:45:39,740 --> 01:45:40,740
Yeah.

849
01:45:40,740 --> 01:45:42,100
Like Slurm has various flags.

850
01:45:42,100 --> 01:45:43,780
There's like a huge reference.

851
01:45:43,780 --> 01:45:47,460
There's one in our page, but there's also the Slurm's own reference.

852
01:45:47,460 --> 01:45:52,260
lots of different parameters you can give it. And this output is basically, if we want to

853
01:45:52,260 --> 01:45:56,100
name the output in a certain way, we can do that.

854
01:45:58,580 --> 01:46:03,540
Yeah, okay. And can we see the output? If we do ls, do we see things here?

855
01:46:04,420 --> 01:46:05,620
Yeah, let's do them.

856
01:46:05,620 --> 01:46:15,860
So we see day2.out, pi.out. Yes, so that's the example. And if we use...

857
01:46:15,860 --> 01:46:18,580
Do we do cat or less?

858
01:46:18,580 --> 01:46:20,300
I guess we can show cat first.

859
01:46:20,300 --> 01:46:20,780
Yeah.

860
01:46:20,780 --> 01:46:23,980
So cat is, first of, the thing that

861
01:46:23,980 --> 01:46:26,820
comes and visits me sometimes.

862
01:46:26,820 --> 01:46:30,220
But also, it's the Unix program that

863
01:46:30,220 --> 01:46:31,940
is short for concatenate.

864
01:46:31,940 --> 01:46:35,700
So it basically writes out what's in the file.

865
01:46:35,700 --> 01:46:37,580
And we see.

866
01:46:37,580 --> 01:46:38,900
There's an error.

867
01:46:38,900 --> 01:46:42,140
Oh, slurm.

868
01:46:42,140 --> 01:46:43,700
Yeah, I'm in the wrong folder.

869
01:46:43,700 --> 01:46:44,860
That's the reason.

870
01:46:44,860 --> 01:46:45,580
Yeah.

871
01:46:45,580 --> 01:46:52,500
So let's move the run-pi to HPC examples.

872
01:46:52,500 --> 01:46:54,100
Now let's try it again.

873
01:46:54,100 --> 01:46:55,940
OK.

874
01:46:55,940 --> 01:46:58,540
So I guess this is a common real life thing.

875
01:46:58,540 --> 01:47:01,420
You make a job, you submit it, and then you

876
01:47:01,420 --> 01:47:03,900
see, oh, there's something wrong.

877
01:47:03,900 --> 01:47:06,140
And you adjust it and submit again.

878
01:47:06,140 --> 01:47:06,940
It happens.

879
01:47:06,940 --> 01:47:08,900
I mean, it's solely iterative.

880
01:47:08,900 --> 01:47:11,940
This is often why we start with interactive jobs,

881
01:47:11,940 --> 01:47:15,140
just to see quickly, does it even run at all?

882
01:47:15,140 --> 01:47:17,500
and then write the commands in there.

883
01:47:17,500 --> 01:47:20,380
Slurm q is a shorthand for slurm queue,

884
01:47:20,380 --> 01:47:25,700
but you can use either one if you use the slurm command.

885
01:47:25,700 --> 01:47:29,980
OK, now we probably have the pi.out.

886
01:47:29,980 --> 01:47:31,180
Yeah, OK.

887
01:47:31,180 --> 01:47:33,580
So we have pi.out, and yeah.

888
01:47:33,580 --> 01:47:35,660
And if you look at the script, that's

889
01:47:35,660 --> 01:47:36,780
exactly what it should do.

890
01:47:36,780 --> 01:47:41,860
Echo hello user, hello [username], right there.

891
01:47:41,860 --> 01:47:50,260
So this line, which might look, if you are not familiar with bash shell scripting might look a

892
01:47:50,260 --> 01:47:57,540
bit complicated, but basically this, we often use this bash or this terminal languages because you

893
01:47:57,540 --> 01:48:03,060
can do a lot of like housekeeping work with the terminal. Like you can move folders around,

894
01:48:03,060 --> 01:48:09,700
you can rename files, you can do whatever stuff in the, like, and you can programmatically

895
01:48:09,700 --> 01:48:18,420
do those. Instead of drag and dropping files in your file browser, you can do it in a systematic,

896
01:48:18,420 --> 01:48:23,860
programmatic way. That's why we often use the terminal and why it's a powerful tool

897
01:48:24,500 --> 01:48:32,660
when you're writing these things. Over here, we always get these parameters called,

898
01:48:32,660 --> 01:48:36,900
or these variables called user and host name

899
01:48:36,900 --> 01:48:40,020
that tell what is our username

900
01:48:40,020 --> 01:48:44,100
and where are we executing this script.

901
01:48:44,100 --> 01:48:48,060
And then we here call a program date

902
01:48:48,060 --> 01:48:49,740
to get the current date.

903
01:48:49,740 --> 01:48:51,660
So that's the output over here.

904
01:48:51,660 --> 01:48:54,020
And you notice that it's not in the script,

905
01:48:54,020 --> 01:48:56,220
it's like these variables,

906
01:48:56,220 --> 01:48:58,700
but they are only filled when the script is run.

907
01:48:58,700 --> 01:49:01,540
So they are filled when we are running it

908
01:49:01,540 --> 01:49:03,460
in the compute node.

909
01:49:03,460 --> 01:49:08,900
So we actually did run it in the compute node.

910
01:49:08,900 --> 01:49:09,400
Yes.

911
01:49:12,500 --> 01:49:20,580
Should we go to , actually, we have a bit of time.

912
01:49:20,580 --> 01:49:24,140
There's a really good question in the notes.

913
01:49:24,140 --> 01:49:26,620
If you take the script and you submit it

914
01:49:26,620 --> 01:49:29,980
with bash the shell instead of sbatch,

915
01:49:29,980 --> 01:49:35,660
it will look like it runs, but it's not taking these resource requests and it's not running

916
01:49:35,660 --> 01:49:40,300
on the other thing. Yeah. We can demonstrate this. So, this is something you shouldn't do. Like,

917
01:49:40,300 --> 01:49:46,780
it's unfortunate that the sbatch and bash sound so similar. Like, it's an unfortunate thing.

918
01:49:46,780 --> 01:49:55,180
But if we, like, Lee, you remember I mentioned about how this is going to be filled when it's

919
01:49:55,180 --> 01:50:02,300
going to be running. Now, if we run it with bash, what we expect to happen, bash is the terminal

920
01:50:02,300 --> 01:50:09,100
or the terminal emulator or the interpreter for the code language that we have written here.

921
01:50:09,980 --> 01:50:14,060
We expect that it heals these according to where we are currently running.

922
01:50:15,020 --> 01:50:20,060
Because we are running it on the login node currently, our current host name

923
01:50:20,060 --> 01:50:44,220
So, if we now run it, you notice that we are on the login node and we have this strange

924
01:50:44,220 --> 01:50:50,860
thing happening where we have job queued and waiting for resources and then job has been

925
01:50:50,860 --> 01:50:57,260
allocated to cases. So what happened is that basically we wrote these commands out. So if

926
01:50:57,260 --> 01:51:04,380
we would have written these commands into the terminal itself, we would get the same output.

927
01:51:05,340 --> 01:51:10,220
So if we run it with bash. So don't run it with bash, that's a different thing.

928
01:51:10,220 --> 01:51:18,500
If we use it with sbatch, we give it to the Slurm manager that runs it only when there's

929
01:51:18,500 --> 01:51:25,500
the correct space and time to run it in the correct computer to run it.

930
01:51:25,500 --> 01:51:29,620
That way, we can make certain that it runs in the correct place.

931
01:51:29,620 --> 01:51:36,300
You might also be wondering, why do we have srun over here?

932
01:51:36,300 --> 01:51:45,100
do we have srun in the script? Why is it there? And the reason for that is that in some cases,

933
01:51:46,140 --> 01:51:55,100
especially if you're using these MPI jobs that are parallel jobs, you might want to call srun

934
01:51:55,740 --> 01:52:04,700
so that the Slurm manager can allocate these jobs correctly with the MPI jobs. But also,

935
01:52:04,700 --> 01:52:11,680
So if you are using this srun, you will get extra information to the history.

936
01:52:11,680 --> 01:52:19,680
So if I look at the Slurm history, when I...

937
01:52:19,680 --> 01:52:24,880
Let's first run it once more so that we can get like that.

938
01:52:24,880 --> 01:52:25,880
We can just...

939
01:52:25,880 --> 01:52:26,880
Yeah.

940
01:52:26,880 --> 01:52:33,320
We run it properly with the sbatch, and if we look at the Slurm history afterwards, let's

941
01:52:33,320 --> 01:52:36,120
Let's see if I did it already finish.

942
01:52:36,120 --> 01:52:36,620
Yes.

943
01:52:41,360 --> 01:52:44,760
We can notice here that the, I'll

944
01:52:44,760 --> 01:52:47,880
have to make it a bit smaller, I guess.

945
01:52:47,880 --> 01:52:51,200
You can also have it run off the edge of your screen.

946
01:52:51,200 --> 01:52:51,700
Yeah.

947
01:52:51,700 --> 01:52:52,520
Yeah, there.

948
01:52:52,520 --> 01:52:53,240
OK, yeah.

949
01:52:53,240 --> 01:52:58,960
We notice here that the last job that we run,

950
01:52:58,960 --> 01:53:04,000
we see these batch, extern, and zero.

951
01:53:04,000 --> 01:53:07,880
So what this batch means is that all the commands that

952
01:53:07,880 --> 01:53:11,760
didn't have srun on top of them, what did they run?

953
01:53:11,760 --> 01:53:16,760
So basically, all of this stuff, how much resources it used,

954
01:53:16,760 --> 01:53:21,360
and then how much resources did the srun call do?

955
01:53:21,360 --> 01:53:27,760
We can get more up-to-date resource users information

956
01:53:27,760 --> 01:53:30,560
for each individual part of our code.

957
01:53:30,560 --> 01:53:34,400
You can do also kinds of fancy stuff for that.

958
01:53:34,400 --> 01:53:37,600
But the srun is optional in the sbatch script.

959
01:53:37,600 --> 01:53:40,560
But if you want to get more like this kind of

960
01:53:40,560 --> 01:53:45,800
gradual resource information, you can use that.

961
01:53:45,800 --> 01:53:48,240
So if you have a script and you're running,

962
01:53:48,240 --> 01:53:49,960
say, three different steps with

963
01:53:49,960 --> 01:53:52,300
different memory and CPU requirements,

964
01:53:52,300 --> 01:53:55,400
you can understand them separately.

965
01:53:55,400 --> 01:54:02,840
And we'll learn more about this in the next lesson about monitoring jobs.

966
01:54:02,840 --> 01:54:10,680
But I think, yeah, what we probably want to do is do more exercises so you can learn how

967
01:54:10,680 --> 01:54:12,480
to write these scripts yourself.

968
01:54:12,480 --> 01:54:18,880
Because this is like the meat and potatoes of the whole thing.

969
01:54:18,880 --> 01:54:24,360
When we go into Parallel Jobs and everything, the power of the cluster comes from the ability

970
01:54:24,360 --> 01:54:31,480
of it doing work for you while you're just doing something else. And for that, you need

971
01:54:31,480 --> 01:54:39,720
to be able to tell it that they are like, do this for me. And how do you do it? You

972
01:54:39,720 --> 01:54:47,040
write these scripts that you execute so that you don't have to like watch what's happening

973
01:54:47,040 --> 01:54:52,760
there. So learning this is a very important skill and very useful. So I highly recommend

974
01:54:52,760 --> 01:54:57,080
and find the exercises.

975
01:54:57,080 --> 01:54:57,580
Yeah.

976
01:55:00,920 --> 01:55:07,400
OK, so should I propose we give a nice long time?

977
01:55:07,400 --> 01:55:11,800
Should we let it go on until after the break

978
01:55:11,800 --> 01:55:16,200
and return at, say, 10 minutes after the hour?

979
01:55:19,200 --> 01:55:20,000
Yeah.

980
01:55:20,000 --> 01:55:25,680
I will also like one thing we forgot to mention actually is that how do you cancel these jobs?

981
01:55:25,680 --> 01:55:34,080
Like once you have submitted a job you can also cancel them. So let's say that I open the pi

982
01:55:38,080 --> 01:55:41,360
the run pi script and I put here sleep

983
01:55:41,360 --> 01:55:48,200
a long time, and it's not going to finish.

984
01:55:48,200 --> 01:55:56,560
And I submit this script here.

985
01:55:56,560 --> 01:56:05,240
I can check the queue, and you notice this job, each job gets its own job ID, so that

986
01:56:05,240 --> 01:56:07,080
the Slurm can manage them.

987
01:56:07,080 --> 01:56:09,440
And once this is running, you can always cancel.

988
01:56:09,440 --> 01:56:14,120
If you notice that the job is not going to finish correctly, or you made a mistake or

989
01:56:14,120 --> 01:56:22,640
something, you can always use scancel and the job ID to cancel the job.

990
01:56:22,640 --> 01:56:28,680
So that way, when you run the scancel, the job will be gone.

991
01:56:28,680 --> 01:56:33,880
It will just kill the job.

992
01:56:33,880 --> 01:56:40,560
So basically, if you look at the quick reference, you can find all the common control and monitoring

993
01:56:40,560 --> 01:56:41,560
things you need.

994
01:56:41,560 --> 01:56:43,840
But yeah, read the page.

995
01:56:43,840 --> 01:56:46,600
There's a little bit more in there.

996
01:56:46,600 --> 01:56:47,600
Yeah.

997
01:56:47,600 --> 01:56:48,600
Okay.

998
01:56:48,600 --> 01:56:56,600
So, yeah, I'd propose exercises until the hour and then break until 10 minutes past

999
01:56:56,600 --> 01:57:00,440
the hour all combined.

1000
01:57:00,440 --> 01:57:07,720
what we're doing right now is sort of the most important lesson, I'd say. It combines the shell,

1001
01:57:07,720 --> 01:57:13,960
the batch job, the resource requirements. And from here, it should get much smoother.

1002
01:57:14,920 --> 01:57:23,240
Yeah. Basically, like I said, what we want to now learn is how can we utilize the resources in the

1003
01:57:23,240 --> 01:57:29,240
computing cluster. Like there are lots of resources there and this is the way, like these are the,

1004
01:57:29,240 --> 01:57:33,560
this is the language that the queue manager understands. So we want to learn that language

1005
01:57:33,560 --> 01:57:39,960
so that we can translate our, whatever we want to run to a language that the queue manager

1006
01:57:39,960 --> 01:57:49,480
understands. So that the queue manager can do it for us. Yeah. Okay, great. So see you in

1007
01:57:49,480 --> 01:58:00,640
what, like 30 minutes? Okay, I guess that's all. Keep asking the questions and we'll

1008
01:58:00,640 --> 01:58:08,440
keep reading and answering. Okay, bye.

1009
01:58:19,480 --> 01:58:21,540
you

1010
01:58:49,480 --> 01:58:51,540
you

1011
01:59:19,480 --> 01:59:21,540
you

1012
01:59:49,480 --> 01:59:51,540
you

1013
02:00:19,480 --> 02:00:21,540
you

1014
02:00:49,480 --> 02:00:51,540
you

1015
02:01:19,480 --> 02:01:21,540
you

1016
02:01:49,480 --> 02:01:51,540
you

1017
02:02:19,480 --> 02:02:21,540
you

1018
02:02:49,480 --> 02:02:51,540
you

1019
02:03:19,480 --> 02:03:21,540
you

1020
02:03:49,480 --> 02:03:51,540
you

1021
02:04:19,480 --> 02:04:21,540
you

1022
02:04:49,480 --> 02:04:51,540
you

1023
02:05:19,480 --> 02:05:21,540
you

1024
02:05:49,480 --> 02:05:51,540
you

1025
02:06:19,480 --> 02:06:21,540
you

1026
02:06:49,480 --> 02:06:51,540
you

1027
02:07:19,480 --> 02:07:21,540
you

1028
02:07:49,480 --> 02:07:51,540
you

1029
02:08:19,480 --> 02:08:21,540
you

1030
02:08:49,480 --> 02:08:51,540
you

1031
02:09:19,480 --> 02:09:21,540
you

1032
02:09:49,480 --> 02:09:51,540
you

1033
02:10:19,480 --> 02:10:21,540
you

1034
02:10:49,480 --> 02:10:51,540
you

1035
02:11:19,480 --> 02:11:21,540
you

1036
02:11:49,480 --> 02:11:51,540
you

1037
02:12:19,480 --> 02:12:21,540
you

1038
02:12:49,480 --> 02:12:51,540
you

1039
02:13:19,480 --> 02:13:21,540
you

1040
02:13:49,480 --> 02:13:51,540
you

1041
02:14:19,480 --> 02:14:21,540
you

1042
02:14:49,480 --> 02:14:51,540
you

1043
02:15:19,480 --> 02:15:21,540
you

1044
02:15:49,480 --> 02:15:51,540
you

1045
02:16:19,480 --> 02:16:21,540
you

1046
02:16:49,480 --> 02:16:51,540
you

1047
02:17:19,480 --> 02:17:21,540
you

1048
02:17:49,480 --> 02:17:51,540
you

1049
02:18:19,480 --> 02:18:21,540
you

1050
02:18:49,480 --> 02:18:51,540
you

1051
02:19:19,480 --> 02:19:21,540
you

1052
02:19:49,480 --> 02:19:51,540
you

1053
02:20:19,480 --> 02:20:21,540
you

1054
02:20:49,480 --> 02:20:51,540
you

1055
02:21:19,480 --> 02:21:21,540
you

1056
02:21:49,480 --> 02:21:51,540
you

1057
02:22:19,480 --> 02:22:21,540
you

1058
02:22:49,480 --> 02:22:51,540
you

1059
02:23:19,480 --> 02:23:21,540
you

1060
02:23:49,480 --> 02:23:51,540
you

1061
02:24:19,480 --> 02:24:21,540
you

1062
02:24:49,480 --> 02:24:51,540
you

1063
02:25:19,480 --> 02:25:21,540
you

1064
02:25:49,480 --> 02:25:51,540
you

1065
02:26:19,480 --> 02:26:21,540
you

1066
02:26:49,480 --> 02:26:51,540
you

1067
02:27:19,480 --> 02:27:21,540
you

1068
02:27:49,480 --> 02:27:51,540
you

1069
02:28:19,480 --> 02:28:21,540
you

1070
02:28:49,480 --> 02:28:51,540
you

1071
02:29:19,480 --> 02:29:21,540
you

1072
02:29:49,480 --> 02:29:51,540
you

1073
02:30:19,480 --> 02:30:21,540
you

1074
02:30:49,480 --> 02:31:09,720
Hello.

1075
02:31:09,720 --> 02:31:13,240
We are back.

1076
02:31:13,240 --> 02:31:17,160
So yeah, how was the exercise?

1077
02:31:17,160 --> 02:31:21,000
I forgot to add the poll asking how it went.

1078
02:31:24,120 --> 02:31:26,280
There are some good questions here,

1079
02:31:26,280 --> 02:31:29,040
including a lot which we're asking

1080
02:31:29,040 --> 02:31:32,320
about using more resources.

1081
02:31:32,320 --> 02:31:36,520
For example, more processors at the same time

1082
02:31:36,520 --> 02:31:38,720
or running several things at once.

1083
02:31:38,720 --> 02:31:49,360
Yeah, we'll talk about parallel processing tomorrow, so different methods of parallel

1084
02:31:49,360 --> 02:31:50,360
processing.

1085
02:31:50,360 --> 02:32:02,440
But for now, the focus is on making certain that your workflow is in a way that you can

1086
02:32:02,440 --> 02:32:08,080
easily then leave something for the queue system to manage.

1087
02:32:08,080 --> 02:32:13,080
Like basically, you can write this kind of stuff

1088
02:32:13,080 --> 02:32:15,680
that the queue system does non-interactively,

1089
02:32:15,680 --> 02:32:19,400
so you don't have to worry about it.

1090
02:32:19,400 --> 02:32:27,040
But we're going to do some demos of Serial 3 and 5.

1091
02:32:27,040 --> 02:32:29,800
I'll switch to [name]'s screen here.

1092
02:32:29,800 --> 02:32:39,720
Yeah. So, these are pretty helpful examples of showing a couple of interesting...

1093
02:32:41,240 --> 02:32:49,720
Like this kind of Gedanken experiment, as Einstein would put it. Thinking experiments would make you

1094
02:32:49,720 --> 02:32:54,360
think about, okay, what's really happening in the background? So, in this example,

1095
02:32:54,360 --> 02:33:02,480
example, we try to demonstrate basically what happens if you start modifying something that

1096
02:33:02,480 --> 02:33:06,120
is already submitted.

1097
02:33:06,120 --> 02:33:17,760
Let's look at the run-pi that we have over here.

1098
02:33:17,760 --> 02:33:29,200
As per the exercise, let's add sleep 120 there, but I removed this older one at the end, and

1099
02:33:29,200 --> 02:33:34,400
we put sleep 120 here, so it will sleep for two minutes.

1100
02:33:34,400 --> 02:33:41,160
Maybe we can put it into one minute so that we don't have to wait that long.

1101
02:33:41,160 --> 02:33:48,320
And then, after we have submitted it, let's open the script and let's add something to

1102
02:33:48,320 --> 02:33:53,280
the Slurm script, so to this run-pi script.

1103
02:33:53,280 --> 02:33:58,720
So I'll prepare myself and I will take this into clipboard already.

1104
02:33:58,720 --> 02:34:04,880
I'll save the script and I'll submit it.

1105
02:34:04,880 --> 02:34:05,880
So let's see.

1106
02:34:05,880 --> 02:34:19,160
it and I'll edit it and I'll add here the line modified and I'll save this okay and now we can

1107
02:34:19,160 --> 02:34:23,720
use the Slurm queue to check what's happening it's it's now running in the queue so now it's

1108
02:34:23,720 --> 02:34:30,120
sleeping for a bit okay so what do we expect to happen [name]? So I guess it depends on if

1109
02:34:30,120 --> 02:34:39,520
if Slurm is remembering, if Slurm already read the file and then runs it, or if it just

1110
02:34:39,520 --> 02:34:46,320
remembers where the file is. No, actually, no, it's not queuing, it's running. I mean,

1111
02:34:46,320 --> 02:34:50,920
I guess if it's running, there's no way our modifications could have any effect because

1112
02:34:50,920 --> 02:34:54,080
Python has already opened it.

1113
02:34:54,080 --> 02:34:59,160
But also, even if it wouldn't be running, it wouldn't have an effect.

1114
02:34:59,160 --> 02:35:05,260
Because like Slurm, when you give it the script, what the Slurm sees is that it sees the script,

1115
02:35:05,260 --> 02:35:08,880
it will copy that script into its memory.

1116
02:35:08,880 --> 02:35:18,600
You can even later on, if you want, you can view the script for what it keeps in memory.

1117
02:35:18,600 --> 02:35:25,040
So basically, once you press Sbatch and the script, Slurm will remember the script and

1118
02:35:25,040 --> 02:35:29,200
after that, you can no longer modify that.

1119
02:35:29,200 --> 02:35:30,200
You have fired it away.

1120
02:35:30,200 --> 02:35:35,880
You have written the letter and you have sent it to the post and it's basically, it's there

1121
02:35:35,880 --> 02:35:37,080
going already.

1122
02:35:37,080 --> 02:35:39,000
You cannot modify it anymore.

1123
02:35:39,000 --> 02:35:47,200
So when we look at the output, the pi.out, we cut and edit, we see that there's no co-modified

1124
02:35:47,200 --> 02:35:48,200
line there.

1125
02:35:48,200 --> 02:35:53,320
because Slurm already took the script. But if we, yeah, go right ahead.

1126
02:35:53,320 --> 02:35:56,600
What would happen if instead of modifying the script itself,

1127
02:35:56,600 --> 02:36:01,720
we modified some of the other libraries or files it imported or ran?

1128
02:36:02,360 --> 02:36:06,840
Yes, let's do that exactly. So I'll quickly...

1129
02:36:12,360 --> 02:36:15,640
So I'll remove this modified line over here.

1130
02:36:15,640 --> 02:36:28,480
here. Save the file. Now, let's submit the run.py. Now, it's basically the exercise four.

1131
02:36:28,480 --> 02:36:39,480
Let's modify the actual Python script. Let's do that. I'll take this already into the clipboard.

1132
02:36:39,480 --> 02:36:50,760
I'll sbatch the run-pi, and now I will quickly edit the slurm/pi.py, and I'll add this over

1133
02:36:50,760 --> 02:36:51,760
here.

1134
02:36:51,760 --> 02:36:52,760
Okay.

1135
02:36:52,760 --> 02:36:53,760
Yeah.

1136
02:36:53,760 --> 02:37:04,160
And we can notice that it's now doing the sleep thing over there.

1137
02:37:04,160 --> 02:37:07,200
So what do we expect over here now?

1138
02:37:07,200 --> 02:37:09,920
Like the Slurm is running.

1139
02:37:09,920 --> 02:37:16,720
It has taken the sh script that we have given it, but it will run through it line by line.

1140
02:37:16,720 --> 02:37:22,440
And because it's now stuck in the sleep line, it hasn't yet reached the Python line.

1141
02:37:22,440 --> 02:37:26,320
But we have now modified the Python line, but the Python isn't something that we gave

1142
02:37:26,320 --> 02:37:27,840
to Slurm.

1143
02:37:27,840 --> 02:37:33,920
It's something that Slurm will, when it executes the commands, it will find from the disk.

1144
02:37:33,920 --> 02:37:37,720
So it will find the file that we have modified.

1145
02:37:37,720 --> 02:37:44,360
So usually it's not recommended to modify either the Slurm script or the script that

1146
02:37:44,360 --> 02:37:51,120
you are submitting, because you're now changing the state of the system.

1147
02:37:51,120 --> 02:38:01,180
You're changing either the script or the code, and now it will give a different error.

1148
02:38:01,180 --> 02:38:07,420
So you can see that if I now print it out, it gives me an exception.

1149
02:38:07,420 --> 02:38:08,420
Yeah.

1150
02:38:08,420 --> 02:38:09,420
Okay.

1151
02:38:09,420 --> 02:38:11,620
Not what we expected because of something else, but still.

1152
02:38:11,620 --> 02:38:12,620
Yeah.

1153
02:38:12,620 --> 02:38:13,620
Yeah.

1154
02:38:13,620 --> 02:38:14,620
Yeah.

1155
02:38:14,620 --> 02:38:15,620
Okay.

1156
02:38:15,620 --> 02:38:21,180
So I guess the point of these exercises is basically, once you submit a job, it's been

1157
02:38:21,180 --> 02:38:26,860
recorded and what you do may or may not have an effect on it, but it's better to leave

1158
02:38:26,860 --> 02:38:27,860
it alone.

1159
02:38:27,860 --> 02:38:28,860
Not modify them at all.

1160
02:38:28,860 --> 02:38:33,980
You have to be very careful to understand what you submitted and what you're modifying and how

1161
02:38:33,980 --> 02:38:39,660
it will affect things. So, basically, what usually is recommended that you would have,

1162
02:38:39,660 --> 02:38:45,580
like, let's say for your experiment, you would have an Sbatch script. And for the corresponding

1163
02:38:45,580 --> 02:38:49,820
to the Sbatch script, you would have your code or your parameters or something. We'll talk about

1164
02:38:49,820 --> 02:38:54,700
Array jobs tomorrow, if you have a lot of parameters, you can use these fancy things to

1165
02:38:57,340 --> 02:39:04,300
do lots of code calls at one time. But yeah, that is usually...

1166
02:39:07,740 --> 02:39:14,540
You want to have a script that is... Basically, it shows how you can replicate the results of your

1167
02:39:14,540 --> 02:39:23,500
or code. If you want to do a simulation or a run, some compilation or some code run,

1168
02:39:23,500 --> 02:39:29,340
you can replicate it by using the Sbatch script and you don't want to mess them up while they're

1169
02:39:29,340 --> 02:39:30,340
running.

1170
02:39:30,340 --> 02:39:34,540
Okay. So, yeah.

1171
02:39:34,540 --> 02:39:35,540
Number five.

1172
02:39:35,540 --> 02:39:44,460
Yeah. So, let's look at the third example. So, let's create a Slurm script that runs

1173
02:39:44,460 --> 02:39:52,300
this following program that produces some output. So, this ties up neatly to the next section that

1174
02:39:52,300 --> 02:40:03,340
we have. So, let's call it monitor_output.sh, and I will quickly write the usual lines.

1175
02:40:03,340 --> 02:40:06,540
Yeah. The usual magic words, I guess.

1176
02:40:06,540 --> 02:40:20,060
Yeah, once you have written enough of these, these are pretty self. You become familiar with those.

1177
02:40:28,060 --> 02:40:34,060
Yes, so what we do here is that every 30 seconds we print date and then we,

1178
02:40:34,060 --> 02:40:41,180
sorry for 30 times we print date and then we sleep for 10 seconds. Okay so

1179
02:40:41,180 --> 02:40:45,900
this is basically pretending that you're running something and it's periodically

1180
02:40:45,900 --> 02:40:55,700
outputting the status. Yes. Okay. So let's submit it and now let's it's probably

1181
02:40:55,700 --> 02:41:08,500
morning. Someone warns that you set the sh files to output file. Oh, did I? That's a good catch.

1182
02:41:08,500 --> 02:41:13,700
Yeah, that's a good catch. Okay, well then, I'm in trouble. Okay. I'm in danger,

1183
02:41:14,420 --> 02:41:22,340
like as Aral would say. So, let's cancel this one and let's do another recap.

1184
02:41:22,340 --> 02:41:26,060
So these can happen, this can happen.

1185
02:41:26,060 --> 02:41:30,420
Like I said, once you're familiar with these,

1186
02:41:30,420 --> 02:41:34,700
you can write them really fast, but you can also

1187
02:41:34,700 --> 02:41:38,060
write problems really fast.

1188
02:41:38,060 --> 02:41:39,260
Yeah.

1189
02:41:39,260 --> 02:41:40,340
OK.

1190
02:41:40,340 --> 02:41:41,340
OK, let's try it again.

1191
02:41:43,860 --> 02:41:47,700
The repetition makes everything better.

1192
02:41:47,700 --> 02:41:48,300
Yeah.

1193
02:41:48,300 --> 02:41:53,100
So now monitor_output.out

1194
02:41:53,100 --> 02:41:53,600
OK.

1195
02:41:53,600 --> 02:41:54,100
Yes.

1196
02:41:54,100 --> 02:41:57,940
And then let's go here.

1197
02:41:57,940 --> 02:41:59,860
Yes.

1198
02:41:59,860 --> 02:42:01,580
And let's try it again.

1199
02:42:04,580 --> 02:42:05,340
Yeah.

1200
02:42:05,340 --> 02:42:06,340
Here.

1201
02:42:06,340 --> 02:42:06,940
OK.

1202
02:42:06,940 --> 02:42:08,620
And it's going.

1203
02:42:08,620 --> 02:42:09,340
Yeah.

1204
02:42:09,340 --> 02:42:09,840
And let's.

1205
02:42:09,840 --> 02:42:11,900
So now, yeah.

1206
02:42:11,900 --> 02:42:14,020
Now we can catenate the output.

1207
02:42:14,020 --> 02:42:17,100
So monitor output, cut out.

1208
02:42:17,100 --> 02:42:19,060
Not the SH.

1209
02:42:19,060 --> 02:42:19,900
OK.

1210
02:42:19,900 --> 02:42:21,740
Ah, so there's some stuff running.

1211
02:42:21,740 --> 02:42:22,700
Yeah.

1212
02:42:22,700 --> 02:42:25,420
And yeah, so it's appearing.

1213
02:42:25,420 --> 02:42:28,700
Yeah, so this is typical when you're running something.

1214
02:42:28,700 --> 02:42:31,580
What we talked earlier, interactivity

1215
02:42:31,580 --> 02:42:33,100
and non-interactivity.

1216
02:42:33,100 --> 02:42:35,100
In many cases, there's a situation

1217
02:42:35,100 --> 02:42:39,620
where do you really need to get the output constantly?

1218
02:42:39,620 --> 02:42:42,060
Do you really need to watch it?

1219
02:42:42,060 --> 02:42:46,180
Do I really need to watch this every second

1220
02:42:46,180 --> 02:42:54,740
of the output. Most likely not. I'm just interested that it runs, it produces reasonable results and

1221
02:42:54,740 --> 02:42:59,380
then I can leave it running. If I have a longer simulation or something, I can just leave it

1222
02:42:59,380 --> 02:43:05,860
running and I don't have to look at it constantly. But of course, you want to view the output.

1223
02:43:05,860 --> 02:43:14,020
So you can either do here, catenate the output. One other option is to use this tail -f and there's

1224
02:43:14,020 --> 02:43:21,460
other tools as well, but this tail is like follow the end of the file basically, it says here,

1225
02:43:21,460 --> 02:43:28,020
and it keeps it open. So every time a new line appears it automatically. Okay, yeah.

1226
02:43:28,740 --> 02:43:35,860
Okay, so if someone submits like a long training job or something, they can check the status this

1227
02:43:35,860 --> 02:43:42,420
way. Yeah. I will also mention that for some cases, for example with Python, like in many

1228
02:43:42,420 --> 02:43:50,500
cases, the output is buffered. Once you read a certain amount of output, it will flush the buffer

1229
02:43:51,140 --> 02:43:58,820
into the file. If your code produces very small amounts of output at the start of the run,

1230
02:43:59,540 --> 02:44:04,420
it might seem that nothing is happening because it hasn't yet filled the buffer.

1231
02:44:06,340 --> 02:44:12,180
There are various things that you can say to make certain that the buffers are flushed every

1232
02:44:12,180 --> 02:44:16,660
now and then, but like there are these certain situations where the output doesn't appear

1233
02:44:16,660 --> 02:44:23,060
necessarily immediately. Yeah, I mean I'm actually kind of surprised it does appear so quickly here

1234
02:44:23,700 --> 02:44:30,580
and doesn't get buffered. But anyway, should we go on to the next one?

1235
02:44:31,940 --> 02:44:35,380
And this is about monitoring, like what we already started to do.

1236
02:44:42,180 --> 02:45:01,140
Oh, sorry. I'm just adding the link to the notes. There's a good question here. It's

1237
02:45:01,140 --> 02:45:07,980
still about the... Remember there's a warning on some cluster, never use tail-f or something

1238
02:45:07,980 --> 02:45:08,980
like that.

1239
02:45:08,980 --> 02:45:15,620
Yeah, it might differ on the cluster. It's about whether the file system is like how

1240
02:45:15,620 --> 02:45:21,740
it's syncing, like how the syncing is done, like if there is this kind of like a global

1241
02:45:21,740 --> 02:45:30,380
lock or not. And it might differ in some clusters. There are then other tools to view the output.

1242
02:45:30,380 --> 02:45:37,500
But if your cluster says that don't use those, don't use those, just because I said to use

1243
02:45:37,500 --> 02:45:42,580
because, like, buyer beware or something like that.

1244
02:45:42,580 --> 02:45:47,580
I mean, you should trust your local admin over me.

1245
02:45:47,580 --> 02:45:51,660
So at Aalto, we've invested significant resources

1246
02:45:51,660 --> 02:45:55,740
in having a strong and performant file system.

1247
02:45:55,740 --> 02:46:03,260
So whenever there is lots of stuff, like, yeah.

1248
02:46:03,260 --> 02:46:06,300
So basically, it can handle things like tail-f.

1249
02:46:06,300 --> 02:46:14,860
Yeah, but it's probably a technical reason that other sites wouldn't have the file system capable

1250
02:46:14,860 --> 02:46:18,860
of doing it. It's probably a technical system regarding the mount and whatever,

1251
02:46:18,860 --> 02:46:26,380
but let's not go that far. Yeah. Okay. So monitoring. Sorry for this short distraction.

1252
02:46:27,020 --> 02:46:31,260
So we've already did a little bit about monitoring, but what are the main

1253
02:46:31,260 --> 02:46:33,740
things we might want to watch and what does it mean?

1254
02:46:35,100 --> 02:46:41,020
Yeah, so for the monitoring, we already talked about how can you watch the queue,

1255
02:46:41,020 --> 02:46:48,220
how can you monitor, and that's like monitoring basically in a workflow type of monitoring.

1256
02:46:48,220 --> 02:46:55,100
You monitor that is your work running and that sort of stuff. You're monitoring your workflow

1257
02:46:55,100 --> 02:46:59,500
and is it going through correctly. And that's, of course, the important part that

1258
02:46:59,500 --> 02:47:05,700
But did you manage to get your code running and is it running on there?

1259
02:47:05,700 --> 02:47:10,380
But then there's the question of, okay, is it running like I expected?

1260
02:47:10,380 --> 02:47:14,740
And is it using the resources like I expected?

1261
02:47:14,740 --> 02:47:19,220
And for the first part, is it running as I expect it to run?

1262
02:47:19,220 --> 02:47:25,300
The best way of monitoring is in your code to have monitoring output.

1263
02:47:25,300 --> 02:47:32,580
Basically, in your code, when there is a specific step that it's doing, it's a good idea that

1264
02:47:32,580 --> 02:47:35,100
your code prints those outputs.

1265
02:47:35,100 --> 02:47:41,180
It's a good idea that your code tells that, hey, I'm doing this part.

1266
02:47:41,180 --> 02:47:47,860
Maybe some timing information as well, like, okay, I'm here, time is this, I'm running

1267
02:47:47,860 --> 02:47:48,860
this.

1268
02:47:48,860 --> 02:47:52,660
Maybe at the start of your code, you might want to have output that, okay, I'm running

1269
02:47:52,660 --> 02:48:02,020
at this machine, I'm running here, that the code itself will tell you what it thinks it's doing.

1270
02:48:02,740 --> 02:48:09,140
That way, it will make it a lot easier. If you run into a problem, your code crashes or it does

1271
02:48:09,140 --> 02:48:14,820
something that you don't expect it to do, it's much easier to pinpoint at what part of the code

1272
02:48:14,820 --> 02:48:19,780
the problem occurred, especially if you're running it non-interactively. If you're running it

1273
02:48:19,780 --> 02:48:25,460
interactively, and let's say in Jupyter, you're running it cell by cell, it's very easy to see,

1274
02:48:25,460 --> 02:48:31,860
okay, the cell crashed, like it didn't run, or it crashes when I try to run this cell

1275
02:48:31,860 --> 02:48:39,220
in the Jupyter. But if you're not running it interactively, you want more output.

1276
02:48:39,220 --> 02:48:45,620
And usually you want to have the program, got to use some debugging output for yourself.

1277
02:48:45,620 --> 02:48:53,700
And that is something that is left for basically, we cannot do much for it. It's up to the programmers

1278
02:48:53,700 --> 02:48:58,100
or the people who run the code to do that. So that's the first thing to remember. It's good

1279
02:48:58,100 --> 02:49:05,300
to add, especially at key points of your code, what is your code doing? And the second thing

1280
02:49:05,300 --> 02:49:09,060
about, okay, did it actually use the resources? That's a different question. And that

1281
02:49:09,060 --> 02:49:15,920
that the queue system can answer, like did it actually use what it was needed.

1282
02:49:15,920 --> 02:49:19,260
And there are a few tools that you can use.

1283
02:49:19,260 --> 02:49:25,080
So first one that we already have touched on is the slurm history.

1284
02:49:25,080 --> 02:49:33,340
So if I look at the slurm history command, I'll make this a bit bigger.

1285
02:49:33,340 --> 02:49:41,660
So the font will go smaller, and it will overwrite.

1286
02:49:41,660 --> 02:49:44,820
So Slurm history, or with s-act, you

1287
02:49:44,820 --> 02:49:47,340
can get the similar kind of information.

1288
02:49:47,340 --> 02:49:54,460
So from this output, we can also limit to, let's say, 15 min.

1289
02:49:54,460 --> 02:49:56,580
I think you can, yes.

1290
02:49:56,580 --> 02:50:07,140
Yeah, okay, so we can tell it for jobs in the last 15 minutes, this is what's run and

1291
02:50:07,140 --> 02:50:08,140
all the stuff.

1292
02:50:08,140 --> 02:50:10,740
Yeah, so this is pretty standard, I guess.

1293
02:50:10,740 --> 02:50:17,460
Yeah, so from this output you can see stuff like, okay, what was the starting time of

1294
02:50:17,460 --> 02:50:28,980
the job, how much memory you requested, what was the actual memory usage of the job, how

1295
02:50:28,980 --> 02:50:31,380
much CPU time it used.

1296
02:50:31,380 --> 02:50:40,500
So the CPU time is basically the time it took, like how much CPU calculation seconds it used

1297
02:50:40,500 --> 02:50:44,420
basically, like how much actual CPU calculation it used.

1298
02:50:44,420 --> 02:50:48,620
And the wall time is like the real clock time.

1299
02:50:48,620 --> 02:50:56,860
So the CPU time, like let's say you ask for four CPUs, you would expect the CPU time to

1300
02:50:56,860 --> 02:50:59,380
be four times the real time.

1301
02:50:59,380 --> 02:51:05,860
It might sound a bit confusing here, but basically because you're using four CPUs for the same

1302
02:51:05,860 --> 02:51:07,580
time you're using.

1303
02:51:07,580 --> 02:51:14,180
So you can think about it like man hours, like we sometimes calculate stuff in man hours.

1304
02:51:14,180 --> 02:51:20,180
So, how many man, like if you're working for, yeah, four hours.

1305
02:51:20,180 --> 02:51:21,180
Yeah.

1306
02:51:21,180 --> 02:51:22,180
Yeah.

1307
02:51:22,180 --> 02:51:28,460
So, if something takes 10 man hours, it takes one man 10 hours or two men, five hours.

1308
02:51:28,460 --> 02:51:29,460
Yeah.

1309
02:51:29,460 --> 02:51:36,820
Like, because it's like a, so the CPU time is basically how many like CPU hours you used.

1310
02:51:36,820 --> 02:51:40,560
And you can use this as the starting point.

1311
02:51:40,560 --> 02:51:49,840
tool provided by Slurm is this seff. I'll make this a bit bigger now. So, if you run seff and a comma,

1312
02:51:49,840 --> 02:52:02,240
like one of your job IDs, you can get this sort of an output, which tells, okay, how much CPU was

1313
02:52:02,240 --> 02:52:08,080
utilized and what was the efficiency. So, in the case of these example codes, it's pretty bad

1314
02:52:08,080 --> 02:52:12,560
because they don't basically do anything and the measurements might be incorrect because they're

1315
02:52:12,560 --> 02:52:19,360
short. But basically, it will tell how much CPU was used and the same with the memory. So,

1316
02:52:19,360 --> 02:52:27,520
what is the memory utilization? So, what we talked earlier about how to decide which resources to

1317
02:52:27,520 --> 02:52:33,760
use, well, a good starting point might be to request as much resource as your own computer has

1318
02:52:33,760 --> 02:52:42,320
and then after you have run it once, then check what was actually utilized and then lower the

1319
02:52:42,320 --> 02:52:47,920
resources. It's good to have a bit of overhead, especially in the memory department, but not too

1320
02:52:47,920 --> 02:52:55,840
much. So like maybe a few gigabytes overhead or something like that. There's a really good

1321
02:52:55,840 --> 02:53:01,120
question. How reliable is the seff in history utilized resource estimate?

1322
02:53:02,720 --> 02:53:08,800
That's a great question, because the memory utilization is only measured every...

1323
02:53:10,960 --> 02:53:12,640
It depends on the cluster.

1324
02:53:12,640 --> 02:53:22,080
Yeah, every 20 seconds or something. But also, it depends how the measurement is recorded. So,

1325
02:53:22,080 --> 02:53:27,720
So all measurement is recorded using these so-called control groups, which is a technical

1326
02:53:27,720 --> 02:53:33,880
thing, but basically it should record it quite accurately, at least the maximum number, but

1327
02:53:33,880 --> 02:53:34,880
the averages...

1328
02:53:34,880 --> 02:53:37,680
Did we switch to control groups now?

1329
02:53:37,680 --> 02:53:38,680
Yeah.

1330
02:53:38,680 --> 02:53:39,680
Yeah.

1331
02:53:39,680 --> 02:53:40,680
Okay.

1332
02:53:40,680 --> 02:53:48,840
At least the maximum requirement, maximum memory requirement should be pretty accurate,

1333
02:53:48,840 --> 02:53:55,320
But the others, because they're calculated from averages, they might be all like, yeah,

1334
02:53:55,320 --> 02:53:56,800
it's their averages.

1335
02:53:56,800 --> 02:54:02,920
So they might not be ... You might have a code that, let's say it requests a huge amount

1336
02:54:02,920 --> 02:54:08,520
of memory when it loads a dataset or something, and then it does nothing with that afterwards.

1337
02:54:08,520 --> 02:54:14,120
So you might have a situation where you have a big spike in your memory usage, and these

1338
02:54:14,120 --> 02:54:16,520
averages don't necessarily capture that.

1339
02:54:16,520 --> 02:54:22,760
that you need to do a bit more like profiling of the code to capture that sort of behavior.

1340
02:54:22,760 --> 02:54:31,160
Yeah. Yeah. And monitoring is really a big deal, like getting good accurate measurements of the

1341
02:54:31,160 --> 02:54:36,920
resources your jobs use is really necessary to get any good performance out. And there's far

1342
02:54:36,920 --> 02:54:44,200
more things that we can do that we can talk about now. But anyway, I propose we go to an exercise

1343
02:54:44,200 --> 02:54:52,760
time. So yeah, we can take the break by 10.50 or a bit after.

1344
02:54:53,160 --> 02:55:00,000
Yeah. So in the exercises we have for you, we have a few

1345
02:55:00,000 --> 02:55:05,680
exercises, like first, like some verbosity exercises, and then

1346
02:55:06,360 --> 02:55:11,960
testing out, like checking the how that's how do the seff and

1347
02:55:11,960 --> 02:55:17,760
and their SLURM history, what do they look like when you actually run something?

1348
02:55:17,760 --> 02:55:23,720
So of course, these are pretty much a toy problem, but you can try them out and see

1349
02:55:23,720 --> 02:55:25,280
what the seff looks like.

1350
02:55:25,280 --> 02:55:33,200
Because for an actual program, they will look pretty much the same, the utilization and

1351
02:55:33,200 --> 02:55:35,800
those sort of numbers.

1352
02:55:35,800 --> 02:55:48,120
yeah okay uh i've written this in the notes now um so yeah give it a try i wrote down we can come

1353
02:55:48,120 --> 02:55:59,120
back at 50. So, good luck and see you soon. Bye.

1354
02:56:18,120 --> 02:56:20,180
you

1355
02:56:48,120 --> 02:56:50,180
you

1356
02:57:18,120 --> 02:57:20,180
you

1357
02:57:48,120 --> 02:57:50,180
you

1358
02:58:18,120 --> 02:58:20,180
you

1359
02:58:48,120 --> 02:58:50,180
you

1360
02:59:18,120 --> 02:59:20,180
you

1361
02:59:48,120 --> 02:59:50,180
you

1362
03:00:18,120 --> 03:00:20,180
you

1363
03:00:48,120 --> 03:00:50,180
you

1364
03:01:18,120 --> 03:01:20,180
you

1365
03:01:48,120 --> 03:01:50,180
you

1366
03:02:18,120 --> 03:02:20,180
you

1367
03:02:48,120 --> 03:02:50,180
you

1368
03:03:18,120 --> 03:03:20,180
you

1369
03:03:48,120 --> 03:03:50,180
you

1370
03:04:18,120 --> 03:04:20,180
you

1371
03:04:48,120 --> 03:04:50,180
you

1372
03:05:18,120 --> 03:05:20,180
you

1373
03:05:48,120 --> 03:05:50,180
you

1374
03:06:18,120 --> 03:06:20,180
you

1375
03:06:48,120 --> 03:06:50,180
you

1376
03:07:18,120 --> 03:07:20,180
you

1377
03:07:48,120 --> 03:07:50,180
you

1378
03:08:18,120 --> 03:08:20,180
you

1379
03:08:48,120 --> 03:08:50,180
you

1380
03:09:18,120 --> 03:09:20,180
you

1381
03:09:48,120 --> 03:09:50,180
you

1382
03:10:18,120 --> 03:10:20,180
you

1383
03:10:48,120 --> 03:10:50,180
you

1384
03:11:18,120 --> 03:11:25,120
Welcome back.

1385
03:11:25,120 --> 03:11:29,120
So, um, yeah.

1386
03:11:29,120 --> 03:11:38,120
I don't know how many people were trying to exercises because there wasn't much comment there but there's definitely some questions about this.

1387
03:11:38,120 --> 03:11:45,120
Um, did we already talked about how reliable the estimates were right.

1388
03:11:45,120 --> 03:11:47,120
Yes, yes.

1389
03:11:47,120 --> 03:11:51,120
Should we do some examples?

1390
03:11:51,120 --> 03:11:53,120
Yeah, let's do some.

1391
03:11:53,120 --> 03:11:57,120
How to execute the command run-pi.sh file.

1392
03:11:57,120 --> 03:12:01,120
Where did that come from?

1393
03:12:01,120 --> 03:12:19,080
from I think the ssh file, I don't know, like this.

1394
03:12:19,080 --> 03:12:21,200
Maybe it means sh.

1395
03:12:21,200 --> 03:12:24,280
Yeah, maybe it means sh.

1396
03:12:24,280 --> 03:12:27,840
We would need a bit more WebAssembly probably,

1397
03:12:27,840 --> 03:12:29,400
or WebAssembly example.

1398
03:12:31,120 --> 03:12:41,920
Okay. Well, let's do some examples. So, what should we look at? Monitoring WAND?

1399
03:12:41,920 --> 03:12:53,520
Yeah. So, these examples might seem a bit like, okay, they might be simple or self-evident

1400
03:12:53,520 --> 03:13:01,120
whatever. But I would say that they are only simple and self-evident because the program

1401
03:13:01,120 --> 03:13:08,800
is simple and self-evident. If you think about if we would be running some really complex program,

1402
03:13:09,920 --> 03:13:17,840
it would be very much harder to decipher what's happening there. For the simple program,

1403
03:13:17,840 --> 03:13:29,200
it's of course easy to see, but for a more complex program, this is by no means self-evident.

1404
03:13:32,640 --> 03:13:37,680
I think it's important to keep in mind that even though these might look simple,

1405
03:13:39,200 --> 03:13:45,840
you can plug whatever there and it would be immediately much more complex if the script

1406
03:13:45,840 --> 03:14:03,840
would be much more complex. So, in the serial example, if we, for example, look at the run

1407
03:14:03,840 --> 03:14:13,200
-pi.sh. So, let's, we can add here, there was already this hello user, but let's add here

1408
03:14:13,200 --> 03:14:24,200
some echo that says starting analysis now.

1409
03:14:25,160 --> 03:14:32,680
Very simple. Let's put maybe the date there as well.

1410
03:14:32,680 --> 03:14:36,280
Okay, yeah.

1411
03:14:36,280 --> 03:14:43,680
And question mark in parentheses means it runs the date command.

1412
03:14:43,680 --> 03:14:49,440
So you can also write it like this if you want to utilize the automatic highlighting

1413
03:14:49,440 --> 03:14:50,440
a bit better.

1414
03:14:50,440 --> 03:14:51,440
Or automatic.

1415
03:14:51,440 --> 03:14:54,440
So it shows that this is a command.

1416
03:14:54,440 --> 03:15:00,440
So let's submit this.

1417
03:15:00,440 --> 03:15:19,880
So let's say we would have a problem in the, oh, I may still have the error there, yeah.

1418
03:15:19,880 --> 03:15:22,280
And let's look at the output, yeah.

1419
03:15:22,280 --> 03:15:26,280
So we would have here the timestamp.

1420
03:15:26,280 --> 03:15:33,720
This might be really helpful if your program has tens of steps, multiple steps, having something

1421
03:15:33,720 --> 03:15:39,720
like that might be really good. Let's try this set-x as well. This is very good for debugging.

1422
03:15:40,840 --> 03:15:55,960
If we open the run-pi and we put here set-x, what that does is that it

1423
03:15:55,960 --> 03:16:07,640
It tells the bash interpreter to print all of the commands that we are going to be running.

1424
03:16:07,640 --> 03:16:12,660
So if you have, especially if you have like any sort of like if sentence or something

1425
03:16:12,660 --> 03:16:18,200
like that, like conditional logic, it might be good to have this because then you can

1426
03:16:18,200 --> 03:16:25,180
see what the script is actually like executing.

1427
03:16:25,180 --> 03:16:32,700
it will produce this kind of an output where we will see first the command that is being run

1428
03:16:33,660 --> 03:16:42,700
and then the output. You can see that before it could run the echo, the script needed to run the

1429
03:16:42,700 --> 03:16:47,820
date. It has these double pluses over here. It first needed to get the date before it could

1430
03:16:47,820 --> 03:16:50,260
to create this echo.

1431
03:16:50,260 --> 03:16:54,120
So that's why we have this double plus over here.

1432
03:16:54,120 --> 03:16:59,120
So you can use that to produce extra monitoring.

1433
03:17:00,940 --> 03:17:05,620
Let's maybe check the seff example.

1434
03:17:06,700 --> 03:17:09,380
Should we do straight up?

1435
03:17:09,380 --> 03:17:13,260
Like we can all, like tomorrow we'll talk about

1436
03:17:13,260 --> 03:17:16,020
how to do multiprocessing.

1437
03:17:16,020 --> 03:17:23,620
Maybe we can do this example as this kind of like a teaser on how do we utilize

1438
03:17:26,900 --> 03:17:39,700
or can utilize multiple processors. Let's add cpus per task to Python.

1439
03:17:46,020 --> 03:17:48,060
How many zeros are there?

1440
03:17:48,060 --> 03:17:49,620
Well, I don't want to count.

1441
03:17:49,620 --> 03:17:52,660
Let's just copy-paste.

1442
03:17:52,660 --> 03:17:54,620
OK.

1443
03:17:54,620 --> 03:17:57,940
So error.

1444
03:17:57,940 --> 03:17:59,100
Oh, Python 3?

1445
03:17:59,100 --> 03:18:01,060
There's no, yeah, Python 3.

1446
03:18:01,060 --> 03:18:01,860
A bit of a mistake.

1447
03:18:01,860 --> 03:18:02,700
OK.

1448
03:18:02,700 --> 03:18:04,100
That should be fixed.

1449
03:18:04,100 --> 03:18:04,860
Yeah.

1450
03:18:04,860 --> 03:18:10,020
So now it's using two processors to do the calculation.

1451
03:18:10,020 --> 03:18:14,300
So we'll talk about parallelism tomorrow.

1452
03:18:14,300 --> 03:18:19,620
So then we'll have a lot more stuff on that.

1453
03:18:19,620 --> 03:18:25,740
But for now, let's just marvel at the ease

1454
03:18:25,740 --> 03:18:30,220
of use of multiple processors in this example.

1455
03:18:30,220 --> 03:18:30,980
OK, yeah.

1456
03:18:34,940 --> 03:18:36,860
So let's see how long it takes.

1457
03:18:36,860 --> 03:18:41,420
I would expect that the default would be set, but it's, yeah.

1458
03:18:41,420 --> 03:18:43,900
OK, so it's done.

1459
03:18:43,900 --> 03:18:47,940
And if we do storm history, now we

1460
03:18:47,940 --> 03:18:50,180
should see something interesting.

1461
03:18:50,180 --> 03:18:51,660
Yeah.

1462
03:18:51,660 --> 03:18:54,220
I'll make this a bit.

1463
03:18:54,220 --> 03:18:54,860
Yeah.

1464
03:18:54,860 --> 03:18:59,180
So the CPU time and wall time is what we want, right?

1465
03:18:59,180 --> 03:18:59,940
Yes.

1466
03:18:59,940 --> 03:19:03,580
I'll put here the 15 min as well.

1467
03:19:03,580 --> 03:19:04,660
OK, that's still too long.

1468
03:19:04,660 --> 03:19:05,540
Let's hit 5 min.

1469
03:19:05,540 --> 03:19:07,020
Yeah.

1470
03:19:07,020 --> 03:19:07,820
One minute?

1471
03:19:07,820 --> 03:19:09,140
Well, let's, yeah.

1472
03:19:11,820 --> 03:19:12,660
Yeah, now it's good.

1473
03:19:12,660 --> 03:19:13,420
OK, there we go.

1474
03:19:13,420 --> 03:19:22,620
Oh, okay. Here we see the code. So this is the job that we submitted. And we see that the CPU

1475
03:19:22,620 --> 03:19:32,860
time, total CPU time was one minute and 14 seconds. And the wall time was 38 seconds.

1476
03:19:33,500 --> 03:19:39,580
So now you can like, there was a question in the notes that like some site doesn't have

1477
03:19:39,580 --> 03:19:46,140
seff installed. You can get it from GitHub. It's available there. And I think it's part of some

1478
03:19:46,140 --> 03:19:56,060
Slurm installations as well. But what the seff basically does is that calculates

1479
03:19:59,580 --> 03:20:07,500
this number multiplied by the number of CPUs. So that would be 38 seconds times two. So

1480
03:20:07,500 --> 03:20:14,900
So what's it like, 78 seconds, sorry, 76 seconds.

1481
03:20:14,900 --> 03:20:20,700
So and what we utilized was one minute, 14 seconds.

1482
03:20:20,700 --> 03:20:23,100
So that's like 74 seconds.

1483
03:20:23,100 --> 03:20:33,660
So 74 seconds over 76 seconds, we would expect the CPU efficiency to be, well, close to what's

1484
03:20:33,660 --> 03:20:35,960
it like close to a hundred percent.

1485
03:20:35,960 --> 03:20:41,340
So let's use seff to do this calculation so that we don't have to do it manually.

1486
03:20:41,340 --> 03:20:45,940
So yeah, it's 97% utilization.

1487
03:20:45,940 --> 03:20:48,620
But that's basically the kind of calculation it does.

1488
03:20:48,620 --> 03:20:52,980
So it takes the wall time, the total time that the job took.

1489
03:20:52,980 --> 03:20:58,580
It checks how much resources were actually requested, how many CPUs were requested.

1490
03:20:58,580 --> 03:21:08,100
will calculate the total amount of time used and then it checks how much CPU time was actually

1491
03:21:08,100 --> 03:21:15,780
utilized. We can see here that the memory utilization is pretty horrendous. This is not

1492
03:21:15,780 --> 03:21:24,900
nice. It's way overkill. At one gigabyte, it doesn't really matter. It's still quite small,

1493
03:21:24,900 --> 03:21:32,500
the memory requirement. But the CPU efficiency was pretty good. But these kind of like, okay,

1494
03:21:33,140 --> 03:21:39,220
you have an assumption how your program behaves. How do you see it in the numbers? This is a quite

1495
03:21:39,220 --> 03:21:46,660
complex task, actually. And something that you only get familiar the more you do the thing.

1496
03:21:46,660 --> 03:21:54,660
but basically it's easier to check usually if numbers are like, if the percentages

1497
03:21:54,660 --> 03:22:02,900
are closer to 100% then it's easier to check like that. Yeah. Okay, so it's time for a break.

1498
03:22:02,900 --> 03:22:09,700
So we'll be out for 10 minutes and then we'll come back and we'll have some, well basically,

1499
03:22:09,700 --> 03:22:15,940
lightning talks on several other things which we summarize but you need to read yourself.

1500
03:22:16,660 --> 03:22:26,660
And then there's a very long Q&A session and you can really ask us anything.

1501
03:22:26,660 --> 03:22:32,660
So prepare all your questions, bring your friends, whatever, and try to challenge us.

1502
03:22:32,660 --> 03:22:39,660
Yeah, and during the Q&A session, remember, already you can pepper whatever questions you have,

1503
03:22:39,660 --> 03:22:43,660
what sort of questions you have, you can already have them in your mind.

1504
03:22:43,660 --> 03:22:46,660
So, yeah, but let's have a break.

1505
03:22:46,660 --> 03:22:48,660
Yeah. Okay. 10 minutes.

1506
03:22:48,660 --> 03:22:50,660
See you later.

1507
03:22:50,660 --> 03:22:52,660
Bye.

1508
03:23:13,660 --> 03:23:15,720
you

1509
03:23:43,660 --> 03:23:45,720
you

1510
03:24:13,660 --> 03:24:15,720
you

1511
03:24:43,660 --> 03:24:45,720
you

1512
03:25:13,660 --> 03:25:15,720
you

1513
03:25:43,660 --> 03:25:45,720
you

1514
03:26:13,660 --> 03:26:15,720
you

1515
03:26:43,660 --> 03:26:45,720
you

1516
03:27:13,660 --> 03:27:15,720
you

1517
03:27:43,660 --> 03:27:45,720
you

1518
03:28:13,660 --> 03:28:15,720
you

1519
03:28:43,660 --> 03:28:45,720
you

1520
03:29:13,660 --> 03:29:15,720
you

1521
03:29:43,660 --> 03:29:45,720
you

1522
03:30:13,660 --> 03:30:15,720
you

1523
03:30:43,660 --> 03:30:45,720
you

1524
03:31:13,660 --> 03:31:15,720
you

1525
03:31:43,660 --> 03:31:45,720
you

1526
03:32:13,660 --> 03:32:15,720
you

1527
03:32:43,660 --> 03:32:45,720
you

1528
03:33:13,660 --> 03:33:26,980
Hello, we are back.

1529
03:33:26,980 --> 03:33:27,980
Hello.

1530
03:33:27,980 --> 03:33:28,980
Yeah.

1531
03:33:28,980 --> 03:33:35,620
So, during the break, we were thinking that, like, hopefully everything appears simple

1532
03:33:35,620 --> 03:33:36,620
for you.

1533
03:33:36,620 --> 03:33:39,100
Like, we were thinking that, like, is this simple or is it not?

1534
03:33:39,100 --> 03:33:40,100
Is this complicated?

1535
03:33:40,100 --> 03:33:41,100
Or is it not?

1536
03:33:41,100 --> 03:33:42,100
We don't know.

1537
03:33:42,100 --> 03:33:48,860
So at the end, remember to put the feedback on so that we know

1538
03:33:48,860 --> 03:33:51,860
that was everything clear.

1539
03:33:51,860 --> 03:33:54,420
And do remember to put stuff in the notes

1540
03:33:54,420 --> 03:34:00,940
as well so that we know what's happening.

1541
03:34:00,940 --> 03:34:04,740
So [name], what do we have for us

1542
03:34:04,740 --> 03:34:09,220
at this last lightning round of talks?

1543
03:34:09,220 --> 03:34:14,100
So there's, as you see from the schedule, there's four things you want to cover.

1544
03:34:14,100 --> 03:34:17,620
Application, software modules, data storage, remote access to data.

1545
03:34:19,220 --> 03:34:24,740
Each of these is itself not a very long page, but a bit involved.

1546
03:34:25,460 --> 03:34:31,140
But behind the scenes, there is so much going on there.

1547
03:34:32,100 --> 03:34:36,020
So our goal is to give you the summary of why it's important,

1548
03:34:36,020 --> 03:34:39,940
but you can read it and ask questions on your own time.

1549
03:34:41,860 --> 03:34:47,220
And that's better than what we've done before when we spent hours on all of these and everyone just

1550
03:34:47,220 --> 03:34:53,780
gets bored. Yeah, we'll try to like basically provide you with the cliff notes of what is

1551
03:34:56,820 --> 03:35:01,220
yeah what you should be like basically public service announcement or this kind of like

1552
03:35:01,220 --> 03:35:06,180
At this point, probably everybody's a bit already like there's so much happening already in the

1553
03:35:06,180 --> 03:35:12,020
course. So we try to keep it as simple as possible. So let's talk about applications.

1554
03:35:12,020 --> 03:35:17,460
What are applications, [name]? I mean, I guess whenever anyone wants to run something on the

1555
03:35:17,460 --> 03:35:23,460
cluster, you want to run some software. And it might be something that you've created completely

1556
03:35:23,460 --> 03:35:32,580
by yourself, but often it's something that is automatically installed. And for this,

1557
03:35:34,420 --> 03:35:44,740
what does it mean? So yeah, you log in and you want some software, like you want Python,

1558
03:35:44,740 --> 03:35:50,740
which appears to be here, or you might want R, or you might want MATLAB, or any number of more

1559
03:35:50,740 --> 03:35:57,460
specialized things. So if you go to the random page of some random application and ask,

1560
03:35:57,460 --> 03:36:02,740
how do I install it? That will probably not work on the cluster itself

1561
03:36:04,340 --> 03:36:09,620
because you don't have admin access there. But there are other things you can do.

1562
03:36:09,620 --> 03:36:27,580
So, first of all, I would say, like [name] said, the system is shared, so you cannot

1563
03:36:27,580 --> 03:36:29,500
get the admin access there.

1564
03:36:29,500 --> 03:36:35,020
But of course, in many cases, the cluster administrators try to install something that

1565
03:36:35,020 --> 03:36:37,260
will benefit the whole community.

1566
03:36:37,260 --> 03:36:40,580
So there already exists usually software

1567
03:36:40,580 --> 03:36:42,420
that has been installed.

1568
03:36:42,420 --> 03:36:45,660
We'll talk about how these pre-installed software,

1569
03:36:45,660 --> 03:36:49,460
we use this module system to load these,

1570
03:36:49,460 --> 03:36:51,820
how these can be loaded.

1571
03:36:51,820 --> 03:36:53,980
But yeah, this is one option.

1572
03:36:53,980 --> 03:36:54,480
Yeah.

1573
03:36:57,580 --> 03:36:59,620
Can you ever install things by yourself?

1574
03:36:59,620 --> 03:37:08,980
Yeah, I would say like most of the time, yes.

1575
03:37:08,980 --> 03:37:16,620
But for many programs, especially on Linux that the computers, like these cluster computers

1576
03:37:16,620 --> 03:37:22,260
usually run, you either need to compile it or you need to get it pre-compiled somewhere

1577
03:37:22,260 --> 03:37:23,260
else.

1578
03:37:23,260 --> 03:37:27,420
Like somebody already has done the dirty work for you.

1579
03:37:27,420 --> 03:37:34,140
If you take it from somewhere else, there are various things you can use. We use Conda nowadays

1580
03:37:34,140 --> 03:37:40,780
a lot to provide various kinds of softwares. You can use these Apptainer or Singularity containers

1581
03:37:40,780 --> 03:37:48,940
to install libraries. If your code doesn't require to compile its own libraries, it's

1582
03:37:48,940 --> 03:37:55,820
like interpreted code, like Matlab code or R code or Python code. In many cases, you can use

1583
03:37:55,820 --> 03:38:00,820
which is like the already existing software modules that we provide.

1584
03:38:01,020 --> 03:38:02,500
Yeah.

1585
03:38:04,260 --> 03:38:07,900
So when someone comes and needs to use something,

1586
03:38:08,100 --> 03:38:11,540
I guess this page will give the general summary.

1587
03:38:11,740 --> 03:38:15,860
But first you look and see, is it already there?

1588
03:38:16,060 --> 03:38:19,140
And then you would decide,

1589
03:38:19,340 --> 03:38:24,660
do you ask us or do you try to install yourself?

1590
03:38:24,660 --> 03:38:30,660
and it depends on how good you are at adapting installation instructions.

1591
03:38:32,180 --> 03:38:34,820
There's also this thing called containers.

1592
03:38:36,180 --> 03:38:40,100
Yeah, I already mentioned it in passing.

1593
03:38:40,100 --> 03:38:45,780
So there are these containers, this Apptainer or Singularity containers

1594
03:38:45,780 --> 03:38:47,620
that can make you so that you can run.

1595
03:38:47,620 --> 03:38:52,420
So if you're familiar with Docker containers, they're a bit similar but a bit different.

1596
03:38:52,420 --> 03:39:03,420
If you're interested, we were having this workflows course for high-performance computing

1597
03:39:03,420 --> 03:39:08,780
and I gave a tutorial on these there.

1598
03:39:08,780 --> 03:39:16,060
The recording should be in the Code Refinery YouTube page and the course page is linked

1599
03:39:16,060 --> 03:39:17,140
in that course as well.

1600
03:39:17,140 --> 03:39:19,700
We can link it into the chat as well.

1601
03:39:19,700 --> 03:39:24,340
those can be used to install basically if your program only runs on Ubuntu let's say

1602
03:39:24,340 --> 03:39:30,260
you can install it in a container and run that container in the cluster yeah

1603
03:39:32,420 --> 03:39:40,260
okay um should we go on so the next up is modules and

1604
03:39:43,300 --> 03:39:47,300
so module is one of the things that allows you to

1605
03:39:47,300 --> 03:39:55,540
load software. So you'll often see in order to use Python or R or whatever run the command

1606
03:39:55,540 --> 03:40:04,420
module load something. So for example we could like let's say we have some MATLAB users already

1607
03:40:04,980 --> 03:40:12,580
commented there in the in the notes. So if you want to use MATLAB we have MATLAB

1608
03:40:12,580 --> 03:40:20,420
installations usually. Most of the computing clusters, we all use this lmod module system.

1609
03:40:22,660 --> 03:40:28,420
In these, there's this command called module spider that you can use to check what versions are

1610
03:40:29,460 --> 03:40:34,980
installed. For example, MATLAB. You can write the search with the usual terms, for example,

1611
03:40:34,980 --> 03:40:43,460
module spider R or something. And there's like a R version there. And let's say if we want to use

1612
03:40:43,460 --> 03:40:52,500
that, we would load that module. So let's say we load that R module. And now we can use command

1613
03:40:52,500 --> 03:40:59,620
like which to check which R we have. And we notice that it comes from somewhere, a magical place

1614
03:40:59,620 --> 03:41:12,900
way it suddenly found an R for us. There's a big list of these usually by the module purge

1615
03:41:12,900 --> 03:41:17,940
cleans up the modules. All of the commands are documented in the page if you want to read it.

1616
03:41:20,100 --> 03:41:26,580
There's usually a whole bunch of this software that is available on the computing clusters.

1617
03:41:26,580 --> 03:41:39,580
modules. So if you're looking for something, you might find it already here. So one place

1618
03:41:39,580 --> 03:41:41,860
to look at it would be over here.

1619
03:41:41,860 --> 03:41:48,060
Yeah. And there is quite, well, you need to know a little bit about module for almost

1620
03:41:48,060 --> 03:41:52,140
anything you do. So I'd encourage you to read this page.

1621
03:41:52,140 --> 03:41:59,260
Yeah, but the modules basically do, like in one sentence, they change various parts in

1622
03:41:59,260 --> 03:42:04,420
the Linux terminal so that it finds, like when you look for a program, it will find

1623
03:42:04,420 --> 03:42:07,260
the program in different places.

1624
03:42:07,260 --> 03:42:13,220
And we use this, instead of installing everything at the same time, we use this so that we can

1625
03:42:13,220 --> 03:42:17,860
have multiple different software that might not be compatible with each other.

1626
03:42:17,860 --> 03:42:22,100
So let's say multiple versions of R or multiple versions of Python or something like that.

1627
03:42:22,100 --> 03:42:28,100
Okay, should we go on to data storage?

1628
03:42:28,100 --> 03:42:35,100
Now, data storage is a very big thing and complex.

1629
03:42:35,100 --> 03:42:44,100
I mean, the cluster without data, what's the point?

1630
03:42:44,100 --> 03:42:52,100
And for the cluster, it's not near as simple as add some hard drives there.

1631
03:42:52,100 --> 03:42:57,100
Because the cluster has, the storage has to be big. So ours is 5 petabytes.

1632
03:42:57,100 --> 03:43:06,100
It has to be accessible to hundreds of compute nodes and possibly thousands of jobs at the same time.

1633
03:43:06,100 --> 03:43:09,100
All of which are reading and writing.

1634
03:43:09,100 --> 03:43:16,820
Yeah, so you can basically think of it as like a big pile of disks that has some magic

1635
03:43:16,820 --> 03:43:23,340
that makes it so that it appears as one file system.

1636
03:43:23,340 --> 03:43:29,260
So it's one big file system and everybody has their own files on that system.

1637
03:43:29,260 --> 03:43:36,580
And they are usually these, like you can look at the documentation for the places where

1638
03:43:36,580 --> 03:43:44,740
should put stuff. But in Aalto, for example, you basically always want to work on the scratch

1639
03:43:44,740 --> 03:43:52,500
file system, which is the work directory, like the big file system that we have. We also have this

1640
03:43:53,940 --> 03:44:05,060
bit of a legacy home folder that is much smaller and it's not meant for high-performance computing,

1641
03:44:05,060 --> 03:44:09,460
so the other part is meant to store your actual data.

1642
03:44:11,540 --> 03:44:16,180
The important things would be to note that usually these file systems have a quota.

1643
03:44:17,220 --> 03:44:24,340
By default, the home folder has a 10 gigabyte quota and the scratch file system has a 200

1644
03:44:24,340 --> 03:44:32,020
gigabyte quota, like a personal quota. But then we also provide bigger quotas, especially for

1645
03:44:32,020 --> 03:44:37,540
projects. So if you belong to a resource project, we can create a shared folder for your project

1646
03:44:37,540 --> 03:44:45,940
and they can run to terabytes and more, the quotas. So how much files can you store?

1647
03:44:45,940 --> 03:44:50,340
And if you run out of file storage, then ask us and we can increase it.

1648
03:44:53,460 --> 03:44:57,860
To me, the most important lesson here is that there's different types of storage for different

1649
03:44:57,860 --> 03:45:04,420
purposes. So our big Scratch storage is, well, it's called Scratch for a reason. It's not backed

1650
03:45:04,420 --> 03:45:11,140
up, but it's big. Aalto has other places, for example, this hidden out Aalto network drives

1651
03:45:11,140 --> 03:45:19,700
here, which are not as higher. Actually, yeah, let's come here. This is good. So for example,

1652
03:45:19,700 --> 03:45:24,980
Aalto has network drives that are not as big, but they're very backed up. They're backed up,

1653
03:45:24,980 --> 03:45:26,180
They have snapshots.

1654
03:45:26,180 --> 03:45:29,940
They have all kinds of, um, yeah.

1655
03:45:29,940 --> 03:45:30,260
Sorry.

1656
03:45:30,260 --> 03:45:35,980
I, um, yeah, it's sort of great out there.

1657
03:45:37,060 --> 03:45:37,340
Yeah.

1658
03:45:37,420 --> 03:45:40,300
Um, yeah, yeah, yeah, yeah.

1659
03:45:41,580 --> 03:45:46,500
Uh, so, so whenever you have a bunch of data, you might need to,

1660
03:45:47,020 --> 03:45:49,500
um, put it in different places.

1661
03:45:49,820 --> 03:45:54,020
For example, if you're collecting some original data, you would first put it

1662
03:45:54,020 --> 03:46:01,940
on the project Aalto storage where it's backed up and then make a copy to Triton where it's not

1663
03:46:01,940 --> 03:46:08,340
backed up but available to everywhere. And same for other things. There's like some of the compute

1664
03:46:08,340 --> 03:46:16,580
nodes have really fast local disks which are good for some things and so on. Yeah like usually like

1665
03:46:16,580 --> 03:46:21,700
you want to think about like what is your overall workflow but usually you have something that is

1666
03:46:21,700 --> 03:46:28,420
important like the starting point of your thing. You want that to be backed up in a project folder

1667
03:46:28,420 --> 03:46:35,780
in the Aalto network trial and then you want to create a copy of that usually into the work

1668
03:46:35,780 --> 03:46:43,860
directory or into the cluster so that you can work on that in the fast file system.

1669
03:46:44,500 --> 03:46:51,460
Then your code might be in a version control system. You might want to put your code into the

1670
03:46:51,460 --> 03:46:57,380
Git version control so that you can modify it there and you can keep a better check of that.

1671
03:46:58,020 --> 03:47:07,860
And then you might need to navigate some of these different file systems, but it's not as

1672
03:47:07,860 --> 03:47:14,580
complicated as it might look initially. Because once you figure out your own workflow,

1673
03:47:14,580 --> 03:47:22,740
it's usually quite easy to then manage afterwards. Yeah, there's a good comment. Can we...

1674
03:47:25,620 --> 03:47:33,860
Okay, there was just an explosion or boom outside. Okay, more like something falling.

1675
03:47:34,660 --> 03:47:40,580
Okay, so someone asked to mention separate quotas for number of files and size. So this is a good

1676
03:47:40,580 --> 03:47:47,780
point. So on your own computer, you usually think the size is what matters, because your hard disk

1677
03:47:47,780 --> 03:47:57,620
is a certain number of terabytes. But on a cluster, the number of files is also quite important.

1678
03:47:58,260 --> 03:48:00,900
And you can have a separate quota for both of these.

1679
03:48:01,780 --> 03:48:09,460
Yes. So if I run quota command, for example, in our cluster, you notice that I have, well,

1680
03:48:09,460 --> 03:48:14,580
quite a bit of files. So you can see here that there's these quotas over here.

1681
03:48:15,780 --> 03:48:22,500
Yeah, let's read this. Yeah, let's make it a bit. Yeah, so under group quotas we see space,

1682
03:48:24,020 --> 03:48:32,500
quota limit, files, quota limit. Yes, so the space is the actual space that I'm using. So currently

1683
03:48:32,500 --> 03:48:41,540
because I need to do lots of tests and developments. I need to have a bit bigger

1684
03:48:41,540 --> 03:48:55,940
quota than normally. My quota is three terabytes and I have two terabytes of data. Then my file

1685
03:48:55,940 --> 03:49:04,580
quota is three million files, and I'm almost hitting that. I'm pretty certain that 50% of

1686
03:49:04,580 --> 03:49:11,140
that is different kinds of Conda environment installations. Many of the installations might

1687
03:49:11,860 --> 03:49:20,260
create huge amounts of files. This can get problematic in many clusters. Many clusters

1688
03:49:20,260 --> 03:49:28,660
might have different documentations on how you should mitigate problems by having too

1689
03:49:28,660 --> 03:49:37,300
many files and that sort of stuff. Our file system, luckily, it's designed to pretty much

1690
03:49:37,300 --> 03:49:43,300
handle it quite well, but the quota can still get quite full at some point. In those cases,

1691
03:49:43,300 --> 03:49:54,340
I personally just need to do a cleanup at some point. You should be mindful or know about that

1692
03:49:54,340 --> 03:50:00,740
there's a difference there. There's a number of files and then there's the actual size of

1693
03:50:00,740 --> 03:50:11,140
those files and both are tracked by the voter. Okay. Should we go to the remote access?

1694
03:50:11,140 --> 03:50:14,740
Can you scroll down and show the available data storage options?

1695
03:50:14,740 --> 03:50:15,240
Oh, yeah.

1696
03:50:15,780 --> 03:50:20,340
So hopefully your cluster has a table that looks something like this

1697
03:50:20,340 --> 03:50:24,900
and will show the different places that are available and all the different properties.

1698
03:50:25,540 --> 03:50:30,580
And it's worth looking at this and seeing what fits.

1699
03:50:30,580 --> 03:50:32,420
But we don't need to go into details now.

1700
03:50:32,420 --> 03:50:32,920
Yeah.

1701
03:50:33,700 --> 03:50:37,300
We also have another page for all the provided

1702
03:50:37,300 --> 03:50:40,100
and it's like double the size because there's so many places

1703
03:50:40,100 --> 03:50:46,260
is you can put your data. If you're unsure where should you put your data, just come and ask us.

1704
03:50:46,260 --> 03:50:54,820
That's the easiest way. Yes, I agree. And we enjoy answering these questions because it saves

1705
03:50:54,820 --> 03:51:02,660
others a lot of time and is quite useful. So remote access. So you somehow need to copy data

1706
03:51:02,660 --> 03:51:08,020
from wherever you're working to the cluster, unless you edit and write everything directly

1707
03:51:08,020 --> 03:51:13,780
on there. But most people need to do this. And let's be honest, the copying of data,

1708
03:51:14,660 --> 03:51:23,540
if you don't use the command line, it can be a little bit tricky and complex. But luckily,

1709
03:51:23,540 --> 03:51:29,940
we have lots of different ways to do that now. So it's getting better. There's two main different

1710
03:51:29,940 --> 03:51:37,780
options here. One is remote mounts of data. So mounting means, let's see, where does it come from?

1711
03:51:38,020 --> 03:51:49,060
like you take a hard drive and okay here we go so basically and you mount the disk into somewhere

1712
03:51:49,060 --> 03:51:55,300
and then it becomes available on that computer and in this case because we are mounting it through

1713
03:51:55,300 --> 03:52:02,500
the network but it means that the file is actually in the file system in triton or in your cluster

1714
03:52:02,500 --> 03:52:09,140
but you basically have the shadow of it in your computer and whenever you request,

1715
03:52:09,140 --> 03:52:13,860
okay, can I have that file, it will have to transfer it through the network and then if

1716
03:52:13,860 --> 03:52:21,140
you do a modification, it will have to transfer the file back there. For example, what we talked

1717
03:52:21,140 --> 03:52:29,940
earlier about VS Code yesterday, VS Code basically, it's running on Triton. If you edit the file on

1718
03:52:29,940 --> 03:52:38,100
your VS Code editor, it will have to send the modifications back to Triton because it's

1719
03:52:38,100 --> 03:52:41,460
editing the actual file in the cluster.

1720
03:52:41,460 --> 03:52:45,100
So that's basically how it works.

1721
03:52:45,100 --> 03:52:46,100
Yeah.

1722
03:52:46,100 --> 03:52:52,060
And this is really convenient because as files are being made in some directory, you immediately

1723
03:52:52,060 --> 03:52:55,100
see it on your own computer.

1724
03:52:55,100 --> 03:52:58,540
But for opening big files and so on.

1725
03:52:58,540 --> 03:52:59,540
Yeah.

1726
03:52:59,540 --> 03:53:04,260
Yeah, you need to transfer the whole file in order to get access to it.

1727
03:53:04,260 --> 03:53:05,260
Yeah.

1728
03:53:05,260 --> 03:53:10,420
So, the second picture is transferring data.

1729
03:53:10,420 --> 03:53:11,660
And this is what it looks like.

1730
03:53:11,660 --> 03:53:15,980
So there's one copy somewhere and you make another copy somewhere else.

1731
03:53:15,980 --> 03:53:20,060
And there's a lot of different tools that help you with this.

1732
03:53:20,060 --> 03:53:27,620
The benefit of this is that once you then start processing the file at your own computer,

1733
03:53:27,620 --> 03:53:33,060
the results of your simulation or something. You now have it locally, so it's much faster to work

1734
03:53:33,060 --> 03:53:39,220
on that usually. But the problem might be that now you have two copies and how do you make certain

1735
03:53:39,220 --> 03:53:44,420
that they are actually in sync, especially if you do modifications or that kind of stuff.

1736
03:53:44,420 --> 03:53:51,460
There are tools that make transferring these files or syncing these even large files very useful,

1737
03:53:51,460 --> 03:53:57,220
like Git Annex and DataLAD and various other tools that you can use to do this.

1738
03:53:59,300 --> 03:54:04,580
But you need to figure out a workflow that suits your specific use case usually.

1739
03:54:06,900 --> 03:54:10,900
But yeah, if you ever encounter the situation where you're like,

1740
03:54:10,900 --> 03:54:17,940
okay, I have a file underscore date underscore back or something like that in your folder that

1741
03:54:17,940 --> 03:54:23,300
everybody has at some point, then you know that, okay, you could probably come and talk to us and

1742
03:54:23,300 --> 03:54:32,340
we'll figure out a better tool for you to do the copying. Yeah. Okay. And for general purposes,

1743
03:54:32,340 --> 03:54:40,260
I see many people using the mounting these days for lightweight use and then copying for

1744
03:54:40,260 --> 03:54:47,540
bigger data. So with that being said, I propose that we go to the Q&A and maybe

1745
03:54:47,540 --> 03:54:52,680
we can start by describing our typical workflows when we were doing research

1746
03:54:52,680 --> 03:55:03,860
type of things. Does that sound good? Yeah. Okay, so I will switch to the notes here.

1747
03:55:10,260 --> 03:55:15,560
So yeah, I'll put this in auto-scroll mode.

1748
03:55:27,840 --> 03:55:30,240
Yeah, okay, so, um,

1749
03:55:32,100 --> 03:55:35,240
[name], when you were doing research, how did you typically

1750
03:55:35,240 --> 03:55:41,720
typically deal with data transfers and where was your data stored and stuff like that?

1751
03:55:41,720 --> 03:55:50,760
Yeah, well, when I was finishing my master's, I had this kind of like horrible setup.

1752
03:55:51,640 --> 03:55:57,160
So that I think everybody who's doing something eventually ends up if they have a deadline.

1753
03:55:57,160 --> 03:56:08,440
So, what I had is that I transferred some files from Triton to a virtual machine that

1754
03:56:08,440 --> 03:56:14,200
I had on my Windows machine, and then I copied them from there to my Windows side where I

1755
03:56:14,200 --> 03:56:22,080
was writing my latte, like actual the paper, the thesis.

1756
03:56:22,080 --> 03:56:29,200
Basically, it was like I copied the files from the cluster to a virtual machine where I did

1757
03:56:29,200 --> 03:56:39,360
plotting that I copied into my Windows machine. It was a mess and I wouldn't dare anybody to

1758
03:56:39,360 --> 03:56:48,480
replicate it. Workflows are this kind of a thing where you quite quickly end up with a workflow

1759
03:56:48,480 --> 03:56:55,360
that is bad, but it's your workflow and now you have gotten used to it and now it's too much hassle

1760
03:56:55,360 --> 03:57:01,280
to change it anymore. But the next time you start a new project, you know that you don't want to

1761
03:57:01,280 --> 03:57:08,080
replicate it anymore. So, I think this is quite a common occurrence for everybody. So, when you

1762
03:57:08,080 --> 03:57:14,080
start working on something, you think that, okay, I will just wing it. I will just improvise,

1763
03:57:14,080 --> 03:57:20,800
whatever. And then later on, you realize, okay, maybe I should have planned this previously.

1764
03:57:25,520 --> 03:57:34,320
But nowadays, I would say that I do vast majority of my work either straight on Triton or I use

1765
03:57:34,320 --> 03:57:42,560
Git to sync all of the code so that I don't ever have to copy any code anywhere, hopefully.

1766
03:57:44,080 --> 03:57:52,640
There's a question, is the cluster the VM?

1767
03:57:52,640 --> 03:57:57,760
In this case, the virtual machine was running on my Windows desktop, so it was a virtual

1768
03:57:57,760 --> 03:58:03,860
machine that I run on my Windows desktop, because I needed some plotting things and

1769
03:58:03,860 --> 03:58:08,040
stuff like that.

1770
03:58:08,040 --> 03:58:09,200
I don't know why I hadn't.

1771
03:58:09,200 --> 03:58:12,040
I could have probably installed the tools to the cluster

1772
03:58:12,040 --> 03:58:13,240
as well.

1773
03:58:13,240 --> 03:58:14,840
Yeah.

1774
03:58:14,840 --> 03:58:15,360
Let's see.

1775
03:58:15,360 --> 03:58:16,880
So what was my workflow?

1776
03:58:16,880 --> 03:58:21,320
So for many of my projects, I was quite comfortable

1777
03:58:21,320 --> 03:58:28,680
with SSH and using an editor on Triton.

1778
03:58:28,680 --> 03:58:34,600
So I would SSH to the cluster and then have all of my,

1779
03:58:34,600 --> 03:58:38,680
I'd be developing my code right there.

1780
03:58:38,680 --> 03:58:46,920
And then I would track my code with a version control system, and usually not commit it often

1781
03:58:46,920 --> 03:58:59,160
enough, although I would always try to. The code gets synced to, um, well, my own computer or

1782
03:58:59,160 --> 03:59:08,360
to github or something and then I usually wouldn't make good backups of

1783
03:59:08,360 --> 03:59:15,200
the okay if I had raw data I would store it on one of the Aalto file servers and

1784
03:59:15,200 --> 03:59:21,200
then make a copy on my own computer but if it was generated data usually the

1785
03:59:21,200 --> 03:59:27,200
only copy would be on Triton because it could be regenerated if absolutely

1786
03:59:27,200 --> 03:59:34,240
needed, although this wasn't the best setup, really.

1787
03:59:34,240 --> 03:59:38,960
But that was pretty typical for many of my things.

1788
03:59:38,960 --> 03:59:43,280
There's a good question, I think, related to this,

1789
03:59:43,280 --> 03:59:48,520
because I think things have changed quite a bit.

1790
03:59:48,520 --> 03:59:50,840
The code transfer is very easy using Git,

1791
03:59:50,840 --> 03:59:53,080
but there was a question about how

1792
03:59:53,080 --> 04:00:05,120
you see using VS, Visual Studio connected via SSH to modify the code folders and modify

1793
04:00:05,120 --> 04:00:11,200
the .sh files and then run from the OOD shell with Sbatch.

1794
04:00:11,200 --> 04:00:16,720
I think that's something that a lot of people are now just doing more and more.

1795
04:00:16,720 --> 04:00:22,160
So basically, what I do commonly is that I have terminals, like I use this tool called

1796
04:00:22,160 --> 04:00:29,420
tmuxinator to create like this templated terminals basically for myself, for anybody who's interested.

1797
04:00:29,420 --> 04:00:35,800
And I've gotten so accustomed to vim, so I'm basically at this kind of like a situation

1798
04:00:35,800 --> 04:00:43,040
where it's hard to change learned habits.

1799
04:00:43,040 --> 04:00:48,440
So I've got my workflow, but I think for many people it's very useful that you can edit

1800
04:00:48,440 --> 04:00:52,060
your code in the same place where your rest of your stuff is.

1801
04:00:52,060 --> 04:00:55,620
I think with VS Code it has some problems

1802
04:00:55,620 --> 04:00:59,380
related to all of the file searching that we talked about yesterday,

1803
04:00:59,380 --> 04:01:02,660
but it's a very powerful tool and very powerful interface.

1804
04:01:02,660 --> 04:01:06,940
You can also use the VS Code terminal to also submit the jobs.

1805
04:01:06,940 --> 04:01:09,060
So you don't necessarily have to go to

1806
04:01:09,060 --> 04:01:14,260
OOD to submit the jobs if the VS Code works fine for you.

1807
04:01:14,260 --> 04:01:21,940
And I agree, this VS Code plus open on demand for submitting stuff, that is a very usable

1808
04:01:21,940 --> 04:01:28,740
workflow. And that's good. We need much more usability in clusters these days.

1809
04:01:28,740 --> 04:01:44,740
There's a question, like, is it possible to work on Triton directly to files in the disks

1810
04:01:44,740 --> 04:01:47,820
without moving files to scratch, which is not backed up?

1811
04:01:47,820 --> 04:01:56,460
So the disks, I assume the disks are, you mean, like, maybe the disks on your own computer

1812
04:01:56,460 --> 04:01:57,460
or?

1813
04:01:57,460 --> 04:02:02,580
I mean, to me, this sort of implies people don't want it on Scratch because it's not

1814
04:02:02,580 --> 04:02:03,580
backed up.

1815
04:02:03,580 --> 04:02:07,900
But we should say Scratch isn't backed up, but it is reliable.

1816
04:02:07,900 --> 04:02:14,620
It's a huge rack of probably several hundred disks now that are all grade-sixed.

1817
04:02:14,620 --> 04:02:15,620
Yeah.

1818
04:02:15,620 --> 04:02:21,620
So there's a good, like, this is, I think this is a great question because it's like,

1819
04:02:21,620 --> 04:02:26,460
like, how would, well, I can briefly talk about the technology.

1820
04:02:26,460 --> 04:02:32,460
So in the system, there's the six of these disk arrays.

1821
04:02:32,460 --> 04:02:36,820
And each of these disk arrays is in this right setup

1822
04:02:36,820 --> 04:02:39,620
so that if one of the disks fail,

1823
04:02:39,620 --> 04:02:44,500
you can lose one complete array out of these six,

1824
04:02:44,500 --> 04:02:46,380
like complete all of the disks.

1825
04:02:46,380 --> 04:02:47,860
You could lose all of these.

1826
04:02:47,860 --> 04:02:50,780
And it's still duplicated.

1827
04:02:50,780 --> 04:02:55,180
And all of the connections are duplicated.

1828
04:02:55,180 --> 04:02:58,740
So there's multiple like nodes answering the connections.

1829
04:02:58,740 --> 04:03:02,540
So it's a very reliable system, but it's not backed up.

1830
04:03:02,540 --> 04:03:08,680
So the backup doesn't like, you don't have a backup that protects you from human error.

1831
04:03:08,680 --> 04:03:15,060
You have a basically very reliable system that protects from like system failure kind

1832
04:03:15,060 --> 04:03:16,060
of a thing.

1833
04:03:16,060 --> 04:03:21,420
Like it's a very reliable system that protects from hardware failures and that sort of stuff.

1834
04:03:21,420 --> 04:03:29,420
if you delete the file, it's gone. So it's not backed up in the sense it's very reliable,

1835
04:03:29,420 --> 04:03:38,220
but it's as reliable as you are. Personally, I don't trust myself that much with not messing up

1836
04:03:38,220 --> 04:03:45,340
stuff. So that's why taking backups is important. But at the same time, that's why I often think

1837
04:03:45,340 --> 04:03:50,620
that the most important thing to backup is your thoughts, which is basically your code that you

1838
04:03:50,620 --> 04:03:58,940
right? If that is under version control, I can lose a lot of stuff. And that makes it much easier

1839
04:03:58,940 --> 04:04:05,660
to decide what is important and what is not. Because usually the problem is that if you don't

1840
04:04:05,660 --> 04:04:13,980
know what is important and what is not important, everything is important. If you don't know what

1841
04:04:13,980 --> 04:04:19,260
you can throw away, you cannot throw anything away basically. And then suddenly you need to

1842
04:04:19,260 --> 04:04:24,620
back up like everything. But if you know that, okay, this initial data set is very important

1843
04:04:24,620 --> 04:04:30,780
because I actually need to record measurements from subjects or something like that. If I

1844
04:04:31,660 --> 04:04:37,660
actually need to do some measurements, then you know that that is important. You can back up

1845
04:04:37,660 --> 04:04:43,420
that. And let's say the processing code for that is backup, like inversion control. You know that

1846
04:04:43,420 --> 04:04:51,100
you can reproduce the results with the processing code. Because in science, you're at a problem if

1847
04:04:51,100 --> 04:04:57,180
you cannot reproduce anyway, right? So, if you have your code backup and your initial data backup,

1848
04:04:57,180 --> 04:05:02,300
you're already quite good to go. So, you shouldn't worry about the scratch that much.

1849
04:05:02,300 --> 04:05:09,740
Of course, don't go removing all of your files because then you need to do the preprocessing

1850
04:05:09,740 --> 04:05:17,100
again or that kind of stuff. But usually it's like you shouldn't worry about it. I should say

1851
04:05:17,100 --> 04:05:24,700
it's much more secure than the disk in the hard drive. Let's give an example. So on a typical

1852
04:05:24,700 --> 04:05:33,580
computer, if one hard disk breaks, then you lose all your data. On some computers like mine,

1853
04:05:33,580 --> 04:05:40,060
it requires two hard disks to break to lose my data because it's mirrored across two disks.

1854
04:05:40,860 --> 04:05:48,380
On Triton, it requires two disks to break because it's mirrored in a way that is designed this way.

1855
04:05:52,860 --> 04:05:58,940
Yeah, so it is and my computer is sitting here in my apartment where there could be a fire or

1856
04:05:58,940 --> 04:06:05,100
anything. But Triton's data is in a nice climate controlled and fire protected machine room.

1857
04:06:05,740 --> 04:06:11,020
So, yeah. But if this means can it be stored on Aalto network disks,

1858
04:06:11,020 --> 04:06:15,340
which are backed up and snapshotted and all that stuff, basically

1859
04:06:17,260 --> 04:06:22,700
no, because it doesn't have performance to be exported to the whole cluster.

1860
04:06:22,700 --> 04:06:30,540
There's a there's a good question about so what's the difference between cluster workstations

1861
04:06:30,540 --> 04:06:35,260
or virtual machines they're already like a good answer there so so basically I would

1862
04:06:35,260 --> 04:06:40,620
just basically read it out loud so the workstation or one computer is like you have an actual

1863
04:06:40,620 --> 04:06:44,780
computer and you have an operating system on that a virtual machine is that you have

1864
04:06:44,780 --> 04:06:49,660
an actual hardware like computer but on top of that computer you basically fake another

1865
04:06:49,660 --> 04:06:55,180
computer. So, and that's like a virtual machine. It's virtual because it's not actually like,

1866
04:06:55,740 --> 04:07:04,140
it's like created on top of the, like you're in the matrix now, like basically.

1867
04:07:05,980 --> 04:07:12,620
And then the cluster is this kind of like, you take multiple computers and you stitch them

1868
04:07:12,620 --> 04:07:18,780
together using these tools that make it possible to like operate across multiple computers.

1869
04:07:19,660 --> 04:07:24,660
Okay, let's see.

1870
04:07:24,660 --> 04:07:27,420
The benefits of on-demand for terminals.

1871
04:07:27,420 --> 04:07:31,200
I think this is pretty accurate, so it's the ease of use.

1872
04:07:31,200 --> 04:07:40,740
I think for most purposes, if you can, the SSH is probably better overall, or is it even

1873
04:07:40,740 --> 04:07:42,260
better though?

1874
04:07:42,260 --> 04:07:52,500
Well, I think it depends, like I personally like, it's this kind of like.

1875
04:07:52,500 --> 04:07:54,060
You don't have to use a web browser.

1876
04:07:54,060 --> 04:08:01,340
So if you can use it and directly connect it to your own desktop, that's good.

1877
04:08:01,340 --> 04:08:02,340
Yeah.

1878
04:08:02,340 --> 04:08:09,660
Like the terminal is basically like, I would say it's like, it said that in, for example,

1879
04:08:09,660 --> 04:08:17,100
blues music, it's not the notes you play. It's the notes you don't play. So the terminal is the

1880
04:08:17,100 --> 04:08:27,020
minimal things, basically. I personally like it because if I didn't say terminal to do something,

1881
04:08:27,020 --> 04:08:32,140
it didn't do anything, basically. If I click a button in a browser or something,

1882
04:08:32,140 --> 04:08:40,660
meaning, it usually has some like maybe predefined meaning coded into that button.

1883
04:08:40,660 --> 04:08:45,460
But if I use a terminal, I can decide like everything.

1884
04:08:45,460 --> 04:08:49,140
And it's a different kind of like a paradigm of usage.

1885
04:08:49,140 --> 04:08:54,540
Like the one is like programmatic usage and the other is like interactive usage.

1886
04:08:54,540 --> 04:09:00,300
Like you click something and it's like more visual and in many cases it's easier.

1887
04:09:00,300 --> 04:09:09,580
But if the button does a lot of things for you, it's very good, of course.

1888
04:09:09,580 --> 04:09:13,580
So it's just like complementary approaches, I would say.

1889
04:09:13,580 --> 04:09:17,700
You can decide which one works for you best.

1890
04:09:17,700 --> 04:09:22,620
Yeah, okay.

1891
04:09:22,620 --> 04:09:25,180
Is it precise to say Lumi is a cluster?

1892
04:09:25,180 --> 04:09:26,180
Yes, definitely.

1893
04:09:26,180 --> 04:09:35,500
Just a question, can we deploy a robotic simulator in Visio ISAX in a container and run it in

1894
04:09:35,500 --> 04:09:36,500
cloud mode?

1895
04:09:36,500 --> 04:09:37,500
Yes.

1896
04:09:37,500 --> 04:09:42,020
I mean, like that answer says, that's a pretty typical thing that happens.

1897
04:09:42,020 --> 04:09:45,220
And I think, did we deploy that for other people?

1898
04:09:45,220 --> 04:09:49,220
Yeah, I've installed it at least once for somebody.

1899
04:09:49,220 --> 04:09:50,220
Yeah.

1900
04:09:50,220 --> 04:09:51,220
Yeah.

1901
04:09:51,220 --> 04:09:52,220
Yeah.

1902
04:09:52,220 --> 04:09:53,220
So if you're thinking about that.

1903
04:09:53,220 --> 04:09:54,220
Yeah, go right ahead.

1904
04:09:54,220 --> 04:10:12,220
I was going to say, if you have this kind of question, it's good to make the issue and say, can I do this? And we can say, well, first you search and see, is it already there? Then you can make an issue and ask us to install it. And we'll decide if it's, yeah.

1905
04:10:12,220 --> 04:10:21,340
Yeah, like the IsaacSim is a good example of a program that definitely benefits from

1906
04:10:21,340 --> 04:10:25,820
using the container approach because it's basically like it's a robotic simulation program

1907
04:10:25,820 --> 04:10:29,740
that also incorporates like computer vision and that sort of stuff.

1908
04:10:29,740 --> 04:10:35,500
So you need to like create like a virtual environment where the virtual robot can then

1909
04:10:35,500 --> 04:10:37,860
drive around and that sort of stuff.

1910
04:10:37,860 --> 04:10:43,100
So it needs visualization tools that are usually like anything

1911
04:10:43,100 --> 04:10:46,260
involving visualization or that sort of stuff

1912
04:10:46,260 --> 04:10:49,100
usually requires libraries and things that

1913
04:10:49,100 --> 04:10:50,820
are quite complex to install.

1914
04:10:50,820 --> 04:10:54,220
So for that approach, these kind of container approaches

1915
04:10:54,220 --> 04:10:54,900
are very good.

1916
04:11:01,580 --> 04:11:03,660
Yeah, what else is there?

1917
04:11:07,860 --> 04:11:15,700
More questions, like what's the limit between some connected workstations and the cluster?

1918
04:11:15,700 --> 04:11:17,980
Like this question here.

1919
04:11:17,980 --> 04:11:27,180
Yeah, like usually the cluster is like a shorthand for the high performance computing cluster

1920
04:11:27,180 --> 04:11:32,620
or something like that, like what people use, where the high performance computing, that's

1921
04:11:32,620 --> 04:11:35,620
also like this kind of like, okay, what does this even mean?

1922
04:11:35,620 --> 04:11:43,660
kind of like a word salad. But the cluster, the idea behind the cluster is that it's usually

1923
04:11:43,660 --> 04:11:50,460
like multi-user system. Like it's a multi-user system where there's usually some queue manager

1924
04:11:50,460 --> 04:11:58,420
that manages the thing. So you can create a cluster at a workstation. So there's a thing

1925
04:11:58,420 --> 04:12:10,500
called, well, I'm blanking out. What's that? It's the Condor. It's the Condor that can

1926
04:12:11,300 --> 04:12:19,460
create a cluster out of workstations basically. But usually the cluster also implies these kinds

1927
04:12:19,460 --> 04:12:25,300
of features that you can do. So you have a queue system, you have multi-user setup, you have a

1928
04:12:25,300 --> 04:12:33,220
shared file system usually. It's basically like you know the story about the elephant and blind

1929
04:12:33,860 --> 04:12:39,780
men trying out the elephant and one thinks it's a broom and one thinks it's a tree and that sort

1930
04:12:39,780 --> 04:12:46,420
of stuff. It's the same kind of thing that cluster is a combination of all of these different

1931
04:12:46,980 --> 04:12:53,300
features. It's compute nodes, it's the shared file system, it's the queue system,

1932
04:12:53,300 --> 04:13:00,940
system, it's the software stack. It's all the cluster. It means that it's one system

1933
04:13:00,940 --> 04:13:07,660
designed to utilize all of these features in order to make it possible to run certain

1934
04:13:07,660 --> 04:13:17,500
kinds of programs which require these features. Especially in Lumi's case, what is a supercomputer

1935
04:13:17,500 --> 04:13:25,180
and a cluster like supercomputer usually means that it's big first off and there's usually

1936
04:13:27,180 --> 04:13:33,580
like a certain kind of architecture throughout the computer so you can run like these massive

1937
04:13:33,580 --> 04:13:40,380
jobs on it like very big jobs and that requires all of the infrastructure what the cluster has

1938
04:13:40,380 --> 04:13:47,020
but basically Lumi and our cluster is basically similar kind of a system the scale is just

1939
04:13:47,020 --> 04:13:52,940
different and what's in there, like what software is there and that sort of stuff is different.

1940
04:13:52,940 --> 04:13:59,820
But both use, for example, same kind of file system, both use same kind of queuing system

1941
04:13:59,820 --> 04:14:07,580
and both use LMod. So basically, we'll hear tomorrow more about how do you get from laptops

1942
04:14:07,580 --> 04:14:14,540
to Lumi basically, like how can you scale up. And if you know how to run stuff in your local cluster,

1943
04:14:14,540 --> 04:14:19,500
it's quite easy to jump or easier to jump to these supercomputers as well.

1944
04:14:20,220 --> 04:14:27,500
Yeah. And would you say that, well, there is no real strict definition? I mean, there's all

1945
04:14:27,500 --> 04:14:33,500
different types of things and different people may call them clusters or not and so on.

1946
04:14:35,100 --> 04:14:41,420
Like, I just think that there's so much technical stuff that is like, like, and everybody's like,

1947
04:14:41,420 --> 04:14:50,380
I don't know. There's so much technical jargon going in the field, but nobody can decide on

1948
04:14:50,380 --> 04:14:57,020
what's what. You can call them whatever you want as long as they do what you want.

1949
04:15:02,220 --> 04:15:07,100
I would think more in the line of, okay, what can I do with that? Instead of, okay,

1950
04:15:07,100 --> 04:15:14,140
what should I call it? Can I run my code on Lumi? Can I run my code on my local computer?

1951
04:15:14,140 --> 04:15:21,260
Can I run it? It doesn't really matter what the system is called as long as it produces

1952
04:15:21,260 --> 04:15:24,300
just the results that I want.

1953
04:15:24,300 --> 04:15:24,800
Yeah.

1954
04:15:35,860 --> 04:15:36,420
Yeah.

1955
04:15:36,420 --> 04:15:38,820
OK, so if you notice there's feedback here,

1956
04:15:38,820 --> 04:15:41,740
please fill out the poll.

1957
04:15:41,740 --> 04:15:47,180
I see there's a lot more people watching than are answering.

1958
04:15:47,180 --> 04:15:50,100
We really need these answers to improve things.

1959
04:15:57,100 --> 04:15:59,900
Yeah, do give us as much feedback as you can,

1960
04:15:59,900 --> 04:16:03,340
because we are just wondering here,

1961
04:16:03,340 --> 04:16:06,780
are we doing stuff correctly, or should we

1962
04:16:06,780 --> 04:16:10,700
modify it for the next year, and what should we do?

1963
04:16:10,700 --> 04:16:12,100
So don't leave us hanging.

1964
04:16:12,100 --> 04:16:13,260
Yeah.

1965
04:16:13,260 --> 04:16:20,220
So for tomorrow, in case anyone's leaving already, so we'll go over we'll go through the more advanced

1966
04:16:20,220 --> 04:16:26,060
uses, which is mainly many different ways of running things in parallel. And this is really

1967
04:16:26,060 --> 04:16:32,060
the real power, like what you've done so far. Well, you could do this on most of this on your

1968
04:16:32,060 --> 04:16:39,820
own computer and survive. But tomorrow, yeah, we'll see how we can run tens or hundreds of

1969
04:16:39,820 --> 04:16:47,420
things at once with only really small changes from what we're doing now. Make sure you understand

1970
04:16:47,420 --> 04:16:51,980
the batch job and monitoring parts of the day because that's what we're using.

1971
04:16:55,740 --> 04:17:01,900
So yeah like today we have been like what the name of the job was serial jobs interactive and

1972
04:17:01,900 --> 04:17:08,060
serial so they are like very one way but tomorrow we'll talk about like okay what if we add a

1973
04:17:08,060 --> 04:17:15,180
for loop basically here or like what if we do a lot of stuff at the same time and yeah hopefully

1974
04:17:15,180 --> 04:17:21,740
we can get that through in the best possible way yeah

1975
04:17:27,100 --> 04:17:32,700
okay if there's no more questions up here should we start wrapping up

1976
04:17:32,700 --> 04:17:40,540
So there is some feedback that it was a bit fast and there wasn't much time for

1977
04:17:40,540 --> 04:17:47,340
exercises. We know, unfortunately, but luckily you can continue exploring on

1978
04:17:47,340 --> 04:17:55,580
your own afterwards. There's no way we could cover it all in a few days or in a

1979
04:17:55,580 --> 04:18:02,580
few hours. So our hope it was to give you the inspiration and big picture and then

1980
04:18:02,580 --> 04:18:04,620
And you can go and follow up.

1981
04:18:07,620 --> 04:18:09,420
So is there any other preparation or things

1982
04:18:09,420 --> 04:18:11,420
people should do for tomorrow?

1983
04:18:19,220 --> 04:18:19,940
Not really.

1984
04:18:19,940 --> 04:18:20,460
I don't know.

1985
04:18:20,460 --> 04:18:21,140
I guess that's it.

1986
04:18:21,140 --> 04:18:21,640
Yeah.

1987
04:18:21,640 --> 04:18:22,140
OK.

1988
04:18:24,660 --> 04:18:27,140
Like, it's pretty much like tomorrow

1989
04:18:27,140 --> 04:18:31,220
is pretty much the same, but on a bigger scale.

1990
04:18:31,220 --> 04:18:35,020
But just like whatever we have talked about today,

1991
04:18:35,020 --> 04:18:37,580
about Slurm and parameters and whatever,

1992
04:18:37,580 --> 04:18:39,220
just keep in mind that, OK, you'll

1993
04:18:39,220 --> 04:18:40,820
be needing those tomorrow.

1994
04:18:40,820 --> 04:18:41,320
Yeah.

1995
04:18:43,660 --> 04:18:44,160
OK.

1996
04:18:47,940 --> 04:18:49,260
Yeah.

1997
04:18:49,260 --> 04:18:51,820
For this comment here about a demo of these,

1998
04:18:51,820 --> 04:18:57,180
I can give some, I'll put some links in here.

1999
04:18:57,180 --> 04:19:01,740
But yeah, okay, so see you tomorrow at the usual time.

2000
04:19:04,300 --> 04:19:10,380
Yeah, okay, thanks a lot. Thanks a lot. Bye. Bye.

2001
04:19:27,180 --> 04:19:29,240
you

2002
04:19:57,180 --> 04:19:59,240
you

2003
04:20:27,180 --> 04:20:29,240
you

2004
04:20:57,180 --> 04:20:59,240
you

